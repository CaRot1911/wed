Misc
====

- wed does not currently support having a schema that allows multiple
  choices at the root. Fix this. (e.g. TEI vs teiCorpus).

- util.stackTrace should be updated to take advantage of console.trace.

Testing
=======

The testing system is rather complicated. Things that would make life
easier:

1. Reduce the number of methods by which tests must be run from 3 to 2
   or 1.

2. Add support for continuous integration. Either by finding a way to
   run all the tests on Travis or having support for some sort of
   Jenkins setup.

Wed Itself
==========

Store the Caret as a (Path, Offset) Pair
----------------------------------------

Up to now, wed has maintained its carets as a (Node, offset)
pair. This has worked fairly well but the changes that have been made
to support attribute editing have complicated things. In particular
the decorator must save the caret before decorating an element and
refresh it afterwards. This refreshing could be avoided by storing the
caret's node as a path. This could potentially also simplify other
cases.

Caret Paths
-----------

Caret paths currently cannot be used to note a caret position which is
inside a label (but outside an attribute value). This means that when
a transformation is initiated from a label and then undone, the
caret will **NOT** be back in the label.

[This is a problem which has been present in wed since the start but
 has been thrown into focus with the addition of attribute support.]

Input Triggers
--------------

At the moment input triggers are applied whenever the keys that
trigger them are used in any of the child of the selector passed to
the InputTrigger. This may not always be desirable.

Refreshing Errors
-----------------

It might be useful to have a way to refresh validation errors without having to
revalidate. Currently btw-mode has to use restartAt to restart
validation after refreshing an element because error markers may be in
the wrong place.

Listeners
---------

There should be a listener on the gui_tree and a listener on the data
tree. This way event handlers that care only about changes to the data
tree can listen only to that and not have to filter out the gui
stuff. This would require a change to what is given to modes because
right now they only get a gui listener.

Caret Management
----------------

* We should not ever have to read the DOM selection to check its
   status. (That is, we should be able to check the selection by
   looking at _sel_anchor and _sel_focus and not have to query the
   DOM.)

TreeUpdater
-----------

* Currently, TreeUpdater is designed so that the number of primitives
  is minimal. This has for effect that setTextNodeValue is used for
  inserting and deleting text. setTextNodeValue uses ``node.data =``
  to set the text, which is slower than using ``deleteData`` or
  ``insertData``. We should explore expanding the primitives so that
  these better performing methods can be used instead of doing
  ``node.data =``.

Saving Protocol
---------------

* The procotol could be redesigned to use HTTP error codes for error
   conditions.

Other
-----

* Investigate web workers to replace timeouts as the main parallelism
  mechanism for running validation in the background.

* Dump XSLT altogether in favor of something faster? Loading saxon to
  process XSLT 2.0 has a non-negligible cost.

Other Bits of the Project
=========================

* Dump the perl solution to generating the local HTML files.

* Generate the local HTML somewhere else than in the root.
