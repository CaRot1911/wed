{"version":3,"file":"serializer.js","sourceRoot":"","sources":["../../../../lib/wed/serializer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * An XML serializer for platforms that produce erratic results.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\n/**\n * Escape characters that cannot be represented literally in XML.\n *\n * @private\n *\n * @param text The text to escape.\n *\n * @param isAttr Whether the text is part of an attribute.\n *\n * @returns The escaped text.\n */\nfunction escape(text: string, isAttr: boolean): string {\n  // Even though the > escape is not *mandatory* in all cases, we still do it\n  // everywhere.\n  let ret = text.replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\");\n\n  if (isAttr) {\n    ret = ret.replace(/\"/g, \"&quot;\");\n  }\n\n  return ret;\n}\n\nfunction serializeDocument(out: string[], node: Document): void {\n  if (node.childNodes.length > 1) {\n    throw new Error(\"cannot serialize a document with more than \" +\n                    \"one child node\");\n  }\n\n  if (node.firstChild === null) {\n    throw new Error(\"cannot serialize an empty document\");\n  }\n\n  _serialize(out, node.firstChild);\n}\n\nfunction serializeElement(out: string[], node: Element): void {\n  out.push(\"<\", node.tagName);\n\n  const attributes = node.attributes;\n  for (let i = 0; i < attributes.length; ++i) {\n    const attr = attributes[i];\n    out.push(\" \", attr.name, \"=\\\"\", escape(attr.value, true), \"\\\"\");\n  }\n  if (node.childNodes.length === 0) {\n    out.push(\"/>\");\n  }\n  else {\n    out.push(\">\");\n    let child = node.firstChild;\n    while (child !== null) {\n      _serialize(out, child);\n      child = child.nextSibling;\n    }\n    out.push(\"</\", node.tagName, \">\");\n  }\n}\n\nfunction serializeText(out: string[], node: Text): void {\n  out.push(escape(node.textContent!, false));\n}\n\nconst typeToHandler: Record<string, Function> = Object.create(null);\ntypeToHandler[Node.DOCUMENT_NODE] = serializeDocument;\ntypeToHandler[Node.DOCUMENT_FRAGMENT_NODE] = serializeDocument;\ntypeToHandler[Node.ELEMENT_NODE] = serializeElement;\ntypeToHandler[Node.TEXT_NODE] = serializeText;\n\nfunction _serialize(out: string[], node: Node): void {\n  const handler = typeToHandler[node.nodeType];\n  if (handler === undefined) {\n    throw new Error(`can't handle node of type: ${node.nodeType}`);\n  }\n  handler(out, node);\n}\n\n/**\n * Serialize an XML tree. This serializer implements only as much as wed\n * currently needs. Notably, this does not currently serialize comments, CDATA,\n * or processing instructions.\n *\n * @param root The root of the document.\n *\n * @returns The serialized document.\n */\nexport function serialize(root: Element | Document | DocumentFragment): string {\n  const out: string[] = [];\n  _serialize(out, root);\n\n  return out.join(\"\");\n}\n\n//  LocalWords:  MPL lt nodeType CDATA\n"]}