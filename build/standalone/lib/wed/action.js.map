{"version":3,"sources":["../../../wed/action.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;IAMH;;;;;OAKG;IACH;QAKE;;;;;;;;;;;;;;;;;;;;;WAqBG;QACH,gBAAqB,MAAc,EAAqB,IAAY,EACrC,eAAmC,EACnC,IAAiB,EAC3B,UAA2B;YADjB,qBAAA,EAAA,SAAiB;YAC3B,2BAAA,EAAA,kBAA2B;YAH3B,WAAM,GAAN,MAAM,CAAQ;YAAqB,SAAI,GAAJ,IAAI,CAAQ;YACrC,oBAAe,GAAf,eAAe,CAAoB;YACnC,SAAI,GAAJ,IAAI,CAAa;YAC3B,eAAU,GAAV,UAAU,CAAiB;YA7BtC,aAAQ,GAAY,IAAI,CAAC;YA8BjC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,kBAAkB;YAClD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACjD,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnE,CAAC;QAQD;;;;;;;WAOG;QACH,6BAAY,GAAZ,UAAa,EAAuB;YAClC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;YACtB,EAAE,CAAC,cAAc,EAAE,CAAC;QACtB,CAAC;QAED;;;;;;;;;WASG;QACH,qCAAoB,GAApB,UAAqB,EAAuB;YAC1C,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACtB,EAAE,CAAC,cAAc,EAAE,CAAC;YACpB,EAAE,CAAC,eAAe,EAAE,CAAC;YACrB,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAED;;;;WAIG;QACH,+BAAc,GAAd;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;QAED;;;;;;WAMG;QACH,kCAAiB,GAAjB,UAAkB,IAAU;YAC1B,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;QAC/B,CAAC;QAED;;;;WAIG;QACH,0CAAyB,GAAzB;YACE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;QAC9B,CAAC;QAED;;;;WAIG;QACH,wBAAO,GAAP;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;QAED;;;;;;;WAOG;QACH,4BAAW,GAAX,UAAY,IAAU;YACpB,IAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAC1C,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YAC5B,EAAE,CAAC,CAAC,IAAI,KAAK,EAAE,IAAI,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC/B,MAAM,CAAI,IAAI,SAAI,IAAM,CAAC;YAC3B,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC;gBAChB,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;YAED,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED;;WAEG;QACH,yBAAQ,GAAR;YACE,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;QAC/B,CAAC;QAED;;WAEG;QACH,2BAAU,GAAV;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;QACH,aAAC;IAAD,CAjJA,AAiJC,IAAA;IAjJqB,wBAAM;;AAmJ5B,gEAAgE","file":"action.js","sourcesContent":["/**\n * Editing actions.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport { Editor } from \"./wed\";\n\nexport type EventWithData<Data> = Event & { data: Data };\n\n/**\n * Actions model \"things the user can do.\" These can be contextual menu items,\n * menu items, buttons, keybindings, etc. The base class is always enabled but\n * derived classes can set their own enabled state depending on whatever\n * conditions they choose.\n */\nexport abstract class Action<Data> {\n  protected _enabled: boolean = true;\n  public readonly boundHandler: (this: Action<Data>, ev: Event) => void;\n  public readonly boundTerminalHandler: (this: Action<Data>,\n                                         ev: Event) => boolean;\n  /**\n   * @param editor The editor to which this action belongs.\n   *\n   * @param desc A simple string description of the action.\n   *\n   * @param abbreviatedDesc An abbreviated description, suitable to put into a\n   * button, for instance.\n   *\n   * @param icon HTML code that represents an icon for this action. This can be\n   * a simple string or something more complex.\n   *\n   * @param needsInput Indicates whether this action needs input from the\n   * user. For instance, an action which brings up a modal dialog to ask\n   * something of the user must have this parameter set to ``true``. It is\n   * important to record whether an action needs input because, to take one\n   * example, the ``autoinsert`` logic will try to insert automatically any\n   * element it can. However, doing this for elements that need user input will\n   * just confuse the user (or could cause a crash). Therefore, it is important\n   * that the insertion operations for such elements be marked with\n   * ``needsInput`` set to ``true`` so that the ``autoinsert`` logic backs off\n   * from trying to insert these elements.\n   */\n  constructor(readonly editor: Editor, protected readonly desc: string,\n              protected readonly abbreviatedDesc: string | undefined,\n              protected readonly icon: string = \"\",\n              readonly needsInput: boolean = false) {\n    this.needsInput = !!needsInput; // normalize value\n    this.boundHandler = this.eventHandler.bind(this);\n    this.boundTerminalHandler = this.terminalEventHandler.bind(this);\n  }\n\n  /**\n   * @param data Arbitrary data. What data must be passed is\n   * determined by the action.\n   */\n  abstract execute(data: Data): void;\n\n  /**\n   * An event handler. By default just calls [[execute]]. You probably want to\n   * use [[boundHandler]] rather than rebind this method. This handler always\n   * returns ``undefined`` and calls ``preventDefault()`` on the event passed to\n   * it.\n   *\n   * @param ev The DOM event.\n   */\n  eventHandler(ev: EventWithData<Data>): void {\n    this.execute(ev.data);\n    ev.preventDefault();\n  }\n\n  /**\n   * An event handler. By default just calls [[eventHandler]]. You probably want\n   * to use [[boundTerminalHandler]] rather than rebind this method.  This\n   * handler always returns false and calls ``preventDefault()`` and\n   * ``stopPropagation`` on the event passed to it.\n   *\n   * @param ev The DOM event.\n   *\n   * @returns False.\n   */\n  terminalEventHandler(ev: EventWithData<Data>): boolean {\n    this.eventHandler(ev);\n    ev.preventDefault();\n    ev.stopPropagation();\n    return false;\n  }\n\n  /**\n   * Gets a description for this action.\n   *\n   * @returns A description for the action.\n   */\n  getDescription(): string {\n    return this.desc;\n  }\n\n  /**\n   * Gets a description for this action, contextualized by the data passed.\n   *\n   * @param data The same data that would be passed to [[execute]].\n   *\n   * @returns The description.\n   */\n  getDescriptionFor(data: Data): string {\n    return this.getDescription();\n  }\n\n  /**\n   * Gets the abbreviated description for this action.\n   *\n   * @returns The abbreviated description.\n   */\n  getAbbreviatedDescription(): string | undefined {\n    return this.abbreviatedDesc;\n  }\n\n  /**\n   * Gets the icon.\n   *\n   * @returns The icon. This is an HTML string.\n   */\n  getIcon(): string {\n    return this.icon;\n  }\n\n  /**\n   * This method returns the icon together with the description for the\n   * data passed as parameter.\n   *\n   * @param data The same data that would be passed to [[execute]].\n   *\n   * @returns The icon and the description, combined for presentation.\n   */\n  getLabelFor(data: Data): string {\n    const desc = this.getDescriptionFor(data);\n    const icon = this.getIcon();\n    if (icon !== \"\" && desc !== \"\") {\n      return `${icon} ${desc}`;\n    }\n\n    if (icon !== \"\") {\n      return icon;\n    }\n\n    return desc;\n  }\n\n  /**\n   * Converts this action to a string. By default calls [[getDescription]].\n   */\n  toString(): string {\n    return this.getDescription();\n  }\n\n  /**\n   * Returns whether or not the action is currently enabled.\n   */\n  getEnabled(): boolean {\n    return this._enabled;\n  }\n}\n\n//  LocalWords:  autoinsert Dubeau MPL Mangalam html keybindings\n"]}