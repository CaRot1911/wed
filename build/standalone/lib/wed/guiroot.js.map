{"version":3,"file":"guiroot.js","sourceRoot":"","sources":["../../../../lib/wed/guiroot.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Model for a GUI root.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport { DLocRoot } from \"./dloc\";\nimport { isElement, isText } from \"./domtypeguards\";\nimport { closestByClass, indexOf, siblingByClass } from \"./domutil\";\nimport { fixPrototype } from \"./util\";\n\n/**\n * Raised if an attribute could not be found when converting a path to a node.\n */\nexport class AttributeNotFound extends Error {\n  constructor(message: string) {\n    super(message);\n    fixPrototype(this, AttributeNotFound);\n  }\n}\n\n/**\n * Count the number of relevant nodes in the ``_phantom_wrap``.\n *\n * @param top The top _phantom_wrap to consider.\n */\nfunction countInPhantomWrap(top: Element): number {\n  if (!isElement(top) || !top.classList.contains(\"_phantom_wrap\")) {\n    throw new Error(\"the node should be a _phantom_wrap element\");\n  }\n\n  let count = 0;\n  let child = top.firstChild;\n  while (child !== null) {\n    if (isElement(child)) {\n      if (child.classList.contains(\"_phantom_wrap\")) {\n        count += countInPhantomWrap(child);\n      }\n      else if (child.classList.contains(\"_real\")) {\n        count += 1;\n      }\n      else if (child.classList.contains(\"_phantom\")) {\n        // Phantoms don't count.\n      }\n      else {\n        throw new Error(\"unexpected element in _phantom_wrap\");\n      }\n    }\n    else if (child.nodeType === Node.TEXT_NODE) {\n      // Text nodes also do not count.\n    }\n    else {\n      throw new Error(\"unexpected node in _phantom_wrap\");\n    }\n    child = child.nextSibling;\n  }\n\n  return count;\n}\n\ntype FindResult = { found: Node | null; count: number };\n\nfunction findInPhantomWrap(top: Element, index: number): FindResult {\n  if (!isElement(top) || !top.classList.contains(\"_phantom_wrap\")) {\n    throw new Error(\"the node should be a _phantom_wrap element\");\n  }\n\n  const originalIndex = index;\n  let found: Node | null = null;\n  let child = top.firstChild;\n  while (found === null && child !== null) {\n    if (isElement(child)) {\n      if (child.classList.contains(\"_phantom_wrap\")) {\n        const result = findInPhantomWrap(child, index);\n        if (result.found !== null) {\n          found = result.found;\n        }\n        index -= result.count;\n      }\n      else if (child.classList.contains(\"_real\")) {\n        index -= 1;\n        if (index < 0) {\n          found = child;\n        }\n      }\n      else if (child.classList.contains(\"_phantom\")) {\n        // Phantoms don't count.\n      }\n      else {\n        throw new Error(\"unexpected element in _phantom_wrap\");\n      }\n    }\n    else if (child.nodeType === Node.TEXT_NODE) {\n      // Text nodes do not count.\n    }\n    else {\n      throw new Error(\"unexpected node in _phantom_wrap\");\n    }\n    child = child.nextSibling;\n  }\n\n  return {\n    found: found,\n    count: originalIndex - index,\n  };\n}\n\n/**\n * This is a [[DLocRoot]] class customized for use to mark the root of the GUI\n * tree.\n */\nexport class GUIRoot extends DLocRoot {\n\n  /**\n   * Converts a node to a path suitable to be used by the\n   * [[\"wed/dloc\".DLocRoot.pathToNode]] method so long as the root used is the\n   * one for the data tree corresponding to the GUI tree to which this object\n   * belongs.\n   *\n   * @param node The node for which to construct a path.\n   *\n   * @returns The path.\n   */\n  nodeToPath(node: Node): string {\n    const root = this.node;\n\n    if (closestByClass(node, \"_placeholder\", root) !== null) {\n      throw new Error(\n        \"cannot provide path to node because it is a placeholder node\");\n    }\n\n    if (root === node) {\n      return \"\";\n    }\n\n    if (!root.contains(node)) {\n      throw new Error(\"node is not a descendant of root\");\n    }\n\n    const ret = [];\n    while (node !== root) {\n      let parent;\n\n      if (isElement(node) &&\n          !node.matches(\"._real, ._phantom_wrap, ._attribute_value\")) {\n        throw new Error(\"only nodes of class ._real, ._phantom_wrap, and \" +\n                        \"._attribute_value are supported\");\n      }\n\n      const attrVal = closestByClass(node, \"_attribute_value\", root);\n      if (attrVal !== null) {\n        const child = siblingByClass(attrVal, \"_attribute_name\");\n        if (child === null) {\n          throw new Error(\"no attribute name found\");\n        }\n        ret.unshift(`@${child.textContent}`);\n        parent = closestByClass(attrVal, \"_real\", root);\n        if (parent === null) {\n          throw new Error(\"attribute is detached from real element\");\n        }\n      }\n      else {\n        parent = node.parentNode;\n        if (parent === null) {\n          throw new Error(\"detached node\");\n        }\n        let offset = 0;\n        const location = indexOf(parent.childNodes, node);\n        for (let i = 0; i < location; ++i) {\n          const child = parent.childNodes[i];\n          if (isText(child) ||\n              (isElement(child) && child.classList.contains(\"_real\"))) {\n            offset++;\n          }\n          else if (isElement(child) &&\n                   child.classList.contains(\"_phantom_wrap\")) {\n            offset += countInPhantomWrap(child);\n          }\n        }\n\n        // Parent could be a document if it is not an element.\n        if (!isElement(parent) || !parent.classList.contains(\"_phantom_wrap\")) {\n          ret.unshift(String(offset));\n        }\n      }\n      node = parent;\n    }\n\n    return ret.join(\"/\");\n  }\n\n  /**\n   * This function recovers a DOM node on the basis of a path previously created\n   * by [[\"wed/dloc\".DLocRoot.nodeToPath]] provided that the root from which the\n   * path was obtained is on the data tree which corresponds to the GUI tree\n   * that this root was created for.\n   *\n   * @param path The path to interpret.\n   *\n   * @returns The node corresponding to the path, or ``null`` if no such node\n   * exists.\n   *\n   * @throws {Error} If given a malformed ``path``.\n   */\n  pathToNode(path: string): Node | null {\n    const root = this.node;\n\n    if (path === \"\") {\n      return root;\n    }\n\n    const parts = path.split(/\\//);\n    let parent: Node | null = root;\n\n    let attribute;\n    // Set aside the last part if it is an attribute.\n    if (parts[parts.length - 1][0] === \"@\") {\n      attribute = parts.pop();\n    }\n\n    let found: Node | null = null;\n    for (const part of parts) {\n      const match = /^(\\d+)$/.exec(part);\n      if (match !== null) {\n        found = null;\n        let index = parseInt(match[1]);\n        for (let i = 0; found === null && (i < parent.childNodes.length); i++) {\n          const node: Node = parent.childNodes[i];\n          if ((isText(node) ||\n               (isElement(node) && node.classList.contains(\"_real\"))) &&\n              --index < 0) {\n            found = node;\n          }\n          else if (isElement(node) &&\n                   node.classList.contains(\"_phantom_wrap\")) {\n            const result = findInPhantomWrap(node, index);\n            if (result.found !== null) {\n              found = result.found;\n            }\n            index -= result.count;\n          }\n        }\n\n        if (found === null) {\n          return null;\n        }\n\n        parent = found;\n      }\n      else {\n        throw new Error(\"malformed path expression\");\n      }\n    }\n\n    if (attribute !== undefined) {\n      const name = attribute.slice(1);\n      if (!isElement(parent)) {\n        throw new Error(\n          \"looking for attribute on something which is not an element\");\n      }\n      const attrs = parent.getElementsByClassName(\"_attribute_name\");\n      found = null;\n      for (let aix = 0; aix < attrs.length; ++aix) {\n        const attr = attrs[aix];\n        if (attr.textContent === name) {\n          found = attr;\n          break;\n        }\n      }\n      if (found === null) {\n        throw new AttributeNotFound(\n          `could not find attribute with name: ${name}`);\n      }\n      parent = siblingByClass(found, \"_attribute_value\");\n    }\n\n    return parent;\n  }\n}\n\n//  LocalWords:  MPL\n"]}