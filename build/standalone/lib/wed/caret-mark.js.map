{"version":3,"sources":["../../../wed/caret-mark.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;IAUH;;;OAGG;IACH;QAsBE;;;;;;;;;;;;WAYG;QACH,mBAA6B,OAAqB,EACtC,GAAa,EACI,KAAY,EACZ,UAAuB,EACvB,QAAkB;YAJlB,YAAO,GAAP,OAAO,CAAc;YAErB,UAAK,GAAL,KAAK,CAAO;YACZ,eAAU,GAAV,UAAU,CAAa;YACvB,aAAQ,GAAR,QAAQ,CAAU;YAzBvC,cAAS,GAAW,CAAC,CAAC;YACtB,mBAAc,GAAY,KAAK,CAAC;YAyBtC,IAAM,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC/C,EAAE,CAAC,SAAS,GAAG,YAAY,CAAC;YAC5B,EAAE,CAAC,YAAY,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;YAC5C,EAAE,CAAC,WAAW,GAAG,GAAG,CAAC;YAErB,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YACrD,KAAK,CAAC,WAAW,GAAG,QAAQ,CAAC;YAC7B,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;YAC5B,KAAK,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;YAC1B,KAAK,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC;YAC7B,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;YAEvB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9C,CAAC;QAED;;;;WAIG;QACH,2BAAO,GAAP;YACE,IAAI,CAAC,SAAS,EAAE,CAAC;QACnB,CAAC;QAED;;;;;;;WAOG;QACH,0BAAM,GAAN;YACE,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;gBACvB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;YAC9C,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBACxB,IAAI,CAAC,OAAO,EAAE,CAAC;gBACf,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;YAC9B,CAAC;QACH,CAAC;QAED;;;;WAIG;QACH,2BAAO,GAAP;YACE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;gBAC3B,MAAM,CAAC;YACT,CAAC;YAED,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;YACjC,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC;YACT,CAAC;YAED,IAAM,QAAQ,GAAG,qBAAU,CAAC,KAAK,CAAC,CAAC;YACnC,IAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EAAE,CAAC;YACzD,IAAM,QAAQ,GAAG;gBACf,GAAG,EAAE,QAAQ,CAAC,GAAG,GAAG,UAAU,CAAC,GAAG;gBAClC,IAAI,EAAE,QAAQ,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI;aACtC,CAAC;YAEF,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;YACxB,IAAM,UAAU,GAAG,yBAAS,CAAC,IAAI,CAAC,GAAG,IAAI,GAAI,IAAI,CAAC,UAAsB,CAAC;YACzE,IAAM,MAAM,GAAG,gBAAgB,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC;YAEvD,IAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;YACnB,IAAM,MAAM,GAAM,QAAQ,CAAC,GAAG,OAAI,CAAC;YACnC,IAAM,OAAO,GAAM,QAAQ,CAAC,IAAI,OAAI,CAAC;YACrC,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,MAAM,CAAC;YACtB,EAAE,CAAC,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC;YACxB,EAAE,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;YACzB,EAAE,CAAC,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC;YAC5B,EAAE,CAAC,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC;YAE5B,uEAAuE;YACvE,EAAE,CAAC,CAAC,EAAE,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC7B,CAAC;YAED,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;YACnC,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACxC,UAAU,CAAC,KAAK,CAAC,GAAG,GAAG,MAAM,CAAC;gBAC9B,UAAU,CAAC,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC;YAClC,CAAC;YACD,IAAI,CAAC,CAAC;gBACJ,UAAU,CAAC,KAAK,CAAC,GAAG,GAAG,EAAE,CAAC;gBAC1B,UAAU,CAAC,KAAK,CAAC,IAAI,GAAG,EAAE,CAAC;YAC7B,CAAC;QACH,CAAC;QAED;;WAEG;QACK,2CAAuB,GAA/B;YACE,uEAAuE;YACvE,4EAA4E;YAC5E,IAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;YAEnB,yDAAyD;YACzD,IAAM,GAAG,GAAG;gBACV,IAAI,EAAE,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,IAAK,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;gBAC9C,GAAG,EAAE,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,GAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;aAC7C,CAAC;YAEF,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtC,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;YACzC,CAAC;YAED,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;YACrC,GAAG,CAAC,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;YAEnC,MAAM,CAAC,GAAG,CAAC;QACb,CAAC;QAKD,sBAAI,4BAAK;YAHT;;eAEG;iBACH;gBACE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,KAAK,IAAI,CAAC;YACrC,CAAC;;;WAAA;QAED;;WAEG;QACH,kCAAc,GAAd;YACE,IAAM,GAAG,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAC3C,IAAM,IAAI,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC1C,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,EACxC,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;QACtD,CAAC;QAED;;;WAGG;QACH,yCAAqB,GAArB;YACE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,qBAAqB,EAAE,CAAC;QACzC,CAAC;QACH,gBAAC;IAAD,CAvLA,AAuLC,IAAA;IAvLY,8BAAS","file":"caret-mark.js","sourcesContent":["/**\n * This module implements the \"caret mark\". The \"caret mark\" is the graphical\n * indicator showing the position of the caret.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport * as $ from \"jquery\";\n\nimport { CaretManager } from \"./caret-manager\";\nimport { isElement } from \"./domtypeguards\";\nimport { Layer } from \"./gui/layer\";\nimport { Scroller } from \"./gui/scroller\";\nimport { boundaryXY } from \"./wed-util\";\n\n/**\n * The \"caret mark\" is the graphical indicator\n * showing the position of the caret.\n */\nexport class CaretMark {\n  /**\n   * This is the element that represents the caret in the DOM tree.\n   */\n  private readonly el: HTMLElement;\n\n  /**\n   * This is an element used to calculate the position of the caret on the\n   * screen. It is temporarily inserted in the the DOM to perform the position\n   * calculations.\n   */\n  private readonly dummy: HTMLElement;\n  private readonly $dummy: JQuery;\n\n  private suspended: number = 0;\n  private pendingRefresh: boolean = false;\n\n  /**\n   * The [[refresh]] method, already bound to this object.\n   */\n  readonly boundRefresh: () => void;\n\n  /**\n   * @param manager The caret manager that holds this marker.\n   *\n   * @param doc The document in which the caret is located.\n   *\n   * @param layer The layer that holds the caret.\n   *\n   * @param inputField The input field element that ought to be moved with the\n   * caret.\n   *\n   * @param scroller The scroller element that contains the editor document for\n   * which we are managing a caret.\n   */\n  constructor(private readonly manager: CaretManager,\n              doc: Document,\n              private readonly layer: Layer,\n              private readonly inputField: HTMLElement,\n              private readonly scroller: Scroller) {\n    const el = this.el = doc.createElement(\"span\");\n    el.className = \"_wed_caret\";\n    el.setAttribute(\"contenteditable\", \"false\");\n    el.textContent = \" \";\n\n    const dummy = this.dummy = doc.createElement(\"span\");\n    dummy.textContent = \"\\u00A0\";\n    dummy.style.height = \"100%\";\n    dummy.style.width = \"1px\";\n    dummy.style.maxWidth = \"1px\";\n    this.$dummy = $(dummy);\n\n    this.boundRefresh = this.refresh.bind(this);\n  }\n\n  /**\n   * Suspend refreshing the caret. Calling this function multiple times\n   * increases the suspension count. [[resume]] must be called an equal number\n   * of times before refreshes are resumed.\n   */\n  suspend(): void {\n    this.suspended++;\n  }\n\n  /**\n   * Resume refreshing the caret. This must be called the same number of times\n   * [[suspend]] was called before refreshing is actually resumed.\n   *\n   * This function checks whether anything called [[refresh]] while refreshing\n   * was suspended, and if so will call [[refresh]] as soon as refreshing is\n   * resumed.\n   */\n  resume(): void {\n    this.suspended--;\n    if (this.suspended < 0) {\n      throw new Error(\"too many calls to resume\");\n    }\n    if (this.pendingRefresh) {\n      this.refresh();\n      this.pendingRefresh = false;\n    }\n  }\n\n  /**\n   * Refreshes the caret position on screen. If refreshing has been suspended,\n   * it records that a refresh was requested but does not actually refresh the\n   * caret.\n   */\n  refresh(): void {\n    if (this.suspended > 0) {\n      this.pendingRefresh = true;\n      return;\n    }\n\n    const caret = this.manager.caret;\n    if (caret == null) {\n      return;\n    }\n\n    const boundary = boundaryXY(caret);\n    const grPosition = this.scroller.getBoundingClientRect();\n    const position = {\n      top: boundary.top - grPosition.top,\n      left: boundary.left - grPosition.left,\n    };\n\n    const node = caret.node;\n    const heightNode = isElement(node) ? node : (node.parentNode as Element);\n    const height = getComputedStyle(heightNode).lineHeight;\n\n    const el = this.el;\n    const topStr = `${position.top}px`;\n    const leftStr = `${position.left}px`;\n    el.style.top = topStr;\n    el.style.left = leftStr;\n    el.style.height = height;\n    el.style.maxHeight = height;\n    el.style.minHeight = height;\n\n    // The fake caret is removed from the DOM when not in use, reinsert it.\n    if (el.parentNode === null) {\n      this.layer.append(this.el);\n    }\n\n    const inputField = this.inputField;\n    if (Number(inputField.style.zIndex) > 0) {\n      inputField.style.top = topStr;\n      inputField.style.left = leftStr;\n    }\n    else {\n      inputField.style.top = \"\";\n      inputField.style.left = \"\";\n    }\n  }\n\n  /**\n   * @returns The coordinates of the caret marker relative to the scroller.\n   */\n  private getPositionFromScroller(): { left: number, top: number } {\n    // This function may be called when the caret layer is invisible. So we\n    // can't rely on offset. Fortunately, the CSS values are what we want, so...\n    const el = this.el;\n\n    // Given our usage scenario, left and top cannot be null.\n    const pos = {\n      left: Number(el.style.left!.replace(\"px\", \"\")),\n      top: Number(el.style.top!.replace(\"px\", \"\")),\n    };\n\n    if (isNaN(pos.left) || isNaN(pos.top)) {\n      throw new Error(\"NAN for left or top\");\n    }\n\n    pos.left += this.scroller.scrollLeft;\n    pos.top += this.scroller.scrollTop;\n\n    return pos;\n  }\n\n  /**\n   * @returns True if the caret is in the DOM tree, false otherwise.\n   */\n  get inDOM(): boolean {\n    return this.el.parentNode !== null;\n  }\n\n  /**\n   * Scroll the mark into view.\n   */\n  scrollIntoView(): void {\n    const pos = this.getPositionFromScroller();\n    const rect = this.getBoundingClientRect();\n    this.scroller.scrollIntoView(pos.left, pos.top, pos.left + rect.width,\n                                 pos.top + rect.height);\n  }\n\n  /**\n   * @returns The bounding client rectangle of the DOM element associated with\n   * this marker.\n   */\n  getBoundingClientRect(): ClientRect {\n    return this.el.getBoundingClientRect();\n  }\n}\n"]}