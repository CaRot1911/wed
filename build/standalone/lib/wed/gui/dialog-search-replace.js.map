{"version":3,"file":"dialog-search-replace.js","sourceRoot":"","sources":["../../../../../lib/wed/gui/dialog-search-replace.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Search and replace GUI.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport * as bootbox from \"bootbox\";\nimport $ from \"jquery\";\n\nimport { Editor } from \"../editor\";\nimport { makeDraggable, makeResizable } from \"./interactivity\";\nimport { Scroller } from \"./scroller\";\nimport { Context, Direction, SearchOptions,\n         SearchReplace } from \"./search-replace\";\n\nexport { Direction };\n\nconst dialogTemplate = `\n<form>\n <div class='form-group'>\n  <label>Search for:</label>\n  <input type='text' name='search' class='form-control'>\n </div>\n <div class='form-group'>\n  <label>Replace with:</label>\n  <input type='text' name='replace' class='form-control'>\n </div>\n <div class='radio'>\n  <span>Direction:</span>\n  <div>\n   <label class='radio-inline'>\n    <input type='radio' name='direction' value='forward'> Forward\n   </label>\n  </div>\n  <div>\n   <label class='radio-inline'>\n    <input type='radio' name='direction' value='backwards'> Backwards\n   </label>\n  <div>\n </div>\n <div class='radio'>\n  <span>Context:</span>\n  <div>\n   <label class='radio-inline'>\n    <input type='radio' name='context' value='text' checked>\n    Only element text\n   </label>\n  </div>\n  <div>\n   <label class='radio-inline'>\n    <input type='radio' name='context' value='attributes'>\n    Only attributes values\n   </label>\n  </div>\n </div>\n</form>`;\n\n/**\n * Brings up a search and replace dialog box to allow the user to search through\n * a document. See the section on \"Dialog Search\" in the editor's embedded help\n * for details of how it works for users.\n */\nexport class DialogSearchReplace {\n  private readonly search: SearchReplace;\n  private readonly dialog: JQuery;\n  private readonly searchField: HTMLInputElement;\n  private readonly replaceField: HTMLInputElement;\n  private readonly forwardRadioButton: HTMLInputElement;\n  private readonly backwardRadioButton: HTMLInputElement;\n  private readonly textRadioButton: HTMLInputElement;\n  private readonly attributeRadioButton: HTMLInputElement;\n  private previousSearchValue: string | undefined;\n  private readonly replaceButton: HTMLButtonElement;\n  private readonly replaceAll: HTMLButtonElement;\n\n  /**\n   * @param editor The editor for which we are searching.\n   *\n   * @param scroller The scroller holding the document being searched.\n   *\n   * @param direction The direction of the search.\n   */\n  constructor(editor: Editor, scroller: Scroller, direction: Direction) {\n    this.search = new SearchReplace(editor, scroller);\n    const body = $(dialogTemplate)[0] as HTMLFormElement;\n    const dialog = this.dialog = bootbox.dialog({\n      title: \"Search/Replace\",\n      message: body,\n      onEscape: true,\n      backdrop: false,\n      size: \"small\",\n      buttons: {\n        find: {\n          label: \"Find\",\n          className: \"btn-primary\",\n          callback: this.onFind.bind(this),\n        },\n        replaceFind: {\n          label: \"Replace and Find\",\n          className: \"btn-default replace-and-find\",\n          callback: this.onReplaceAndFind.bind(this),\n        },\n        replaceAll: {\n          label: \"Replace All\",\n          className: \"btn-default replace-all\",\n          callback: this.onReplaceAll.bind(this),\n        },\n        close: {\n          label: \"Close\",\n        },\n      },\n    });\n    makeResizable(dialog);\n    makeDraggable(dialog);\n    const directionItems = body.elements\n      .namedItem(\"direction\") as HTMLCollectionOf<HTMLInputElement>;\n    this.forwardRadioButton = directionItems[0];\n    this.backwardRadioButton = directionItems[1];\n\n    const contextItems = body.elements\n      .namedItem(\"context\") as HTMLCollectionOf<HTMLInputElement>;\n    this.textRadioButton = contextItems[0];\n    this.attributeRadioButton = contextItems[1];\n\n    let toCheck: HTMLInputElement;\n    switch (direction) {\n    case Direction.FORWARD:\n      toCheck = this.forwardRadioButton;\n      break;\n    case Direction.BACKWARDS:\n      toCheck = this.backwardRadioButton;\n      break;\n    default:\n      const d: never = direction;\n      throw new Error(`unknown direction: ${d}`);\n    }\n    toCheck.checked = true;\n\n    dialog.on(\"hidden.bs.modal\", () => {\n      this.search.clearHighlight();\n      // Return the focus to the editor.\n      editor.caretManager.focusInputField();\n    });\n\n    const searchField = this.searchField =\n      body.elements.namedItem(\"search\") as HTMLInputElement;\n    const $searchField = $(searchField);\n    $searchField.on(\"input\", this.onSearchInput.bind(this));\n\n    const replaceField = this.replaceField =\n      body.elements.namedItem(\"replace\") as HTMLInputElement;\n    const $replaceField = $(replaceField);\n    $replaceField.on(\"input\", this.onReplaceInput.bind(this));\n\n    this.replaceButton =\n      dialog[0].querySelector(\".replace-and-find\") as HTMLButtonElement;\n    this.replaceAll =\n      dialog[0].querySelector(\".replace-all\") as HTMLButtonElement;\n    this.updateButtons();\n  }\n\n  /**\n   * @returns The search option to pass to the search engine, given the user\n   * choices.\n   */\n  private getSearchOptions(): SearchOptions {\n    let direction: Direction;\n    if (this.forwardRadioButton.checked) {\n      direction = Direction.FORWARD;\n    }\n    else if (this.backwardRadioButton.checked) {\n      direction = Direction.BACKWARDS;\n    }\n    else {\n      throw new Error(\"cannot determine direction\");\n    }\n\n    let context: Context;\n    if (this.textRadioButton.checked) {\n      context = Context.TEXT;\n    }\n    else if (this.attributeRadioButton.checked) {\n      context = Context.ATTRIBUTE_VALUES;\n    }\n    else {\n      throw new Error(\"cannot determine context\");\n    }\n\n    return {\n      direction,\n      context,\n    };\n  }\n\n  /**\n   * Processes clicks on the \"Find\" button: searches the document and updates\n   * the buttons.\n   */\n  private onFind(): boolean {\n    this.next();\n    this.updateButtons();\n    return false;\n  }\n\n  /**\n   * Updates the disabled status of the buttons depending on how the input\n   * elements are set.\n   */\n  private updateButtons(): void {\n    const fieldFilled = this.replaceField.value !== \"\";\n    this.replaceButton.disabled = !(fieldFilled && this.search.canReplace);\n    this.replaceAll.disabled = !fieldFilled;\n  }\n\n  /**\n   * Processes clicks on the \"Replace and Find\" button: replaces the current hit\n   * and find the next one.\n   */\n  private onReplaceAndFind(): boolean {\n    this.replace();\n    this.onFind();\n    return false;\n  }\n\n  /**\n   * Processes clicks on the \"Replace All\" button: replaces all replaceable\n   * hits.\n   */\n  private onReplaceAll(): boolean {\n    if (this.search.current === undefined) {\n      this.onFind();\n    }\n\n    while (this.search.current !== null) {\n      if (this.search.canReplace) {\n        this.replace();\n      }\n      this.next();\n    }\n\n    this.updateButtons();\n    return false;\n  }\n\n  /**\n   * Replaces the current hit.\n   */\n  private replace(): void {\n    this.search.replace(this.replaceField.value);\n  }\n\n  /**\n   * Moves to the next hit in the direction specified by the user.\n   */\n  private next(): void {\n    this.search.next(this.getSearchOptions());\n  }\n\n  /**\n   * Processes an ``input`` event on the search field. May change the currently\n   * highlighted hit.\n   */\n  private onSearchInput(): void {\n    const value = this.searchField.value;\n    if (value !== this.previousSearchValue) {\n      this.previousSearchValue = value;\n\n      this.search.updatePattern(value, this.getSearchOptions());\n      this.updateButtons();\n    }\n  }\n\n  /**\n   * Processes an ``input`` event on the replace field. Updates the buttons.\n   */\n  private onReplaceInput(): void {\n    this.updateButtons();\n  }\n}\n"]}