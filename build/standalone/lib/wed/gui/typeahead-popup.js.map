{"version":3,"file":"typeahead-popup.js","sourceRoot":"","sources":["../../../../../lib/wed/gui/typeahead-popup.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Support for a typeahead field that pops up in the editing pane.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport \"bootstrap\";\nimport $ from \"jquery\";\nimport \"typeahead\";\n\nimport * as domutil from \"../domutil\";\nimport * as keyConstants from \"../key-constants\";\n\nexport interface TypeaheadPopupOptions {\n  /** Corresponds to the ``options`` parameter of Twitter Typeahead. */\n  // tslint:disable-next-line:no-any\n  options: any;\n  /** Corresponds to the ``datasets`` parameter of Twitter Typeahead. */\n  // tslint:disable-next-line:no-any\n  datasets: any[];\n}\n\n/**\n * A typeahead popup GUI element.\n */\nexport class TypeaheadPopup {\n  private readonly taWrapper: HTMLElement;\n  // tslint:disable-next-line:no-any\n  private readonly dismissCallback: (obj?: any) => void;\n  private readonly backdrop: HTMLElement;\n  private readonly $ta: JQuery;\n  private dismissed: boolean = false;\n\n  /**\n   * @param doc The DOM document for which to make this popup.\n   *\n   * @param x Position of popup. The popup may ignore the position if it would\n   * overflow off the screen or not have enough space to reasonably show the\n   * choices for typing ahead.\n   *\n   * @param y Position of popup.\n   *\n   * @param width The desired width of the popup. This value may get overridden.\n   *\n   * @param  placeholder The placeholder text to use.\n   *\n   * @param options The options to pass to the underlying Twitter Typeahead\n   * menu.\n   *\n   * @param dismissCallback Function to call when the popup is dismissed.\n   */\n  // tslint:disable-next-line:max-func-body-length\n  constructor(doc: Document, x: number, y: number, width: number,\n              placeholder: string, options: TypeaheadPopupOptions,\n              // tslint:disable-next-line:no-any\n              dismissCallback: (obj?: any) => void) {\n    const taWrapper = domutil.htmlToElements(\n      \"<div class=\\\"wed-typeahead-popup\\\">\\\n<input class=\\\"typeahead form-control\\\" type=\\\"text\\\">\\\n<span class=\\\"spinner\\\"><i class=\\\"fa fa-spinner fa-spin\\\"></i></span></div>\",\n      doc)[0] as HTMLElement;\n    const ta = taWrapper.firstElementChild as HTMLElement;\n    ta.setAttribute(\"placeholder\", placeholder);\n\n    this.taWrapper = taWrapper;\n    this.dismissCallback = dismissCallback;\n\n    this.backdrop = document.createElement(\"div\");\n    this.backdrop.className = \"wed-typeahead-popup-backdrop\";\n\n    $(this.backdrop).click(() => {\n      this.dismiss();\n      return false;\n    });\n\n    taWrapper.style.width = `${width}px`;\n    taWrapper.style.left = `${x}px`;\n    taWrapper.style.top = `${y}px`;\n\n    const $ta = this.$ta = $(ta);\n\n    let args = [options.options];\n    if (options.datasets != null && options.datasets.length > 0) {\n      args = args.concat(options.datasets);\n    }\n    $ta.typeahead.apply($ta, args);\n\n    $ta.on(\"keydown\", this._keydownHandler.bind(this));\n    $ta.on(\"typeahead:selected\", this._selectedHandler.bind(this));\n\n    const body = doc.body;\n    body.insertBefore(taWrapper, body.firstChild);\n    body.insertBefore(this.backdrop, body.firstChild);\n\n    // Verify if we're going to run off screen. If so, then modify our position\n    // to be inside the screen.\n    const actualWidth = taWrapper.offsetWidth;\n    const winWidth = doc.defaultView.innerWidth;\n\n    // The x value that would put the menu just against the side of the window\n    // is actualWidth - winWidth. If x is less than it, then x is the value we\n    // want, but we don't want less than 0.\n    taWrapper.style.left = `${Math.max(0, Math.min(x, winWidth -\nactualWidth))}px`;\n    taWrapper.style.maxWidth = `${winWidth}px`;\n\n    const winHeight = doc.defaultView.innerHeight;\n    const maxHeight = winHeight - y;\n    taWrapper.style.maxHeight = `${maxHeight}px`;\n\n    const dropdown =\n      taWrapper.getElementsByClassName(\"tt-menu\")[0] as HTMLElement;\n    const $dropdown = $(dropdown);\n\n    // Yep, we forcibly display it here because the next computations depend on\n    // the dropdown being visible.\n    const oldDisplay = dropdown.style.display;\n    dropdown.style.display = \"block\";\n\n    // We arbitrarily want to show at least five lines of information. (Which\n    // may or may not translate to 4 choices. This is not the goal. The goal is\n    // just to show a reasonable amount of information.)\n    const fiveLines = Number(\n      $dropdown.css(\"line-height\").replace(\"px\", \"\")) * 5;\n\n    const dropdownPos = dropdown.getBoundingClientRect();\n    let dropdownMaxHeight = winHeight - dropdownPos.top;\n    if (dropdownMaxHeight < fiveLines) {\n      // Less than 5 lines: we need to move up.\n      y -= fiveLines - dropdownMaxHeight;\n      dropdownMaxHeight = fiveLines;\n      taWrapper.style.top = `${y}px`;\n    }\n\n    dropdown.style.maxHeight = `${dropdownMaxHeight}px`;\n\n    // Restore it. It was probably hidden.\n    dropdown.style.display = oldDisplay;\n\n    // Work around a stupid issue with typeahead. The problem is that\n    // **hovering** over a choice makes it so that the choice is considered to\n    // be the one to be selected when ENTER is pressed. This can lead to\n    // inconsistent behavior from browser to browser. (It certainly messed up\n    // testing.)\n    $dropdown.off(\"mouseenter.tt\", \".tt-suggestion\");\n    $dropdown.off(\"mouseleave.tt\", \".tt-suggestion\");\n\n    // Prevent clicks from propagating up.\n    $dropdown.on(\"click\", false);\n    ta.focus();\n\n    // Typeahead will consider itself \"activated\" once it is focused. On most\n    // platforms the focus above is delivered right away. However, on IE the\n    // focus event is sent to elements asynchronously. Which means that the\n    // typeahead could become \"activated\" much later than the end of this\n    // constructor. For our purposes we want the typeahead to be activated right\n    // away. So we unfortunately break through into private bits of the\n    // typeahead code.\n    const tt = $.data(ta, \"ttTypeahead\");\n    tt.isActivated = true;\n\n    // The default implementation closes the dropdown when the input is\n    // unfocused. This is not a particularly good behavior for\n    // wed. Unfortunately, the only way to rectify it is to break into the\n    // private parts of typeahead.\n    tt.input.off(\"blurred\");\n    tt._onBlurred = function _onBlurred(): void {\n      this.isActivated = false;\n    };\n    tt.input.onSync(\"blurred\", tt._onBlurred, tt);\n  }\n\n  /**\n   * Dismisses the popup. Calls the callback that was passed when the popup was\n   * created, if any.\n   *\n   * @param obj This should be the object selected by the user, if any. This\n   * will be passed to the ``dismissCallback`` that was passed when the popup\n   * was created, if any. If you call this method directly and want a selection\n   * to occur, take care to use an object which is from the data set passed in\n   * the ``options`` parameter that was used when the popup was created. The\n   * value ``undefined`` means no object was selected.\n   */\n  // tslint:disable-next-line:no-any\n  dismiss(obj?: any): void {\n    if (this.dismissed) {\n      return;\n    }\n\n    const taWrapper = this.taWrapper;\n    if (taWrapper !== undefined && taWrapper.parentNode !== null) {\n      taWrapper.parentNode.removeChild(taWrapper);\n    }\n\n    const backdrop = this.backdrop;\n    if (backdrop !== undefined && backdrop.parentNode !== null) {\n      backdrop.parentNode.removeChild(backdrop);\n    }\n\n    if (this.dismissCallback !== undefined) {\n      this.dismissCallback(obj);\n    }\n    this.dismissed = true;\n  }\n\n  /**\n   * Event handler for keydown events on the popup. The default implementation\n   * is to dismiss the popup if escape is pressed.\n   */\n  private _keydownHandler(ev: JQueryEventObject): boolean | undefined {\n    if (keyConstants.ESCAPE.matchesEvent(ev)) {\n      this.dismiss();\n      return false;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Event handler for typeahead:selected events. The default implementation is\n   * to dismiss the popup.\n   */\n  // tslint:disable-next-line:no-any\n  private _selectedHandler(_ev: JQueryEventObject, obj: any): void {\n    this.dismiss(obj);\n  }\n\n  /**\n   * Hide the spinner that was created to indicate that the data is being\n   * loaded.\n   */\n  hideSpinner(): void {\n    (this.taWrapper.getElementsByClassName(\"spinner\")[0] as HTMLElement)\n      .style.display = \"none\";\n  }\n\n  /**\n   * Set the value in the input field of the typeahead. This also updates the\n   * suggestions.\n   *\n   * @param value The new value.\n   */\n  setValue(value: string): void {\n    // tslint:disable-next-line:no-any\n    (this.$ta as any).typeahead(\"val\", value);\n  }\n}\n\n//  LocalWords:  typeahead MPL px keydown actualWidth winWidth tt dropdown\n//  LocalWords:  dropdownMaxHeight mouseenter mouseleave ttTypeahead\n"]}