{"version":3,"file":"toolbar.js","sourceRoot":"","sources":["../../../../../lib/wed/gui/toolbar.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;IAkBH;;;;;;;;;;;OAWG;IACH;QAOE;YACE,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACrD,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,aAAa,CAAC;YACnC,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC9C,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,qBAAqB,CAAC;YAC/C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC/C,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC9B,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACjC,CAAC;QAED;;;;;;WAMG;QACH,2BAAS,GAAT,UAAU,OAAuC,EACvC,OAAwB;YAAxB,wBAAA,EAAA,YAAwB;YAChC,IAAI,CAAC,OAAO,YAAY,eAAM,CAAC,EAAE;gBAC/B,OAAO,GAAG,CAAC,OAAO,CAA0B,CAAC;aAC9C;YAED,IAAM,OAAO,GAAG,OAAO,CAAC,OAAO,KAAK,IAAI,CAAC;YACzC,IAAM,KAAK,GAAG,OAAO,CAAC,KAAK,KAAK,IAAI,CAAC;YACrC,IAAI,OAAO,IAAI,KAAK,EAAE;gBACpB,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;aACnE;YAED,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;YACrB,IAAM,IAAI,GAAG,GAAG,CAAC,aAAa,CAAC,sBAAsB,EAAE,CAAC;YACxD,KAAqB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;gBAAvB,IAAM,MAAM,gBAAA;gBACf,IAAI,KAAK,EAAE;oBACT,IAAM,IAAI,GAAG,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;oBACrD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC;oBAC3C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBACpB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;iBACxB;qBACI;oBACH,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;iBACrB;aACF;YAED,IAAI,KAAK,EAAE;gBACT,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;aACvB;iBACI;gBACH,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACjE;QACH,CAAC;QAED;;;;;WAKG;QACH,gCAAc,GAAd,UAAe,OAAiB;YAC9B,yCAAyC;YACzC,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,EAAE,CAAC;YAC7B,KAAqB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;gBAAvB,IAAM,MAAM,gBAAA;gBACf,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC9B;QACH,CAAC;QACH,cAAC;IAAD,CAAC,AAvED,IAuEC;IAvEY,0BAAO","sourcesContent":["/**\n * A toolbar for editors.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport { Button } from \"./button\";\n\nexport interface AddOptions {\n  /**\n   * If true, push the options at the right end of the toolbar. Note that this\n   * is can only be used when appending buttons. And this is something\n   * independent from the mere fact of appending. When using this option, the\n   * appended button will be visually pushed away from the previous button,\n   * towards the right end of the toolbar.\n   */\n  right?: boolean;\n\n  /** If true, prepend the buttons rather than append them. */\n  prepend?: boolean;\n}\n\n/**\n * A toolbar is a horizontal element which contains a series of buttons from\n * which the user can initiate actions.\n *\n * The toolbar contains buttons for two types of buttons:\n *\n * - Buttons not associated with any specific mode. These are editor-wide\n *   actions that may be set by the application in which the editor instance is\n *   used.\n *\n * - Buttons specific to a mode.\n */\nexport class Toolbar {\n  private readonly divider: Element;\n  private readonly modeSpan: Element;\n\n  /** The top DOM element of the toolbar. */\n  readonly top: Element;\n\n  constructor() {\n    const top = this.top = document.createElement(\"div\");\n    this.top.className = \"wed-toolbar\";\n    this.divider = document.createElement(\"span\");\n    this.divider.className = \"wed-toolbar-divider\";\n    this.modeSpan = document.createElement(\"span\");\n    top.appendChild(this.divider);\n    top.appendChild(this.modeSpan);\n  }\n\n  /**\n   * Add one or more buttons to the toolbar.\n   *\n   * @param buttons A single button or an array of buttons to add.\n   *\n   * @param options Parameters affecting how the addition is made.\n   */\n  addButton(buttons: ReadonlyArray<Button> | Button,\n            options: AddOptions = {}): void {\n    if ((buttons instanceof Button)) {\n      buttons = [buttons] as ReadonlyArray<Button>;\n    }\n\n    const prepend = options.prepend === true;\n    const right = options.right === true;\n    if (prepend && right) {\n      throw new Error(\"cannot use prepend and right at the same time.\");\n    }\n\n    const top = this.top;\n    const frag = top.ownerDocument.createDocumentFragment();\n    for (const button of buttons) {\n      if (right) {\n        const wrap = top.ownerDocument.createElement(\"span\");\n        wrap.className = right ? \"pull-right\" : \"\";\n        button.render(wrap);\n        frag.appendChild(wrap);\n      }\n      else {\n        button.render(frag);\n      }\n    }\n\n    if (right) {\n      top.appendChild(frag);\n    }\n    else {\n      top.insertBefore(frag, prepend ? top.firstChild : this.divider);\n    }\n  }\n\n  /**\n   * Set the mode related buttons. This replaces any buttons previously set by\n   * this method.\n   *\n   * @param buttons The buttons to add to the toolbar.\n   */\n  setModeButtons(buttons: Button[]): void {\n    // tslint:disable-next-line:no-inner-html\n    this.modeSpan.innerHTML = \"\";\n    for (const button of buttons) {\n      button.render(this.modeSpan);\n    }\n  }\n}\n"]}