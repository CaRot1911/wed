{"version":3,"file":"modal.js","sourceRoot":"","sources":["../../../../../lib/wed/gui/modal.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Modal dialog boxes.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport \"bootstrap\";\nimport $ from \"jquery\";\n\nimport { makeDraggable, makeResizable } from \"./interactivity\";\n\nexport interface Options {\n  /**\n   * Whether this modal can be resized.\n   */\n  resizable?: boolean;\n\n  /**\n   * Whether this modal can be dragged .\n   */\n  draggable?: boolean;\n}\n\n/**\n * A modal needs to be created only once per instance of wed. After creation it\n * must be installed into the DOM tree of the page on which it is going to be\n * used. The method [[Modal.getTopLevel]] must be used to get the top level DOM\n * element of the modal which will be inserted into the page. Once inserted, the\n * modal is ready to be used once, twice, or more times. It need not be removed,\n * re-created, etc. The method [[Modal.modal]] just needs to be called each time\n * the modal must be displayed.\n *\n * A typical usage scenario would be:\n *\n * <pre>\n *   // Modal setup.\n *   mymodal = new Modal();\n *   mymodal.setTitle(\"My modal\");\n *   mymodal.setBody(...);\n *   mymodal.addYesNo();\n *   // This is a generic example of how to add the modal to a page.\n *   $(\"body\").append(mymodal.getTopLevel());\n *\n *   ...\n *\n *   // Modal use\n *   mymodal.modal(function () {...});\n *   switch(mymodal.getClickedAsText()) {...}\n *\n *   ...\n *\n *   // A second use of the same modal\n *   mymodal.modal(function () {...});\n *   switch(mymodal.getClickedAsText()) {...}\n * </pre>\n *\n * If the same modal must be displayed on two different pages, then two Modal\n * objects should be created, one per page.\n */\nexport class Modal {\n  private readonly _$dom: JQuery;\n  private readonly _$header: JQuery;\n  private readonly _$body: JQuery;\n  private readonly _$footer: JQuery;\n  private _$clicked: JQuery | undefined;\n\n  constructor(options?: Options) {\n    options = options != null ? options : {};\n\n    // tabindex needed to make keyboard stuff work... grumble...\n    // https://github.com/twitter/bootstrap/issues/4663\n    // tslint:disable-next-line:no-jquery-raw-elements\n    const $dom = this._$dom = $(\"\\\n<div class=\\\"modal\\\" style=\\\"position: absolute\\\" tabindex=\\\"1\\\">\\\n  <div class=\\\"modal-dialog\\\">\\\n    <div class=\\\"modal-content\\\">\\\n      <div class=\\\"modal-header\\\">\\\n        <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" \\\n         aria-hidden=\\\"true\\\">&times;</button>\\\n        <h3 class=\\\"modal-title\\\">Untitled</h3>\\\n      </div>\\\n      <div class=\\\"modal-body\\\">\\\n        <p>No body.</p>\\\n      </div>\\\n      <div class=\\\"modal-footer\\\">\\\n      </div>\\\n    </div>\\\n  </div>\\\n</div>\");\n    this._$header = $dom.find(\".modal-header\");\n    this._$body = $dom.find(\".modal-body\");\n    this._$footer = $dom.find(\".modal-footer\");\n    $dom.on(\"click\", \".btn\", (ev) => {\n      this._$clicked = $(ev.currentTarget);\n      return true;\n    });\n\n    $dom.on(\"shown.bs.modal.modal\", this._handleShown.bind(this));\n\n    if (options.resizable as boolean) {\n      this._$body[0].style.overflow = \"auto\";\n      makeResizable($dom);\n    }\n\n    if (options.draggable as boolean) {\n      makeDraggable($dom);\n    }\n  }\n\n  /**\n   * @returns The top level node of the modal, to be inserted\n   * into a page.\n   */\n  getTopLevel(): JQuery {\n    return this._$dom;\n  }\n\n  /**\n   * Set the title of this modal.\n   */\n  setTitle(title: string | JQuery | Element | Text): void {\n    const $h3 = this._$header.find(\"h3\");\n    $h3.empty();\n    $h3.append(title);\n  }\n\n  /**\n   * Set the body of this modal.\n   */\n  setBody(body: string | JQuery | Element| Text): void {\n    this._$body.empty();\n    this._$body.append(body);\n  }\n\n  /**\n   * Set the footer of this modal.\n   */\n  setFooter(footer: string | JQuery | Element | Text): void {\n    this._$footer.empty();\n    this._$footer.append(footer);\n  }\n\n  /**\n   * @param name The name of the button.\n   *\n   * @param isPrimary True if the button is primary. A modal takes only one\n   * primary button but no check is made by this method to prevent it. The\n   * primary button is the one clicked if the user hits enter.\n   *\n   * @returns The jQuery object for the button.\n   */\n  addButton(name: string, isPrimary: boolean = false): JQuery {\n    const button = this._$dom[0].ownerDocument.createElement(\"a\");\n    button.href = \"#\";\n    button.className = \"btn\";\n    button.setAttribute(\"data-dismiss\", \"modal\");\n    button.textContent = name;\n    button.classList.add(isPrimary ? \"btn-primary\" : \"btn-default\");\n    this._$footer.append(button);\n    return $(button);\n  }\n\n  /**\n   * Adds one Ok and one Cancel button.\n   *\n   * @returns The two buttons added.\n   */\n  addOkCancel(): JQuery[] {\n    return [this.addButton(\"Ok\", true), this.addButton(\"Cancel\")];\n  }\n\n  /**\n   * Adds one Yes and one No button.\n   *\n   * @returns The two buttons added.\n   */\n  addYesNo(): JQuery[] {\n    return [this.addButton(\"Yes\", true), this.addButton(\"No\")];\n  }\n\n  /**\n   * Returns the primary button.\n   *\n   * @returns The primary button.\n   */\n  getPrimary(): JQuery {\n    return this._$footer.find(\".btn-primary\");\n  }\n\n  /**\n   * @param callback A callback to call when the modal is dismissed by the\n   * user. This modal would typically inspect the modal to determine what the\n   * user did, and potentially clean up after itself. The callback is left out\n   * if the modal is merely for informational purposes.\n   */\n  modal(callback?: (ev: JQueryEventObject) => void): void {\n    this._$clicked = undefined;\n    if (callback !== undefined) {\n      this._$dom.one(\"hidden.bs.modal.modal\", callback);\n    }\n    this._$dom.modal();\n  }\n\n  /**\n   * @returns The button that was clicked. Could be undefined if the modal\n   * disappeared without being normally dismissed or if the modal has not been\n   * used yet.\n   */\n  getClicked(): JQuery | undefined {\n    return this._$clicked;\n  }\n\n  /**\n   * @returns The text of the button that was clicked. Could be undefined if the\n   * modal disappeared without being normally dismissed or if the modal has not\n   * been used yet.\n   */\n  getClickedAsText(): string | undefined {\n    if (this._$clicked === undefined) {\n      return undefined;\n    }\n\n    return this._$clicked.text();\n  }\n\n  /**\n   * Handles the ``shown`` event.\n   *\n   * @param {Event} ev The DOM event.\n   */\n  private _handleShown(): void {\n    const win = this._$dom[0].ownerDocument.defaultView;\n    const winHeight = win.innerHeight;\n    const dialog = this._$dom.find(\".modal-dialog\")[0];\n    const rect = dialog.getBoundingClientRect();\n    const computedStyle = window.getComputedStyle(dialog);\n    const diff = -rect.top + (winHeight - rect.height) -\n      parseInt(computedStyle.marginBottom!);\n    const dialogMaxHeight = rect.height + diff;\n    dialog.style.maxHeight = `${dialogMaxHeight}px`;\n    const content = this._$dom.find(\".modal-content\")[0];\n    content.style.maxHeight = `${dialogMaxHeight}px`;\n  }\n}\n\n//  LocalWords:  dialogMaxHeight clientY clientX resizemove dragmove setTimeout\n//  LocalWords:  ignoreBackdropClick getBoundingClientRect resizeend tabindex\n//  LocalWords:  getTopLevel btn param jQuery bs resizestart href jquery px pre\n//  LocalWords:  mymodal setTitle setBody addYesNo rect getClickedAsText Dubeau\n//  LocalWords:  MPL Mangalam DOM Ok\n"]}