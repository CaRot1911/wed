{"version":3,"file":"replacement-menu.js","sourceRoot":"","sources":["../../../../../lib/wed/gui/replacement-menu.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;IAaA;;OAEG;IACH;QAAqC,mCAAW;QAK9C;;;;;;;;;;;;;WAaG;QACH,yBAAY,MAAc,EAAE,QAAkB,EAAE,CAAS,EAAE,CAAS,EACxD,KAAe,EAAE,eAAgC;YAD7D,YAEE,kBAAM,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE;gBACxB,eAAe,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;YACjC,CAAC,EAAE,KAAK,CAAC,SAOV;YANC,KAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;YAC9B,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YAErB,KAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YAEpD,KAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;;QACnB,CAAC;QAED,gCAAM,GAAN;YAAA,iBAgBC;YAfC,IAAM,KAAK,GAAG,EAAE,CAAC;YACjB,IAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;oCACjB,IAAI;gBACb,IAAM,EAAE,GAAG,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;gBACnC,yCAAyC;gBACzC,EAAE,CAAC,SAAS,GAAG,kBAAkB,CAAC;gBAClC,EAAE,CAAC,SAAU,CAAC,WAAW,GAAG,IAAI,CAAC;gBACjC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACf,gBAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE;oBAChB,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;oBACrB,KAAI,CAAC,OAAO,EAAE,CAAC;gBACjB,CAAC,CAAC,CAAC;YACL,CAAC;YAVD,KAAmB,UAAqB,EAArB,KAAA,IAAI,CAAC,gBAAgB,EAArB,cAAqB,EAArB,IAAqB;gBAAnC,IAAM,IAAI,SAAA;wBAAJ,IAAI;aAUd;YAED,iBAAM,MAAM,YAAC,KAAK,CAAC,CAAC;QACtB,CAAC;QAED,iCAAO,GAAP;YACE,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,OAAO;aACR;YACD,iBAAM,OAAO,WAAE,CAAC;QAClB,CAAC;QACH,sBAAC;IAAD,CAAC,AAxDD,CAAqC,0BAAW,GAwD/C;IAxDY,0CAAe;;AA0D5B,4BAA4B","sourcesContent":["/**\n * Menu for replacing values.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport $ from \"jquery\";\n\nimport { Editor } from \"../editor\";\nimport { ContextMenu } from \"./context-menu\";\n\nexport type DismissCallback = (selected: string | undefined) => void;\n\n/**\n * A menu for displaying replacement values.\n */\nexport class ReplacementMenu extends ContextMenu {\n  private readonly replacementItems: string[];\n  private readonly editor: Editor;\n  private selected: string | undefined;\n\n  /**\n   * @param editor The editor for which to create this menu.\n   *\n   * @param document The DOM document for which to make this context menu.\n   *\n   * @param x Position of the menu. The context menu may ignore this position if\n   * the menu would appear off-screen.\n   *\n   * @param y Position of the menu.\n   *\n   * @param items An array of possible replacement values.\n   *\n   * @param dismissCallback Function to call when the menu is dismissed.\n   */\n  constructor(editor: Editor, document: Document, x: number, y: number,\n              items: string[], dismissCallback: DismissCallback) {\n    super(document, x, y, [], () => {\n      dismissCallback(this.selected);\n    }, false);\n    this.replacementItems = items;\n    this.editor = editor;\n\n    this.dropdown.classList.add(\"wed-replacement-menu\");\n\n    this.display([]);\n  }\n\n  render(): void {\n    const items = [];\n    const doc = this.editor.doc;\n    for (const item of this.replacementItems) {\n      const li = doc.createElement(\"li\");\n      // tslint:disable-next-line:no-inner-html\n      li.innerHTML = \"<a href='#'></a>\";\n      li.lastChild!.textContent = item;\n      items.push(li);\n      $(li).click(item, () => {\n        this.selected = item;\n        this.dismiss();\n      });\n    }\n\n    super.render(items);\n  }\n\n  dismiss(): void {\n    if (this.dismissed) {\n      return;\n    }\n    super.dismiss();\n  }\n}\n\n//  LocalWords:  MPL li href\n"]}