{"version":3,"file":"localforage.js","sourceRoot":"","sources":["../../../../../lib/wed/savers/localforage.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Data saving functionality, using localforage. Note that this saver is mainly\n * designed for demonstration purposes.\n *\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport * as localforage from \"localforage\";\n\n// Everything from wed must be loaded from \"wed\".\nimport { Runtime, saver, treeUpdater } from \"wed\";\n\nimport TreeUpdater = treeUpdater.TreeUpdater;\n\n/**\n * Create a localforage store instance. If you have code that needs to\n * access the store that this saver uses. You need to call this\n * function first.\n *\n * @returns A configured localforage instance.\n */\nexport function config(): LocalForage {\n  return localforage.createInstance({\n    name: \"wed\",\n    storeName: \"files\",\n  });\n}\n\n  /**\n   * @typedef Options\n   * @type {Object}\n   * @property {string} name\n   */\n\nexport interface Options extends saver.SaverOptions {\n  /**\n   * The \"name\" of the file to save. This is the key used to save the file in\n   * localforage.\n   */\n  name: string;\n}\n\nexport interface FileRecord {\n  /** The format version of the record. */\n  version: number;\n\n  /** The name of the file. */\n  name: string;\n\n  /** The data in the file. */\n  data: string;\n\n  /** The last date at which the file was uploaded or the string \"never\". */\n  uploaded: Date | string;\n\n  /** The last date at which the file was saved or the string \"never\". */\n  saved: Date | string;\n\n  /** The last date at which the file was downloaded or the string \"never\". */\n  downloaded: Date | string;\n}\n\n/**\n * Utility function used to make file records.\n *\n * @param name The name of the file.\n *\n * @param data The data to save.\n *\n * @returns The record.\n */\nexport function makeFileRecord(name: string, data: string): FileRecord {\n  const ret: FileRecord = Object.create(null);\n  ret.version = 1;\n  ret.name = name;\n  ret.data = data;\n  ret.uploaded = new Date();\n  ret.saved = \"never\";\n  ret.downloaded = \"never\";\n  return ret;\n}\n\n/**\n * Defines a saver that uses localforage to save documents.\n *\n * This saver stores the document as a \"file\" into a localforage instance. The\n * objects are not really files but similar to files. Henceforth, the name\n * \"file\" will be used without quotes to refer to the objects stored.\n */\nexport class Saver extends saver.Saver {\n  private readonly name: string;\n  private readonly store: LocalForage;\n  private readonly initPromise: Promise<void> = Promise.resolve();\n\n  /**\n   * @param runtime The runtime under which this saver is created.\n   *\n   * @param version The version of wed for which this object is created.\n   *\n   * @param dataUpdater The updater that the editor created for its data tree.\n   *\n   * @param dataTree The editor's data tree.\n   *\n   * @param options The options specific to this class.\n   */\n  constructor(runtime: Runtime, version: string, dataUpdater: TreeUpdater,\n              dataTree: Node, options: Options) {\n    super(runtime, version, dataUpdater, dataTree, options);\n\n    this.initialized = true;\n    this.failed = false;\n    this.name = options.name;\n\n    this.store = config();\n\n    this.setAutosaveInterval(5 * 60 * 1000);\n  }\n\n  init(): Promise<void> {\n    // It is initialized from the get-go.\n    return this.initPromise;\n  }\n\n  _save(autosave: boolean): Promise<void> {\n    return Promise.resolve().then(() => {\n      if (!this.initialized) {\n        return;\n      }\n\n      return this._update(this.name, this.getData(), autosave,\n                          this.currentGeneration)\n      // All save errors produced by this saver are handled with this._fail.\n        .catch(() => undefined);\n    });\n  }\n\n  private _update(name: string, data: string, autosave: boolean,\n                  savingGeneration: number): Promise<void> {\n    return this.store.getItem(name).then((rec: FileRecord) => {\n      if (rec.version !== 1) {\n        throw new Error(`unexpected record version number: ${rec.version}`);\n      }\n      rec.data = data;\n      rec.saved = new Date();\n      return this.store.setItem(name, rec).then(() => {\n        this._saveSuccess(autosave, savingGeneration);\n      }).catch(() => {\n        const error = { type: undefined, msg: \"Failed to save!\" };\n        this._fail(error);\n        throw new Error(\"save failed\");\n      });\n      // tslint:disable-next-line:no-any\n    }) as any;\n  }\n\n  _recover(): Promise<boolean> {\n    return this._save(false)\n      .then(() => true)\n      .catch(() => false);\n  }\n}\n\n//  LocalWords:  localforage MPL runtime\n"]}