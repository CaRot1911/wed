{"version":3,"sources":["../../../wed/savers/indexeddb.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;;;;;;;;;;;;;;IAqBH;;;;;;;;;;;;;;;OAeG;IACH;QAA2B,yBAAW;QAKpC;;;;;;;;;;WAUG;QACH,eAAY,OAAgB,EAAE,OAAe,EAAE,WAAwB,EAC3D,QAAc,EAAE,OAAgB;YAD5C,YAEE,kBAAM,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,CAAC,SAO/C;YAtBgB,iBAAW,GAAkB,OAAO,CAAC,OAAO,EAAE,CAAC;YAgB9D,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,KAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;YAEzB,KAAI,CAAC,KAAK,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;YAChC,KAAI,CAAC,mBAAmB,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;QAC1C,CAAC;QAED,oBAAI,GAAJ;YACE,qCAAqC;YACrC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QAC1B,CAAC;QAED,qBAAK,GAAL,UAAM,QAAiB;YAAvB,iBAWC;YAVC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;gBAC5B,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC;oBACtB,MAAM,CAAC;gBACT,CAAC;gBAED,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,KAAI,CAAC,IAAI,EAAE,KAAI,CAAC,OAAO,EAAE,EAAE,QAAQ,EACnC,KAAI,CAAC,iBAAiB,CAAC;qBAExC,KAAK,CAAC,cAAM,OAAA,SAAS,EAAT,CAAS,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACL,CAAC;QAED,uBAAO,GAAP,UAAQ,IAAY,EAAE,IAAY,EAAE,QAAiB,EAC7C,gBAAwB;YADhC,iBAQC;YANC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC;gBACrC,KAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC,KAAK,CAAC;gBACP,KAAI,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,iBAAiB,EAAE,CAAC,CAAC;gBACxD,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;YACjC,CAAC,CAAC,CAAC;QACL,CAAC;QAED,wBAAQ,GAAR;YACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;iBACrB,IAAI,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC;iBAChB,KAAK,CAAC,cAAM,OAAA,KAAK,EAAL,CAAK,CAAC,CAAC;QACxB,CAAC;QACH,YAAC;IAAD,CA5DA,AA4DC,CA5D0B,KAAK,CAAC,KAAK,GA4DrC;IA5DY,sBAAK","file":"indexeddb.js","sourcesContent":["/**\n * Data saving functionality, using IndexedDB. Note that this saver is mainly\n * designed for demonstration purposes.\n *\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport * as Promise from \"bluebird\";\n\nimport { Runtime } from \"../runtime\";\nimport * as saver from \"../saver\";\nimport { TreeUpdater } from \"../tree-updater\";\n\nexport interface Store {\n  put(name: string, data: string): Promise<void>;\n}\n\nexport interface Options {\n  /**\n   * The \"name\" of the file to save. This is the key used to save the file.\n   */\n  name: string;\n\n  getStore(): Store;\n}\n\n/**\n * Defines a saver that uses localforage to save documents.\n *\n * This saver stores the document as a \"file\" into an indexeddb instance. The\n * objects are not really files but similar to files. Henceforth, the name\n * \"file\" will be used without quotes to refer to the objects stored.\n *\n * @param version The version of wed for which this object is\n * created.\n *\n * @param dataUpdater The updater that the editor created for its data tree.\n *\n * @param dataTree The editor's data tree.\n *\n * @param options The options specific to this class.\n */\nexport class Saver extends saver.Saver {\n  private readonly name: string;\n  private readonly store: Store;\n  private readonly initPromise: Promise<void> = Promise.resolve();\n\n  /**\n   * @param runtime The runtime under which this saver is created.\n   *\n   * @param version The version of wed for which this object is created.\n   *\n   * @param dataUpdater The updater that the editor created for its data tree.\n   *\n   * @param dataTree The editor's data tree.\n   *\n   * @param options The options specific to this class.\n   */\n  constructor(runtime: Runtime, version: string, dataUpdater: TreeUpdater,\n              dataTree: Node, options: Options) {\n    super(runtime, version, dataUpdater, dataTree);\n    this.initialized = true;\n    this.failed = false;\n    this.name = options.name;\n\n    this.store = options.getStore();\n    this.setAutosaveInterval(5 * 60 * 1000);\n  }\n\n  init(): Promise<void> {\n    // It is initialized from the get-go.\n    return this.initPromise;\n  }\n\n  _save(autosave: boolean): Promise<void> {\n    return Promise.resolve().then(() => {\n      if (!this.initialized) {\n        return;\n      }\n\n      return this._update(this.name, this.getData(), autosave,\n                          this.currentGeneration)\n      // All save errors produced by this saver are handled with this._fail.\n        .catch(() => undefined);\n    });\n  }\n\n  _update(name: string, data: string, autosave: boolean,\n          savingGeneration: number): Promise<void> {\n    return this.store.put(name, data).then(() => {\n      this._saveSuccess(autosave, savingGeneration);\n    }).catch(() => {\n      this._fail({ type: undefined, msg: \"Failed to save!\" });\n      throw new Error(\"save failed\");\n    });\n  }\n\n  _recover(): Promise<boolean> {\n    return this._save(false)\n      .then(() => true)\n      .catch(() => false);\n  }\n}\n"]}