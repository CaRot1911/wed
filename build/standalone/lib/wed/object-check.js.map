{"version":3,"sources":["../../../wed/object-check.ts"],"names":[],"mappings":"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","file":"object-check.js","sourcesContent":["/**\n * Checks whether an object conforms to a template.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nexport interface Template {\n  [key: string]: Template | boolean;\n}\n\n// tslint:disable-next-line:class-name\nexport interface _CheckResults {\n  missing: string[];\n  extra: string[];\n}\n\nexport type CheckResults = Partial<_CheckResults>;\n\nexport interface CheckedObject {\n  [key: string]: CheckedObject;\n}\n\n/**\n * Checks whether a field is required.\n *\n * @param template The template to check.\n *\n * @param name The name of the field.\n *\n * @returns Whether the field is required or not.\n */\nfunction _required(template: Template, name: string): boolean {\n  const val = template[name];\n  if (typeof val === \"object\") {\n    for (const subname in val) {\n      if (_required(val, subname)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  return val;\n}\n\nfunction _check(template: Template, object: CheckedObject,\n                prefix: string | undefined, ret: _CheckResults): void {\n  for (const name in template) {\n    if (_required(template, name)) {\n      const prefixed = prefix !== undefined ? [prefix, name].join(\".\") : name;\n      if (!(name in object)) {\n        ret.missing.push(prefixed);\n      }\n      else {\n        const val = object[name];\n        const templateVal = template[name];\n        if (!(val instanceof Array) && typeof val === \"object\" &&\n            typeof templateVal === \"object\") {\n          _check(templateVal, val, prefixed, ret);\n        }\n      }\n    }\n  }\n\n  for (const name in object) {\n    if (!(name in template)) {\n      const prefixed = prefix !== undefined ? [prefix, name].join(\".\") : name;\n      ret.extra.push(prefixed);\n    }\n  }\n}\n\n/**\n * Checks whether an object conforms to a template. The template must be an\n * object which specifies the known fields and which among them are required. A\n * field is known if it appears in the template. A field is considered\n * *required* if:\n *\n *  + it is an object which has any field which is required, or\n *\n *  + it is not an object but evaluates to a true value.\n *\n * A required field which does not appear in the object being checked will\n * appear in the ``missing`` field in the returned value.\n *\n * A field which appears on the object being checked but which is not known will\n * appear in the ``extra`` field in the returned value.\n *\n * The fields mentioned above exist only if there is something to report. The\n * names returned in the lists are fully qualified names.\n *\n * For instance, given this template:\n *\n *     {\n *         foo: false,\n *         bar: {\n *             baz: true,\n *             bin: false,\n *         },\n *         bip: {\n *             baz: false,\n *             bin: false,\n *         }\n *     }\n *\n * The names \"foo\", \"bar\", \"bar.baz\", \"bar.bin\", \"bip\", \"bip.baz\", bip.bin\" are\n * known. The names \"bar\" and \"bar.baz\" are required. The name \"bar\" is required\n * because \"bar.baz\" is required. The other names correspond to objects whose\n * fields are not required or are non-object values that evaluate to false.\n *\n * @param template The template to use for the check.\n *\n * @param object The object to check\n *\n * @returns The results.\n */\nexport function check(template: Template, object: CheckedObject): CheckResults {\n  const initial: _CheckResults = { missing: [], extra: [] };\n  _check(template, object, undefined, initial);\n\n  // clean up\n  // tslint:disable-next-line:no-any\n  const ret = initial as any;\n  for (const name in ret) {\n    if (ret[name].length === 0) {\n      delete ret[name];\n    }\n  }\n  return ret;\n}\n\nexports.check = check;\n"]}