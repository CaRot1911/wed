{"version":3,"file":"object-check.js","sourceRoot":"","sources":["../../../../lib/wed/object-check.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Checks whether an object conforms to a template.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nexport interface Template {\n  [key: string]: Template | boolean;\n}\n\n// tslint:disable-next-line:class-name\nexport interface _CheckResults {\n  missing: string[];\n  extra: string[];\n}\n\nexport type CheckResults = Partial<_CheckResults>;\n\nexport interface CheckedObject {\n  // tslint:disable-next-line:no-any\n  [key: string]: CheckedObject | boolean | number | string | any[];\n}\n\n/**\n * Checks whether a field is required.\n *\n * @param template The template to check.\n *\n * @param name The name of the field.\n *\n * @returns Whether the field is required or not.\n */\nfunction _required(template: Template, name: string): boolean {\n  const val = template[name];\n  if (typeof val === \"object\") {\n    for (const subname in val) {\n      if (_required(val, subname)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  return val;\n}\n\nfunction _check(template: Template, toCheck: {},\n                prefix: string | undefined, ret: _CheckResults): void {\n  for (const name in template) {\n    if (_required(template, name)) {\n      const prefixed = prefix !== undefined ? [prefix, name].join(\".\") : name;\n      if (!(name in toCheck)) {\n        ret.missing.push(prefixed);\n      }\n      else {\n        const val = (toCheck as CheckedObject)[name];\n        const templateVal = template[name];\n        if (!(val instanceof Array) && typeof val === \"object\" &&\n            typeof templateVal === \"object\") {\n          _check(templateVal, val, prefixed, ret);\n        }\n      }\n    }\n  }\n\n  for (const name in toCheck) {\n    if (!(name in template)) {\n      const prefixed = prefix !== undefined ? [prefix, name].join(\".\") : name;\n      ret.extra.push(prefixed);\n    }\n  }\n}\n\n/**\n * Checks whether an object conforms to a template. The template must be an\n * object which specifies the known fields and which among them are required. A\n * field is known if it appears in the template. A field is considered\n * *required* if:\n *\n *  + it is an object which has any field which is required, or\n *\n *  + it is not an object but evaluates to a true value.\n *\n * A required field which does not appear in the object being checked will\n * appear in the ``missing`` field in the returned value.\n *\n * A field which appears on the object being checked but which is not known will\n * appear in the ``extra`` field in the returned value.\n *\n * The fields mentioned above exist only if there is something to report. The\n * names returned in the lists are fully qualified names.\n *\n * For instance, given this template:\n *\n *     {\n *         foo: false,\n *         bar: {\n *             baz: true,\n *             bin: false,\n *         },\n *         bip: {\n *             baz: false,\n *             bin: false,\n *         }\n *     }\n *\n * The names \"foo\", \"bar\", \"bar.baz\", \"bar.bin\", \"bip\", \"bip.baz\", bip.bin\" are\n * known. The names \"bar\" and \"bar.baz\" are required. The name \"bar\" is required\n * because \"bar.baz\" is required. The other names correspond to objects whose\n * fields are not required or are non-object values that evaluate to false.\n *\n * @param template The template to use for the check.\n *\n * @param toCheck The object to check\n *\n * @returns The results.\n */\nexport function check(template: Template, toCheck: {}): CheckResults {\n  const initial: _CheckResults = { missing: [], extra: [] };\n  _check(template, toCheck, undefined, initial);\n\n  // clean up\n  // tslint:disable-next-line:no-any\n  const ret = initial as any;\n  for (const name in ret) {\n    if (ret[name].length === 0) {\n      delete ret[name];\n    }\n  }\n  return ret;\n}\n\n/**\n * Check whether the object fits the template, and throw at the first sign of\n * trouble. The thrown object contains information about the first error\n * encountered.\n *\n * @param template The template to use for the check.\n *\n * @param toCheck The object to check\n *\n * @throws {Error} If there is any error.\n */\nexport function assertSummarily(template: Template, toCheck: {}): void {\n  const result = check(template, toCheck);\n\n  if (result.missing !== undefined) {\n    throw new Error(`missing option: ${result.missing[0]}`);\n  }\n\n  if (result.extra !== undefined) {\n    throw new Error(`extra option: ${result.extra[0]}`);\n  }\n}\n\n/**\n * Check whether the object fits the template, and throw an error that reports\n * all issues.\n *\n * @param template The template to use for the check.\n *\n * @param toCheck The object to check\n *\n * @throws {Error} If there is any error.\n */\nexport function assertExtensively(template: Template, toCheck: {}): void {\n  const result = check(template, toCheck);\n\n  const errors: string[] = [];\n  if (result.missing !== undefined) {\n    for (const name of result.missing) {\n      errors.push(`missing option: ${name}`);\n    }\n  }\n\n  if (result.extra !== undefined) {\n    for (const name of result.extra) {\n      errors.push(`extra option: ${name}`);\n    }\n  }\n\n  if (errors.length !== 0) {\n    throw new Error(errors.join(\", \"));\n  }\n}\n\n//  LocalWords:  MPL baz bip\n"]}