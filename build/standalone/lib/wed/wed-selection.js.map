{"version":3,"file":"wed-selection.js","sourceRoot":"","sources":["../../../../lib/wed/wed-selection.ts"],"names":[],"mappings":";;;IAaA;;OAEG;IACH;QAGE;;;;;;;WAOG;QACH,sBAA4B,SAA6B,EAC7B,MAAY,EAAE,KAAwB;YADtC,cAAS,GAAT,SAAS,CAAoB;YAC7B,WAAM,GAAN,MAAM,CAAM;YACtC,IAAI,CAAC,KAAK,GAAG,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC;QACtD,CAAC;QAED,sBAAI,+BAAK;iBAAT;gBACE,IAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;gBAE1B,IAAI,EAAE,KAAK,SAAS,EAAE;oBACpB,OAAO,SAAS,CAAC;iBAClB;gBAED,OAAO,EAAE,CAAC,KAAK,CAAC;YAClB,CAAC;;;WAAA;QAED,sBAAI,mCAAS;iBAAb;gBACE,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3C,CAAC;;;WAAA;QAED,sBAAI,mCAAS;iBAAb;gBACE,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACxC,CAAC;;;WAAA;QAED,sBAAI,oCAAU;iBAAd;gBACE,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACzB,IAAI,KAAK,KAAK,SAAS,EAAE;oBACvB,OAAO,KAAK,CAAC;iBACd;gBAED,OAAO,2BAAiB,CAAC,KAAK,CAAC,CAAC;YAClC,CAAC;;;WAAA;QAED,mCAAY,GAAZ;YACE,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YACzB,IAAI,KAAK,KAAK,SAAS,EAAE;gBACvB,OAAO,SAAS,CAAC;aAClB;YAED,IAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,cAAc,EACrB,KAAK,CAAC,WAAW,CAAC,CAAC;YACnE,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,YAAY,EAClB,KAAK,CAAC,SAAS,CAAC,CAAC;YAChE,IAAI,UAAU,KAAK,SAAS,IAAI,QAAQ,KAAK,SAAS,EAAE;gBACtD,OAAO,SAAS,CAAC;aAClB;YAED,OAAO,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAChC,CAAC;QAED,uCAAgB,GAAhB;YACE,IAAM,GAAG,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;YAChC,IAAI,GAAG,KAAK,SAAS,EAAE;gBACrB,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;aAC5D;YAED,OAAO,GAAG,CAAC;QACb,CAAC;QAED;;;WAGG;QACH,6BAAM,GAAN,UAA+B,KAA2B;YACxD,IAAI,KAAK,IAAI,IAAI,EAAE;gBACjB,OAAO,KAAK,CAAC;aACd;YAED,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC5E,CAAC;QACH,mBAAC;IAAD,CAAC,AAhFD,IAgFC;IAhFY,oCAAY;;AAkFzB,yBAAyB","sourcesContent":["/**\n * Wed's notion of a selection.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { DLoc } from \"./dloc\";\nimport { isWellFormedRange, RangeInfo } from \"./domutil\";\n\nexport interface GUIToDataConverter {\n  toDataLocation(node: Node, offset: number): DLoc | undefined;\n}\n\n/**\n * Represents a selection as wed understands it.\n */\nexport class WedSelection {\n  public readonly focus: DLoc;\n\n  /**\n   * @param anchor The anchor point of the selection. The anchor is where the\n   * selection started. It does not move when the user selects text.\n   *\n   * @param focus The focus point of the selection. It is the part of the\n   * selection that moves when the user selects text. Omitting ``focus`` will\n   * result in a collapsed selection.\n   */\n  constructor(public readonly converter: GUIToDataConverter,\n              public readonly anchor: DLoc, focus?: DLoc | undefined) {\n    this.focus = (focus === undefined) ? anchor : focus;\n  }\n\n  get range(): Range | undefined {\n    const rr = this.rangeInfo;\n\n    if (rr === undefined) {\n      return undefined;\n    }\n\n    return rr.range;\n  }\n\n  get rangeInfo(): RangeInfo | undefined {\n    return this.anchor.makeRange(this.focus);\n  }\n\n  get collapsed(): boolean {\n    return this.anchor.equals(this.focus);\n  }\n\n  get wellFormed(): boolean {\n    const range = this.range;\n    if (range === undefined) {\n      return false;\n    }\n\n    return isWellFormedRange(range);\n  }\n\n  asDataCarets(): [DLoc, DLoc] | undefined {\n    const range = this.range;\n    if (range === undefined) {\n      return undefined;\n    }\n\n    const startCaret = this.converter.toDataLocation(range.startContainer,\n                                                    range.startOffset);\n    const endCaret = this.converter.toDataLocation(range.endContainer,\n                                                   range.endOffset);\n    if (startCaret === undefined || endCaret === undefined) {\n      return undefined;\n    }\n\n    return [startCaret, endCaret];\n  }\n\n  mustAsDataCarets(): [DLoc, DLoc] {\n    const ret = this.asDataCarets();\n    if (ret === undefined) {\n      throw new Error(\"cannot get the selection as data carets\");\n    }\n\n    return ret;\n  }\n\n  /**\n   * @returns Whether the two objects are equal. They are equal if they are the\n   * same object or if they have equal focuses (foci?) and equal anchors.\n   */\n  equals<T extends WedSelection>(other: T | undefined | null): boolean {\n    if (other == null) {\n      return false;\n    }\n\n    return this.focus.equals(other.focus) && this.anchor.equals(other.anchor);\n  }\n}\n\n//  LocalWords:  MPL foci\n"]}