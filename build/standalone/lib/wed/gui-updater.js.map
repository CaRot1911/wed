{"version":3,"file":"gui-updater.js","sourceRoot":"","sources":["../../../../lib/wed/gui-updater.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Listens to changes on a tree and updates the GUI tree in response to changes.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport $ from \"jquery\";\n\nimport * as convert from \"./convert\";\nimport { DLoc } from \"./dloc\";\nimport { isElement, isText } from \"./domtypeguards\";\nimport { isAttr, linkTrees, unlinkTree} from \"./domutil\";\nimport { BeforeDeleteNodeEvent, InsertNodeAtEvent, SetAttributeNSEvent,\n         SetTextNodeValueEvent, TreeUpdater } from \"./tree-updater\";\nimport * as util from \"./util\";\n\n/**\n * Updates a GUI tree so that its data nodes (those nodes that are not\n * decorations) mirror a data tree.\n */\nexport class GUIUpdater extends TreeUpdater {\n  /**\n   * @param guiTree The DOM tree to update.\n   *\n   * @param treeUpdater A tree updater that updates the data tree. It serves as\n   * a source of modification events which the object being created will listen\n   * on.\n   */\n  constructor(guiTree: Element, private readonly treeUpdater: TreeUpdater) {\n    super(guiTree);\n    this.treeUpdater.events.subscribe((ev) => {\n      switch (ev.name) {\n      case \"InsertNodeAt\":\n        this._insertNodeAtHandler(ev);\n        break;\n      case \"SetTextNodeValue\":\n        this._setTextNodeValueHandler(ev);\n        break;\n      case \"BeforeDeleteNode\":\n        this._beforeDeleteNodeHandler(ev);\n        break;\n      case \"SetAttributeNS\":\n        this._setAttributeNSHandler(ev);\n        break;\n      default:\n        // Do nothing...\n      }\n    });\n  }\n\n  /**\n   * Handles \"InsertNodeAt\" events.\n   *\n   * @param ev The event.\n   */\n  private _insertNodeAtHandler(ev: InsertNodeAtEvent): void {\n    const guiCaret = this.fromDataLocation(ev.parent, ev.index);\n    if (guiCaret === null) {\n      throw new Error(\"cannot find gui tree position\");\n    }\n    const clone = convert.toHTMLTree(this.tree.ownerDocument, ev.node);\n    if (isElement(ev.node)) {\n      // If ev.node is an element, then the clone is an element too.\n      linkTrees(ev.node, clone as Element);\n    }\n    this.insertNodeAt(guiCaret, clone);\n  }\n\n  /**\n   * Handles \"SetTextNodeValue\" events.\n   *\n   * @param ev The event.\n   */\n  private _setTextNodeValueHandler(ev: SetTextNodeValueEvent):\n  void {\n    const guiCaret = this.fromDataLocation(ev.node, 0);\n    if (guiCaret === null) {\n      throw new Error(\"cannot find gui tree position\");\n    }\n    this.setTextNodeValue(guiCaret.node as Text, ev.value);\n  }\n\n  /**\n   * Handles \"BeforeDeleteNode\" events.\n   *\n   * @param ev The event.\n   */\n  private _beforeDeleteNodeHandler(ev: BeforeDeleteNodeEvent):\n  void {\n    const dataNode = ev.node;\n    let toRemove;\n    let element = false;\n    switch (dataNode.nodeType) {\n    case Node.TEXT_NODE:\n      const guiCaret = this.fromDataLocation(dataNode, 0);\n      if (guiCaret === null) {\n        throw new Error(\"cannot find gui tree position\");\n      }\n      toRemove = guiCaret.node;\n      break;\n    case Node.ELEMENT_NODE:\n      toRemove = $.data(dataNode as Element, \"wed_mirror_node\");\n      element = true;\n      break;\n    default:\n    }\n    this.deleteNode(toRemove);\n\n    // We have to do this **after** we delete the node.\n    if (element) {\n      unlinkTree(dataNode as Element);\n      unlinkTree(toRemove);\n    }\n  }\n\n  /**\n   * Handles \"SetAttributeNS\" events.\n   *\n   * @param ev The event.\n   */\n  private _setAttributeNSHandler(ev: SetAttributeNSEvent): void {\n    const guiCaret = this.fromDataLocation(ev.node, 0);\n    if (guiCaret === null) {\n      throw new Error(\"cannot find gui tree position\");\n    }\n    this.setAttributeNS(guiCaret.node as Element, \"\",\n                        util.encodeAttrName(ev.attribute), ev.newValue);\n  }\n\n  /**\n   * Converts a data location to a GUI location.\n   *\n   * @param loc The location.\n   *\n   * @returns The GUI location.\n   */\n  fromDataLocation(loc: DLoc): DLoc | null;\n  fromDataLocation(node: Node, offset: number): DLoc | null;\n  fromDataLocation(loc: DLoc | Node, offset?: number): DLoc |null {\n    let node;\n    if (loc instanceof DLoc) {\n      node = loc.node;\n      offset = loc.offset;\n    }\n    else {\n      node = loc;\n      if (offset === undefined) {\n        throw new Error(\"must specify an offset\");\n      }\n    }\n\n    let guiNode = this.pathToNode(this.treeUpdater.nodeToPath(node));\n    if (guiNode === null) {\n      return null;\n    }\n\n    if (isText(node)) {\n      return DLoc.mustMakeDLoc(this.tree, guiNode, offset);\n    }\n\n    if (isAttr(node)) {\n      // The check for the node type is to avoid getting a location inside a\n      // placeholder.\n      if (isText(guiNode.firstChild)) {\n        guiNode = guiNode.firstChild;\n      }\n      return DLoc.mustMakeDLoc(this.tree, guiNode, offset);\n    }\n\n    if (offset === 0) {\n      return DLoc.mustMakeDLoc(this.tree, guiNode, 0);\n    }\n\n    if (offset >= node.childNodes.length) {\n      return DLoc.mustMakeDLoc(this.tree, guiNode, guiNode.childNodes.length);\n    }\n\n    const guiChild = this.pathToNode(\n      this.treeUpdater.nodeToPath(node.childNodes[offset]));\n    if (guiChild === null) {\n      // This happens if for instance node has X children but the\n      // corresponding node in tree has X-1 children.\n      return DLoc.mustMakeDLoc(this.tree, guiNode, guiNode.childNodes.length);\n    }\n\n    return DLoc.mustMakeDLoc(this.tree, guiChild);\n  }\n}\n\n//  LocalWords:  domutil jquery pathToNode nodeToPath jQuery deleteNode Dubeau\n//  LocalWords:  insertNodeAt MPL Mangalam gui setTextNodeValue TreeUpdater ev\n//  LocalWords:  BeforeDeleteNode SetAttributeNS\n"]}