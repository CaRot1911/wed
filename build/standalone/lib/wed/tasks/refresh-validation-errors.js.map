{"version":3,"file":"refresh-validation-errors.js","sourceRoot":"","sources":["../../../../../lib/wed/tasks/refresh-validation-errors.ts"],"names":[],"mappings":";;;IAcA;;;OAGG;IACH;QAIE,iCAA6B,UAAsB;YAAtB,eAAU,GAAV,UAAU,CAAY;YAH3C,WAAM,GAAyB,EAAE,CAAC;YAClC,aAAQ,GAAW,CAAC,CAAC;QAEyB,CAAC;QAEvD,uCAAK,GAAL;YACE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC;YAC9C,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QACpB,CAAC;QAED,uCAAK,GAAL;YACE,IAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;YACvB,iCAAiC;YACjC,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,CAAC;YACjE,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YAC3B,OAAO,EAAE,GAAG,OAAO,EAAE;gBACnB,IAAM,KAAK,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;gBACzB,oDAAoD;gBACpD,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,EAAE;oBACxB,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;iBACrC;gBAED,EAAE,EAAE,CAAC;aACN;YAED,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YACnB,OAAO,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC;QAC5B,CAAC;QACH,8BAAC;IAAD,CAAC,AA7BD,IA6BC;IA7BY,0DAAuB;;AA+BpC,oBAAoB","sourcesContent":["/**\n * A task that refreshes the position of the validation error markers.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { GUIValidationError } from \"../gui-validation-error\";\nimport { Task } from \"../task-runner\";\n\nexport interface Controller {\n  copyErrorList(): GUIValidationError[];\n  processError(error: GUIValidationError): boolean;\n}\n\n/**\n * This task refreshes the position of the validation error markers on the\n * screen.\n */\nexport class RefreshValidationErrors implements Task {\n  private errors: GUIValidationError[] = [];\n  private resumeAt: number = 0;\n\n  constructor(private readonly controller: Controller) {}\n\n  reset(): void {\n    this.errors = this.controller.copyErrorList();\n    this.resumeAt = 0;\n  }\n\n  cycle(): boolean {\n    let ix = this.resumeAt;\n    // The figure of 20 is arbitrary.\n    const thisMax = Math.min(this.errors.length, this.resumeAt + 20);\n    const errors = this.errors;\n    while (ix < thisMax) {\n      const error = errors[ix];\n      // We work only on those that already have a marker.\n      if (error.marker != null) {\n        this.controller.processError(error);\n      }\n\n      ix++;\n    }\n\n    this.resumeAt = ix;\n    return ix < errors.length;\n  }\n}\n\n//  LocalWords:  MPL\n"]}