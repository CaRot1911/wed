{"version":3,"file":"preferences.js","sourceRoot":"","sources":["../../../../lib/wed/preferences.ts"],"names":[],"mappings":";;;;;;;IAUA,IAAM,QAAQ,GAAG;QACf,QAAQ,EAAE,KAAK;KAChB,CAAC;IAEF;;;;OAIG;IACH;QAEE;;;WAGG;QACH,qBAAY,OAAY;YACtB,IAAI,OAAO,KAAK,SAAS,EAAE;gBACzB,8DAA8D;gBAC9D,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACjC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAChC,OAAO;aACR;YAED,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YAC7B,IAAI,CAAC,KAAK,GAAG,gBAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;QACtD,CAAC;QAED;;;;;WAKG;QACH,oCAAc,GAAd,UAAe,KAAS;YACtB,8BAAe,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACnC,CAAC;QAED;;;;;;;;;;WAUG;QACH,uDAAuD;QACvD,yBAAG,GAAH,UAAI,IAAY;YACd,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC9B,IAAI,EAAE,GAAG,CAAC,CAAC;YAEX,kCAAkC;YAClC,IAAI,EAAE,GAAQ,IAAI,CAAC,KAAK,CAAC;YACzB,OAAO,EAAE,GAAG,KAAK,CAAC,MAAM,EAAE;gBACxB,IAAM,IAAI,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC;gBAEvB,IAAI,IAAI,KAAK,EAAE,EAAE;oBACf,MAAM,IAAI,KAAK,CAAC,mBAAiB,IAAM,CAAC,CAAC;iBAC1C;gBAED,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;gBAEd,IAAI,EAAE,KAAK,SAAS,EAAE;oBACpB,OAAO,SAAS,CAAC;iBAClB;gBAED,EAAE,EAAE,CAAC;aACN;YAED,OAAO,EAAE,CAAC;QACZ,CAAC;QAED;;;;;;;;;;;;WAYG;QACH,uDAAuD;QACvD,yBAAG,GAAH,UAAI,IAAY,EAAE,KAAU;YAC1B,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC9B,IAAI,EAAE,GAAG,CAAC,CAAC;YAEX,kCAAkC;YAClC,IAAI,EAAE,GAAQ,IAAI,CAAC,KAAK,CAAC;YACzB,OAAO,EAAE,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC5B,IAAM,IAAI,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC;gBAEvB,IAAI,IAAI,KAAK,EAAE,EAAE;oBACf,MAAM,IAAI,KAAK,CAAC,mBAAiB,IAAM,CAAC,CAAC;iBAC1C;gBAED,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;gBAEd,IAAI,EAAE,KAAK,SAAS,EAAE;oBACpB,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;iBACrC;gBACD,EAAE,EAAE,CAAC;aACN;YAED,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;YAEtB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC;QACH,kBAAC;IAAD,CAAC,AAxGD,IAwGC;IAxGY,kCAAW;;AA0GxB,0BAA0B","sourcesContent":["/**\n * A model for wed's preferences.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport _ from \"lodash\";\n\nimport { assertSummarily } from \"./object-check\";\n\nconst template = {\n  tooltips: false,\n};\n\n/**\n * A model for preferences. The preferences stored in this object must be\n * serializable as JSON. The class itself does not enforce this, so callers must\n * be careful.\n */\nexport class Preferences {\n  private readonly prefs: {};\n  /**\n   * @param initial initial preferences.\n   * @throws {Error} If there is any error in the preferences.\n   */\n  constructor(initial?: {}) {\n    if (initial === undefined) {\n      // Custom code here to avoid a pointless call to ``._extend``.\n      this.prefs = Object.create(null);\n      this._validatePrefs(this.prefs);\n      return;\n    }\n\n    this._validatePrefs(initial);\n    this.prefs = _.extend(Object.create(null), initial);\n  }\n\n  /**\n   * Validates a set of preferences.\n   *\n   * @param prefs The preferences to validate.\n   * @throws {Error} If there is any error in the preferences.\n   */\n  _validatePrefs(prefs: {}): void {\n    assertSummarily(template, prefs);\n  }\n\n  /**\n   * Gets a preference value.\n   *\n   * @param name The preference to get. This name may be hierarchical:\n   * ``\"foo.bar\"`` would get the value of ``\"bar\"`` in ``\"foo\"``.\n   *\n   * @returns The value of the preference. If the preference does not exist, the\n   * value is ``undefined``.\n   *\n   * @throws {Error} If ``name`` is malformed.\n   */\n  // tslint:disable-next-line:no-reserved-keywords no-any\n  get(name: string): any {\n    const parts = name.split(\".\");\n    let ix = 0;\n\n    // tslint:disable-next-line:no-any\n    let it: any = this.prefs;\n    while (ix < parts.length) {\n      const part = parts[ix];\n\n      if (part === \"\") {\n        throw new Error(`empty part in ${name}`);\n      }\n\n      it = it[part];\n\n      if (it === undefined) {\n        return undefined;\n      }\n\n      ++ix;\n    }\n\n    return it;\n  }\n\n  /**\n   * Sets a preference value. This method fails hard if the value added to the\n   * preferences object is invalid somehow, but it fails *after* modifying the\n   * preferences. This method is **not** meant to validate user input.\n   *\n   * @param name The preference to get. This name may be hierarchical:\n   * ``\"foo.bar\"`` would get the value of ``\"bar\"`` in ``\"foo\"``.\n   *\n   * @param value The value to set the preference to.\n   *\n   * @throws {Error} If ``name`` is malformed, if any part of the name does not\n   * exist, or if the resulting preference objects is invalid.\n   */\n  // tslint:disable-next-line:no-reserved-keywords no-any\n  set(name: string, value: any): void {\n    const parts = name.split(\".\");\n    let ix = 0;\n\n    // tslint:disable-next-line:no-any\n    let it: any = this.prefs;\n    while (ix < parts.length - 1) {\n      const part = parts[ix];\n\n      if (part === \"\") {\n        throw new Error(`empty part in ${name}`);\n      }\n\n      it = it[part];\n\n      if (it === undefined) {\n        it = it[part] = Object.create(null);\n      }\n      ++ix;\n    }\n\n    it[parts[ix]] = value;\n\n    this._validatePrefs(this.prefs);\n  }\n}\n\n//  LocalWords:  wed's MPL\n"]}