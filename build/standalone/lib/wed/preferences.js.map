{"version":3,"sources":["../../../wed/preferences.ts"],"names":[],"mappings":"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","file":"preferences.js","sourcesContent":["/**\n * A model for wed's preferences.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport * as _ from \"lodash\";\n\nimport { check, CheckedObject } from \"./object-check\";\n\nconst template = {\n  tooltips: false,\n};\n\n/**\n * A model for preferences. The preferences stored in this object must be\n * serializable as JSON. The class itself does not enforce this, so callers must\n * be careful.\n */\nexport class Preferences {\n  private readonly prefs: CheckedObject;\n  /**\n   * @param {Object} [initial={}] The initial preferences.\n   * @throws {Error} If there is any error in the preferences.\n   */\n  constructor(initial?: CheckedObject) {\n    if (initial === undefined) {\n      // Custom code here to avoid a pointless call to ``._extend``.\n      this.prefs = Object.create(null);\n      this._validatePrefs(this.prefs);\n      return;\n    }\n\n    this._validatePrefs(initial);\n    this.prefs = _.extend(Object.create(null), initial);\n  }\n\n  /**\n   * Validates a set of preferences.\n   *\n   * @param prefs The preferences to validate.\n   * @throws {Error} If there is any error in the preferences.\n   */\n  _validatePrefs(prefs: CheckedObject): void {\n    const result = check(template, prefs);\n\n    // This is not the place to provide diagnosis for the end user: fail hard if\n    // something is wrong.\n    if (result.missing !== undefined) {\n      throw new Error(`missing option: ${result.missing[0]}`);\n    }\n\n    if (result.extra !== undefined) {\n      throw new Error(`extra option: ${result.extra[0]}`);\n    }\n  }\n\n  /**\n   * Gets a preference value.\n   *\n   * @param name The preference to get. This name may be hierarchical:\n   * ``\"foo.bar\"`` would get the value of ``\"bar\"`` in ``\"foo\"``.\n   *\n   * @returns The value of the preference. If the preference does not exist, the\n   * value is ``undefined``.\n   *\n   * @throws {Error} If ``name`` is malformed.\n   */\n  // tslint:disable-next-line:no-reserved-keywords no-any\n  get(name: string): any {\n    const parts = name.split(\".\");\n    let ix = 0;\n\n    // tslint:disable-next-line:no-any\n    let it: any = this.prefs;\n    while (ix < parts.length) {\n      const part = parts[ix];\n\n      if (part === \"\") {\n        throw new Error(`empty part in ${name}`);\n      }\n\n      it = it[part];\n\n      if (it === undefined) {\n        return undefined;\n      }\n\n      ++ix;\n    }\n\n    return it;\n  }\n\n  /**\n   * Sets a preference value. This method fails hard if the value added to the\n   * preferences object is invalid somehow, but it fails *after* modifying the\n   * preferences. This method is **not** meant to validate user input.\n   *\n   * @param name The preference to get. This name may be hierarchical:\n   * ``\"foo.bar\"`` would get the value of ``\"bar\"`` in ``\"foo\"``.\n   *\n   * @param value The value to set the preference to.\n   *\n   * @throws {Error} If ``name`` is malformed, if any part of the name does not\n   * exist, or if the resulting preference objects is invalid.\n   */\n  // tslint:disable-next-line:no-reserved-keywords no-any\n  set(name: string, value: any): void {\n    const parts = name.split(\".\");\n    let ix = 0;\n\n    // tslint:disable-next-line:no-any\n    let it: any = this.prefs;\n    while (ix < parts.length - 1) {\n      const part = parts[ix];\n\n      if (part === \"\") {\n        throw new Error(`empty part in ${name}`);\n      }\n\n      it = it[part];\n\n      if (it === undefined) {\n        // tslint:disable-next-line:no-any\n        it = (it as any)[part] = Object.create(null);\n      }\n      ++ix;\n    }\n\n    it[parts[ix]] = value;\n\n    this._validatePrefs(this.prefs);\n  }\n}\n\n//  LocalWords:  wed's MPL\n"]}