{"version":3,"sources":["../../../wed/convert.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;IAIH,gCAAgC,IAAa,EACb,IAAY;QAC1C,IAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC;QAC/B,EAAE,CAAC,CAAC,CAAC,yBAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,SAAS,CAAC;QACnB,CAAC;QAED,IAAM,GAAG,GAAG,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACtC,MAAM,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,GAAG,GAAG,sBAAsB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACrE,CAAC;IAED,oBAA2B,GAAa,EAAE,IAAU;QAClD,IAAI,GAAG,CAAC;QACR,EAAE,CAAC,CAAC,yBAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACpB,GAAG,GAAG,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC/B,GAAG,CAAC,SAAS,GAAM,IAAI,CAAC,OAAO,WAAQ,CAAC;YACxC,EAAE;YACF,kDAAkD;YAClD,EAAE;YACF,sEAAsE;YACtE,+BAA+B;YAC/B,EAAE;YACF,yEAAyE;YACzE,4BAA4B;YAC5B,EAAE;YACF,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;gBAChD,IAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAChC,IAAM,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO;oBACrB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBAEtD,wEAAwE;gBACxE,iBAAiB;gBACjB,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,sBAAsB,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;oBACnE,QAAQ,CAAC;gBACX,CAAC;gBAED,2CAA2C;gBAC3C,IAAM,QAAQ,GAAG,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC;qBAChE,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;gBAEvB,GAAG,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YACzC,CAAC;YAED,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC;YAC5B,OAAO,KAAK,KAAK,IAAI,EAAE,CAAC;gBACtB,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;gBACxC,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC;YAC5B,CAAC;QAEH,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,sBAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACtB,GAAG,GAAG,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3C,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,MAAM,IAAI,KAAK,CAAC,0BAAwB,IAAI,CAAC,QAAU,CAAC,CAAC;QAC3D,CAAC;QAED,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IA/CD,gCA+CC","file":"convert.js","sourcesContent":["/**\n * Convertion from XML to HTML.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport { isElement, isText } from \"./domtypeguards\";\n\nfunction ancestorNamespaceValue(node: Element,\n                                name: string): string | undefined {\n  const parent = node.parentNode;\n  if (!isElement(parent)) {\n    return undefined;\n  }\n\n  const val = parent.getAttribute(name);\n  return (val !== null) ? val : ancestorNamespaceValue(parent, name);\n}\n\nexport function toHTMLTree(doc: Document, node: Node): Node {\n  let ret;\n  if (isElement(node)) {\n    ret = doc.createElement(\"div\");\n    ret.className = `${node.tagName} _real`;\n    //\n    // We encode attributes here in the following way:\n    //\n    // 1. A sequence of three dashes or more gains a dash. So three dashes\n    // becomes 4, 4 becomes 5, etc.\n    //\n    // 2. A colon (which should be present only to mark the prefix) becomes a\n    // sequence of three dashes.\n    //\n    for (let i = 0; i < node.attributes.length; ++i) {\n      const attr = node.attributes[i];\n      const ns = (attr.name === \"xmlns\" ||\n                  attr.name.lastIndexOf(\"xmlns:\", 0) === 0);\n\n      // Don't do anything for namespace attributes that don't actually change\n      // the namespace.\n      if (ns && (attr.value === ancestorNamespaceValue(node, attr.name))) {\n        continue;\n      }\n\n      // tslint:disable-next-line:prefer-template\n      const attrName = \"data-wed-\" + attr.name.replace(/--(-+)/, \"---$1\")\n        .replace(\":\", \"---\");\n\n      ret.setAttribute(attrName, attr.value);\n    }\n\n    let child = node.firstChild;\n    while (child !== null) {\n      ret.appendChild(toHTMLTree(doc, child));\n      child = child.nextSibling;\n    }\n\n  }\n  else if (isText(node)) {\n    ret = document.createTextNode(node.data);\n  }\n  else {\n    throw new Error(`unhandled node type: ${node.nodeType}`);\n  }\n\n  return ret;\n}\n"]}