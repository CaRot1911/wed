{"version":3,"sources":["../../../wed/onbeforeunload.ts"],"names":[],"mappings":";;;IAAA;;;;;OAKG;IACH,0EAA0E;IAC1E,IAAM,IAAI,GAAG,CAAC,OAAO,aAAa,KAAK,WAAW,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC;IAE/E;QACE,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;;;;;;;OAaG;IACH,iBAAwB,GAAW,EACX,KAAqC,EACrC,KAAsB;QADtB,sBAAA,EAAA,oBAAqC;QACrC,sBAAA,EAAA,aAAsB;QAE5C,EAAE,CAAC,CAAC,GAAG,CAAC,cAAc,IAAI,IAAI;YAC1B,kCAAkC;YACjC,GAAG,CAAC,cAAsB,CAAC,yBAAoC;YAChE,CAAC,KAAK,CAAC,CAAC,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;QAC7D,CAAC;QAED;YACE,IAAM,MAAM,GAAG,KAAK,EAAE,CAAC;YACvB,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;QACrC,CAAC;QAED,kCAAkC;QACjC,UAAkB,CAAC,yBAAyB,GAAG,IAAI,CAAC;QAErD,GAAG,CAAC,cAAc,GAAG,UAAU,CAAC;IAClC,CAAC;IApBD,0BAoBC;IAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACV,OAAO,CAAC,MAAM,CAAC,CAAC;IAClB,CAAC;;AAED,iEAAiE","file":"onbeforeunload.js","sourcesContent":["/**\n * The onbeforeunload handler for wed.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n// tslint:disable-next-line:no-typeof-undefined strict-boolean-expressions\nconst test = (typeof __WED_TESTING !== \"undefined\") && !!__WED_TESTING.testing;\n\nfunction defaultCheck(): boolean {\n  return true;\n}\n\n/**\n * Installs an ``onbeforeunload`` handler.\n *\n * @param win The window to install it on.\n *\n * @param A check to perform to verify whether prompting is necessary. If the\n * check returns ``false``, no prompting will occur. If unspecified, the prompt\n * will always be presented.\n *\n * @param Whether to force the installation even if a previous handler was\n * already installed. If ``force`` is ``false`` then if a handler was previously\n * installed **by this module** then an exception will be raised. If ``true``\n * then the old handler will be overwritten.\n */\nexport function install(win: Window,\n                        check: (() => boolean) = defaultCheck,\n                        force: boolean = false): void {\n\n  if (win.onbeforeunload != null &&\n      // tslint:disable-next-line:no-any\n      (win.onbeforeunload as any).installedByOnbeforeunload as boolean &&\n      !force) {\n    throw new Error(\"reregistering window with `force` false\");\n  }\n\n  function newHandler(): true | undefined {\n    const result = check();\n    return result ? result : undefined;\n  }\n\n  // tslint:disable-next-line:no-any\n  (newHandler as any).installedByOnbeforeunload = true;\n\n  win.onbeforeunload = newHandler;\n}\n\nif (!test) {\n  install(window);\n}\n\n//  LocalWords:  reregistering Mangalam MPL Dubeau onbeforeunload\n"]}