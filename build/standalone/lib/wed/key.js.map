{"version":3,"file":"key.js","sourceRoot":"","sources":["../../../../lib/wed/key.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Module implementing an class that describes keyboard keys.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport \"jquery\";\nimport * as browsers from \"./browsers\";\n\nlet id = 0;\n\n// tslint:disable-next-line:completed-docs class-name\nexport class EITHER_ {\n  toString(): string {\n    return \"EITHER\";\n  }\n}\n\n/**\n * Value meaning \"either true or false\", by opposition to ``true`` and\n * ``false``.\n */\nexport const EITHER = new EITHER_();\n\nexport type TriValued = boolean | typeof EITHER;\n\n/**\n * One and only one instance of a Key object exists per set of parameters used\n * for its construction. So if ``a = new Key(1, 2, 3)`` and ``b = new Key(1, 2,\n * 3)`` then ``a === b`` is true. The last three parameters are normalized to\n * boolean values, so ``new Key(1, 2, 3)`` is the same as ``new Key(1, 2, 3,\n * false, false, false)``.\n *\n * Key objects should be considered immutable. Modifying them after their\n * creation is likely to cause code to execute erratically.\n *\n * A note on the handling of the shift key. For key presses, we do not care\n * whether shift was held or not when the key was pressed. It does not matter to\n * us whether the user types the letter A because \"Shift-a\" was pressed or\n * because the user was in caps lock mode and pressed \"a\". Conversely,\n * ``keydown`` and ``keyup`` events concern themselves with Shift. We do want to\n * distinguish Ctrl-A and Ctrl-Shift-A. (Yes, we use the capital A for both:\n * browsers report that the key \"A\" was pressed whether Shift was held or not.)\n */\nexport class Key {\n  // tslint:disable-next-line:variable-name\n  private static __cache: Record<string, Key> = Object.create(null);\n\n  readonly which: number;\n  readonly keyCode: number;\n  readonly charCode: number;\n  readonly ctrlKey: boolean;\n  readonly altKey: boolean;\n  readonly metaKey: boolean;\n  readonly shiftKey: TriValued;\n  readonly keypress: boolean;\n\n  readonly hashKey: string;\n\n  private readonly id: number;\n\n  /**\n   * @param hashKey The unique hash which represents this key.\n   *\n   * @param which The character code of the key.\n   *\n   * @param keypress Whether this key is meant to be used for keypress events\n   * rather than keyup and keydown.\n   *\n   * @param keyCode The key code of the key.\n   *\n   * @param charCode The character code of the key.\n   *\n   * @param ctrlKey Whether this key requires the Ctrl key held.\n   *\n   * @param altKey Whether this key requires the Alt key held.\n   *\n   * @param metaKey Whether this key requires the meta key held.\n   *\n   * @param shiftKey Whether this key requires the shift key held. It is invalid\n   * to use this parameter if ``keypress`` is ``true``. When ``keypress`` is\n   * ``false``, an unspecified value here means ``false``.\n   */\n  private constructor(hashKey: string, which: number, keypress: boolean = true,\n                      keyCode: number, charCode: number = 0,\n                      ctrlKey: boolean = false, altKey: boolean = false,\n                      metaKey: boolean = false, shiftKey: TriValued = EITHER) {\n    if (keypress) {\n      if (shiftKey !== EITHER) {\n        throw new Error(\"shiftKey with key presses must be EITHER\");\n      }\n    }\n\n    this.which = which;\n    this.keyCode = keyCode;\n    this.charCode = charCode;\n    this.ctrlKey = ctrlKey;\n    this.altKey = altKey;\n    this.metaKey = metaKey;\n    this.shiftKey = shiftKey;\n    this.keypress = keypress;\n\n    this.hashKey = hashKey;\n    this.id = id++;\n  }\n\n  /**\n   * Client code should use the convenience functions provided by this module to\n   * create keys rather than use this function directly.\n   *\n   * @param which The character code of the key.\n   *\n   * @param keypress Whether this key is meant to be used for keypress events\n   * rather than keyup and keydown.\n   *\n   * @param keyCode The key code of the key.\n   *\n   * @param charCode The character code of the key.\n   *\n   * @param ctrlKey Whether this key requires the Ctrl key held.\n   *\n   * @param altKey Whether this key requires the Alt key held.\n   *\n   * @param metaKey Whether this key requires the meta key held.\n   *\n   * @param shiftKey Whether this key requires the shift key held. It is invalid\n   * to use this parameter if ``keypress`` is ``true``. When ``keypress`` is\n   * ``false``, an unspecified value here means ``false``.\n   *\n   * @returns The key corresponding to the parameters.\n   */\n  static make(which: number, keypress: boolean = true,\n              keyCode: number, charCode: number = 0,\n              ctrlKey: boolean = false, altKey: boolean = false,\n              metaKey: boolean = false, shiftKey: TriValued = EITHER): Key {\n    // Some separator is necessary because otherwise there would be no way to\n    // distinguish (1, 23, 4, ...) from (12, 3, 4, ...) or (1, 2, 34, ...).\n    const key = [which, keyCode, charCode, ctrlKey, altKey, metaKey, shiftKey,\n                 keypress].join(\",\");\n\n    // Ensure we have only one of each key created.\n    let cached = Key.__cache[key];\n    if (cached === undefined) {\n      Key.__cache[key] = cached = new Key(key, which, keypress, keyCode,\n                                          charCode, ctrlKey, altKey, metaKey,\n                                          shiftKey);\n    }\n\n    return cached;\n  }\n\n  /**\n   * This method compares the key object to an event object. The event object\n   * should have been generated for a keyboard event. This method does not check\n   * the type of object.\n   *\n   * @param ev A jQuery or DOM event object.\n   * @returns True if the key object matches the event, false\n   * otherwise.\n   */\n  matchesEvent(ev: KeyboardEvent | JQueryKeyEventObject): boolean {\n    return ev.which === this.which &&\n      ev.keyCode === this.keyCode &&\n      ev.charCode === this.charCode &&\n      ev.ctrlKey === this.ctrlKey &&\n      ev.altKey === this.altKey &&\n      ev.metaKey === this.metaKey &&\n      // If shiftKey is undefined, we don't compare it.\n      ((this.shiftKey === EITHER) || (ev.shiftKey === this.shiftKey)) &&\n      (this.keypress ? (ev.type === \"keypress\") :\n       ((ev.type === \"keydown\") || (ev.type === \"keyup\")));\n  }\n\n  /**\n   * Sets an event object so that it matches this key. If this is not a keypress\n   * event, the event type will be set to keydown. The caller can set it to\n   * keyup as needed.\n   *\n   * @param ev A jQuery or DOM event object. This object is modified by the\n   * method.\n   */\n  setEventToMatch(ev: KeyboardEvent | JQueryKeyEventObject): void {\n    // tslint:disable-next-line:no-any\n    const asAny = ev as any;\n    asAny.which = this.which;\n    asAny.keyCode = this.keyCode;\n    asAny.charCode = this.charCode;\n    asAny.ctrlKey = this.ctrlKey;\n    asAny.altKey = this.altKey;\n    asAny.metaKey = this.metaKey;\n    if (this.shiftKey !== EITHER) {\n      asAny.shiftKey = this.shiftKey;\n    }\n    if (this.keypress) {\n      asAny.type = \"keypress\";\n    }\n    else {\n      asAny.type = \"keydown\";\n    }\n  }\n\n  /**\n   * The uniqueness of the return value this method returns is guaranteed only\n   * per module instance, which generally translates to \"per JavaScript\n   * execution context\". For instance, if this code is loaded in two different\n   * browser pages, the module will be instantiated once per page and the return\n   * values for Key objects that were created with the same parameters might\n   * differ. So if these two pages communicate with one another they cannot use\n   * the return value of this method to identify objects.\n   *\n   * @returns A hash value that uniquely identifies the object. The value should\n   * be considered to be opaque.\n   */\n  hash(): number {\n    return this.id;\n  }\n\n  /**\n   * @returns True if any modifiers are turned on for this key. False\n   * otherwise. Shift is not considered a modifier for our purposes.\n   */\n  anyModifier(): boolean {\n    return this.ctrlKey || this.altKey || this.metaKey;\n  }\n}\n\n/** This is a [[Key]] that cannot match anything. */\nexport const NULL_KEY = Key.make(-1, false, -1);\n\n/**\n * This function creates a key object.\n *\n * @param which This parameter can be a string of length one which contains the\n * character for which we want to create a Key. If a number, it is the character\n * code of the key.\n *\n * @param keypress Whether this key is meant to be used for keypress events\n * rather than keyup and keydown.\n *\n * @param keyCode The key code of the key.\n *\n * @param charCode The character code of the key.\n *\n * @param ctrlKey Whether this key requires the Ctrl key held.\n *\n * @param altKey Whether this key requires the Alt key held.\n *\n * @param metaKey Whether this key requires the meta key held.\n *\n * @param shiftKey Whether this key requires the shift key held. It is invalid\n * to use this parameter if ``keypress`` is ``true``.\n *\n * @returns The key created.\n *\n * @throws {Error} If ``which`` is not a single character string or a number.\n */\nexport function makeKey(which: string | number,\n                        keypress: boolean = true,\n                        keyCode?: number, charCode?: number,\n                        ctrlKey: boolean = false,\n                        altKey: boolean = false,\n                        metaKey: boolean = false,\n                        shiftKey: TriValued = EITHER): Key {\n  if (typeof (which) === \"string\") {\n    if (which.length !== 1) {\n      throw new Error(\"when the first parameter is a string, \" +\n                      \"a one-character string is required\");\n    }\n    which = which.charCodeAt(0);\n  }\n  else if (typeof (which) !== \"number\") {\n    throw new Error(\"the first parameter must be a string or number\");\n  }\n\n  if (keypress === undefined) {\n    keypress = true;\n  }\n  else {\n    keypress = !!keypress;\n  }\n\n  if (keyCode == null) {\n    keyCode = (keypress && browsers.GECKO) ? 0 : which;\n  }\n\n  if (charCode == null) {\n    charCode = keypress ? which : 0;\n  }\n\n  // Normalize\n  ctrlKey = !!ctrlKey;\n  altKey = !!altKey;\n  metaKey = !!metaKey;\n  if (shiftKey !== EITHER) {\n    shiftKey = !!shiftKey;\n  }\n\n  return Key.make(which, keypress, keyCode, charCode, ctrlKey, altKey,\n                  metaKey, shiftKey);\n}\n\n/**\n * This function creates a key object which represents a control character (a\n * character typed while Ctrl is held).\n *\n * @param ch This parameter can be a string of length one which contains the\n * character for which we want to create a Key. If a number, it is the character\n * code of the key.\n *\n * @param shiftKey Whether this is a Ctrl-Shift sequence or not.\n *\n * @returns The key created.\n */\nexport function makeCtrlKey(ch: string | number,\n                            shiftKey: TriValued = EITHER): Key {\n  return makeKey(ch, false, undefined, undefined, true, false, false, shiftKey);\n}\n\n/**\n * This function creates a key object which represents a meta character (a\n * character typed while Meta is held).\n *\n * @param ch This parameter can be a string of length one which contains the\n * character for which we want to create a Key. If a number, it is the character\n * code of the key.\n *\n * @param shiftKey Whether this is a Meta-Shift sequence or not.\n *\n * @returns The key created.\n */\nexport function makeMetaKey(ch: string | number,\n                            shiftKey: TriValued = EITHER): Key {\n  return makeKey(ch, false, undefined, undefined, false, false, true, shiftKey);\n}\n\n/**\n * This function creates a key object which represents a \"control equivalent\"\n * character. A \"control equivalent\" is equivalent to a control key on all\n * platforms, except in OS X where it is equivalent to a command key. That is if\n * one makes a \"control equivalent\" with the character \"X\", then on all\n * platforms it would be equivalent to hitting Ctrl-X, except in OS X where it\n * is equivalent to hitting Command-X.\n *\n * @param ch This parameter can be a string of length one which contains the\n * character for which we want to create a Key. If a number, it is the character\n * code of the key.\n *\n * @param shiftKey Whether this is a [...]-Shift sequence or not.\n *\n * @returns The key created.\n */\nexport function makeCtrlEqKey(ch: string | number,\n                              shiftKey: TriValued = EITHER): Key {\n  if (!browsers.OSX) {\n    return makeCtrlKey(ch, shiftKey);\n  }\n\n  // Command === Meta\n  return makeMetaKey(ch, shiftKey);\n}\n\n//  LocalWords:  jQuery keydown keypress boolean Dubeau MPL Mangalam DOM Ctrl\n//  LocalWords:  keyup param keyCode charcode ctrlKey altKey metaKey shiftKey\n"]}