{"version":3,"sources":["../../../wed/modes/generic/metadata.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;AAwEH,yBAAyB","file":"metadata.js","sourcesContent":["/**\n * Mode metadata.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport { EName } from \"salve\";\n\nexport interface Metadata {\n  /**\n   * The name of the software that generated the JSON metadata used by this\n   * object.\n   */\n  readonly generator?: string;\n\n  /**\n   * The date at which the file was generated.\n   */\n  readonly date?: string;\n\n  /**\n   * Records the version number of the format of the metadata file.\n   */\n  readonly version: string;\n\n  /**\n   * Returns absolute namespace mappings.\n   *\n   * @returns An object whose keys are namespace prefixes and values are\n   * namespace URIs. The object returned by this method should not be modified.\n   */\n  getNamespaceMappings(): Record<string, string>;\n\n  /**\n   * This method determines whether a node needs to be represented inline.\n   *\n   * @param node The node to examine.\n   *\n   * @return True if the node should be inline, false otherwise.\n   */\n  isInline(node: Element): boolean;\n\n  /**\n   * Returns a short description for an element. The element should be named\n   * according to the mappings reported by [[getNamespaceMappings]].\n   *\n   * @param name The name of the element.\n   *\n   * @returns The description. If the value returned is ``undefined``, then the\n   * description is not available.\n   */\n  shortDescriptionFor(name: EName): string | undefined;\n\n  /**\n   * Returns a URL to the documentation for an element. The element should be\n   * named according to the mappings reported by the resolve returned by\n   * [[\"mode\".Mode.getAbsoluteResolver]].\n   *\n   * @param name The name of the element.\n   *\n   * @returns The URL. If the value returned is ``undefined``, then the URL is\n   * not available.\n   */\n  documentationLinkFor(name: EName): string | undefined;\n\n  /**\n   * Unresolve a name using the mapping defined by the metadata.\n   *\n   * @param name The name to unresolve.\n   *\n   * @returns The unresolved name or ``undefined`` if the name cannot be\n   * unresolved.\n   */\n  unresolveName(name: EName): string | undefined;\n}\n\n//  LocalWords:  MPL URIs\n"]}