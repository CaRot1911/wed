{"version":3,"sources":["../../../wed/modes/generic/generic.ts"],"names":[],"mappings":"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","file":"generic.js","sourcesContent":["/**\n * The main module for the generic mode.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport * as Promise from \"bluebird\";\nimport { NameResolver } from \"salve\";\n\nimport { Action } from \"wed/action\";\nimport { BaseMode, Editor } from \"wed/mode\";\nimport * as objectCheck from \"wed/object-check\";\nimport { Transformation, TransformationData } from \"wed/transformation\";\nimport { GenericDecorator } from \"./generic-decorator\";\nimport { makeTagTr } from \"./generic-tr\";\nimport { Metadata } from \"./metadata\";\nimport { MetadataMultiversionReader } from \"./metadata-multiversion-reader\";\n\nexport interface GenericModeOptions {\n  metadata: string;\n  autoinsert?: boolean;\n}\n\n/**\n * This is the class that implements the generic mode. This mode decorates all\n * the elements of the file being edited. On the basis of the schema used by wed\n * for validation, it allows the addition of the elements authorized by the\n * schema.\n *\n * Recognized options:\n *\n * - ``metadata``: this option can be a path (a string) pointing to a module\n *   that implements the metadata needed by the mode.\n *\n * - ``autoinsert``: whether or not to fill newly inserted elements as much as\n *   possible. If this option is true, then when inserting a new element, the\n *   mode will try to detect whether the element has any mandatory children and\n *   if so will add these children to the element. For instance, if ``foo`` is\n *   invalid without the child ``baz`` then when inserting ``foo`` in the\n *   document, the following structure would be inserted\n *   ``<foo><baz></baz></foo>``. This automatic insertion of children happens\n *   only in non-ambiguous cases. Taking the same example as before, if ``foo``\n *   could contain ``a`` or ``b``, then the mode won't add any children. This\n *   option is ``true`` by default.\n */\nclass GenericMode<Options extends GenericModeOptions>\n  extends BaseMode<Options> {\n  protected resolver: NameResolver;\n  protected metadata: Metadata;\n  protected tagTr: Record<string, Transformation<TransformationData>>;\n\n  /**\n   * The template that [[checkOptions]] uses to check the options passed\n   * to this mode. Consider this object to be immutable.\n   */\n  readonly optionTemplate: objectCheck.Template = {\n    metadata: true,\n    autoinsert: false,\n  };\n\n  /**\n   * @param editor The editor with which the mode is being associated.\n   *\n   * @param options The options for the mode.\n   */\n  // tslint:disable-next-line:no-any\n  constructor(editor: Editor, options: Options) {\n    super(editor, options);\n\n    if (this.constructor === GenericMode) {\n      // Set our metadata.\n      this.wedOptions.metadata = {\n        name: \"Generic\",\n        authors: [\"Louis-Dominique Dubeau\"],\n        description:\n        \"This is a basic mode bundled with wed and which can, \" +\n          \"and probably should be used as the base for other modes.\",\n        license: \"MPL 2.0\",\n        copyright: \"Mangalam Research Center for Buddhist Languages\",\n      };\n    }\n    // else it is up to the derived class to set it.\n\n    this.wedOptions.attributes = \"edit\";\n  }\n\n  init(): Promise<void> {\n    this.checkOptions(this.options);\n\n    if (this.options.autoinsert === undefined) {\n      this.options.autoinsert = true;\n    }\n\n    return Promise.resolve()\n      .then(() => {\n        this.tagTr = makeTagTr(this.editor);\n        return this.makeMetadata().then((metadata) => {\n          this.metadata = metadata;\n        });\n      })\n      .then(() => {\n        this.resolver = new NameResolver();\n        const mappings = this.metadata.getNamespaceMappings();\n        for (const key of Object.keys(mappings)) {\n          this.resolver.definePrefix(key, mappings[key]);\n        }\n      });\n  }\n\n  /**\n   * Check that the options are okay. This method will throw if there are any\n   * unexpected options or mandatory options are missing.\n   *\n   * @param options The options to check.\n   */\n  checkOptions(options: GenericModeOptions): void {\n    // tslint:disable-next-line:no-any\n    const ret = objectCheck.check(this.optionTemplate, options as any);\n\n    const errors: string[] = [];\n    if (ret.missing !== undefined) {\n      for (const name of ret.missing) {\n        errors.push(`missing option: ${name}`);\n      }\n    }\n\n    if (ret.extra !== undefined) {\n      for (const name of ret.extra) {\n        errors.push(`extra option: ${name}`);\n      }\n    }\n\n    if (errors.length !== 0) {\n      throw new Error(`incorrect options: ${errors.join(\", \")}`);\n    }\n  }\n\n  /**\n   * Make a [[Metadata]] object for use with this mode. The default\n   * implementation requires that there be a ``metadata`` option set and\n   * uses that to load a metadata file. Derived classes can override\n   * this as needed.\n   */\n  makeMetadata(): Promise<Metadata> {\n    return this.editor.runtime.resolveToString(this.options.metadata)\n      .then((data: string) => {\n        const obj = JSON.parse(data);\n        return new MetadataMultiversionReader().read(obj);\n      });\n  }\n\n  getAbsoluteResolver(): NameResolver {\n    return this.resolver;\n  }\n\n  makeDecorator(): GenericDecorator {\n    const obj = Object.create(GenericDecorator.prototype);\n    let args = Array.prototype.slice.call(arguments);\n    args = [this, this.metadata, this.options].concat(args);\n    GenericDecorator.apply(obj, args);\n    return obj;\n  }\n\n  /**\n   * Returns a short description for an element. The element should be named\n   * according to the mappings reported by the resolve returned by\n   * [[\"mode\".Mode.getAbsoluteResolver]]. The generic mode delegates the call to\n   * the metadata.\n   *\n   * @param name The name of the element.\n   *\n   * @returns The description. If the value returned is ``undefined``, then the\n   * description is not available. If the value returned is ``null``, the\n   * description has not been loaded yet.\n   */\n  shortDescriptionFor(name: string): string | null | undefined {\n    const ename = this.resolver.resolveName(name);\n    if (ename === undefined) {\n      return undefined;\n    }\n    return this.metadata.shortDescriptionFor(ename);\n  }\n\n  /**\n   * Returns a URL to the documentation for an element. The element should be\n   * named according to the mappings reported by the resolve returned by\n   * [[\"mode\".Mode.getAbsoluteResolver]]. The generic mode delegates the call to\n   * the metadata.\n   *\n   * @param name The name of the element.\n   *\n   * @returns The URL. If the value returned is ``undefined``, then URL is not\n   * available. If the value returned is ``null``, the URL has not been loaded\n   * yet.\n   */\n  documentationLinkFor(name: string): string | null | undefined {\n    const ename = this.resolver.resolveName(name);\n    if (ename === undefined) {\n      return undefined;\n    }\n\n    return this.metadata.documentationLinkFor(ename);\n  }\n\n  /**\n   * The generic mode's implementation merely returns what it has stored in its\n   * transformation registry.\n   */\n  getContextualActions(transformationType: string | string[],\n                       tag: string,\n                       container: Node,\n                       offset: number): Action<{}>[] {\n    if (!(transformationType instanceof Array)) {\n      transformationType = [transformationType];\n    }\n\n    const ret = [];\n    for (const ttype of transformationType) {\n      const val = this.tagTr[ttype];\n      if (val !== undefined) {\n        ret.push(val);\n      }\n    }\n    return ret;\n  }\n}\n\nexport { GenericMode as Mode };\n\n//  LocalWords:  gui jquery Mangalam MPL Dubeau\n"]}