{"version":3,"file":"wed-options-validation-test.js","sourceRoot":"","sources":["../../../../../lib/tests/wed/wed-options-validation-test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from \"chai\";\n\nimport { WedOptions } from \"wed/wed-options\";\nimport { processWedOptions } from \"wed/wed-options-validation\";\n\n// tslint:disable-next-line:missing-jsdoc\ndescribe(\"wed-options-validation\", () => {\n  describe(\"processOptions\", () => {\n    it(\"returns cleaned options when done\", () => {\n      const options: WedOptions = {\n        metadata: {\n          name: \"Test\",\n          authors: [\"Louis-Dominique Dubeau\"],\n          description: \"TEST MODE. DO NOT USE IN PRODUCTION!\",\n          license: \"MPL 2.0\",\n          copyright: \"Mangalam Research Center for Buddhist Languages\",\n        },\n        label_levels: {\n          max: 2,\n          initial: 1,\n        },\n        attributes: {\n          handling: \"edit\",\n          autohide: {\n            method: \"selector\",\n            elements: [{\n              selector: \"a\",\n              attributes: [\n                \"moo\",\n              ],\n            }],\n          },\n        },\n      };\n      const result = processWedOptions(options);\n      expect(result).is.not.instanceof(Array);\n    });\n\n    it(\"cleans a missing attributes option\", () => {\n      const options: WedOptions = {\n        metadata: {\n          name: \"Test\",\n          authors: [\"Louis-Dominique Dubeau\"],\n          description: \"TEST MODE. DO NOT USE IN PRODUCTION!\",\n          license: \"MPL 2.0\",\n          copyright: \"Mangalam Research Center for Buddhist Languages\",\n        },\n        label_levels: {\n          max: 2,\n          initial: 1,\n        },\n      };\n      const result = processWedOptions(options);\n      expect(result).is.not.instanceof(Array);\n      expect(result).to.have.deep.property(\"attributes.handling\").equal(\"hide\");\n    });\n\n    it(\"cleans a string attributes option\", () => {\n      const options: WedOptions = {\n        metadata: {\n          name: \"Test\",\n          authors: [\"Louis-Dominique Dubeau\"],\n          description: \"TEST MODE. DO NOT USE IN PRODUCTION!\",\n          license: \"MPL 2.0\",\n          copyright: \"Mangalam Research Center for Buddhist Languages\",\n        },\n        label_levels: {\n          max: 2,\n          initial: 1,\n        },\n        attributes: \"edit\",\n      };\n      const result = processWedOptions(options);\n      expect(result).is.not.instanceof(Array);\n      expect(result).to.have.deep.property(\"attributes.handling\").equal(\"edit\");\n    });\n\n    it(\"reports an error if the options are not in the right format\", () => {\n      const options: WedOptions = {\n        metadata: {\n          name: \"Test\",\n          authors: [\"Louis-Dominique Dubeau\"],\n          description: \"TEST MODE. DO NOT USE IN PRODUCTION!\",\n          license: \"MPL 2.0\",\n          copyright: \"Mangalam Research Center for Buddhist Languages\",\n        },\n        label_levels: {\n          max: 2,\n          initial: 1,\n        },\n        attributes: \"moo\",\n        // tslint:disable-next-line:no-any\n      } as any;\n      const result = processWedOptions(options);\n      expect(result).to.be.instanceof(Array);\n      expect(result).to.have.deep.property(\"[0]\").equal(\n        \".attributes should be equal to one of the allowed values\");\n    });\n\n    it(\"reports an error if the initial label level > the max\", () => {\n      const options: WedOptions = {\n        metadata: {\n          name: \"Test\",\n          authors: [\"Louis-Dominique Dubeau\"],\n          description: \"TEST MODE. DO NOT USE IN PRODUCTION!\",\n          license: \"MPL 2.0\",\n          copyright: \"Mangalam Research Center for Buddhist Languages\",\n        },\n        label_levels: {\n          max: 2,\n          initial: 3,\n        },\n        attributes: \"edit\",\n        // tslint:disable-next-line:no-any\n      } as any;\n      const result = processWedOptions(options);\n      expect(result).to.be.instanceof(Array);\n      expect(result).to.have.deep.property(\"[0]\").equal(\n        \"label_levels.initial must be <= label_levels.max\");\n    });\n  });\n});\n"]}