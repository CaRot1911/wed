{"version":3,"file":"convert-test.js","sourceRoot":"","sources":["../../../../../lib/tests/wed/convert-test.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;;;;;;;IAOH,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IAE3B,QAAQ,CAAC,SAAS,EAAE;QAClB,IAAI,MAAiB,CAAC;QACtB,IAAI,QAAsB,CAAC;QAE3B,MAAM,CAAC;YACL,MAAM,GAAG,IAAI,SAAS,EAAE,CAAC;YACzB,QAAQ;gBACN,IAAI,mBAAY,CAAC,qDAAqD,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QAEH,kBAAkB,IAAY,EAAE,WAA4B;YAA5B,4BAAA,EAAA,mBAA4B;YAC1D,IAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;YAC9C,IAAM,UAAU,GAAM,aAAa,SAAM,CAAC;YAE1C,4EAA4E;YAC5E,IAAM,EAAE,GAAG,WAAW,IAAI,QAAQ,CAAC,IAAI,CAAC;YACxC,IAAM,YAAY,GAAM,aAAa,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,UAAO,CAAC;YAEjE,QAAQ,CAAC,EAAE,EAAE;gBACX,IAAI,MAAc,CAAC;gBACnB,IAAI,QAAgB,CAAC;gBACrB,MAAM,CAAC,cAAM,OAAA,OAAO,CAAC,GAAG,CAAC;oBACvB,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI;wBACrC,MAAM,GAAG,IAAI,CAAC;oBAChB,CAAC,CAAC;oBACF,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI;wBACvC,QAAQ,GAAG,IAAI,CAAC;oBAClB,CAAC,CAAC;iBAAC,CAAC,EANO,CAMP,CAAC,CAAC;gBAER,EAAE,CAAC,IAAI,EAAE;oBACP,IAAM,IAAI,GAAG,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,iBAAiB,CAAC;yBAC3D,eAAe,CAAC;oBACnB,IAAM,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAgB,CAAC;oBACtE,wEAAwE;oBACxE,mCAAmC;oBACnC,MAAM,CAAC,KAAK,CAAI,IAAI,CAAC,SAAS,OAAI,EAAE,QAAQ,CAAC,CAAC;gBAChD,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC;QAED,2CAA2C;QAC3C,QAAQ,CAAC,4BAA4B,CAAC,CAAC;QACvC,QAAQ,CAAC,6BAA6B,EAAE,IAAI,CAAC,CAAC;QAC9C,QAAQ,CAAC,yCAAyC,CAAC,CAAC;QACpD,QAAQ,CAAC,iCAAiC,EAAE,IAAI,CAAC,CAAC;QAClD,0CAA0C;IAC5C,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport * as browsers from \"wed/browsers\";\nimport * as convert from \"wed/convert\";\n\nimport { DataProvider } from \"../util\";\n\nconst assert = chai.assert;\n\ndescribe(\"convert\", () => {\n  let parser: DOMParser;\n  let provider: DataProvider;\n\n  before(() => {\n    parser = new DOMParser();\n    provider =\n      new DataProvider(\"/base/build/standalone/lib/tests/convert_test_data/\");\n  });\n\n  function makeTest(name: string, differsOnIE: boolean = false): void {\n    const convertedName = name.replace(/ /g, \"-\");\n    const sourcePath = `${convertedName}.xml`;\n\n    // If the test differs on IE and we are on IE, then add -ie to the basename.\n    const ie = differsOnIE && browsers.MSIE;\n    const expectedPath = `${convertedName + (ie ? \"-ie\" : \"\")}.html`;\n\n    describe(\"\", () => {\n      let source: string;\n      let expected: string;\n      before(() => Promise.all([\n        provider.getText(sourcePath).then((data) => {\n          source = data;\n        }),\n        provider.getText(expectedPath).then((data) => {\n          expected = data;\n        })]));\n\n      it(name, () => {\n        const root = parser.parseFromString(source, \"application/xml\")\n          .documentElement;\n        const html = convert.toHTMLTree(window.document, root) as HTMLElement;\n        // The reason this does not produce a diff seems to be that Mocha's HTML\n        // reporter does not support diffs.\n        assert.equal(`${html.outerHTML}\\n`, expected);\n      });\n    });\n  }\n\n  // tslint:disable:mocha-no-side-effect-code\n  makeTest(\"should convert xml to html\");\n  makeTest(\"should encode name prefixes\", true);\n  makeTest(\"should encode dashes in attribute names\");\n  makeTest(\"should encode namespace changes\", true);\n  // tslint:enable:mocha-no-side-effect-code\n});\n"]}