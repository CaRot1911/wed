{"version":3,"file":"input-trigger-test.js","sourceRoot":"","sources":["../../../../../lib/tests/wed/input-trigger-test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { assert } from \"chai\";\nimport mergeOptions from \"merge-options\";\n\nimport { Editor } from \"wed/editor\";\nimport { GUISelector } from \"wed/gui-selector\";\nimport { InputTrigger } from \"wed/input-trigger\";\nimport { makeSplitMergeInputTrigger } from \"wed/input-trigger-factory\";\nimport * as key from \"wed/key\";\nimport { BACKSPACE, DELETE, ENTER } from \"wed/key-constants\";\nimport { Mode } from \"wed/mode\";\nimport { Options} from \"wed/options\";\n\nimport * as globalConfig from \"../base-config\";\nimport { makeFakePasteEvent } from \"../util\";\nimport { EditorSetup } from \"../wed-test-util\";\n\nconst options: Options = {\n  schema: \"/base/build/schemas/tei-simplified-rng.js\",\n  mode: {\n    path: \"wed/modes/generic/generic\",\n    options: {\n      metadata: \"/base/build/schemas/tei-metadata.json\",\n    },\n    // We set a submode that operates on teiHeader so as to be able to test that\n    // input triggers operate only on their own region.\n    submode: {\n      method: \"selector\",\n      selector: \"TEI>teiHeader\",\n      mode: {\n        path: \"wed/modes/generic/generic\",\n        options: {\n          metadata: \"/base/build/schemas/tei-metadata.json\",\n        },\n      },\n    },\n  },\n};\n\n// This is an ad-hoc function meant for these tests *only*. The XML\n// serialization adds an xmlns declaration that we don't care for. So...\nfunction cleanNamespace(str: string): string {\n  return str.replace(/ xmlns=\".*?\"/, \"\");\n}\n\ndescribe(\"InputTrigger\", () => {\n  let setup: EditorSetup;\n  let editor: Editor;\n  let mode: Mode<{}>;\n  const mappings: Record<string, string> =\n    // tslint:disable-next-line:no-http-string\n    { \"\": \"http://www.tei-c.org/ns/1.0\" };\n  let pSelector: GUISelector;\n  let pInBody: Element;\n\n  before(() => {\n    pSelector = GUISelector.fromDataSelector(\"p\", mappings);\n  });\n\n  beforeEach(() => {\n    setup = new EditorSetup(\n      \"/base/build/standalone/lib/tests/input_trigger_test_data/\\\nsource_converted.xml\",\n      mergeOptions(globalConfig.config, options),\n      document);\n    ({ editor } = setup);\n    return setup.init().then(() => {\n      mode = editor.modeTree.getMode(editor.guiRoot);\n      pInBody = editor.dataRoot.querySelector(\"body p\")!;\n    });\n  });\n\n  afterEach(() => {\n    setup.restore();\n    // tslint:disable-next-line:no-any\n    (editor as any) = undefined;\n  });\n\n  function pasteTest(p: Element): number {\n    const trigger = new InputTrigger(editor, mode, pSelector);\n    let seen = 0;\n    trigger.addKeyHandler(key.makeKey(\";\"), (evType, el) => {\n      assert.equal(evType, \"paste\");\n      assert.equal(el, p);\n      seen++;\n    });\n    // Synthetic event\n    const event = makeFakePasteEvent({\n      types: [\"text/plain\"],\n      getData: () => \"abc;def\",\n    });\n    editor.caretManager.setCaret(p, 0);\n    editor.$guiRoot.trigger(event);\n    return seen;\n  }\n\n  function keydownTest(p: Element): number {\n    const trigger = new InputTrigger(editor, mode, pSelector);\n    let seen = 0;\n    trigger.addKeyHandler(ENTER,\n                          (evType, el, ev) => {\n                            assert.equal(evType, \"keydown\");\n                            assert.equal(el, p);\n                            ev.stopImmediatePropagation();\n                            seen++;\n                          });\n\n    // Synthetic event\n    editor.caretManager.setCaret(p, 0);\n    editor.type(ENTER);\n    return seen;\n  }\n\n  function keypressTest(p: Element): number {\n    const trigger = new InputTrigger(editor, mode, pSelector);\n    let seen = 0;\n    trigger.addKeyHandler(key.makeKey(\";\"),\n                          (evType, el, ev) => {\n                            assert.equal(evType, \"keypress\");\n                            assert.equal(el, p);\n                            ev.stopImmediatePropagation();\n                            seen++;\n                          });\n\n    editor.caretManager.setCaret(p, 0);\n    editor.type(\";\");\n    return seen;\n  }\n\n  it(\"triggers on paste events\", () => {\n    assert.equal(pasteTest(pInBody), 1);\n  });\n\n  it(\"triggers on keydown events\", () => {\n    assert.equal(keydownTest(pInBody), 1);\n  });\n\n  it(\"triggers on keypress events\", () => {\n    assert.equal(keypressTest(pInBody), 1);\n  });\n\n  it(\"does not trigger on unimportant input events\", () => {\n    const trigger = new InputTrigger(editor, mode, pSelector);\n    let seen = 0;\n    const p = pInBody;\n    trigger.addKeyHandler(key.makeKey(\";\"), () => {\n      seen++;\n    });\n\n    editor.caretManager.setCaret(p, 0);\n    editor.type(\":\");\n    assert.equal(seen, 0);\n  });\n\n  // The following tests need to modify the document in significant ways, so we\n  // use input_trigger_factory to create an input_trigger that does something\n  // significant.\n  it(\"does not try to act on undo/redo changes\", () => {\n    makeSplitMergeInputTrigger(\n      editor, mode, pSelector, key.makeKey(\";\"), BACKSPACE, DELETE);\n    let ps = editor.dataRoot.querySelectorAll(\"body p\");\n    assert.equal(ps.length, 1);\n    editor.caretManager.setCaret(ps[0], 0);\n    // Synthetic event\n    const event = makeFakePasteEvent({\n      types: [\"text/plain\"],\n      getData: () => \"ab;cd;ef\",\n    });\n    editor.$guiRoot.trigger(event);\n\n    ps = editor.dataRoot.querySelectorAll(\"body p\");\n    assert.equal(ps.length, 3);\n    assert.equal(cleanNamespace(ps[0].outerHTML), \"<p>ab</p>\");\n    assert.equal(cleanNamespace(ps[1].outerHTML), \"<p>cd</p>\");\n    assert.equal(cleanNamespace(ps[2].outerHTML),\n                 \"<p>efBlah blah <term>blah</term><term>blah2</term> blah.</p>\",\n                 \"first split: 3rd part\");\n\n    editor.undo();\n    ps = editor.dataRoot.querySelectorAll(\"body p\");\n    assert.equal(ps.length, 1);\n    assert.equal(cleanNamespace(ps[0].outerHTML),\n                 \"<p>Blah blah <term>blah</term><term>blah2</term> blah.</p>\",\n                 \"after undo\");\n\n    editor.redo();\n    ps = editor.dataRoot.querySelectorAll(\"body p\");\n    assert.equal(ps.length, 3, \"after redo: length\");\n    assert.equal(cleanNamespace(ps[0].outerHTML), \"<p>ab</p>\",\n                 \"after redo: 1st part\");\n    assert.equal(cleanNamespace(ps[1].outerHTML), \"<p>cd</p>\",\n                 \"after redo: 2nd part\");\n    assert.equal(cleanNamespace(ps[2].outerHTML),\n                 \"<p>efBlah blah <term>blah</term><term>blah2</term> blah.</p>\",\n                 \"after redo: 3rd part\");\n  });\n\n  describe(\"respects mode regions\", () => {\n    let pInHeader: Element;\n\n    beforeEach(() => {\n      pInHeader = editor.dataRoot.querySelector(\"teiHeader p\")!;\n      assert.isDefined(pInHeader);\n    });\n\n    it(\"ignores paste events in the wrong region\", () => {\n      assert.equal(pasteTest(pInHeader), 0);\n    });\n\n    it(\"ignores on keydown events in the wrong region\", () => {\n      assert.equal(keydownTest(pInHeader), 0);\n    });\n\n    it(\"ignores on keypress events in the wrong region\", () => {\n      assert.equal(keypressTest(pInHeader), 0);\n    });\n  });\n});\n\n//  LocalWords:  requirejs wedroot wedframe metas js rng RequireJS cd\n//  LocalWords:  Mangalam MPL Dubeau jquery jQuery tei keypress chai\n//  LocalWords:  keydown InputTrigger\n"]}