{"version":3,"file":"input-trigger-factory-test.js","sourceRoot":"","sources":["../../../../../lib/tests/wed/input-trigger-factory-test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { Editor } from \"wed/editor\";\nimport { GUISelector } from \"wed/gui-selector\";\nimport * as inputTriggerFactory from \"wed/input-trigger-factory\";\nimport * as key from \"wed/key\";\nimport { BACKSPACE, DELETE, ENTER } from \"wed/key-constants\";\nimport { Mode } from \"wed/mode\";\n\nimport { makeFakePasteEvent } from \"../util\";\nimport { EditorSetup } from \"../wed-test-util\";\n\nconst assert = chai.assert;\n\nconst options = {\n  schema: \"/base/build/schemas/tei-simplified-rng.js\",\n  mode: {\n    path: \"wed/modes/generic/generic\",\n    options: {\n      metadata: \"/base/build/schemas/tei-metadata.json\",\n    },\n  },\n};\n\n// This is an ad-hoc function meant for these tests *only*. The XML\n// serialization adds an xmlns declaration that we don't care for. So...\nfunction cleanNamespace(str: string): string {\n  return str.replace(/ xmlns=\".*?\"/, \"\");\n}\n\ndescribe(\"input_trigger_factory\", () => {\n  let setup: EditorSetup;\n  let editor: Editor;\n  let mode: Mode;\n  const dataDir = \"/base/build/standalone/lib/tests/input_trigger_test_data\";\n\n  // tslint:disable-next-line:mocha-no-side-effect-code\n  const srcStack: string[] = [`${dataDir}/source_converted.xml`];\n  // tslint:disable-next-line:mocha-no-side-effect-code\n  const source2: string = `${dataDir}/source2_converted.xml`;\n  // tslint:disable-next-line:mocha-no-side-effect-code\n  const source3: string = `${dataDir}/source3_converted.xml`;\n  // tslint:disable-next-line:mocha-no-side-effect-code\n  const pSelector = GUISelector.fromDataSelector(\n    \"p\",\n    // tslint:disable-next-line:no-http-string\n    { \"\": \"http://www.tei-c.org/ns/1.0\" });\n\n  beforeEach(() => {\n    setup = new EditorSetup(srcStack[0], options, document);\n    ({ editor } = setup);\n    return setup.init().then(() => {\n      mode = editor.modeTree.getMode(editor.guiRoot);\n    });\n  });\n\n  afterEach(() => {\n    setup.restore();\n\n    // tslint:disable-next-line:no-any\n    (editor as any) = undefined;\n  });\n\n  function mit(name: string, fn: () => void): void {\n    it(name, () => {\n      fn();\n      // We want to make sure the changes do not screw up validation and we\n      // want to catch these errors in the test, rather than the hook.\n      // tslint:disable-next-line:no-any\n      (editor.validator as any)._validateUpTo(editor.dataRoot, -1);\n    });\n  }\n\n  describe(\"makeSplitMergeInputTrigger creates an InputTrigger that\", () => {\n    // tslint:disable:mocha-no-side-effect-code\n    mit(\"handles a split triggered by a keypress event\", () => {\n      inputTriggerFactory.makeSplitMergeInputTrigger(\n        editor, mode, pSelector, key.makeKey(\";\"), BACKSPACE, DELETE);\n\n      let ps = editor.dataRoot.querySelectorAll(\"p\");\n      editor.caretManager.setCaret(ps[ps.length - 1].firstChild, 4);\n      editor.type(\";\");\n\n      ps = editor.dataRoot.querySelectorAll(\"body p\");\n      assert.equal(ps.length, 2);\n      assert.equal(cleanNamespace(ps[0].outerHTML), \"<p>Blah</p>\");\n      assert.equal(cleanNamespace(ps[1].outerHTML),\n                   \"<p> blah <term>blah</term><term>blah2</term> blah.</p>\");\n    });\n\n    mit(\"handles a split triggered by a keydown event\", () => {\n      inputTriggerFactory.makeSplitMergeInputTrigger(\n        editor, mode, pSelector, ENTER, BACKSPACE, DELETE);\n\n      let ps = editor.dataRoot.getElementsByTagName(\"p\");\n      editor.caretManager.setCaret(ps[ps.length - 1].firstChild, 4);\n      editor.type(ENTER);\n\n      ps = editor.dataRoot.querySelectorAll(\"body p\");\n      assert.equal(ps.length, 2);\n      assert.equal(cleanNamespace(ps[0].outerHTML), \"<p>Blah</p>\");\n      assert.equal(cleanNamespace(ps[1].outerHTML),\n                   \"<p> blah <term>blah</term><term>blah2</term> blah.</p>\");\n    });\n\n    mit(\"handles a split triggered by a paste event\", () => {\n      inputTriggerFactory.makeSplitMergeInputTrigger(\n        editor, mode, pSelector, key.makeKey(\";\"), BACKSPACE, DELETE);\n\n      let ps = editor.dataRoot.querySelectorAll(\"body p\");\n      assert.equal(ps.length, 1);\n\n      // Synthetic event\n      const event = makeFakePasteEvent({\n        types: [\"text/plain\"],\n        getData: () => \"ab;cd;ef\",\n      });\n      editor.caretManager.setCaret(ps[0], 0);\n      editor.$guiRoot.trigger(event);\n\n      ps = editor.dataRoot.querySelectorAll(\"body p\");\n      assert.equal(ps.length, 3);\n      assert.equal(cleanNamespace(ps[0].outerHTML), \"<p>ab</p>\");\n      assert.equal(cleanNamespace(ps[1].outerHTML), \"<p>cd</p>\");\n      assert.equal(\n        cleanNamespace(ps[2].outerHTML),\n        \"<p>efBlah blah <term>blah</term><term>blah2</term> blah.</p>\");\n    });\n  });\n\n  describe(\"makeSplitMergeInputTrigger creates an InputTrigger that\", () => {\n    before(() => {\n      srcStack.unshift(source2);\n    });\n    after(() => {\n      srcStack.shift();\n    });\n\n    mit(\"backspaces in phantom text\", () => {\n      inputTriggerFactory.makeSplitMergeInputTrigger(\n        editor, mode, pSelector, ENTER, BACKSPACE, DELETE);\n\n      editor.caretManager.setCaret(\n        editor.guiRoot.querySelector(\".p>.ref\")!.firstChild, 1);\n      editor.type(BACKSPACE);\n\n      assert.equal(editor.dataRoot.querySelectorAll(\"body>p\").length, 1);\n    });\n\n    mit(\"deletes in phantom text\", () => {\n      inputTriggerFactory.makeSplitMergeInputTrigger(\n        editor, mode, pSelector, ENTER, BACKSPACE, DELETE);\n\n      editor.caretManager.setCaret(\n        editor.guiRoot.querySelector(\".p>.ref\")!.lastChild!.previousSibling, 0);\n      editor.type(DELETE);\n\n      assert.equal(editor.dataRoot.querySelectorAll(\"body>p\").length, 1);\n    });\n  });\n\n  describe(\"makeSplitMergeInputTrigger creates an InputTrigger that\", () => {\n    before(() => {\n      srcStack.unshift(source3);\n    });\n    after(() => {\n      srcStack.shift();\n    });\n\n    mit(\"merges on BACKSPACE\", () => {\n      inputTriggerFactory.makeSplitMergeInputTrigger(\n        editor, mode, pSelector, ENTER, BACKSPACE, DELETE);\n\n      let ps = editor.dataRoot.querySelectorAll(\"body>p\");\n      assert.equal(ps.length, 2,\n                   \"there should be 2 paragraphs before backspacing\");\n\n      editor.caretManager.setCaret(ps[1].firstChild, 0);\n      editor.type(BACKSPACE);\n\n      ps = editor.dataRoot.querySelectorAll(\"body>p\");\n      assert.equal(ps.length, 1,\n                   \"there should be 1 paragraph after backspacing\");\n      assert.equal(cleanNamespace(ps[0].outerHTML), \"<p>BarFoo</p>\");\n    });\n\n    mit(\"merges on BACKSPACE, and can undo\", () => {\n      inputTriggerFactory.makeSplitMergeInputTrigger(\n        editor, mode, pSelector, ENTER, BACKSPACE, DELETE);\n\n      let ps = editor.dataRoot.querySelectorAll(\"body>p\");\n      assert.equal(ps.length, 2,\n                   \"there should be 2 paragraphs before backspacing\");\n\n      editor.caretManager.setCaret(ps[1].firstChild, 0);\n      editor.type(BACKSPACE);\n\n      ps = editor.dataRoot.querySelectorAll(\"body>p\");\n      assert.equal(ps.length, 1,\n                   \"there should be 1 paragraph after backspacing\");\n      assert.equal(cleanNamespace(ps[0].outerHTML), \"<p>BarFoo</p>\");\n\n      editor.undo();\n\n      ps = editor.dataRoot.querySelectorAll(\"body>p\");\n      assert.equal(ps.length, 2, \"there should be 2 paragraphs after undo\");\n      assert.equal(cleanNamespace(ps[0].outerHTML), \"<p>Bar</p>\");\n      assert.equal(cleanNamespace(ps[1].outerHTML), \"<p>Foo</p>\");\n    });\n\n    mit(\"merges on DELETE\", () => {\n      inputTriggerFactory.makeSplitMergeInputTrigger(\n        editor, mode, pSelector, ENTER, BACKSPACE, DELETE);\n\n      let ps = editor.dataRoot.querySelectorAll(\"body>p\");\n      assert.equal(ps.length, 2,\n                   \"there should be 2 paragraphs before delete\");\n\n      editor.caretManager.setCaret(ps[0].lastChild,\n                                   ps[0].lastChild!.nodeValue!.length);\n      editor.type(DELETE);\n\n      ps = editor.dataRoot.querySelectorAll(\"body>p\");\n      assert.equal(ps.length, 1,\n                   \"there should be 1 paragraph after delete\");\n      assert.equal(cleanNamespace(ps[0].outerHTML), \"<p>BarFoo</p>\");\n    });\n\n    mit(\"merges on DELETE, and can undo\", () => {\n      inputTriggerFactory.makeSplitMergeInputTrigger(\n        editor, mode, pSelector, ENTER, BACKSPACE, DELETE);\n\n      let ps = editor.dataRoot.querySelectorAll(\"body>p\");\n      assert.equal(ps.length, 2,\n                   \"there should be 2 paragraphs before delete\");\n\n      editor.caretManager.setCaret(ps[0].lastChild,\n                                   ps[0].lastChild!.nodeValue!.length);\n      editor.type(DELETE);\n\n      ps = editor.dataRoot.querySelectorAll(\"body>p\");\n      assert.equal(ps.length, 1,\n                   \"there should be 1 paragraph after delete\");\n      assert.equal(cleanNamespace(ps[0].outerHTML), \"<p>BarFoo</p>\");\n\n      editor.undo();\n      ps = editor.dataRoot.querySelectorAll(\"body>p\");\n      assert.equal(ps.length, 2, \"there should be 2 paragraphs after undo\");\n      assert.equal(cleanNamespace(ps[0].outerHTML), \"<p>Bar</p>\");\n      assert.equal(cleanNamespace(ps[1].outerHTML), \"<p>Foo</p>\");\n    });\n  });\n});\n\n// LocalWords:  chai jquery tei InputTrigger\n"]}