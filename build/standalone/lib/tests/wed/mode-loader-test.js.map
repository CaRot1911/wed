{"version":3,"file":"mode-loader-test.js","sourceRoot":"","sources":["../../../../../lib/tests/wed/mode-loader-test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, use } from \"chai\";\nimport * as sinon from \"sinon\";\nimport * as sinonChai from \"sinon-chai\";\n\nimport { expectError } from \"tests/util\";\nimport { Editor } from \"wed/editor\";\nimport { ModeLoader } from \"wed/mode-loader\";\n\nuse(sinonChai);\n\n// tslint:disable-next-line:completed-docs\nclass FakeMode {\n  public initialized: boolean = false;\n\n  // tslint:disable-next-line:no-any\n  constructor(public readonly editor: any, public readonly options: any) {}\n\n  init(): Promise<void> {\n    this.initialized = true;\n    return Promise.resolve();\n  }\n}\n\n// tslint:disable-next-line:missing-jsdoc\ndescribe(\"ModeLoader\", () => {\n  let loader: ModeLoader;\n  // tslint:disable-next-line:no-any\n  let runtime: any;\n  // Yes, we cheat with a typecast.\n  // tslint:disable-next-line:no-any mocha-no-side-effect-code\n  const editor = { editor: true } as any as Editor;\n  const options = { options: true };\n  beforeEach(() => {\n    const runtime_ = sinon.stub({\n      // tslint:disable-next-line:no-empty\n      resolveModules: () => {},\n    });\n    runtime = runtime_;\n    loader = new ModeLoader(editor, runtime);\n  });\n\n  describe(\"#initMode\", () => {\n    it(\"fails if we cannot load\", async () => {\n      runtime.resolveModules.throws(new Error(\"cannot load\"));\n      await expectError(async () => await loader.initMode(\"moo\", options),\n                        Error, \"cannot load\");\n    });\n\n    it(\"by default, tries multiple module names\", async () => {\n      runtime.resolveModules.throws(new Error(\"cannot load\"));\n      try {\n        await loader.initMode(\"moo\", {});\n      }\n      // tslint:disable-next-line:no-empty\n      catch (ex) {}\n      expect(runtime).to.have.property(\"resolveModules\").to.have.callCount(4);\n      expect(runtime.resolveModules.firstCall).to.have.been.calledWith(\"moo\");\n      expect(runtime.resolveModules.secondCall)\n        .to.have.been.calledWith(\"wed/modes/moo/moo\");\n      expect(runtime.resolveModules.thirdCall)\n        .to.have.been.calledWith(\"wed/modes/moo/moo-mode\");\n      expect(runtime.resolveModules.lastCall)\n        .to.have.been.calledWith(\"wed/modes/moo/moo_mode\");\n    });\n\n    it(\"fails on first attempt if the path has a forward slash\", async () => {\n      runtime.resolveModules.throws(new Error(\"cannot load\"));\n      try {\n        await loader.initMode(\"moo/foo\", options);\n      }\n      // tslint:disable-next-line:no-empty\n      catch (ex) {}\n      expect(runtime).to.have.property(\"resolveModules\").to.have.callCount(1);\n      expect(runtime.resolveModules).to.have.been.calledWith(\"moo/foo\");\n    });\n\n    it(\"initializes the module after loading it\", async () => {\n      runtime.resolveModules.returns([{\n        Mode: FakeMode,\n      }]);\n      const loaded = await loader.initMode(\"moo/foo\", options);\n      expect(loaded).to.be.instanceof(FakeMode);\n      expect(loaded).to.have.property(\"initialized\").be.true;\n    });\n\n    it(\"creates the mode with correct parameters\", async () => {\n      // tslint:disable-next-line:variable-name\n      const ModeConstructor = sinon.spy(function Mode(): FakeMode {\n          return sinon.createStubInstance(FakeMode);\n      });\n      runtime.resolveModules.returns([{\n        Mode: ModeConstructor,\n      }]);\n      await loader.initMode(\"moo/foo\", options);\n      expect(ModeConstructor).to.have.been.calledOnce;\n      expect(ModeConstructor).to.have.been.calledWith(editor, options);\n    });\n\n    it(\"fails if the module fails to init\", async () => {\n      runtime.resolveModules.returns([{\n        Mode: function Mode(): FakeMode {\n          const ret = sinon.createStubInstance(FakeMode);\n          ret.init.returns(Promise.reject(new Error(\"failed\")));\n          return ret;\n        },\n      }]);\n      expectError(async () =>  await loader.initMode(\"moo/foo\", options),\n                  Error, \"failed\");\n    });\n  });\n});\n"]}