{"version":3,"file":"labelman-test.js","sourceRoot":"","sources":["../../../../../lib/tests/wed/labelman-test.ts"],"names":[],"mappings":";;;;;;;;;;;IAOA,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IAE3B,QAAQ,CAAC,UAAU,EAAE;QACnB,IAAI,GAAoC,CAAC;QAEzC,UAAU,CAAC;YACT,GAAG,GAAG,IAAI,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gBAAgB,EAAE;YACnB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC;YAC5C,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oBAAoB,EAAE;YACvB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC;YAC5C,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC;YAE5C,gBAAgB;YAChB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC;YACxC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC;YACxC,8BAA8B;YAC9B,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,SAAS,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,aAAa,EAAE;YAChB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gBAAgB,EAAE;YACnB,GAAG,CAAC,UAAU,EAAE,CAAC;YACjB,GAAG,CAAC,UAAU,EAAE,CAAC;YACjB,GAAG,CAAC,UAAU,EAAE,CAAC;YACjB,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACzB,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAEzB,GAAG,CAAC,aAAa,EAAE,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;;AAEH,sEAAsE;AACtE,8CAA8C","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport * as labelman from \"wed/labelman\";\n\nconst assert = chai.assert;\n\ndescribe(\"labelman\", () => {\n  let man: labelman.AlphabeticLabelManager;\n\n  beforeEach(() => {\n    man = new labelman.AlphabeticLabelManager(\"sense\");\n  });\n\n  it(\"allocate label\", () => {\n    assert.equal(man.allocateLabel(\"S.z\"), \"a\");\n    assert.equal(man.allocateLabel(\"S.z\"), \"a\");\n  });\n\n  it(\"find label from id\", () => {\n    assert.equal(man.allocateLabel(\"S.z\"), \"a\");\n    assert.equal(man.allocateLabel(\"S.x\"), \"b\");\n\n    // Actual tests.\n    assert.equal(man.idToLabel(\"S.z\"), \"a\");\n    assert.equal(man.idToLabel(\"S.x\"), \"b\");\n    // ID without allocated label.\n    assert.equal(man.idToLabel(\"S.ttt\"), undefined);\n  });\n\n  it(\"next number\", () => {\n    assert.equal(man.nextNumber(), 1);\n    assert.equal(man.nextNumber(), 2);\n  });\n\n  it(\"deallocate all\", () => {\n    man.nextNumber();\n    man.nextNumber();\n    man.nextNumber();\n    man.allocateLabel(\"S.z\");\n    man.allocateLabel(\"S.x\");\n\n    man.deallocateAll();\n    assert.equal(man.nextNumber(), 1);\n    assert.equal(man.allocateLabel(\"S.z\"), \"b\");\n  });\n});\n\n//  LocalWords:  Dubeau MPL Mangalam allocateLabel nextNumber labelman\n//  LocalWords:  deallocateAll deallocate chai\n"]}