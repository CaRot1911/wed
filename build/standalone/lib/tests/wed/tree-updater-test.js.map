{"version":3,"sources":["../../../tests/wed/tree-updater-test.ts"],"names":[],"mappings":"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","file":"tree-updater-test.js","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\"use strict\";\n\nimport * as convert from \"wed/convert\";\nimport { DLoc, DLocRoot } from \"wed/dloc\";\nimport { childByClass, childrenByClass, indexOf } from \"wed/domutil\";\nimport { BeforeDeleteNodeEvent, BeforeInsertNodeAtEvent, DeleteNodeEvent,\n         InsertNodeAtEvent, SetAttributeNSEvent, SetTextNodeValueEvent,\n         TextInsertionResult, TreeUpdater,\n         TreeUpdaterEvents } from \"wed/tree-updater\";\n\nimport * as sourceXML from \"../tree_updater_test_data/source_converted.xml\";\n\nconst assert = chai.assert;\n\nfunction filterSetTextNodeValue(ev: TreeUpdaterEvents):\nev is SetTextNodeValueEvent {\n  return ev.name === \"SetTextNodeValue\";\n}\n\nfunction filterSetAttributeNS(ev: TreeUpdaterEvents):\nev is SetAttributeNSEvent {\n  return ev.name === \"SetAttributeNS\";\n}\n\nfunction filterInsertNodeAtAndBefore(ev: TreeUpdaterEvents):\nev is (InsertNodeAtEvent | BeforeInsertNodeAtEvent) {\n  return ev.name === \"InsertNodeAt\" || ev.name === \"BeforeInsertNodeAt\";\n}\n\nfunction filterBeforeDeleteNode(ev: TreeUpdaterEvents):\nev is BeforeDeleteNodeEvent {\n  return ev.name === \"BeforeDeleteNode\";\n}\n\nfunction filterDeleteNode(ev: TreeUpdaterEvents): ev is DeleteNodeEvent {\n  return ev.name === \"DeleteNode\";\n}\n\ndescribe(\"TreeUpdater\", () => {\n  let root: HTMLElement;\n  let htmlTree: Node;\n\n  before(() => {\n    root = document.createElement(\"div\");\n    document.body.appendChild(root);\n    new DLocRoot(root);\n\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(sourceXML, \"text/xml\");\n    htmlTree = convert.toHTMLTree(document, xmlDoc.firstElementChild!);\n  });\n\n  let tu: TreeUpdater;\n\n  beforeEach(() => {\n    root.appendChild(htmlTree.cloneNode(true));\n    tu = new TreeUpdater(root);\n  });\n\n  afterEach(() => {\n    while (root.lastChild !== null) {\n      root.removeChild(root.lastChild);\n    }\n  });\n\n  after(() => {\n    document.body.removeChild(root);\n  });\n\n  // tslint:disable-next-line:completed-docs\n  class Listener {\n    expected: Record<string, number | undefined> = {\n      BeforeInsertNodeAt: 0,\n      InsertNodeAt: 0,\n      SetTextNodeValue: 0,\n      BeforeDeleteNode: 0,\n      DeleteNode: 0,\n      SetAttributeNS: 0,\n      Changed: undefined,\n    };\n\n    _events: Record<string, number> = Object.create(null);\n\n    constructor(updater: TreeUpdater) {\n      updater.events.subscribe((ev) => {\n        const name = ev.name;\n        if (this._events[name] === undefined) {\n          this._events[name] = 0;\n        }\n\n        this._events[name]++;\n      });\n    }\n\n    check(): void {\n      // The event \"changed\" is special. We should get one \"changed\" event per\n      // other event.\n      const keys = Object.keys(this.expected);\n      if (this.expected.Changed === undefined) {\n        let total = 0;\n        for (const k of keys) {\n          if (k === \"Changed\") {\n            continue;\n          }\n          total += this.expected[k]!;\n        }\n        this.expected.Changed = total;\n      }\n\n      for (const k of keys) {\n        let actual = this._events[k];\n        if (actual === undefined) {\n          actual = 0;\n        }\n        assert.equal(actual, this.expected[k], `number of events ${k}`);\n      }\n\n      for (const k of Object.keys(this._events)) {\n        assert.isDefined(this.expected[k], `unaccounted event ${k}`);\n      }\n    }\n  }\n\n  describe(\"insertNodeAt\", () => {\n    it(\"fails on fragments\", () => {\n      const top = root.querySelector(\".p\");\n      const node = document.createDocumentFragment();\n      assert.throws(tu.insertNodeAt.bind(tu, top, 0, node), Error,\n                    \"document fragments cannot be passed to insertNodeAt\");\n    });\n  });\n\n  describe(\"splitAt\", () => {\n    it(\"fails on node which is not child of the top\", () => {\n      const top = root.querySelector(\".p\");\n      const node = root.querySelector(\".title\");\n      assert.throws(tu.splitAt.bind(tu, top, node, 0), Error,\n                    \"split location is not inside top\");\n    });\n\n    it(\"fails if splitting would denormalize an element\", () => {\n      const node = root.querySelector(\".title\")!;\n      assert.throws(tu.splitAt.bind(tu, node.firstChild, node.firstChild, 2),\n                    Error,\n                    \"splitAt called in a way that would result in \" +\n                    \"two adjacent text nodes\");\n    });\n\n    it(\"splitting recursively, one level of depth generates appropriate events\",\n       () => {\n         const node = root.querySelector(\".title\")!;\n         const parent = node.parentNode!;\n\n         const listener = new Listener(tu);\n         const calls = [\n           // Insertion of a text node into <title>.\n           [parent, 0],\n           // Insertion of the completed 2nd half into the DOM tree.\n           [parent, 1],\n         ];\n         let callsIx = 0;\n         tu.events.filter(filterInsertNodeAtAndBefore)\n           .subscribe((ev) => {\n             const call = calls[callsIx];\n             assert.equal(ev.parent, call[0]);\n             assert.equal(ev.index, call[1]);\n             if (ev.name === \"InsertNodeAt\") {\n               callsIx++;\n             }\n           });\n         listener.expected.InsertNodeAt = 2;\n         listener.expected.BeforeInsertNodeAt = 2;\n\n         const formerParent = node.parentNode;\n         tu.events.filter(filterBeforeDeleteNode).subscribe((ev) => {\n           assert.equal(ev.node, node);\n           assert.isNotNull(ev.node.parentNode);\n         });\n         listener.expected.BeforeDeleteNode = 1;\n\n         tu.events.filter(filterDeleteNode).subscribe((ev) => {\n           assert.equal(ev.node, node);\n           assert.isNull(ev.node.parentNode);\n           assert.equal(ev.formerParent, formerParent);\n         });\n         listener.expected.DeleteNode = 1;\n\n         tu.splitAt(node, node.firstChild!, 2);\n\n         // Check that we're doing what we think we're doing.\n         assert.equal((parent.firstChild as HTMLElement).outerHTML,\n                      `<div class=\"title _local_title \\\n_xmlns_http://www.tei-c.org/ns/1.0 _real\">ab</div>`, \"first half\");\n         assert.equal((parent.childNodes[1] as HTMLElement).outerHTML,\n                      `<div class=\"title _local_title \\\n_xmlns_http://www.tei-c.org/ns/1.0 _real\">cd</div>`, \"second half\");\n         listener.check();\n       });\n\n    it(\"spliting recursively, at multiple levels does the right work\", () => {\n      const node = root.querySelector(\".quote\")!.firstChild!;\n      const top = root.querySelector(\".text\")!;\n      const body = top.querySelector(\".body\")!;\n      // Drop the nodes from 3 onwards so that future additions don't change\n      // this test.\n      while (body.childNodes[3] !== undefined) {\n        body.removeChild(body.childNodes[3]);\n      }\n      const parent = top.parentNode!;\n\n      const pair = tu.splitAt(top, node, 3);\n\n      const texts = childrenByClass(parent, \"text\");\n      const firstText = texts[0];\n      const nextText = texts[1];\n      // Check that we're doing what we think we're doing.\n      assert.equal(firstText.outerHTML,\n                   `\\\n<div class=\"text _local_text _xmlns_http://www.tei-c.org/ns/1.0 _real\">\\\n<div class=\"body _local_body _xmlns_http://www.tei-c.org/ns/1.0 _real\">\\\n<div class=\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\">blah</div>\\\n<div class=\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\">\\\nbefore \\\n<div class=\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\">\\\nquo</div></div></div></div>`, \"before\");\n      assert.equal(pair[0], firstText);\n      assert.equal(pair[1], nextText);\n      assert.equal(nextText.outerHTML,\n                   `\\\n<div class=\"text _local_text _xmlns_http://www.tei-c.org/ns/1.0 _real\">\\\n<div class=\"body _local_body _xmlns_http://www.tei-c.org/ns/1.0 _real\">\\\n<div class=\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\">\\\n<div class=\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\">\\\nted</div> between \\\n<div class=\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\">\\\nquoted2</div> after</div>\\\n<div class=\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\">\\\n<div class=\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\">\\\nquoted</div>\\\n<div class=\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\">\\\nquoted2</div>\\\n<div class=\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\">\\\nquoted3</div></div>\\\n</div></div>`, \"after\");\n       });\n\n    it(\"does the right thing if spliting at end an element\", () => {\n      const top = root.querySelector(\".body>.p\")!;\n      const node = top.firstChild!;\n      // Make sure we're looking at the right stuff.\n      assert.equal(node.nodeValue!.length, 4);\n      const pair = tu.splitAt(top, node, 4);\n      assert.equal((pair[0] as HTMLElement).outerHTML, `\\\n<div class=\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\">blah</div>`);\n      assert.equal((pair[1] as HTMLElement).outerHTML, `\\\n<div class=\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\"></div>`);\n    });\n  });\n\n  describe(\"insertText\", () => {\n    it(\"generates appropriate events when it modifies a text node\", () => {\n      const node = root.querySelector(\".title\")!.firstChild!;\n      const listener = new Listener(tu);\n      tu.events.filter(filterSetTextNodeValue).subscribe((ev) => {\n        assert.equal(ev.node, node);\n        assert.equal(ev.value, \"abQcd\");\n      });\n      listener.expected.SetTextNodeValue = 1;\n      const { node: textNode, isNew, caret } = tu.insertText(node, 2, \"Q\");\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(textNode, node);\n      assert.isFalse(isNew);\n      assert.equal(textNode!.nodeValue, \"abQcd\");\n      assert.equal(caret.node, textNode);\n      assert.equal(caret.offset, 3);\n      listener.check();\n    });\n\n    function makeSeries(seriesTitle: string,\n                        caretAtEnd: boolean,\n                        adapter: (node: Node,\n                                  offset: number,\n                                  text: string) => TextInsertionResult)\n    : void {\n      describe(seriesTitle, () => {\n        it(\"generates appropriate events when it uses the next text node\",\n           () => {\n             const node = root.querySelector(\".title\")!;\n             const listener = new Listener(tu);\n             tu.events.filter(filterSetTextNodeValue).subscribe((ev) => {\n               assert.equal(ev.node, node.firstChild);\n               assert.equal(ev.value, \"Qabcd\");\n             });\n             listener.expected.SetTextNodeValue = 1;\n\n             const { node: textNode, isNew, caret } = adapter(node, 0, \"Q\");\n\n             // Check that we're doing what we think we're doing.\n             assert.equal(textNode, node.firstChild);\n             assert.isFalse(isNew);\n             assert.equal(textNode!.nodeValue, \"Qabcd\");\n             assert.equal(caret.node, textNode);\n             assert.equal(caret.offset, caretAtEnd ? 1 : 0);\n\n             listener.check();\n           });\n\n        it(\"generates appropriate events when it uses the previous text node\",\n           () => {\n             const node = root.querySelector(\".title\")!;\n\n             const listener = new Listener(tu);\n             tu.events.filter(filterSetTextNodeValue).subscribe((ev) => {\n               assert.equal(ev.node, node.firstChild);\n               assert.equal(ev.value, \"abcdQ\");\n             });\n             listener.expected.SetTextNodeValue = 1;\n\n             const { node: textNode, isNew, caret } = adapter(node, 1, \"Q\");\n\n             // Check that we're doing what we think we're doing.\n             assert.equal(textNode, node.firstChild);\n             assert.isFalse(isNew);\n             assert.equal(textNode!.nodeValue, \"abcdQ\");\n             assert.equal(caret.node, textNode);\n             assert.equal(caret.offset, caretAtEnd ? 5 : 4);\n\n             listener.check();\n           });\n\n        it(\"generates appropriate events when it creates a text node\", () => {\n          const node = root.querySelector(\".title\") as HTMLElement;\n          // tslint:disable-next-line:no-inner-html\n          node.innerHTML = \"\";\n\n          const listener = new Listener(tu);\n          tu.events.filter(filterInsertNodeAtAndBefore)\n            .subscribe((ev) => {\n              assert.equal(ev.parent, node);\n              assert.equal(ev.index, 0);\n              assert.equal(ev.node.nodeValue, \"test\");\n            });\n          listener.expected.InsertNodeAt = 1;\n          listener.expected.BeforeInsertNodeAt = 1;\n\n          const { node: textNode, isNew, caret } = adapter(node, 0, \"test\");\n\n          // Check that we're doing what we think we're doing.\n          assert.equal(textNode, node.firstChild);\n          assert.equal(textNode!.nodeValue, \"test\");\n          assert.isTrue(isNew);\n          assert.equal(caret.node, textNode);\n          assert.equal(caret.offset, caretAtEnd ? 4 : 0);\n\n          listener.check();\n        });\n\n        it(\"does nothing if passed an empty string\", () => {\n          const node = root.querySelector(\".title\")!;\n          const listener = new Listener(tu);\n\n          assert.equal(node.firstChild!.nodeValue, \"abcd\");\n          const { node: textNode, isNew, caret } = adapter(node, 1, \"\");\n\n          // Check that we're doing what we think we're doing.\n          assert.equal(node.firstChild!.nodeValue, \"abcd\");\n          assert.isUndefined(textNode);\n          assert.isFalse(isNew);\n          assert.equal(caret.node, node);\n          assert.equal(caret.offset, 1);\n\n          listener.check();\n        });\n      });\n    }\n\n    // tslint:disable-next-line:mocha-no-side-effect-code\n    makeSeries(\"(caretAtEnd unspecified)\",\n               true,\n               (node, offset, text) => tu.insertText(node, offset, text));\n    // tslint:disable-next-line:mocha-no-side-effect-code\n    makeSeries(\"(caretAtEnd true)\",\n               true,\n               (node, offset, text) => tu.insertText(node, offset, text, true));\n    // tslint:disable-next-line:mocha-no-side-effect-code\n    makeSeries(\"(caretAtEnd false)\",\n               false,\n               (node, offset, text) =>\n               tu.insertText(node, offset, text, false));\n  });\n\n  describe(\"deleteText\", () => {\n    it(\"fails on non-text node\", () => {\n      const node = root.querySelector(\".title\")!;\n      assert.throws(tu.deleteText.bind(tu, node, 0, \"t\"), Error,\n                   \"deleteText called on non-text\");\n    });\n\n    it(\"generates appropriate events when it modifies a text node\", () => {\n      const node = root.querySelector(\".title\")!.firstChild as Text;\n      const listener = new Listener(tu);\n      tu.events.filter(filterSetTextNodeValue).subscribe((ev) => {\n        assert.equal(ev.node, node);\n        assert.equal(ev.value, \"ab\");\n      });\n      listener.expected.SetTextNodeValue = 1;\n\n      tu.deleteText(node, 2, 2);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(node.nodeValue, \"ab\");\n      listener.check();\n    });\n\n    it(\"generates appropriate events when it deletes an empty text node\",\n       () => {\n         const node = root.querySelector(\".title\")!.firstChild as Text;\n         const listener = new Listener(tu);\n\n         tu.events.filter(filterBeforeDeleteNode).subscribe((ev) => {\n           assert.equal(ev.node, node);\n           assert.isNotNull(ev.node.parentNode);\n         });\n         listener.expected.BeforeDeleteNode = 1;\n\n         tu.events.filter(filterDeleteNode).subscribe((ev) => {\n           assert.equal(ev.node, node);\n           assert.isNull(ev.node.parentNode);\n         });\n         listener.expected.DeleteNode = 1;\n\n         tu.deleteText(node, 0, 4);\n         // Check that we're doing what we think we're doing.\n         assert.isNull(node.parentNode);\n         listener.check();\n       });\n  });\n\n  describe(\"setAttribute\", () => {\n    it(\"fails on non-element node\", () => {\n      const node = root.querySelector(\".title\")!.firstChild;\n      assert.throws(tu.setAttribute.bind(tu, node, \"q\", \"ab\"), Error,\n                    \"setAttribute called on non-element\");\n    });\n\n    it(\"generates appropriate events when changing an attribute\", () => {\n      const node = root.querySelector(\".title\")!;\n\n      // Check that the attribute is not set yet.\n      assert.equal(node.getAttribute(\"q\"), undefined);\n\n      const listener = new Listener(tu);\n      tu.events.filter(filterSetAttributeNS).subscribe((ev) => {\n        assert.equal(ev.node, node);\n        assert.equal(ev.ns, \"\");\n        assert.equal(ev.attribute, \"q\");\n        assert.equal(ev.oldValue, undefined);\n        assert.equal(ev.newValue, \"ab\");\n      });\n      listener.expected.SetAttributeNS = 1;\n\n      tu.setAttribute(node, \"q\", \"ab\");\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(node.getAttribute(\"q\"), \"ab\");\n      listener.check();\n    });\n\n    it(\"generates appropriate events when removing an attribute\", () => {\n      const node = root.querySelector(\".title\")!;\n\n      // Set the attribute\n      node.setAttribute(\"q\", \"ab\");\n\n      const listener = new Listener(tu);\n      tu.events.filter(filterSetAttributeNS).subscribe((ev) => {\n        assert.equal(ev.node, node);\n        assert.equal(ev.ns, \"\");\n        assert.equal(ev.attribute, \"q\");\n        assert.equal(ev.oldValue, \"ab\");\n        assert.equal(ev.newValue, null);\n      });\n      listener.expected.SetAttributeNS = 1;\n\n      tu.setAttribute(node, \"q\", null);\n\n      assert.equal(node.getAttribute(\"q\"), undefined, \"value after\");\n      listener.check();\n    });\n  });\n\n  describe(\"insertIntoText\", () => {\n    it(\"fails on non-text node\", () => {\n      const node = root.querySelector(\".title\")!;\n      assert.throws(tu.insertIntoText.bind(tu, node, 0, node), Error,\n                    \"insertIntoText called on non-text\");\n    });\n\n    it(\"fails on undefined node to insert\", () => {\n      const node = root.querySelector(\".title\")!.firstChild;\n      assert.throws(tu.insertIntoText.bind(tu, node, 0, undefined), Error,\n                    \"must pass an actual node to insert\");\n    });\n\n    it(\"generates appropriate events when inserting a new element\", () => {\n      const parent = root.querySelector(\".title\")!;\n      const node = parent.firstChild as Text;\n      const el = document.createElement(\"span\");\n      const listener = new Listener(tu);\n\n      tu.events.filter(filterBeforeDeleteNode).subscribe((ev) => {\n        assert.equal(ev.node, node);\n        assert.isNotNull(ev.node.parentNode);\n      });\n      listener.expected.BeforeDeleteNode = 1;\n\n      tu.events.filter(filterDeleteNode).subscribe((ev) => {\n        assert.equal(ev.node, node);\n        assert.isNull(ev.node.parentNode);\n      });\n      listener.expected.DeleteNode = 1;\n\n      const inaCalls = [\n        [parent, 0],\n        [parent, 1],\n        [parent, 2],\n      ];\n      let inaCallIx = 0;\n      tu.events.filter(filterInsertNodeAtAndBefore)\n        .subscribe((ev) => {\n          const call = inaCalls[inaCallIx];\n          assert.equal(ev.parent, call[0]);\n          assert.equal(ev.index, call[1]);\n          // We don't check ev.node here.\n          if (ev.name === \"InsertNodeAt\") {\n            inaCallIx++;\n          }\n        });\n      listener.expected.InsertNodeAt = 3;\n      listener.expected.BeforeInsertNodeAt = 3;\n\n      const pair = tu.insertIntoText(node, 2, el);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(pair[0].node.nodeValue, \"ab\");\n      assert.equal(pair[0].node.nextSibling, el);\n      assert.equal(pair[0].offset, 2);\n      assert.equal(pair[1].node.nodeValue, \"cd\");\n      assert.equal(pair[1].node.previousSibling, el);\n      assert.equal(pair[1].offset, 0);\n      assert.equal(root.querySelector(\".title\")!.childNodes.length, 3);\n      assert.equal(root.querySelector(\".title\")!.childNodes[1], el);\n\n      listener.check();\n    });\n\n    it(\"works fine with negative offset\", () => {\n      const node = root.querySelector(\".title\")!.firstChild as Text;\n      const parent = node.parentNode;\n      const el = document.createElement(\"span\");\n\n      const listener = new Listener(tu);\n\n      tu.events.filter(filterBeforeDeleteNode).subscribe((ev) => {\n        assert.equal(ev.node, node);\n        assert.isNotNull(ev.node.parentNode);\n      });\n      listener.expected.BeforeDeleteNode = 1;\n\n      tu.events.filter(filterDeleteNode).subscribe((ev) => {\n        assert.equal(ev.node, node);\n        assert.isNull(ev.node.parentNode);\n      });\n      listener.expected.DeleteNode = 1;\n\n      const inaCalls = [\n        [parent, 0],\n        [parent, 1],\n      ];\n      let inaCallIx = 0;\n      tu.events.filter(filterInsertNodeAtAndBefore)\n        .subscribe((ev) => {\n          const call = inaCalls[inaCallIx];\n          assert.equal(ev.parent, call[0]);\n          assert.equal(ev.index, call[1]);\n          // We don't check ev.node here.\n          if (ev.name === \"InsertNodeAt\") {\n            inaCallIx++;\n          }\n        });\n      listener.expected.InsertNodeAt = 2;\n      listener.expected.BeforeInsertNodeAt = 2;\n\n      const pair = tu.insertIntoText(node, -1, el);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(pair[0].node, parent);\n      assert.equal(pair[0].offset, 0);\n      assert.equal(pair[1].node.nodeValue, \"abcd\");\n      assert.equal(pair[1].node.previousSibling, el);\n      assert.equal(root.querySelector(\".title\")!.childNodes.length, 2);\n\n      listener.check();\n    });\n\n    it(\"works fine with offset beyond text length\", () => {\n      const node = root.querySelector(\".title\")!.firstChild as Text;\n      const parent = node.parentNode;\n      const el = document.createElement(\"span\");\n\n      const listener = new Listener(tu);\n\n      tu.events.filter(filterBeforeDeleteNode).subscribe((ev) => {\n        assert.equal(ev.node, node);\n        assert.isNotNull(ev.node.parentNode);\n      });\n      listener.expected.BeforeDeleteNode = 1;\n\n      tu.events.filter(filterDeleteNode).subscribe((ev) => {\n        assert.equal(ev.node, node);\n        assert.isNull(ev.node.parentNode);\n      });\n      listener.expected.DeleteNode = 1;\n\n      const inaCalls = [\n        [parent, 0],\n        [parent, 1],\n      ];\n      let inaCallIx = 0;\n      tu.events.filter(filterInsertNodeAtAndBefore)\n        .subscribe((ev) => {\n          const call = inaCalls[inaCallIx];\n          assert.equal(ev.parent, call[0]);\n          assert.equal(ev.index, call[1]);\n          // We don't check ev.node here.\n          if (ev.name === \"InsertNodeAt\") {\n            inaCallIx++;\n          }\n        });\n      listener.expected.InsertNodeAt = 2;\n      listener.expected.BeforeInsertNodeAt = 2;\n\n      const pair = tu.insertIntoText(node, node.nodeValue!.length, el);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(pair[0].node.nodeValue, \"abcd\");\n      assert.equal(pair[0].node.nextSibling, el);\n      assert.equal(pair[1].node, parent);\n      assert.equal(pair[1].offset, 2);\n      assert.equal(root.querySelector(\".title\")!.childNodes.length, 2);\n      listener.check();\n    });\n  });\n\n  describe(\"setTextNodeValue\", () => {\n    it(\"fails on non-text node\", () => {\n      const node = root.querySelector(\".title\")!;\n      assert.throws(tu.setTextNode.bind(tu, node, \"test\"), Error,\n                   \"setTextNode called on non-text\");\n    });\n\n    it(\"generates appropriate events when setting text\", () => {\n      const node = root.querySelector(\".title\")!.firstChild as Text;\n      const listener = new Listener(tu);\n      tu.events.filter(filterSetTextNodeValue).subscribe((ev) => {\n        assert.equal(ev.node, node);\n        assert.equal(ev.value, node.nodeValue);\n      });\n      listener.expected.SetTextNodeValue = 1;\n\n      assert.equal(node.nodeValue, \"abcd\");\n      tu.setTextNode(node, \"test\");\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(node.nodeValue, \"test\");\n      listener.check();\n    });\n\n    it(\"generates appropriate events when setting text to an empty string\",\n       () => {\n         const node = root.querySelector(\".title\")!.firstChild as Text;\n         const listener = new Listener(tu);\n\n         tu.events.filter(filterBeforeDeleteNode).subscribe((ev) => {\n           assert.equal(ev.node, node);\n           assert.isNotNull(ev.node.parentNode);\n         });\n         listener.expected.BeforeDeleteNode = 1;\n\n         tu.events.filter(filterDeleteNode).subscribe((ev) => {\n           assert.equal(ev.node, node);\n           assert.isNull(ev.node.parentNode);\n         });\n         listener.expected.DeleteNode = 1;\n\n         assert.equal(node.nodeValue, \"abcd\");\n         tu.setTextNode(node, \"\");\n\n         // Check that we're doing what we think we're doing.\n         assert.isNull(node.parentNode);\n         listener.check();\n       });\n  });\n\n  describe(\"removeNode\", () => {\n    it(\"generates appropriate events when removing a node\", () => {\n      const node = root.querySelectorAll(\".body>.p\")[2]\n        .querySelectorAll(\".quote\")[1];\n      const parent = node.parentNode as HTMLElement;\n      assert.equal(parent.childNodes.length, 3);\n      const listener = new Listener(tu);\n      tu.events.filter(filterBeforeDeleteNode).subscribe((ev) => {\n        assert.equal(ev.node, node);\n        assert.isNotNull(ev.node.parentNode);\n      });\n      listener.expected.BeforeDeleteNode = 1;\n\n      tu.events.filter(filterDeleteNode).subscribe((ev) => {\n        assert.equal(ev.node, node);\n        assert.isNull(ev.node.parentNode);\n      });\n      listener.expected.DeleteNode = 1;\n\n      tu.removeNode(node);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(parent.outerHTML,\n                   (\"\\\n<div class=\\\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\n<div class=\\\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nquoted</div>\\\n<div class=\\\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nquoted3</div></div>\"));\n\n      assert.equal(parent.childNodes.length, 2);\n      listener.check();\n    });\n\n    it(\"generates appropriate events when merging text\", () => {\n      const node = root.querySelectorAll(\".body>.p\")[1]\n        .querySelector(\".quote\")!;\n      const parent = node.parentNode as HTMLElement;\n      const prev = node.previousSibling;\n      const next = node.nextSibling;\n      assert.equal(parent.childNodes.length, 5);\n      const listener = new Listener(tu);\n      let firstBefore = true;\n      let first = true;\n      tu.events.filter(filterBeforeDeleteNode).subscribe((ev) => {\n        // beforeDeleteNode will be emitted twice. Once to\n        // remove the node itself, and second to merge the\n        // text nodes.\n        if (firstBefore) {\n          assert.equal(ev.node, node);\n        }\n        else {\n          assert.equal(ev.node, next);\n        }\n        assert.isNotNull(ev.node.parentNode);\n        firstBefore = false;\n      });\n      listener.expected.BeforeDeleteNode = 2;\n\n      tu.events.filter(filterDeleteNode).subscribe((ev) => {\n        // deleteNode will be emitted twice. Once to\n        // remove the node itself, and second to merge the\n        // text nodes.\n        if (first) {\n          assert.equal(ev.node, node);\n        }\n        else {\n          assert.equal(ev.node, next);\n        }\n        assert.isNull(ev.node.parentNode);\n        first = false;\n      });\n      listener.expected.DeleteNode = 2;\n\n      tu.events.filter(filterSetTextNodeValue).subscribe((ev) => {\n        assert.equal(ev.node, prev);\n        assert.equal(ev.value, \"before  between \");\n      });\n      listener.expected.SetTextNodeValue = 1;\n\n      tu.removeNode(node);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(parent.childNodes.length, 3);\n      assert.equal(parent.outerHTML, \"\\\n<div class=\\\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">before  \\\nbetween \\\n<div class=\\\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nquoted2</div> after</div>\");\n      listener.check();\n    });\n\n    it(\"does not bork on missing previous text\", () => {\n      // An earlier bug would cause an unhandled exception on this test.\n      const node =\n        root.querySelectorAll(\".body>.p\")[2].querySelector(\".quote\")!;\n      const parent = node.parentNode;\n      const ret = tu.removeNode(node);\n      assert.equal(ret.node, parent);\n      assert.equal(ret.offset, 0);\n    });\n  });\n\n  describe(\"removeNodeNF\", () => {\n    it(\"generates appropriate events when removing a node\", () => {\n      const node = root.querySelectorAll(\".body>.p\")[2]\n        .querySelectorAll(\".quote\")[1];\n      const parent = node.parentNode as HTMLElement;\n      assert.equal(parent.childNodes.length, 3);\n      const listener = new Listener(tu);\n\n      tu.events.filter(filterBeforeDeleteNode).subscribe((ev) => {\n        assert.equal(ev.node, node);\n        assert.isNotNull(ev.node.parentNode);\n      });\n      listener.expected.BeforeDeleteNode = 1;\n\n      tu.events.filter(filterDeleteNode).subscribe((ev) => {\n        assert.equal(ev.node, node);\n        assert.isNull(ev.node.parentNode);\n      });\n      listener.expected.DeleteNode = 1;\n\n      tu.removeNodeNF(node);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(parent.outerHTML, \"\\\n<div class=\\\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\n<div class=\\\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nquoted</div>\\\n<div class=\\\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nquoted3</div></div>\");\n\n      assert.equal(parent.childNodes.length, 2);\n      listener.check();\n    });\n\n    it(\"generates appropriate events when merging text\", () => {\n      const node = root.querySelectorAll(\".body>.p\")[1]\n        .querySelector(\".quote\")!;\n      const parent = node.parentNode as HTMLElement;\n      const prev = node.previousSibling;\n      const next = node.nextSibling;\n      assert.equal(parent.childNodes.length, 5);\n      const listener = new Listener(tu);\n\n      let firstBefore = true;\n      let first = true;\n\n      tu.events.filter(filterBeforeDeleteNode).subscribe((ev) => {\n        // beforeDeleteNode will be emitted twice. Once to\n        // remove the node itself, and second to merge the\n        // text nodes.\n        if (firstBefore) {\n          assert.equal(ev.node, node);\n        }\n        else {\n          assert.equal(ev.node, next);\n        }\n        assert.isNotNull(ev.node.parentNode);\n        firstBefore = false;\n      });\n      listener.expected.BeforeDeleteNode = 2;\n\n      tu.events.filter(filterDeleteNode).subscribe((ev) => {\n        // deleteNode will be emitted twice. Once to\n        // remove the node itself, and second to merge the\n        // text nodes.\n        if (first) {\n          assert.equal(ev.node, node);\n        }\n        else {\n          assert.equal(ev.node, next);\n        }\n        assert.isNull(ev.node.parentNode);\n        first = false;\n      });\n      listener.expected.DeleteNode = 2;\n\n      tu.events.filter(filterSetTextNodeValue).subscribe((ev) => {\n        assert.equal(ev.node, prev);\n        assert.equal(ev.value, \"before  between \");\n      });\n      listener.expected.SetTextNodeValue = 1;\n\n      tu.removeNodeNF(node);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(parent.childNodes.length, 3);\n      assert.equal(parent.outerHTML, \"\\\n<div class=\\\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">before  \\\nbetween \\\n<div class=\\\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nquoted2</div> after</div>\");\n      listener.check();\n    });\n\n    it(\"does not bork on missing previous text\", () => {\n      // An earlier bug would cause an unhandled exception on this\n      // test.\n      const node = root.querySelectorAll(\".body>.p\")[2]\n        .querySelector(\".quote\")!;\n      const parent = node.parentNode;\n      const ret = tu.removeNodeNF(node)!;\n      assert.equal(ret.node, parent);\n      assert.equal(ret.offset, 0);\n    });\n\n    it(\"generates no events if the node is undefined\", () => {\n      const listener = new Listener(tu);\n      const initialHTML = root.outerHTML;\n\n      assert.isUndefined(tu.removeNodeNF(undefined));\n\n      // Check that nothing changed.\n      assert.equal(root.outerHTML, initialHTML);\n      listener.check();\n    });\n\n    it(\"generates no events if the node is null\", () => {\n      const listener = new Listener(tu);\n      const initialHTML = root.outerHTML;\n\n      assert.isUndefined(tu.removeNodeNF(null));\n\n      // Check that nothing changed.\n      assert.equal(root.outerHTML, initialHTML);\n      listener.check();\n    });\n  });\n\n  describe(\"removeNodes\", () => {\n    it(\"fails on nodes of different parents\", () => {\n      // An earlier bug would cause an unhandled exception on this\n      // test.\n      const node = root.querySelectorAll(\".body>.p\")[2]\n        .querySelector(\".quote\")!;\n      assert.throws(tu.removeNodes.bind(tu, [node, node.parentNode]),\n                    Error,\n                   \"nodes are not immediately contiguous in document order\");\n    });\n\n    it(\"generates appropriate events when merging text\", () => {\n      const p = root.querySelectorAll(\".body>.p\")[1];\n      const quotes = childrenByClass(p, \"quote\");\n      const firstNode = quotes[0];\n      const lastNode = quotes[quotes.length - 1];\n      const nodes = Array.prototype.slice.call(\n        p.childNodes,\n        indexOf(p.childNodes, firstNode),\n        indexOf(p.childNodes, lastNode) + 1);\n      const parent = firstNode.parentNode as HTMLElement;\n      const prev = firstNode.previousSibling;\n      const next = lastNode.nextSibling;\n      assert.equal(parent.childNodes.length, 5);\n\n      const listener = new Listener(tu);\n      const calls = nodes.concat([next]);\n      let callsIx = 0;\n      tu.events.filter(filterBeforeDeleteNode).subscribe((ev) => {\n        const call = calls[callsIx];\n        assert.equal(ev.node, call, `beforeDeleteNode call ${callsIx}`);\n        assert.isNotNull(ev.node.parentNode);\n      });\n      listener.expected.BeforeDeleteNode = 4;\n\n      tu.events.filter(filterDeleteNode).subscribe((ev) => {\n        const call = calls[callsIx];\n        assert.equal(ev.node, call, `beforeDeleteNode call ${callsIx}`);\n        assert.isNull(ev.node.parentNode);\n        callsIx++;\n      });\n      listener.expected.DeleteNode = 4;\n\n      tu.events.filter(filterSetTextNodeValue).subscribe((ev) => {\n        assert.equal(ev.node, prev, \"setTextNodeValue node\");\n        assert.equal(ev.value, \"before  after\", \"setTextNodeValue value\");\n      });\n      listener.expected.SetTextNodeValue = 1;\n\n      tu.removeNodes(nodes);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(parent.childNodes.length, 1);\n      assert.equal(parent.outerHTML, \"\\\n<div class=\\\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nbefore  after</div>\");\n      listener.check();\n    });\n\n    it(\"does not bork on missing previous text\", () => {\n      // An earlier bug would cause an unhandled exception on this\n      // test.\n      const node = root.querySelectorAll(\".body>.p\")[2]\n        .querySelector(\".quote\")!;\n      const parent = node.parentNode;\n      const ret = tu.removeNodes([node])!;\n      assert.equal(ret.node, parent);\n      assert.equal(ret.offset, 0);\n    });\n  });\n\n  describe(\"mergeTextNodes\", () => {\n    it(\"generates appropriate events when merging text\", () => {\n      const p = root.querySelectorAll(\".body>.p\")[1];\n      // Remove the first quote so that we have two text nodes adjacent.\n      const quote = childByClass(p, \"quote\")!;\n      p.removeChild(quote);\n      const node = p.firstChild!;\n      const parent = node.parentNode as HTMLElement;\n      const next = node.nextSibling;\n      assert.equal(parent.childNodes.length, 4);\n      const listener = new Listener(tu);\n\n      tu.events.filter(filterBeforeDeleteNode).subscribe((ev) => {\n        assert.equal(ev.node, next);\n        assert.isNotNull(ev.node.parentNode);\n      });\n      listener.expected.BeforeDeleteNode = 1;\n\n      tu.events.filter(filterDeleteNode).subscribe((ev) => {\n        assert.equal(ev.node, next);\n        assert.isNull(ev.node.parentNode);\n      });\n      listener.expected.DeleteNode = 1;\n\n      tu.events.filter(filterSetTextNodeValue).subscribe((ev) => {\n        assert.equal(ev.node, node);\n        assert.equal(ev.value, \"before  between \");\n      });\n      listener.expected.SetTextNodeValue = 1;\n\n      tu.mergeTextNodes(node);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(parent.childNodes.length, 3);\n      assert.equal(parent.outerHTML, \"\\\n<div class=\\\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">before  \\\nbetween \\\n<div class=\\\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nquoted2</div> after</div>\");\n      listener.check();\n    });\n\n    it(\"does nothing if there is nothing to do\", () => {\n      const p = root.querySelectorAll(\".body>.p\")[1];\n      const node = p.firstChild!;\n      const parent = node.parentNode as HTMLElement;\n      assert.equal(parent.childNodes.length, 5);\n\n      const listener = new Listener(tu);\n      tu.mergeTextNodes(node);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(parent.childNodes.length, 5);\n      assert.equal(parent.outerHTML, \"\\\n<div class=\\\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">before \\\n<div class=\\\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nquoted</div> between \\\n<div class=\\\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nquoted2</div> after</div>\");\n      listener.check();\n    });\n\n    it(\"returns a proper caret value when it merges\", () => {\n      const p = root.querySelectorAll(\".body>.p\")[1];\n      // Remove the first quote so that we have two text nodes adjacent.\n      const quote = childByClass(p, \"quote\")!;\n      p.removeChild(quote);\n      const node = p.firstChild!;\n      const parent = node.parentNode as HTMLElement;\n      assert.equal(parent.childNodes.length, 4);\n      const ret = tu.mergeTextNodes(node);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(parent.childNodes.length, 3);\n      assert.equal(\n        parent.outerHTML, \"\\\n<div class=\\\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nbefore  between \\\n<div class=\\\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nquoted2</div> after</div>\");\n\n      // Check return value.\n      assert.equal(ret.node, node);\n      assert.equal(ret.offset, 7);\n    });\n\n    it(\"returns a proper caret value when it does nothing\", () => {\n      const p = root.querySelectorAll(\".body>.p\")[1];\n      const node = p.firstChild!;\n      const parent = node.parentNode as HTMLElement;\n      assert.equal(parent.childNodes.length, 5);\n\n      const listener = new Listener(tu);\n      const ret = tu.mergeTextNodes(node);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(parent.childNodes.length, 5);\n      assert.equal(parent.outerHTML, \"\\\n<div class=\\\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">before \\\n<div class=\\\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nquoted</div> between \\\n<div class=\\\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nquoted2</div> after</div>\");\n      listener.check();\n\n      // Check the return value.\n      assert.equal(ret.node, parent);\n      assert.equal(ret.offset, indexOf(parent.childNodes, node) + 1);\n    });\n  });\n\n  describe(\"mergeTextNodesNF\", () => {\n    it(\"generates appropriate events when merging text\", () => {\n      const p = root.querySelectorAll(\".body>.p\")[1];\n      // Remove the first quote so that we have two text nodes adjacent.\n      const quote = childByClass(p, \"quote\")!;\n      p.removeChild(quote);\n      const node = p.firstChild!;\n      const parent = node.parentNode as HTMLElement;\n      const next = node.nextSibling;\n      assert.equal(parent.childNodes.length, 4);\n      const listener = new Listener(tu);\n\n      tu.events.filter(filterBeforeDeleteNode).subscribe((ev) => {\n        assert.equal(ev.node, next);\n        assert.isNotNull(ev.node.parentNode);\n      });\n      listener.expected.BeforeDeleteNode = 1;\n\n      tu.events.filter(filterDeleteNode).subscribe((ev) => {\n        assert.equal(ev.node, next);\n        assert.isNull(ev.node.parentNode);\n      });\n      listener.expected.DeleteNode = 1;\n\n      tu.events.filter(filterSetTextNodeValue).subscribe((ev) => {\n        assert.equal(ev.node, node);\n        assert.equal(ev.value, \"before  between \");\n      });\n      listener.expected.SetTextNodeValue = 1;\n\n      tu.mergeTextNodesNF(node);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(parent.childNodes.length, 3);\n      assert.equal(parent.outerHTML, \"\\\n<div class=\\\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">before  \\\nbetween \\\n<div class=\\\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nquoted2</div> after</div>\");\n      listener.check();\n    });\n\n    it(\"does nothing if there is nothing to do\", () => {\n      const p = root.querySelectorAll(\".body>.p\")[1];\n      const node = p.firstChild!;\n      const parent = node.parentNode as HTMLElement;\n      assert.equal(parent.childNodes.length, 5);\n\n      const listener = new Listener(tu);\n      tu.mergeTextNodesNF(node);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(parent.childNodes.length, 5);\n      assert.equal(parent.outerHTML, \"\\\n<div class=\\\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">before \\\n<div class=\\\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nquoted</div> between \\\n<div class=\\\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nquoted2</div> after</div>\");\n      listener.check();\n    });\n\n    it(\"returns a proper caret value when it merges\", () => {\n      const p = root.querySelectorAll(\".body>.p\")[1];\n      // Remove the first quote so that we have two text nodes adjacent.\n      const quote = childByClass(p, \"quote\")!;\n      p.removeChild(quote);\n      const node = p.firstChild!;\n      const parent = node.parentNode as HTMLElement;\n      assert.equal(parent.childNodes.length, 4);\n      const ret = tu.mergeTextNodesNF(node)!;\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(parent.childNodes.length, 3);\n      assert.equal(parent.outerHTML, \"\\\n<div class=\\\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">before  \\\nbetween \\\n<div class=\\\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nquoted2</div> after</div>\");\n\n      // Check return value.\n      assert.equal(ret.node, node);\n      assert.equal(ret.offset, 7);\n    });\n\n    it(\"returns a proper caret value when it does nothing\", () => {\n      const p = root.querySelectorAll(\".body>.p\")[1];\n      const node = p.firstChild!;\n      const parent = node.parentNode as HTMLElement;\n      assert.equal(parent.childNodes.length, 5);\n\n      const listener = new Listener(tu);\n      const ret = tu.mergeTextNodesNF(node)!;\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(parent.childNodes.length, 5);\n      assert.equal(parent.outerHTML, \"\\\n<div class=\\\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">before \\\n<div class=\\\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nquoted</div> between \\\n<div class=\\\"quote _local_quote _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nquoted2</div> after</div>\");\n      listener.check();\n\n      // Check the return value.\n      assert.equal(ret.node, parent);\n      assert.equal(ret.offset, indexOf(parent.childNodes, node) + 1);\n    });\n\n    it(\"generates no events if the node is undefined\", () => {\n      const listener = new Listener(tu);\n      const initialHTML = root.outerHTML;\n\n      assert.isUndefined(tu.removeNodeNF(undefined));\n\n      // Check that nothing changed.\n      assert.equal(root.outerHTML, initialHTML);\n      listener.check();\n    });\n\n    it(\"generates no events if the node is null\", () => {\n      const listener = new Listener(tu);\n      const initialHTML = root.outerHTML;\n\n      assert.isUndefined(tu.mergeTextNodesNF(null));\n\n      // Check that nothing changed.\n      assert.equal(root.outerHTML, initialHTML);\n      listener.check();\n    });\n  });\n\n  describe(\"cut\", () => {\n    function checkNodes(ret: Node[], nodes: Node[]): void {\n      assert.equal(ret.length, nodes.length, \"result length\");\n      for (let i = 0; i < nodes.length; ++i) {\n        assert.equal(ret[i].nodeType, nodes[i].nodeType);\n        assert.isTrue(ret[i].nodeType === Node.TEXT_NODE ||\n                      ret[i].nodeType === Node.ELEMENT_NODE, \"node type\");\n        switch (ret[i].nodeType) {\n        case Node.TEXT_NODE:\n          assert.equal(ret[i].nodeValue, nodes[i].nodeValue,\n                       `text node at ${i}`);\n          break;\n        case Node.ELEMENT_NODE:\n          assert.equal((ret[i] as HTMLElement).outerHTML,\n                       (nodes[i] as HTMLElement).outerHTML,\n                       `element node at ${i}`);\n          break;\n        default:\n          break;\n        }\n      }\n    }\n\n    it(\"generates appropriate events when merging text\", () => {\n      const p = root.querySelectorAll(\".body>.p\")[1];\n      const start = DLoc.mustMakeDLoc(root, p.firstChild, 4);\n      const end = DLoc.mustMakeDLoc(root, p.childNodes[4], 3);\n      assert.equal(p.childNodes.length, 5);\n\n      let nodes = Array.prototype.slice.call(\n        p.childNodes,\n        indexOf(p.childNodes, start.node.nextSibling!),\n        indexOf(p.childNodes, end.node.previousSibling!) + 1);\n      const listener = new Listener(tu);\n      nodes = nodes.reverse();\n      const calls = nodes.concat([end.node]);\n      let callsIx = 0;\n\n      tu.events.filter(filterBeforeDeleteNode).subscribe((ev) => {\n        const call = calls[callsIx];\n        assert.equal(ev.node, call, `beforeDeleteNode call ${callsIx}`);\n        assert.isNotNull(ev.node.parentNode);\n      });\n      listener.expected.BeforeDeleteNode = calls.length;\n\n      tu.events.filter(filterDeleteNode).subscribe((ev) => {\n        const call = calls[callsIx];\n        assert.equal(ev.node, call, `beforeDeleteNode call ${callsIx}`);\n        assert.isNull(ev.node.parentNode);\n        callsIx++;\n      });\n      listener.expected.DeleteNode = calls.length;\n\n      const stnvCalls = [\n        [start.node, \"befo\"],\n        [end.node, \"ter\"],\n        [start.node, \"befoter\"],\n      ];\n      let stnvCallsIx = 0;\n      tu.events.filter(filterSetTextNodeValue).subscribe((ev) => {\n        const call = stnvCalls[stnvCallsIx];\n        assert.equal(ev.node, call[0],\n                     `setTextNodeValue node, call ${stnvCallsIx}`);\n        assert.equal(ev.value, call[1],\n                     `setTextNodeValue value, call ${stnvCallsIx}`);\n        stnvCallsIx++;\n      });\n      listener.expected.SetTextNodeValue = 3;\n\n      tu.cut(start, end);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(p.childNodes.length, 1);\n      assert.equal(p.outerHTML, \"\\\n<div class=\\\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nbefoter</div>\");\n      listener.check();\n    });\n\n    it(\"returns proper nodes when merging a single node\", () => {\n      const p = root.querySelectorAll(\".body>.p\")[1];\n      const start = DLoc.mustMakeDLoc(root, p.firstChild, 4);\n      const end = DLoc.mustMakeDLoc(root, p.firstChild, 6);\n      assert.equal(p.childNodes.length, 5);\n\n      const nodes = [p.ownerDocument.createTextNode(\"re\")];\n      const ret = tu.cut(start, end);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(p.childNodes.length, 5);\n      assert.equal(p.firstChild!.nodeValue, \"befo \");\n\n      assert.isTrue(ret.length > 0);\n      checkNodes(ret[1], nodes);\n      assert.equal(ret[0].node, p.firstChild);\n      assert.equal(ret[0].offset, 4);\n    });\n\n    it(\"returns proper nodes when merging text\", () => {\n      const p = root.querySelectorAll(\".body>.p\")[1];\n      const start = DLoc.mustMakeDLoc(root, p.firstChild, 4);\n      const end = DLoc.mustMakeDLoc(root, p.childNodes[4], 3);\n      assert.equal(p.childNodes.length, 5);\n\n      const nodes = Array.prototype.slice.call(\n        p.childNodes,\n        indexOf(p.childNodes, start.node.nextSibling!),\n        indexOf(p.childNodes, end.node.previousSibling!) + 1);\n      new Listener(tu); // eslint-disable-line no-new\n      nodes.unshift(p.ownerDocument.createTextNode(\"re \"));\n      nodes.push(p.ownerDocument.createTextNode(\" af\"));\n\n      const ret = tu.cut(start, end);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(p.childNodes.length, 1);\n      assert.equal(p.outerHTML, \"\\\n<div class=\\\"p _local_p _xmlns_http://www.tei-c.org/ns/1.0 _real\\\">\\\nbefoter</div>\");\n\n      assert.isTrue(ret.length > 0);\n      checkNodes(ret[1], nodes);\n      assert.equal(ret[0].node, p.firstChild);\n      assert.equal(ret[0].offset, 4);\n    });\n\n    it(\"empties an element without problem\", () => {\n      const p = root.querySelectorAll(\".body>.p\")[1];\n      const start = DLoc.mustMakeDLoc(root, p, 0);\n      const end = DLoc.mustMakeDLoc(root, p, p.childNodes.length);\n      assert.equal(p.childNodes.length, 5);\n\n      const nodes = Array.prototype.slice.call(p.childNodes);\n      const ret = tu.cut(start, end);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(p.childNodes.length, 0);\n\n      assert.isTrue(ret.length > 0);\n      // Check the caret position.\n      assert.equal(ret[0].node, p);\n      assert.equal(ret[0].offset, 0);\n      // Check that the nodes are those we expected.\n      checkNodes(ret[1], nodes);\n    });\n  });\n});\n\n//  LocalWords:  domroot concat DOM html previousSibling nextSibling\n//  LocalWords:  prev abcd jQuery cd Dubeau MPL Mangalam RequireJS\n//  LocalWords:  mergeTextNodes removeNodes unhandled removeNode chai\n//  LocalWords:  insertIntoText deleteText setTextNodeValue onwards\n//  LocalWords:  insertText deleteNode denormalize splitAt jquery\n//  LocalWords:  insertNodeAt TreeUpdater\n"]}