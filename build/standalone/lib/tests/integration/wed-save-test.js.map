{"version":3,"file":"wed-save-test.js","sourceRoot":"","sources":["../../../../../lib/tests/integration/wed-save-test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { filter, first } from \"rxjs/operators\";\n\nimport { keyConstants, version } from \"wed\";\nimport { Editor } from \"wed/editor\";\n\nimport * as globalConfig from \"../base-config\";\nimport { EditorSetup, WedServer } from \"../wed-test-util\";\n\nconst assert = chai.assert;\n\ndescribe(\"wed save:\", () => {\n  let setup: EditorSetup;\n  let editor: Editor;\n  let server: WedServer;\n\n  before(() => {\n    setup = new EditorSetup(\n      \"/base/build/standalone/lib/tests/wed_test_data/\\\nserver_interaction_converted.xml\",\n      globalConfig.config,\n      document);\n    ({ editor, server } = setup);\n    return setup.init();\n  });\n\n  afterEach(() => {\n    setup.reset();\n  });\n\n  after(() => {\n    setup.restore();\n    // tslint:disable-next-line:no-any\n    (editor as any) = undefined;\n  });\n\n  it(\"saves using the keyboard\", () => {\n    const prom =  editor.saver.events\n      .pipe(filter((ev) => ev.name === \"Saved\"), first()).toPromise()\n      .then(() => {\n        assert.deepEqual(server.lastSaveRequest, {\n          command: \"save\",\n          version: version,\n          data: \"<TEI xmlns=\\\"http://www.tei-c.org/ns/1.0\\\">\\\n<teiHeader><fileDesc><titleStmt><title>abcd</title></titleStmt>\\\n<publicationStmt><p/></publicationStmt><sourceDesc><p/></sourceDesc>\\\n</fileDesc></teiHeader><text><body><p>Blah blah <term>blah</term> blah.</p>\\\n<p><term>blah</term></p></body></text></TEI>\",\n        });\n    });\n    editor.type(keyConstants.SAVE);\n    return prom;\n  });\n\n  it(\"saves using the toolbar\", () => {\n    // We just check the event happened.\n    const prom =  editor.saver.events\n      .pipe(filter((ev) => ev.name === \"Saved\"), first()).toPromise();\n    const button = editor.widget\n      .querySelector(\"[data-original-title='Save']\") as HTMLElement;\n    button.click();\n    return prom;\n  });\n\n  it(\"serializes properly\", () =>  {\n    const prom = editor.saver.events\n      .pipe(filter((ev) => ev.name === \"Saved\"), first()).toPromise()\n      .then(() => {\n        assert.deepEqual(server.lastSaveRequest, {\n          command: \"save\",\n          version: version,\n          data: \"<TEI xmlns=\\\"http://www.tei-c.org/ns/1.0\\\">\\\n<teiHeader><fileDesc><titleStmt><title>abcd</title></titleStmt>\\\n<publicationStmt><p><abbr/></p></publicationStmt><sourceDesc><p/></sourceDesc>\\\n</fileDesc></teiHeader><text><body><p>Blah blah <term>blah</term> blah.</p>\\\n<p><term>blah</term></p></body></text></TEI>\",\n        });\n      });\n    const p = editor.dataRoot.querySelector(\"p\")!;\n    editor.caretManager.setCaret(p, 0);\n    const trs = editor.modeTree.getMode(p)\n      .getContextualActions(\"insert\", \"abbr\", p, 0);\n    trs[0].execute({ name: \"abbr\" });\n    editor.type(keyConstants.SAVE);\n    return prom;\n  });\n\n  it(\"does not autosave if not modified\", (done) => {\n    // tslint:disable-next-line:no-floating-promises\n    editor.save().then(() => {\n      const sub = editor.saver.events\n        .pipe(filter((ev) => ev.name === \"Autosaved\")).subscribe(() => {\n          throw new Error(\"autosaved!\");\n        });\n      editor.saver.setAutosaveInterval(50);\n      setTimeout(() => {\n        sub.unsubscribe();\n        done();\n      }, 500);\n    });\n  });\n\n  it(\"autosaves when the document is modified\", (done) => {\n    // We're testing that autosave is not called again after the first time.\n    let autosaved = false;\n    const sub = editor.saver.events.pipe(filter((x) => x.name === \"Autosaved\"))\n      .subscribe(() => {\n        if (autosaved) {\n          throw new Error(\"autosaved more than once\");\n        }\n        autosaved = true;\n        assert.deepEqual(server.lastSaveRequest, {\n          command: \"autosave\",\n          version: version,\n          data: \"<TEI xmlns=\\\"http://www.tei-c.org/ns/1.0\\\">\\\n<teiHeader><fileDesc><titleStmt><title>abcd</title></titleStmt>\\\n<publicationStmt/><sourceDesc><p/></sourceDesc>\\\n</fileDesc></teiHeader><text><body><p>Blah blah <term>blah</term> blah.</p>\\\n<p><term>blah</term></p></body></text></TEI>\",\n        });\n        setTimeout(() => {\n          sub.unsubscribe();\n          done();\n        }, 500);\n      });\n    editor.dataUpdater.removeNode(editor.dataRoot.querySelector(\"p\"));\n    editor.saver.setAutosaveInterval(50);\n  });\n\n  it(\"autosaves when the document is modified after a first autosave timeout \" +\n     \"that did nothing\", (done) => {\n       // tslint:disable-next-line:no-floating-promises\n       editor.save().then(() => {\n         // We're testing that autosave is not called again after the first\n         // time.\n         let autosaved = false;\n         const interval = 50;\n         const sub = editor.saver.events\n           .pipe(filter((x) => x.name === \"Autosaved\"))\n           .subscribe(() => {\n             if (autosaved) {\n               throw new Error(\"autosaved more than once\");\n             }\n             autosaved = true;\n             assert.deepEqual(server.lastSaveRequest, {\n               command: \"autosave\",\n               version: version,\n               data: \"<TEI xmlns=\\\"http://www.tei-c.org/ns/1.0\\\">\\\n<teiHeader><fileDesc><titleStmt><title>abcd</title></titleStmt>\\\n<publicationStmt/><sourceDesc><p/></sourceDesc>\\\n</fileDesc></teiHeader><text><body><p>Blah blah <term>blah</term> blah.</p>\\\n<p><term>blah</term></p></body></text></TEI>\",\n             });\n             setTimeout(() => {\n               sub.unsubscribe();\n               done();\n             }, interval * 2);\n           });\n         editor.saver.setAutosaveInterval(interval);\n         setTimeout(() => {\n           assert.isFalse(autosaved, \"should not have been saved yet\");\n           editor.dataUpdater.removeNode(editor.dataRoot.querySelector(\"p\"));\n         }, interval * 2);\n       });\n     });\n});\n"]}