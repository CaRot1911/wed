{"version":3,"file":"wed-wildcard-test.js","sourceRoot":"","sources":["../../../../../lib/tests/integration/wed-wildcard-test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport mergeOptions from \"merge-options\";\n\nimport { CaretManager } from \"wed/caret-manager\";\nimport { Editor } from \"wed/editor\";\n\nimport * as globalConfig from \"../base-config\";\nimport { delay, makeFakePasteEvent } from \"../util\";\nimport { activateContextMenu, contextMenuHasOption, dataCaretCheck,\n         EditorSetup, getAttributeNamesFor } from \"../wed-test-util\";\n\nconst options = {\n  schema: \"/base/build/schemas/simplified-rng.js\",\n};\n\nconst assert = chai.assert;\n\ndescribe(\"wed wildcard support:\", () => {\n  let setup: EditorSetup;\n  let editor: Editor;\n  let caretManager: CaretManager;\n  let guiRoot: Element;\n\n  before(() => {\n    setup = new EditorSetup(\n      \"/base/build/standalone/lib/tests/wed_test_data/wildcard_converted.xml\",\n      mergeOptions(globalConfig.config, options),\n      document);\n    ({ editor } = setup);\n    return setup.init().then(() => {\n      // tslint:disable-next-line:no-any\n      (editor.validator as any)._validateUpTo(editor.dataRoot, -1);\n      caretManager = editor.caretManager;\n      guiRoot = editor.guiRoot;\n    });\n  });\n\n  afterEach(() => {\n    setup.reset();\n  });\n\n  after(() => {\n    setup.restore();\n\n    // tslint:disable-next-line:no-any\n    (editor as any) = undefined;\n    // tslint:disable-next-line:no-any\n    (caretManager as any) = undefined;\n  });\n\n  it(\"elements and attributes allowed due to wildcards are readonly\", () => {\n    const bar = editor.dataRoot.querySelector(\"bar\")!;\n    const barGUI = caretManager.fromDataLocation(bar, 0)!.node as Element;\n    assert.isTrue(barGUI.classList.contains(\"_readonly\"));\n    const attrNames = getAttributeNamesFor(barGUI);\n    let attrName: Element;\n    for (let ix = 0; ix < attrNames.length; ++ix) {\n      attrName = attrNames[ix];\n      if (attrName.textContent === \"foo:baz\") {\n        break;\n      }\n    }\n    // tslint:disable-next-line:no-unnecessary-type-assertion\n    const attr = attrName!.closest(\"._attribute\")!;\n    assert.isTrue(attr.classList.contains(\"_readonly\"));\n  });\n\n  it(\"prevent typing in readonly elements and attributes\", () => {\n    const bar = editor.dataRoot.querySelector(\"bar\")!;\n    const barGUI = caretManager.fromDataLocation(bar, 0)!.node as Element;\n    assert.isTrue(barGUI.classList.contains(\"_readonly\"));\n\n    caretManager.setCaret(bar, 0);\n    editor.type(\"foo\");\n    assert.equal(bar.textContent, \"abc\");\n\n    const attrNames = getAttributeNamesFor(barGUI);\n    let attrName: Element;\n    for (let ix = 0; ix < attrNames.length; ++ix) {\n      attrName = attrNames[ix];\n      if (attrName.textContent === \"foo:baz\") {\n        break;\n      }\n    }\n    // tslint:disable-next-line:no-unnecessary-type-assertion\n    const attr = attrName!.closest(\"._attribute\")!;\n    assert.isTrue(attr.classList.contains(\"_readonly\"));\n\n    const fooBaz = bar.getAttributeNode(\"foo:baz\")!;\n    caretManager.setCaret(fooBaz, 0);\n    editor.type(\"foo\");\n    assert.equal(fooBaz.value, \"x\");\n\n    // We drop the _readonly classes to make sure that we're testing what we\n    // think we're testing. Note that the classes will be added right back as we\n    // change the file because it is revalidated. This is why we type only one\n    // character.\n    barGUI.classList.remove(\"_readonly\");\n    attr.classList.remove(\"_readonly\");\n\n    caretManager.setCaret(fooBaz, 0);\n    editor.type(\"f\");\n    assert.equal(fooBaz.value, \"fx\");\n\n    barGUI.classList.remove(\"_readonly\");\n    caretManager.setCaret(bar, 0);\n    editor.type(\"f\");\n    assert.equal(bar.textContent, \"fabc\");\n  });\n\n  it(\"prevents pasting in readonly elements and attributes\", () => {\n    const initial = editor.dataRoot.querySelector(\"bar\")!;\n    const initialGUI =\n      caretManager.fromDataLocation(initial, 0)!.node as Element;\n    assert.isTrue(initialGUI.classList.contains(\"_readonly\"));\n    caretManager.setCaret(initial, 0);\n    const initialValue = initial.textContent;\n\n    // Synthetic event\n    let event = makeFakePasteEvent({\n      types: [\"text/plain\"],\n      getData: () => \"a\",\n    });\n    editor.$guiRoot.trigger(event);\n    assert.equal(initial.textContent, initialValue);\n    dataCaretCheck(editor, initial, 0, \"final position\");\n\n    // Check that removing _readonly would make the paste work. This proves that\n    // the only thing that was preventing pasting was _readonly.\n    initialGUI.classList.remove(\"_readonly\");\n    caretManager.setCaret(initial, 0);\n\n    // We have to create a new event.\n    event = makeFakePasteEvent({\n      types: [\"text/plain\"],\n      getData: () => \"a\",\n    });\n\n    editor.$guiRoot.trigger(event);\n    assert.equal(initial.textContent, `a${initialValue}`);\n    dataCaretCheck(editor, initial.firstChild!, 1, \"final position\");\n  });\n\n  it(\"prevents cutting from readonly elements\", async () => {\n    const initial = editor.dataRoot.querySelector(\"bar\")!;\n    const initialGUI =\n      caretManager.fromDataLocation(initial, 0)!.node as Element;\n    assert.isTrue(initialGUI.classList.contains(\"_readonly\"));\n    const initialValue = initial.textContent!;\n\n    const guiStart = caretManager.fromDataLocation(initial.firstChild!, 1)!;\n    caretManager.setCaret(guiStart);\n    caretManager.setRange(\n      guiStart,\n      caretManager.fromDataLocation(initial.firstChild!, 2)!);\n\n    // Synthetic event\n    editor.$guiRoot.trigger(new $.Event(\"cut\"));\n    await delay(1);\n\n    assert.equal(initial.textContent, initialValue);\n    // Try again, after removing _readonly so that we prove the only reason the\n    // cut did not work is that _readonly was present.\n    initialGUI.classList.remove(\"_readonly\");\n    editor.$guiRoot.trigger(new $.Event(\"cut\"));\n\n    await delay(1);\n    assert.equal(initial.textContent,\n                 initialValue.slice(0, 1) + initialValue.slice(2));\n  });\n\n  describe(\"a context menu has the complex pattern action\", () => {\n    it(\"when invoked on an element allowed due to a complex pattern\", () => {\n      activateContextMenu(editor,\n                          guiRoot.querySelector(\"._readonly ._element_name\")!);\n      contextMenuHasOption(editor, /Complex name pattern/, 1);\n    });\n\n    it(\"when invoked on an attribute allowed due to a complex pattern\", () => {\n      activateContextMenu(\n        editor,\n        guiRoot.querySelector(\"._readonly ._attribute_value\")!);\n      contextMenuHasOption(editor, /Complex name pattern/, 1);\n    });\n  });\n\n  function contextMenuHasNoTransforms(): void {\n    const menu =\n      editor.window.document.getElementsByClassName(\"wed-context-menu\")[0];\n    assert.isDefined(menu, \"the menu should exist\");\n    const items = menu.querySelectorAll(\"li[data-kind]\");\n    assert.equal(items.length, 0,\n                 \"there should be no items that can transform the document\");\n  }\n\n  describe(\"a context menu invoked on a readonly\", () => {\n    it(\"element has no actions that can transform the document\", () => {\n      activateContextMenu(editor,\n                          guiRoot.querySelector(\"._readonly ._element_name\")!);\n      contextMenuHasNoTransforms();\n    });\n\n    it(\"attribute has no actions that can transform the document\", () => {\n      activateContextMenu(\n        editor,\n        guiRoot.querySelector(\"._readonly ._attribute_value\")!);\n      contextMenuHasNoTransforms();\n    });\n  });\n});\n"]}