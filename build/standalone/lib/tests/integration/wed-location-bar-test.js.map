{"version":3,"file":"wed-location-bar-test.js","sourceRoot":"","sources":["../../../../../lib/tests/integration/wed-location-bar-test.ts"],"names":[],"mappings":";;;;;;;;;;;IAWA,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IAE3B,QAAQ,CAAC,kBAAkB,EAAE;QAC3B,IAAI,KAAkB,CAAC;QACvB,IAAI,MAAc,CAAC;QACnB,IAAI,YAA0B,CAAC;QAC/B,IAAI,WAAwB,CAAC;QAE7B,MAAM,CAAC;YACL,KAAK,GAAG,IAAI,2BAAW,CACrB,qEAAqE,EACrE,YAAY,CAAC,MAAM,EACnB,QAAQ,CAAC,CAAC;YACZ,CAAG,qBAAM,CAAW,CAAC;YACrB,OAAO,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;gBACvB,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;gBACnC,kCAAkC;gBAClC,WAAW,GAAI,MAAc,CAAC,cAAc,CAAC;YAC/C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC;YACR,KAAK,CAAC,KAAK,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC;YACJ,KAAK,CAAC,OAAO,EAAE,CAAC;YAChB,kCAAkC;YACjC,MAAc,GAAG,SAAS,CAAC;YAC5B,kCAAkC;YACjC,YAAoB,GAAG,SAAS,CAAC;YAClC,kCAAkC;YACjC,WAAmB,GAAG,SAAS,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sBAAsB,EAAE;YACzB,IAAM,EAAE,GAAG,MAAM,CAAC,OAAO,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;YACpE,YAAY,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,KAAK;YACV,4DAA4D;YAC5D,WAAW,CAAC,WAAY,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,EAC7C,qDAAqD,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yBAAyB,EAAE;YAC5B,IAAM,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,sBAAsB,CAAE,CAAC;YAChE,kEAAkE;YAClE,yEAAyE;YACzE,yCAAyC;YACzC,CAAC,CAAC,SAAS,GAAG,qBAAmB,CAAC,CAAC,SAAW,CAAC;YAC/C,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,KAAK;YACV,4DAA4D;YAC5D,WAAW,CAAC,WAAY,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,EAC7C,gCAAgC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { CaretManager } from \"wed/caret-manager\";\nimport { Editor } from \"wed/editor\";\n\nimport * as globalConfig from \"../base-config\";\nimport { EditorSetup } from \"../wed-test-util\";\n\nconst assert = chai.assert;\n\ndescribe(\"wed location bar\", () => {\n  let setup: EditorSetup;\n  let editor: Editor;\n  let caretManager: CaretManager;\n  let locationBar: HTMLElement;\n\n  before(() => {\n    setup = new EditorSetup(\n      \"/base/build/standalone/lib/tests/wed_test_data/source_converted.xml\",\n      globalConfig.config,\n      document);\n    ({ editor } = setup);\n    return setup.init().then(() => {\n      caretManager = editor.caretManager;\n      // tslint:disable-next-line:no-any\n      locationBar = (editor as any).wedLocationBar;\n    });\n  });\n\n  afterEach(() => {\n    setup.reset();\n  });\n\n  after(() => {\n    setup.restore();\n    // tslint:disable-next-line:no-any\n    (editor as any) = undefined;\n    // tslint:disable-next-line:no-any\n    (caretManager as any) = undefined;\n    // tslint:disable-next-line:no-any\n    (locationBar as any) = undefined;\n  });\n\n  it(\"ignores placeholders\", () => {\n    const ph = editor.guiRoot.getElementsByClassName(\"_placeholder\")[0];\n    caretManager.setCaret(ph, 0);\n    assert.equal(\n      // Normalize all spaces to a regular space with ``replace``.\n      locationBar.textContent!.replace(/\\s+/g, \" \"),\n      \"@ TEI / teiHeader / fileDesc / publicationStmt / p \");\n  });\n\n  it(\"ignores phantom parents\", () => {\n    const p = editor.guiRoot.querySelector(\".ref>._text._phantom\")!;\n    // We are cheating here. Instead of creating a mode what would put\n    // children elements inside of a phantom element we manually add a child.\n    // tslint:disable-next-line:no-inner-html\n    p.innerHTML = `<span>foo</span>${p.innerHTML}`;\n    caretManager.setCaret(p.firstChild, 0);\n    assert.equal(\n      // Normalize all spaces to a regular space with ``replace``.\n      locationBar.textContent!.replace(/\\s+/g, \" \"),\n      \"@ TEI / text / body / p / ref \");\n  });\n});\n"]}