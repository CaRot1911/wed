{"version":3,"file":"wed-paste-copy-cut-test.js","sourceRoot":"","sources":["../../../../../lib/tests/integration/wed-paste-copy-cut-test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport * as browsers from \"wed/browsers\";\nimport { CaretManager } from \"wed/caret-manager\";\nimport { Editor } from \"wed/editor\";\n\nimport * as globalConfig from \"../base-config\";\nimport { delay, makeFakePasteEvent } from \"../util\";\nimport { caretCheck, dataCaretCheck, EditorSetup } from \"../wed-test-util\";\n\nconst assert = chai.assert;\n\ndescribe(\"wed paste copy cut:\", () => {\n  let setup: EditorSetup;\n  let editor: Editor;\n  let caretManager: CaretManager;\n\n  before(() => {\n    setup = new EditorSetup(\n      \"/base/build/standalone/lib/tests/wed_test_data/source_converted.xml\",\n      globalConfig.config,\n      document);\n    ({ editor } = setup);\n    return setup.init().then(() => {\n      // tslint:disable-next-line:no-any\n      (editor.validator as any)._validateUpTo(editor.dataRoot, -1);\n      caretManager = editor.caretManager;\n    });\n  });\n\n  afterEach(() => {\n    setup.reset();\n  });\n\n  after(() => {\n    setup.restore();\n\n    // tslint:disable-next-line:no-any\n    (editor as any) = undefined;\n    // tslint:disable-next-line:no-any\n    (caretManager as any) = undefined;\n  });\n\n  it(\"pasting simple text\", () => {\n    const initial = editor.dataRoot.querySelector(\"body>p\")!.firstChild!;\n    caretManager.setCaret(initial, 0);\n    const initialValue = initial.nodeValue;\n\n    // Synthetic event\n    const event = makeFakePasteEvent({\n      types: [\"text/plain\"],\n      getData: () => \"abcdef\",\n    });\n    editor.$guiRoot.trigger(event);\n    assert.equal(initial.nodeValue, `abcdef${initialValue}`);\n    dataCaretCheck(editor, initial, 6, \"final position\");\n  });\n\n  it(\"pasting spaces pastes a single space\", () => {\n    const initial = editor.dataRoot.querySelector(\"body>p\")!.firstChild!;\n    caretManager.setCaret(initial, 0);\n    const initialValue = initial.nodeValue;\n\n    // Synthetic event\n    const event = makeFakePasteEvent({\n      types: [\"text/plain\"],\n      getData: () => \"    \\u00A0  \",\n    });\n    editor.$guiRoot.trigger(event);\n    assert.equal(initial.nodeValue, ` ${initialValue}`);\n    dataCaretCheck(editor, initial, 1, \"final position\");\n  });\n\n  it(\"pasting zero-width space pastes nothing\", () => {\n    const initial = editor.dataRoot.querySelector(\"body>p\")!.firstChild!;\n    caretManager.setCaret(initial, 0);\n    const initialValue = initial.nodeValue;\n\n    // Synthetic event\n    const event = makeFakePasteEvent({\n      types: [\"text/plain\"],\n      getData: () => \"\\u200B\\u200B\",\n    });\n    editor.$guiRoot.trigger(event);\n    assert.equal(initial.nodeValue, initialValue);\n    dataCaretCheck(editor, initial, 0, \"final position\");\n  });\n\n  it(\"pasting structured text\", () => {\n    const p = editor.dataRoot.querySelector(\"body>p\")!;\n    const initial = p.firstChild!;\n    caretManager.setCaret(initial, 0);\n    const initialValue = p.innerHTML;\n\n    const toPaste = `Blah <term xmlns=\"http://www.tei-c.org/ns/1.0\">blah\\\n</term> blah.`;\n    // Synthetic event\n    const event = makeFakePasteEvent({\n      types: [\"text/html\", \"text/plain\"],\n      // We add the zero-width space for the heck of it.  It will be stripped.\n      getData: () => `${toPaste}\\u200B`,\n    });\n    editor.$guiRoot.trigger(event);\n    let expected = toPaste + initialValue;\n    if (browsers.MSIE) {\n      expected = expected.replace(` xmlns=\"http://www.tei-c.org/ns/1.0\"`, \"\");\n    }\n    assert.equal(p.innerHTML, expected);\n    dataCaretCheck(editor, p.childNodes[2], 6, \"final position\");\n  });\n\n  it(\"pasting structured text: invalid, decline pasting as text\", (done) => {\n    const p = editor.dataRoot.querySelector(\"body>p\")!;\n    const initial = p.firstChild!;\n    caretManager.setCaret(initial, 0);\n    const initialValue = p.innerHTML;\n\n    // Synthetic event\n    const event = makeFakePasteEvent({\n      types: [\"text/html\", \"text/plain\"],\n      getData: () => p.outerHTML,\n    });\n    const pasteModal = editor.modals.getModal(\"paste\");\n    const $top = pasteModal.getTopLevel();\n    $top.one(\"shown.bs.modal\", () => {\n      // Wait until visible to add this handler so that it is run after the\n      // callback that wed sets on the modal.\n      $top.one(\"hidden.bs.modal\", () => {\n        assert.equal(p.innerHTML, initialValue);\n        dataCaretCheck(editor, initial, 0, \"final position\");\n        done();\n      });\n    });\n    editor.$guiRoot.trigger(event);\n    // This clicks \"No\".\n    pasteModal.getTopLevel().find(\".modal-footer .btn\")[1].click();\n  });\n\n  it(\"pasting structured text: invalid, accept pasting as text\", (done) => {\n    const p = editor.dataRoot.querySelector(\"body>p\")!;\n    const initial = p.firstChild;\n    caretManager.setCaret(initial, 0);\n    const initialValue = p.innerHTML;\n    const initialOuter = p.outerHTML;\n    const x = document.createElement(\"div\");\n    x.textContent = initialOuter;\n    const initialOuterFromTextToHtml = x.innerHTML;\n\n    // Synthetic event\n    const event = makeFakePasteEvent({\n      types: [\"text/html\", \"text/plain\"],\n      getData: () => initialOuter,\n    });\n\n    const pasteModal = editor.modals.getModal(\"paste\");\n    const $top = pasteModal.getTopLevel();\n    $top.one(\"shown.bs.modal\", () => {\n      // Wait until visible to add this handler so that it is run after the\n      // callback that wed sets on the modal.\n      $top.one(\"hidden.bs.modal\", () => {\n        assert.equal(p.innerHTML, initialOuterFromTextToHtml + initialValue);\n        dataCaretCheck(editor, p.firstChild!, initialOuter.length,\n                       \"final position\");\n        done();\n      });\n      // This clicks \"Yes\".\n      const button = pasteModal.getTopLevel()[0]\n        .getElementsByClassName(\"btn-primary\")[0] as HTMLElement;\n      button.click();\n    });\n    editor.$guiRoot.trigger(event);\n  });\n\n  it(\"handles pasting simple text into an attribute\", () => {\n    const p = editor.dataRoot.querySelector(\"body>p:nth-of-type(8)\")!;\n    const initial = p.getAttributeNode(\"rend\")!;\n    caretManager.setCaret(initial, 0);\n    const initialValue = initial.value;\n\n    // Synthetic event\n    const event = makeFakePasteEvent({\n      types: [\"text/plain\"],\n      getData: () => \"abcdef\",\n    });\n    editor.$guiRoot.trigger(event);\n    assert.equal(initial.value, `abcdef${initialValue}`);\n    dataCaretCheck(editor, initial, 6, \"final position\");\n  });\n\n  it(\"handles cutting a well formed selection\", () => {\n    // force_reload = true;\n    const p = editor.dataRoot.querySelector(\"body>p\")!;\n    const guiStart = caretManager.fromDataLocation(p.firstChild!, 4)!;\n    caretManager.setCaret(guiStart);\n    caretManager.setRange(guiStart,\n                          caretManager.fromDataLocation(p.childNodes[2], 5)!);\n\n    // Synthetic event\n    const event = new $.Event(\"cut\");\n    editor.$guiRoot.trigger(event);\n    return delay(1).then(() => {\n      assert.equal(p.innerHTML, \"Blah.\");\n    });\n  });\n\n  it(\"handles cutting a bad selection\", (done) => {\n    const p = editor.dataRoot.querySelector(\"body>p\")!;\n    const originalInnerHtml = p.innerHTML;\n    // Start caret is inside the term element.\n    const guiStart =\n      caretManager.fromDataLocation(p.childNodes[1].firstChild!, 1)!;\n    const guiEnd = caretManager.fromDataLocation(p.childNodes[2], 5)!;\n    caretManager.setRange(guiStart, guiEnd);\n\n    assert.equal(p.innerHTML, originalInnerHtml);\n    const straddlingModal = editor.modals.getModal(\"straddling\");\n    const $top = straddlingModal.getTopLevel();\n    $top.one(\"shown.bs.modal\", () => {\n      // Wait until visible to add this handler so that it is run after the\n      // callback that wed sets on the modal.\n      $top.one(\"hidden.bs.modal\", () => {\n        assert.equal(p.innerHTML, originalInnerHtml);\n        caretCheck(editor, guiEnd.node, guiEnd.offset, \"final position\");\n        done();\n      });\n    });\n    // Synthetic event\n    const event = new $.Event(\"cut\");\n    editor.$guiRoot.trigger(event);\n    // This clicks dismisses the modal\n    straddlingModal.getTopLevel().find(\".btn-primary\")[0].click();\n  });\n\n  it(\"handles cutting in attributes\", () => {\n    // force_reload = true;\n    const p = editor.dataRoot.querySelector(\"body>p:nth-of-type(8)\")!;\n    const initial = p.getAttributeNode(\"rend\")!;\n    const initialValue = initial.value;\n    const start = caretManager.fromDataLocation(initial, 2)!;\n    const end = caretManager.fromDataLocation(initial, 4)!;\n\n    caretManager.setRange(start, end);\n\n    // Synthetic event\n    const event = new $.Event(\"cut\");\n    editor.$guiRoot.trigger(event);\n    return delay(1).then(() => {\n      assert.equal(initial.value, initialValue.slice(0, 2) +\n                   initialValue.slice(4));\n    });\n  });\n});\n"]}