{"version":3,"file":"wed-typing-test.js","sourceRoot":"","sources":["../../../../../lib/tests/integration/wed-typing-test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { CaretManager } from \"wed/caret-manager\";\nimport { isElement } from \"wed/domtypeguards\";\nimport { childByClass, closestByClass, indexOf } from \"wed/domutil\";\nimport { Editor } from \"wed/editor\";\nimport * as key from \"wed/key\";\nimport * as keyConstants from \"wed/key-constants\";\n\nimport * as globalConfig from \"../base-config\";\nimport { caretCheck, EditorSetup,\n         getAttributeValuesFor } from \"../wed-test-util\";\n\nconst assert = chai.assert;\n\ndescribe(\"wed typing:\", () => {\n  let setup: EditorSetup;\n  let editor: Editor;\n  let caretManager: CaretManager;\n  let ps: NodeListOf<Element>;\n  let guiRoot: Element;\n  let titles: NodeListOf<Element>;\n\n  before(() => {\n    setup = new EditorSetup(\n      \"/base/build/standalone/lib/tests/wed_test_data/source_converted.xml\",\n      globalConfig.config,\n      document);\n    ({ editor } = setup);\n    return setup.init().then(() => {\n      // tslint:disable-next-line:no-any\n      (editor.validator as any)._validateUpTo(editor.dataRoot, -1);\n      caretManager = editor.caretManager;\n      guiRoot = editor.guiRoot;\n      ps = guiRoot.querySelectorAll(\".body .p\");\n      titles = guiRoot.getElementsByClassName(\"title\");\n    });\n  });\n\n  afterEach(() => {\n    setup.reset();\n  });\n\n  after(() => {\n    setup.restore();\n\n    // tslint:disable-next-line:no-any\n    (editor as any) = undefined;\n    // tslint:disable-next-line:no-any\n    (caretManager as any) = undefined;\n  });\n\n  it(\"typing BACKSPACE without caret\", () => {\n    assert.equal(caretManager.caret, undefined, \"no caret\");\n    editor.type(keyConstants.BACKSPACE);\n  });\n\n  it(\"typing DELETE without caret\", () => {\n    assert.equal(caretManager.getNormalizedCaret(), undefined, \"no caret\");\n    editor.type(keyConstants.DELETE);\n  });\n\n  it(\"typing text\", () => {\n    // Text node inside title.\n    const initial = titles[0].childNodes[1];\n    const parent = initial.parentNode!;\n    caretManager.setCaret(initial, 0);\n\n    // There was a version of wed which would fail this test. The fake caret\n    // would be inserted inside the text node, which would throw off the\n    // nodeToPath/pathToNode calculations.\n\n    editor.type(\"1\");\n    assert.equal(initial.nodeValue, \"1abcd\");\n    assert.equal(parent.childNodes.length, 3);\n\n    editor.type(\"1\");\n    assert.equal(initial.nodeValue, \"11abcd\");\n    assert.equal(parent.childNodes.length, 3);\n\n    // This is where wed used to fail.\n    editor.type(\"1\");\n    assert.equal(initial.nodeValue, \"111abcd\");\n    assert.equal(parent.childNodes.length, 3);\n  });\n\n  it(\"typing text when caret is adjacent to text (before text)\", () => {\n    // Text node inside title.\n    const initial = editor.dataRoot.querySelectorAll(\"body>p\")[3];\n    const his = initial.getElementsByTagName(\"hi\");\n    const hi = his[his.length - 1];\n\n    // We put the caret just after the last <hi>, which means it is just before\n    // the last text node.\n    caretManager.setCaret(initial, indexOf(initial.childNodes, hi) + 1);\n\n    const initialLength = initial.childNodes.length;\n\n    editor.type(\" \");\n    assert.equal(initial.lastChild!.textContent, \" c\");\n    assert.equal(initial.childNodes.length, initialLength);\n  });\n\n  it(\"typing text when caret is adjacent to text (after text)\", () => {\n    // Text node inside title.\n    const initial = editor.dataRoot.querySelectorAll(\"body>p\")[3];\n\n    // We put the caret just after the last child, a text node.\n    caretManager.setCaret(initial, initial.childNodes.length);\n\n    const initialLength = initial.childNodes.length;\n\n    editor.type(\" \");\n    assert.equal(initial.lastChild!.textContent, \"c \");\n    assert.equal(initial.childNodes.length, initialLength);\n  });\n\n  it(\"typing longer than the length of a text undo\", () => {\n    // Text node inside title.\n    const initial = titles[0].childNodes[1];\n    const parent = initial.parentNode!;\n    caretManager.setCaret(initial, 0);\n\n    const text =\n      // tslint:disable-next-line:no-any prefer-array-literal\n      new Array(((editor as any).textUndoMaxLength as number) + 1).join(\"a\");\n    editor.type(text);\n    assert.equal(initial.nodeValue, `${text}abcd`);\n    assert.equal(parent.childNodes.length, 3);\n  });\n\n  it(\"typing text after an element\", () => {\n    const initial = editor.dataRoot.querySelectorAll(\"body>p\")[1];\n    caretManager.setCaret(initial, 1);\n\n    editor.type(\" \");\n    assert.equal(initial.childNodes.length, 2);\n  });\n\n  it(\"typing text in phantom text does nothing\", () => {\n    const ref = childByClass(ps[2], \"ref\")!;\n    const initial = ref.childNodes[1];\n\n    // Make sure we're looking at the right thing.\n    assert.isTrue(isElement(initial) && initial.classList.contains(\"_phantom\"),\n                  \"initial is phantom\");\n    assert.equal(initial.textContent, \"(\", \"initial's value\");\n    caretManager.setCaret(initial, 1);\n\n    editor.type(\" \");\n    assert.equal(initial.textContent, \"(\", \"initial's value after\");\n  });\n\n  it(\"typing text moves the caret\", () => {\n    // Text node inside title.\n    const initial = titles[0].childNodes[1];\n    const parent = initial.parentNode!;\n    caretManager.setCaret(initial, 0);\n\n    // There was a version of wed which would fail this test. The fake caret\n    // would be inserted inside the text node, which would throw off the\n    // nodeToPath/pathToNode calculations.\n\n    editor.type(\"blah\");\n    assert.equal(initial.nodeValue, \"blahabcd\");\n    assert.equal(parent.childNodes.length, 3);\n    caretCheck(editor, initial, 4, \"caret after text insertion\");\n  });\n\n  it(\"typing text in an attribute inserts text\", () => {\n    // Text node inside title.\n    let initial = getAttributeValuesFor(ps[7])[0].firstChild as Text;\n    caretManager.setCaret(initial, 0);\n    assert.equal(initial.data, \"rend_value\");\n    editor.type(\"blah\");\n\n    // We have to refetch because the decorations have been redone.\n    initial = getAttributeValuesFor(ps[7])[0].firstChild as Text;\n    assert.equal(initial.data, \"blahrend_value\");\n    caretCheck(editor, initial, 4, \"caret after text insertion\");\n\n    // Check that the data is also modified\n    const dataNode = editor.toDataNode(initial) as Attr;\n    assert.equal(dataNode.value, \"blahrend_value\");\n  });\n\n  it(\"typing multiple spaces in an attribute normalizes the space\", () => {\n    // Text node inside title.\n    let initial = getAttributeValuesFor(ps[7])[0].firstChild as Text;\n    caretManager.setCaret(initial, 0);\n    assert.equal(initial.data, \"rend_value\");\n\n    editor.type(\" \");\n\n    // We have to refetch because the decorations have been redone.\n    initial = getAttributeValuesFor(ps[7])[0].firstChild as Text;\n    assert.equal(initial.data, \" rend_value\");\n    caretCheck(editor, initial, 1, \"caret after text insertion\");\n\n    // Check that the data is also modified\n    const dataNode = editor.toDataNode(initial) as Attr;\n    assert.equal(dataNode.value, \" rend_value\");\n\n    editor.type(\" \");\n\n    // We have to refetch because the decorations have been redone.\n    initial = getAttributeValuesFor(ps[7])[0].firstChild as Text;\n    assert.equal(initial.data, \" rend_value\");\n    caretCheck(editor, initial, 1, \"caret after text insertion\");\n\n    // Check that the data is also modified\n    assert.equal(dataNode.value, \" rend_value\");\n\n    caretManager.setCaret(initial, 11);\n\n    editor.type(\" \");\n\n    // We have to refetch because the decorations have been redone.\n    initial = getAttributeValuesFor(ps[7])[0].firstChild as Text;\n    assert.equal(initial.data, \" rend_value \");\n    caretCheck(editor, initial, 12, \"caret after text insertion\");\n\n    // Check that the data is also modified\n    assert.equal(dataNode.value, \" rend_value \");\n\n    editor.type(\" \");\n\n    // We have to refetch because the decorations have been redone.\n    initial = getAttributeValuesFor(ps[7])[0].firstChild as Text;\n    assert.equal(initial.data, \" rend_value \");\n    caretCheck(editor, initial, 12, \"caret after text insertion\");\n\n    // Check that the data is also modified\n    assert.equal(dataNode.value, \" rend_value \");\n  });\n\n  it(\"typing text in an empty attribute inserts text\", () => {\n    // Text node inside title.\n    const initial = getAttributeValuesFor(ps[9])[0].firstChild as Element;\n    assert.isTrue(initial.classList.contains(\"_placeholder\"));\n    caretManager.setCaret(initial, 0);\n    editor.type(\"blah\");\n\n    // We have to refetch because the decorations have been redone.\n    const second = getAttributeValuesFor(ps[9])[0].firstChild as Text;\n    assert.equal(second.data, \"blah\");\n    caretCheck(editor, second, 4, \"caret after text insertion\");\n\n    // Check that the data is also modified\n    const dataNode = editor.toDataNode(second) as Attr;\n    assert.equal(dataNode.value, \"blah\");\n  });\n\n  it(\"typing a double quote in an attribute inserts a double quote\", () => {\n    // Text node inside title.\n    let initial = getAttributeValuesFor(ps[7])[0].firstChild as Text;\n    caretManager.setCaret(initial, 0);\n    assert.equal(initial.data, \"rend_value\");\n    editor.type(\"\\\"\");\n\n    // We have to refetch because the decorations have been redone.\n    initial = getAttributeValuesFor(ps[7])[0].firstChild as Text;\n    assert.equal(initial.data, \"\\\"rend_value\");\n    caretCheck(editor, initial, 1, \"caret after text insertion\");\n\n    // Check that the data is also modified\n    const dataNode = editor.toDataNode(initial) as Attr;\n    assert.equal(dataNode.value, \"\\\"rend_value\");\n  });\n\n  it(\"typing a single quote in an attribute inserts a single quote\", () => {\n    // Text node inside title.\n    let initial = getAttributeValuesFor(ps[7])[0].firstChild as Text;\n    caretManager.setCaret(initial, 0);\n    assert.equal(initial.data, \"rend_value\");\n    editor.type(\"'\");\n\n    // We have to refetch because the decorations have been redone.\n    initial = getAttributeValuesFor(ps[7])[0].firstChild as Text;\n    assert.equal(initial.data, \"'rend_value\");\n    caretCheck(editor, initial, 1, \"caret after text insertion\");\n\n    // Check that the data is also modified\n    const dataNode = editor.toDataNode(initial) as Attr;\n    assert.equal(dataNode.value, \"'rend_value\");\n  });\n\n  it(\"typing an open angle bracket in an attribute inserts an open \" +\n     \"angle bracket\",\n     () => {\n       // Text node inside title.\n       let initial = getAttributeValuesFor(ps[7])[0].firstChild as Text;\n       caretManager.setCaret(initial, 0);\n       assert.equal(initial.data, \"rend_value\");\n       editor.type(\"<\");\n\n       // We have to refetch because the decorations have been redone.\n       initial = getAttributeValuesFor(ps[7])[0].firstChild as Text;\n       assert.equal(initial.data, \"<rend_value\");\n       caretCheck(editor, initial, 1, \"caret after text insertion\");\n\n       // Check that the data is also modified\n       const dataNode = editor.toDataNode(initial) as Attr;\n       assert.equal(dataNode.value, \"<rend_value\");\n     });\n\n  it(\"typing DELETE in an attribute deletes text\", () => {\n    // Text node inside title.\n    let initial = getAttributeValuesFor(ps[7])[0].firstChild as Text;\n    caretManager.setCaret(initial, 0);\n    assert.equal(initial.data, \"rend_value\");\n    editor.type(keyConstants.DELETE);\n\n    // We have to refetch because the decorations have been redone.\n    initial = getAttributeValuesFor(ps[7])[0].firstChild as Text;\n    assert.equal(initial.data, \"end_value\");\n    caretCheck(editor, initial, 0, \"caret after deletion\");\n\n    // Check that the data is also modified\n    const dataNode = editor.toDataNode(initial) as Attr;\n    assert.equal(dataNode.value, \"end_value\");\n  });\n\n  it(\"typing DELETE in attribute when no more can be deleted is a noop\", () => {\n    // Text node inside title.\n    const p = ps[8];\n    const initial = getAttributeValuesFor(p)[0].firstChild as Text;\n    caretManager.setCaret(initial, 0);\n    assert.equal(initial.data, \"abc\");\n    editor.type(keyConstants.DELETE);\n    editor.type(keyConstants.DELETE);\n    editor.type(keyConstants.DELETE);\n\n    // We have to refetch because the decorations have been\n    // redone.\n    let laterValue = getAttributeValuesFor(p)[0];\n    assert.isTrue((laterValue.firstChild! as Element).classList\n                  .contains(\"_placeholder\"));\n    assert.equal(laterValue.childNodes.length, 1);\n    caretCheck(editor, laterValue.firstChild!, 0, \"caret after deletion\");\n\n    // Check that the data is also modified\n    let dataNode = editor.toDataNode(laterValue) as Attr;\n    assert.equal(dataNode.value, \"\");\n\n    // Overdeleting\n    editor.type(keyConstants.DELETE);\n\n    laterValue = getAttributeValuesFor(p)[0];\n    assert.isTrue((laterValue.firstChild! as Element).classList\n                  .contains(\"_placeholder\"));\n    assert.equal(laterValue.childNodes.length, 1);\n    caretCheck(editor, laterValue.firstChild!, 0, \"caret after deletion\");\n\n    // Check that the data is also modified\n    dataNode = editor.toDataNode(laterValue) as Attr;\n    assert.equal(dataNode.value, \"\");\n  });\n\n  it(\"typing BACKSPACE in an attribute deletes text\", () => {\n    // Text node inside title.\n    let initial = getAttributeValuesFor(ps[7])[0].firstChild as Text;\n    caretManager.setCaret(initial, 4);\n    assert.equal(initial.data, \"rend_value\");\n    editor.type(keyConstants.BACKSPACE);\n\n    // We have to refetch because the decorations have been redone.\n    initial = getAttributeValuesFor(ps[7])[0].firstChild as Text;\n    assert.equal(initial.data, \"ren_value\");\n    caretCheck(editor, initial, 3, \"caret after deletion\");\n\n    // Check that the data is also modified\n    const dataNode = editor.toDataNode(initial) as Attr;\n    assert.equal(dataNode.value, \"ren_value\");\n  });\n\n  it(\"typing BACKSPACE in attribute when no more can be deleted is a noop\",\n     () => {\n       // Text node inside title.\n       const p = ps[8];\n       const initial = getAttributeValuesFor(p)[0].firstChild as Text;\n       caretManager.setCaret(initial, 3);\n       assert.equal(initial.data, \"abc\");\n       editor.type(keyConstants.BACKSPACE);\n       editor.type(keyConstants.BACKSPACE);\n       editor.type(keyConstants.BACKSPACE);\n\n       // We have to refetch because the decorations have been redone.\n       let laterValue = getAttributeValuesFor(p)[0];\n       assert.isTrue((laterValue.firstChild as Element)\n                     .classList.contains(\"_placeholder\"));\n       assert.equal(laterValue.childNodes.length, 1);\n       caretCheck(editor, laterValue.firstChild!, 0, \"caret after deletion\");\n\n       // Check that the data is also modified\n       let dataNode = editor.toDataNode(laterValue) as Attr;\n       assert.equal(dataNode.value, \"\");\n\n       // Overdeleting\n       editor.type(keyConstants.BACKSPACE);\n\n       laterValue = getAttributeValuesFor(p)[0];\n       assert.isTrue((laterValue.firstChild as Element)\n                     .classList.contains(\"_placeholder\"));\n       assert.equal(laterValue.childNodes.length, 1);\n       caretCheck(editor, laterValue.firstChild!, 0, \"caret after deletion\");\n\n       // Check that the data is also modified\n       dataNode = editor.toDataNode(laterValue) as Attr;\n       assert.equal(dataNode.value, \"\");\n     });\n\n  it(\"typing a non-breaking space converts it to a regular space\", () => {\n    // Text node inside title.\n    const initial = titles[0].childNodes[1];\n    caretManager.setCaret(initial, 0);\n\n    editor.type(\"\\u00A0\");\n    assert.equal(initial.nodeValue, \" abcd\");\n  });\n\n  it(\"typing a zero-width space is a no-op\", () => {\n    // Text node inside title.\n    const initial = titles[0].childNodes[1];\n    caretManager.setCaret(initial, 0);\n\n    editor.type(\"\\u200B\");\n    assert.equal(initial.nodeValue, \"abcd\");\n  });\n\n  it(\"typing adjancent spaces inserts only one space\", () => {\n    // Text node inside title.\n    const initial = titles[0].childNodes[1];\n    const parent = initial.parentNode!;\n    caretManager.setCaret(initial, 0);\n\n    editor.type(\" \");\n    assert.equal(initial.nodeValue, \" abcd\");\n    assert.equal(parent.childNodes.length, 3);\n\n    editor.type(\" \");\n    assert.equal(initial.nodeValue, \" abcd\");\n    assert.equal(parent.childNodes.length, 3);\n\n    caretManager.setCaret(initial, 5);\n    editor.type(\" \");\n    assert.equal(initial.nodeValue, \" abcd \");\n    assert.equal(parent.childNodes.length, 3);\n\n    editor.type(\" \");\n    assert.equal(initial.nodeValue, \" abcd \");\n    assert.equal(parent.childNodes.length, 3);\n  });\n\n  it(\"typing a control character in a placeholder\", (done) => {\n    const ph = guiRoot.getElementsByClassName(\"_placeholder\")[0];\n    caretManager.setCaret(ph, 0);\n    const ctrlSomething = key.makeCtrlEqKey(\"A\");\n    $(editor.widget).on(\"wed-global-keydown.btw-mode\", (_wedEv, ev) => {\n      if (ctrlSomething.matchesEvent(ev)) {\n        done();\n      }\n    });\n    editor.type(ctrlSomething);\n  });\n\n  it(\"clicking a gui element after typing text\", (done) => {\n    // Text node inside paragraph.\n    const initial = editor.dataRoot.querySelector(\"body>p\")!;\n    caretManager.setCaret(initial.firstChild, 1);\n\n    editor.type(\" \");\n    assert.equal(initial.firstChild!.textContent, \"B lah blah \");\n\n    const caret = caretManager.getNormalizedCaret()!;\n    const lastGUI = closestByClass(caret.node, \"p\")!.lastElementChild!;\n    assert.isTrue(lastGUI.classList.contains(\"_gui\"));\n    const lastGUISpan = lastGUI.firstElementChild!;\n\n    // We're simulating how Chrome would handle it. When a mousedown event\n    // occurs, Chrome moves the caret *after* the mousedown event is\n    // processed.\n    const event = new $.Event(\"mousedown\");\n    event.target = lastGUISpan;\n    caretManager.setCaret(caret);\n\n    // This simulates the movement of the caret after the mousedown event is\n    // processed. This will be processed after the mousedown handler but before\n    // _seekCaret is run.\n    window.setTimeout(() => {\n      caretManager.setCaret(lastGUISpan, 0);\n    }, 0);\n\n    // We trigger the event here so that the order specified above is respected.\n    $(lastGUISpan).trigger(event);\n\n    window.setTimeout(() => {\n      const clickEvent = new $.Event(\"click\");\n      const offset = $(lastGUISpan).offset()!;\n      clickEvent.pageX = offset.left;\n      clickEvent.pageY = offset.top;\n      clickEvent.target = lastGUISpan;\n      $(lastGUISpan).trigger(clickEvent);\n      done();\n    }, 1);\n  });\n\n  it(\"clicking a phantom element after typing text works\", (done) => {\n    // We create a special phantom element because the generic mode does not\n    // create any.\n    const title = editor.guiRoot.getElementsByClassName(\"title\")[0];\n    const phantom = title.ownerDocument.createElement(\"span\");\n    phantom.className = \"_phantom\";\n    phantom.textContent = \"phantom\";\n    title.insertBefore(phantom, null);\n\n    // Text node inside paragraph.\n    const initial = editor.dataRoot.querySelector(\"body>p\")!;\n    caretManager.setCaret(initial.firstChild, 1);\n\n    editor.type(\" \");\n    assert.equal(initial.firstChild!.nodeValue, \"B lah blah \");\n\n    const caret = caretManager.getNormalizedCaret()!;\n\n    // We're simulating how Chrome would handle it. When a mousedown event\n    // occurs, Chrome moves the caret *after* the mousedown event is processed.\n    const event = new $.Event(\"mousedown\");\n    event.target = phantom;\n    caretManager.setCaret(caret);\n\n    // This simulates the movement of the caret after the mousedown event is\n    // processed. This will be processed after the mousedown handler but before\n    // _seekCaret is run.\n    window.setTimeout(() => {\n      caretManager.setCaret(phantom, 0);\n    }, 0);\n\n    // We trigger the event here so that the order specified above is respected.\n    $(phantom).trigger(event);\n\n    window.setTimeout(() => {\n      const clickEvent = new $.Event(\"click\");\n      clickEvent.target = phantom;\n      $(phantom).trigger(clickEvent);\n      done();\n    }, 1);\n  });\n});\n"]}