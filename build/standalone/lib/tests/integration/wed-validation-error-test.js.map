{"version":3,"file":"wed-validation-error-test.js","sourceRoot":"","sources":["../../../../../lib/tests/integration/wed-validation-error-test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport * as browsers from \"wed/browsers\";\nimport { CaretManager } from \"wed/caret-manager\";\nimport { isAttr } from \"wed/domtypeguards\";\nimport { Editor } from \"wed/editor\";\nimport { GUIValidationError } from \"wed/gui-validation-error\";\nimport * as keyConstants from \"wed/key-constants\";\nimport { TaskRunner } from \"wed/task-runner\";\nimport { ValidationController } from \"wed/validation-controller\";\n\nimport * as globalConfig from \"../base-config\";\nimport { makeFakePasteEvent, waitForSuccess } from \"../util\";\nimport { EditorSetup, firstGUI } from \"../wed-test-util\";\n\nconst assert = chai.assert;\nconst _slice = Array.prototype.slice;\n\ndescribe(\"wed validation errors:\", () => {\n  let setup: EditorSetup;\n  let editor: Editor;\n  let caretManager: CaretManager;\n  let controller: ValidationController;\n  let processRunner: TaskRunner;\n  let refreshRunner: TaskRunner;\n  let guiRoot: Element;\n\n  before(() => {\n    setup = new EditorSetup(\n      \"/base/build/standalone/lib/tests/wed_test_data/source_converted.xml\",\n      globalConfig.config,\n      document);\n    ({ editor } = setup);\n    return setup.init().then(() => {\n      // tslint:disable-next-line:no-any\n      (editor.validator as any)._validateUpTo(editor.dataRoot, -1);\n      // tslint:disable-next-line:no-any\n      processRunner = (editor as any).validationController.processErrorsRunner;\n      // tslint:disable-next-line:no-any\n      refreshRunner = (editor as any).validationController.refreshErrorsRunner;\n      caretManager = editor.caretManager;\n      // tslint:disable-next-line:no-any\n      controller = (editor as any).validationController;\n      guiRoot = editor.guiRoot;\n    });\n  });\n\n  beforeEach(() => {\n    // Force the processing of errors\n    controller.processErrors();\n  });\n\n  afterEach(() => {\n    setup.reset();\n  });\n\n  after(() => {\n    setup.restore();\n\n    // tslint:disable-next-line:no-any\n    (editor as any) = undefined;\n    // tslint:disable-next-line:no-any\n    (caretManager as any) = undefined;\n    // tslint:disable-next-line:no-any\n    (controller as any) = undefined;\n  });\n\n  it(\"validation errors added by the mode\", () => {\n    const errors = controller.copyErrorList();\n    const last = errors[errors.length - 1];\n    assert.equal(last.ev.error.toString(), \"Test\");\n  });\n\n  it(\"refreshErrors does not change the number of errors\", async () => {\n    await processRunner.onCompleted();\n    const count = controller.copyErrorList().length;\n    const listCount = editor.$errorList.children(\"li\").length;\n    const markerCount = guiRoot.getElementsByClassName(\"wed-validation-error\")\n      .length;\n\n    controller.refreshErrors();\n    await refreshRunner.onCompleted();\n\n    assert.equal(count, controller.copyErrorList().length,\n                 \"the number of recorded errors should be the same\");\n    assert.equal(listCount, editor.$errorList.children(\"li\").length,\n                 \"the number of errors in the panel should be the same\");\n    assert.equal(markerCount,\n                 guiRoot.getElementsByClassName(\"wed-validation-error\").length,\n                 \"the number of markers should be the same\");\n  });\n\n  // tslint:disable-next-line:mocha-no-side-effect-code\n  const itNoIE = browsers.MSIE ? it.skip : it;\n\n  // This cannot be run on IE due to the way IE screws up the\n  // formatting of contenteditable elements.\n  // tslint:disable-next-line:mocha-no-side-effect-code\n  itNoIE(\"errors for inline elements in a correct position\", async () => {\n    await processRunner.onCompleted();\n    const p = guiRoot.querySelectorAll(\".body .p\")[12];\n    const dataP = editor.toDataNode(p)!;\n    const dataMonogr = dataP.childNodes[0] as Element;\n    const monogr = $.data(dataMonogr, \"wed_mirror_node\");\n    assert.equal(dataMonogr.tagName, \"monogr\");\n\n    let pError;\n    let pErrorIx: number = 0;\n    let monogrError;\n    let monogrErrorIx: number = 0;\n    let i = 0;\n    for (const error of controller.copyErrorList()) {\n      if (pError === undefined && error.ev.node === dataP) {\n        pError = error;\n        pErrorIx = i;\n      }\n\n      if (monogrError === undefined && error.ev.node === dataMonogr) {\n        monogrError = error;\n        monogrErrorIx = i;\n      }\n      i++;\n    }\n\n    // Make sure we found our errors.\n    assert.isDefined(pError, \"no error for our paragraph\");\n    assert.isDefined(monogrError, \"no error for our monogr\");\n\n    // Find the corresponding markers\n    // tslint:disable-next-line:no-any\n    const markers = (editor as any).errorLayer.el.children;\n    const pMarker = markers[pErrorIx];\n    const monogrMarker = markers[monogrErrorIx];\n    assert.isDefined(pMarker, \"should have an error for our paragraph\");\n    assert.isDefined(monogrMarker, \"should have an error for our monogr\");\n\n    const pMarkerRect = pMarker.getBoundingClientRect();\n\n    // The pMarker should appear to the right of the start label for the\n    // paragraph and overlap with the start label for monogr.\n    const pStartLabel = firstGUI(p)!;\n    assert.isTrue(pStartLabel.classList.contains(\"__start_label\"),\n                  \"should should have a start label for the paragraph\");\n    const pStartLabelRect = pStartLabel.getBoundingClientRect();\n    assert.isTrue(pMarkerRect.left >= pStartLabelRect.right,\n                  \"the paragraph error marker should be to the right of the \\\nstart label for the paragraph\");\n    // We used to check the top too, but the changes in caret size make that\n    // impractical. So we check only the bottom position.\n    assert.isTrue(Math.abs(pMarkerRect.bottom - pStartLabelRect.bottom) <= 5,\n                  \"the paragraph error marker should have a bottom which is \\\nwithin 5 pixels of the bottom of the start label for the paragraph\");\n\n    const monogrStartLabel = firstGUI(monogr)!;\n    assert.isTrue(monogrStartLabel.classList.contains(\"__start_label\"),\n                  \"should should have a start label for the paragraph\");\n    const monogrStartLabelRect = monogrStartLabel.getBoundingClientRect();\n    assert.isTrue(Math.abs(pMarkerRect.left - monogrStartLabelRect.left) <= 5,\n                  \"the paragraph error marker have a left side within 5 pixels \\\nof the left side of the start label for the monogr\");\n\n    // The monogrMarker should be to the right of the monogrStartLabel.\n    const monogrMarkerRect = monogrMarker.getBoundingClientRect();\n\n    assert.isTrue(monogrMarkerRect.left >= monogrStartLabelRect.right,\n                  \"the monogr error marker should be to the right of the \\\nstart label for the monogr\");\n    monogrMarker.scrollIntoView();\n    // We used to check the top too, but the changes in caret size make that\n    // impractical. So we check only the bottom position.\n    assert.isTrue(Math.abs(monogrMarkerRect.bottom -\n                           monogrStartLabelRect.bottom) <= 5,\n                  \"the monogr error marker should have a bottom which is \\\nwithin 5 pixels of the bottom of the start label for the monogr\");\n  });\n\n  it(\"the attributes error are not linked\", async () => {\n    editor.setLabelVisibilityLevel(0);\n\n    await processRunner.onCompleted();\n    let cases = 0;\n    for (const { ev, item } of controller.copyErrorList()) {\n      if (!isAttr(ev.node)) {\n        continue;\n      }\n      assert.isTrue(item!.getElementsByTagName(\"a\").length === 0,\n                    \"there should be no link in the item\");\n      assert.equal(\n        item!.title,\n        \"This error belongs to an attribute which is not currently displayed.\",\n        \"the item should have the right title\");\n      cases++;\n    }\n    assert.equal(cases, 5);\n  });\n\n  function assertNewMarkers(orig: Element[], after: Element[],\n                            event: string): void {\n    // Make sure all markers are new.\n    const note = ` after ${event}`;\n    for (const item of orig) {\n      assert.notInclude(after, item,\n                        `the list of markers should be new${note}`);\n    }\n\n    // We do not compare the number of errors, because changing the label\n    // visibility may change the number of errors shown to the user.\n  }\n\n  describe(\"recreates errors when\", () => {\n    it(\"changing label visibility level\", async () => {\n      // Changing label visibility does not merely refresh the errors but\n      // recreates them because errors that were visible may become invisible or\n      // errors that were invisible may become visible.\n\n      await processRunner.onCompleted();\n      // tslint:disable-next-line:no-any\n      const errorLayer = (editor as any).errorLayer.el as Element;\n      let orig = _slice.call(errorLayer.children);\n\n      // Reduce the visibility level.\n      editor.type(keyConstants.LOWER_LABEL_VISIBILITY);\n      let after;\n      await waitForSuccess(() => {\n        after = _slice.call(errorLayer.children);\n        assertNewMarkers(orig, after, \"decreasing the level\");\n      });\n\n      orig = after;\n\n      // Increase visibility level\n      editor.type(keyConstants.INCREASE_LABEL_VISIBILITY);\n      await waitForSuccess(() => {\n        assertNewMarkers(orig, _slice.call(errorLayer.children),\n                         \"increasing the level\");\n      });\n    });\n\n    it(\"moving into or out of a label with autohidden attributes\", async () => {\n      // Moving into or ouot of a label with autohidden attributes does not\n      // merely refresh the errors but recreates them because errors that were\n      // visible may become invisible or errors that were invisible may become\n      // visible.\n\n      function getError(): GUIValidationError {\n        const errors = controller.copyErrorList();\n        let found: GUIValidationError | undefined;\n        for (const error of errors) {\n          if (error.item!.textContent === \"attribute not allowed here: xxx\") {\n            found = error;\n          }\n        }\n\n        assert.isDefined(found);\n\n        return found!;\n      }\n\n      await processRunner.onCompleted();\n      // tslint:disable-next-line:no-any\n      const errorLayer = (editor as any).errorLayer.el as Element;\n      let orig = _slice.call(errorLayer.children);\n\n      const divs = editor.dataRoot.querySelectorAll(\"body>div\");\n      const div = divs[divs.length - 1];\n\n      // We check that there is an error for the \"xxx\" attribute, which has no\n      // link (=== no marker).\n      assert.isUndefined(getError().marker);\n\n      // Move into the label.\n      editor.caretManager.setCaret(div, 0);\n      editor.caretManager.move(\"left\");\n      let after;\n      await processRunner.onCompleted();\n      await waitForSuccess(() => {\n        after = _slice.call(errorLayer.children);\n        assertNewMarkers(orig, after, \"moving into the label\");\n        // Now it has a link (=== has a marker).\n        assert.isDefined(getError().marker);\n      });\n\n      orig = after;\n\n      // Move out of the label.\n      editor.caretManager.move(\"right\");\n      await processRunner.onCompleted();\n      await waitForSuccess(() => {\n        assertNewMarkers(orig, _slice.call(errorLayer.children),\n                         \"moving out of the label\");\n        // No link again.\n        assert.isUndefined(getError().marker);\n      });\n    });\n  });\n\n  it(\"refreshes error positions when pasting\", async () => {\n    await refreshRunner.onCompleted();\n\n    // Paste.\n    const initial = editor.dataRoot.querySelector(\"body>p\")!.firstChild!;\n    caretManager.setCaret(initial, 0);\n    const initialValue = initial.textContent;\n\n    // Synthetic event\n    const event = makeFakePasteEvent({\n      types: [\"text/plain\"],\n      getData: () => \"abcdef\",\n    });\n    editor.$guiRoot.trigger(event);\n    assert.equal(initial.nodeValue, `abcdef${initialValue}`);\n\n    // refreshRunner returns to an incomplete states, which means there will be\n    // a refresh.\n    assert.isFalse(refreshRunner.completed);\n  });\n\n  it(\"refreshes error positions when typing text\", async () => {\n    await refreshRunner.onCompleted();\n\n    // Text node inside title.\n    const initial = guiRoot.getElementsByClassName(\"title\")[0].childNodes[1];\n    const parent = initial.parentNode!;\n    caretManager.setCaret(initial, 0);\n\n    editor.type(\"blah\");\n    assert.equal(initial.nodeValue, \"blahabcd\");\n    assert.equal(parent.childNodes.length, 3);\n\n    // refreshRunner returns to an incomplete states, which means there will be\n    // a refresh.\n    assert.isFalse(refreshRunner.completed);\n  });\n\n  it(\"refreshes error positions when typing DELETE\", async () => {\n    await refreshRunner.onCompleted();\n\n    // Text node inside title.\n    const initial = guiRoot.getElementsByClassName(\"title\")[0].childNodes[1];\n    const parent = initial.parentNode!;\n    caretManager.setCaret(initial, 0);\n\n    editor.type(keyConstants.DELETE);\n    assert.equal(initial.nodeValue, \"bcd\");\n    assert.equal(parent.childNodes.length, 3);\n\n    // refreshRunner returns to an incomplete states, which means there will be\n    // a refresh.\n    assert.isFalse(refreshRunner.completed);\n  });\n\n  it(\"refreshes error positions when typing BACKSPACE\", async () => {\n    await refreshRunner.onCompleted();\n\n    // Text node inside title.\n    const initial = guiRoot.getElementsByClassName(\"title\")[0].childNodes[1];\n    const parent = initial.parentNode!;\n    caretManager.setCaret(initial, 4);\n\n    editor.type(keyConstants.BACKSPACE);\n    assert.equal(initial.nodeValue, \"abc\");\n    assert.equal(parent.childNodes.length, 3);\n\n    // refreshRunner returns to an incomplete states, which means there will be\n    // a refresh.\n    assert.isFalse(refreshRunner.completed);\n  });\n});\n"]}