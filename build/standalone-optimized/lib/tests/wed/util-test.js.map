{"version":3,"sources":["../../../tests/wed/util-test.ts"],"names":[],"mappings":"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","file":"util-test.js","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport { AnyName, Name, NameChoice, NameResolver, NsName } from \"salve\";\n\nimport * as util from \"wed/util\";\n\nconst assert = chai.assert;\n\ndescribe(\"util\", () => {\n  describe(\"decode attribute name\", () => {\n    it(\"no prefix\", () => {\n      assert.equal(util.decodeAttrName(\"data-wed-blah\"), \"blah\");\n    });\n\n    it(\"prefix\", () => {\n      assert.equal(util.decodeAttrName(\"data-wed-btw---blah\"), \"btw:blah\");\n    });\n\n    it(\"prefix dashes\", () => {\n      assert.equal(\n        util.decodeAttrName(\"data-wed-btw---blah-one--two----three-----four\"),\n        \"btw:blah-one--two---three----four\");\n    });\n  });\n\n  describe(\"encode attribute name\", () => {\n    it(\"no prefix\", () => {\n      assert.equal(util.encodeAttrName(\"blah\"), \"data-wed-blah\");\n    });\n\n    it(\"prefix\", () => {\n      assert.equal(util.encodeAttrName(\"btw:blah\"), \"data-wed-btw---blah\");\n    });\n\n    it(\"prefix dashes\", () => {\n      assert.equal(util.encodeAttrName(\"btw:blah-one--two---three----four\"),\n                   \"data-wed-btw---blah-one--two----three-----four\");\n    });\n  });\n\n  describe(\"classFromOriginalName\", () => {\n    it(\"no namespace\", () => {\n      assert.equal(util.classFromOriginalName(\"li\", { \"\": \"\" }),\n                   \"._local_li._xmlns_._real\");\n    });\n\n    it(\"match all\", () => {\n      assert.equal(util.classFromOriginalName(\"*\", {}), \"._real\");\n    });\n\n    it(\"with namespace\", () => {\n      assert.equal(util.classFromOriginalName(\"btw:foo\", {\n        // tslint:disable-next-line:no-http-string\n        btw: \"http://mangalamresearch.org/ns/btw-storage\",\n      }), \"._local_foo.\\\n_xmlns_http\\\\:\\\\/\\\\/mangalamresearch\\\\.org\\\\/ns\\\\/btw-storage._real\");\n    });\n  });\n\n  describe(\"distFromDeltas\", () => {\n    it(\"works\", () => {\n      assert.equal(util.distFromDeltas(0, 0), 0);\n      assert.equal(util.distFromDeltas(3, 4), 5);\n    });\n  });\n\n  describe(\"distFromRect\", () => {\n    it(\"returns 0 when point inside\", () => {\n      assert.equal(util.distFromRect(5, 5, 0, 0, 10, 10), 0);\n    });\n\n    it(\"returns 0 when point at corners\", () => {\n      assert.equal(util.distFromRect(0, 0, 0, 0, 10, 10), 0);\n      assert.equal(util.distFromRect(0, 10, 0, 0, 10, 10), 0);\n      assert.equal(util.distFromRect(10, 0, 0, 0, 10, 10), 0);\n      assert.equal(util.distFromRect(10, 10, 0, 0, 10, 10), 0);\n    });\n\n    it(\"returns dist from top when point above\", () => {\n      assert.equal(util.distFromRect(4, -5, 0, 0, 10, 10), 5);\n    });\n\n    it(\"returns dist from bottom when point below\", () => {\n      assert.equal(util.distFromRect(4, 15, 0, 0, 10, 10), 5);\n    });\n\n    it(\"returns dist from left when point left\", () => {\n      assert.equal(util.distFromRect(-5, 4, 0, 0, 10, 10), 5);\n    });\n\n    it(\"returns dist from right when point right\", () => {\n      assert.equal(util.distFromRect(15, 4, 0, 0, 10, 10), 5);\n    });\n\n    it(\"returns min dist when point at corner\", () => {\n      assert.equal(util.distFromRect(-5, -12, 0, 0, 10, 10), 13);\n      assert.equal(util.distFromRect(13, -4, 0, 0, 10, 10), 5);\n      assert.equal(util.distFromRect(-4, 13, 0, 0, 10, 10), 5);\n      assert.equal(util.distFromRect(15, 22, 0, 0, 10, 10), 13);\n    });\n  });\n\n  describe(\"convertPatternObj\", () => {\n    let nr: NameResolver;\n    before(() => {\n      nr = new NameResolver();\n      nr.definePrefix(\"\", \"default\");\n      nr.definePrefix(\"prefix\", \"uri\");\n      nr.definePrefix(\"prefix2\", \"uri2\");\n    });\n\n    it(\"converts a Name\", () => {\n      const name = new Name(\"\", \"uri\", \"name\");\n      assert.equal(util.convertPatternObj(name.toObject(), nr), \"prefix:name\");\n    });\n\n    it(\"converts a Name with an unprefixed namespace\", () => {\n      const name = new Name(\"\", \"unprefixed\", \"name\");\n      assert.equal(util.convertPatternObj(name.toObject(), nr),\n                   \"{unprefixed}name\");\n    });\n\n    it(\"converts a Name with a default namespace\", () => {\n      const name = new Name(\"\", \"default\", \"name\");\n      assert.equal(util.convertPatternObj(name.toObject(), nr), \"name\");\n    });\n\n    it(\"converts an NsName\", () => {\n      const name = new NsName(\"\", \"uri\");\n      assert.equal(util.convertPatternObj(name.toObject(), nr), \"prefix:*\");\n    });\n\n    it(\"converts an NsName with a default namespace\", () => {\n      const name = new NsName(\"\", \"default\");\n      assert.equal(util.convertPatternObj(name.toObject(), nr), \"*\");\n    });\n\n    it(\"converts an NsName with an unprefixed namespace\", () => {\n      const name = new NsName(\"\", \"unprefixed\");\n      assert.equal(util.convertPatternObj(name.toObject(), nr),\n                   \"{unprefixed}*\");\n    });\n\n    it(\"converts an NsName with exception\", () => {\n      const name = new NsName(\"\", \"uri\", new Name(\"\", \"uri\", \"name\"));\n      assert.equal(util.convertPatternObj(name.toObject(), nr),\n                   \"prefix:* except (prefix:name)\");\n    });\n\n    it(\"converts an AnyName\", () => {\n      const name = new AnyName(\"\");\n      assert.equal(util.convertPatternObj(name.toObject(), nr), \"*:*\");\n    });\n\n    it(\"converts an AnyName with exception\", () => {\n      const name = new AnyName(\"\", new Name(\"\", \"uri\", \"name\"));\n      assert.equal(util.convertPatternObj(name.toObject(), nr),\n                   \"*:* except (prefix:name)\");\n    });\n\n    it(\"converts a NameChoice\", () => {\n      const name = new NameChoice(\"\", [\n        new Name(\"\", \"uri\", \"name\"),\n        new Name(\"\", \"uri2\", \"name2\"),\n      ]);\n      assert.equal(util.convertPatternObj(name.toObject(), nr),\n                   \"(prefix:name) or (prefix2:name2)\");\n    });\n  });\n});\n\n//  LocalWords:  requirejs util chai classFromOriginalName namespace\n//  LocalWords:  distFromDeltas btw distFromRect li Dubeau MPL\n//  LocalWords:  Mangalam RequireJS\n"]}