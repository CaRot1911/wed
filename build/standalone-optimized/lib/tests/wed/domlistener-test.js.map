{"version":3,"file":"domlistener-test.js","sourceRoot":"","sources":["../../../../../lib/tests/wed/domlistener-test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport * as $ from \"jquery\";\n\nimport * as dloc from \"wed/dloc\";\nimport { AddedElementHandler, AttributeChangedHandler, ChildrenChangedHandler,\n         ChildrenChangingHandler, DOMListener, ExcludedElementHandler,\n         ExcludingElementHandler, IncludedElementHandler, RemovedElementHandler,\n         RemovingElementHandler, TextChangedHandler } from \"wed/domlistener\";\nimport { indexOf } from \"wed/domutil\";\nimport { TreeUpdater } from \"wed/tree-updater\";\n\nconst assert = chai.assert;\n\n// tslint:disable-next-line:completed-docs\nclass Mark {\n  private count: number = 0;\n  private readonly counts: Record<string, number> = Object.create(null);\n\n  constructor(private readonly totalExpected: number,\n              private readonly countsExpected: Record<string, number>,\n              readonly listener: DOMListener,\n              private readonly done: () => void) {}\n\n  check(): void {\n    // We iterate so that we can get a precise error message.\n    for (const k of Object.keys(this.countsExpected)) {\n      assert.equal(this.counts[k], this.countsExpected[k], `count for ${k}`);\n    }\n\n    for (const k of Object.keys(this.counts)) {\n      assert.equal(this.counts[k], this.countsExpected[k]);\n    }\n\n    assert.equal(this.count, this.totalExpected, \"total mark count\");\n    this.done();\n  }\n\n  mark(label: string): void {\n    if (this.counts[label] === undefined) {\n      this.counts[label] = 0;\n    }\n\n    this.counts[label]++;\n\n    this.count++;\n  }\n}\n\ndescribe(\"domlistener\", () => {\n  let domroot: HTMLElement;\n  let root: HTMLElement;\n  let $root: JQuery;\n  let fragmentToAdd: HTMLElement;\n  let listener: DOMListener;\n  let treeUpdater: TreeUpdater;\n  let mark: Mark;\n  let marker: HTMLElement;\n\n  before(() => {\n    // This is a fake element we add to the root to know when we've seen\n    // everything we care about.\n    marker = document.createElement(\"div\");\n    marker.className = \"_real _marker\";\n\n    domroot = document.createElement(\"div\");\n    document.body.appendChild(domroot);\n  });\n\n  after(() => {\n    document.body.removeChild(domroot);\n  });\n\n  beforeEach(() => {\n    // Create a new fragment each time.\n    // tslint:disable-next-line:no-jquery-raw-elements\n    fragmentToAdd = $(\"<div class='_real ul'><div class='_real li'>A</div>\\\n<div class='_real li'>B</div></div>\")[0] as HTMLElement;\n    // tslint:disable-next-line:no-inner-html\n    domroot.innerHTML = \"\";\n    root = document.createElement(\"div\");\n    domroot.appendChild(root);\n    new dloc.DLocRoot(root);\n    $root = $(root);\n    treeUpdater = new TreeUpdater(root);\n    listener = new DOMListener(root, treeUpdater);\n  });\n\n  afterEach(() => {\n    listener.stopListening();\n  });\n\n  function makeIncludedHandler(name: string): IncludedElementHandler {\n    return ((thisRoot, tree, parent, previousSibling, nextSibling, element) => {\n      assert.equal(thisRoot, root);\n      assert.equal(element.className, `_real ${name}`);\n      mark.mark(`included ${name}`);\n    }) as IncludedElementHandler;\n  }\n\n  function makeExcludedHandler(name: string): ExcludedElementHandler {\n    return ((thisRoot, tree, parent, previousSibling, nextSibling, element) => {\n      assert.equal(thisRoot, root);\n      assert.equal(element.className, `_real ${name}`);\n      mark.mark(`excluded ${name}`);\n    }) as ExcludedElementHandler;\n  }\n\n  function makeExcludingHandler(name: string): ExcludingElementHandler {\n    return ((thisRoot, tree, parent, previousSibling, nextSibling, element) => {\n      assert.equal(thisRoot, root);\n      assert.equal(element.className, `_real ${name}`);\n      mark.mark(`excluding ${name}`);\n    }) as ExcludingElementHandler;\n  }\n\n  it(\"fires included-element, added-element and children-changed when \" +\n     \"adding a fragment\", (done) => {\n       mark = new Mark(5, {\n         \"included ul\": 1,\n         \"added ul\": 1,\n         \"children root\": 1,\n         \"included li\": 2,\n       }, listener, done);\n       listener.addHandler(\"included-element\", \"._real.ul\",\n                           makeIncludedHandler(\"ul\"));\n       listener.addHandler(\"included-element\", \"._real.li\",\n                           makeIncludedHandler(\"li\"));\n       listener.addHandler(\"added-element\", \"._real.ul\",\n                           ((thisRoot, parent, previousSibling, nextSibling,\n                             element) => {\n                              assert.equal(thisRoot, root);\n                              assert.equal(thisRoot, parent);\n                              assert.equal(element, fragmentToAdd);\n                              mark.mark(\"added ul\");\n                            }) as AddedElementHandler);\n       listener.addHandler(\n         \"children-changed\", \"*\",\n         ((thisRoot, added, removed, previousSibling, nextSibling, element) => {\n           // The marker will also trigger this handler. Ignore it.\n           if (added[0] === marker) {\n             return;\n           }\n           assert.equal(thisRoot, element);\n           assert.equal(removed.length, 0);\n           assert.equal(added.length, 1);\n           assert.equal(added[0], fragmentToAdd);\n           assert.isNull(previousSibling);\n           assert.isNull(nextSibling);\n           mark.mark(\"children root\");\n         }) as ChildrenChangedHandler);\n       listener.startListening();\n       treeUpdater.insertNodeAt(root, root.childNodes.length, fragmentToAdd);\n       mark.check();\n     });\n\n  it(\"generates added-element with the right previous and next siblings\",\n     (done) => {\n       mark = new Mark(2, { \"added li\": 2 }, listener, done);\n       listener.addHandler(\n         \"added-element\", \"._real.li\",\n         ((thisRoot, parent_, previousSibling, nextSibling, element) => {\n           assert.equal(previousSibling, element.previousSibling);\n           assert.equal(nextSibling, element.nextSibling);\n           mark.mark(\"added li\");\n         }) as AddedElementHandler);\n       root.appendChild(fragmentToAdd);\n       const $li = $root.find(\"._real.li\");\n       $li.remove();\n       listener.startListening();\n       const parent = root.querySelector(\".ul\")!;\n       $li.each(function each(this: Node): void {\n         // tslint:disable-next-line:no-invalid-this\n         treeUpdater.insertNodeAt(parent, parent.childNodes.length, this);\n       });\n       mark.check();\n     });\n\n  it(\"generates removing-element and removed-element with \" +\n     \"the right previous and next siblings\", (done) => {\n       mark = new Mark(4, {\n         \"removing li\": 2,\n         \"removed li\": 2,\n       }, listener, done);\n       root.appendChild(fragmentToAdd);\n       const $li = $root.find(\"._real.li\");\n       listener.addHandler(\n         \"removing-element\", \"._real.li\",\n         ((thisRoot, parent, previousSibling, nextSibling, element) => {\n           const text = element.firstChild!.nodeValue;\n           if (text === \"A\") {\n             assert.isNull(previousSibling, \"previous sibling of A\");\n             assert.equal(nextSibling, $li[1], \"next sibling of A\");\n           }\n           else {\n             // By the time we get here, B is alone.\n             assert.isNull(previousSibling, \"previous sibling of B\");\n           }\n           mark.mark(\"removing li\");\n         }) as RemovingElementHandler);\n\n       const ul = root.querySelector(\"._real.ul\");\n       listener.addHandler(\n         \"removed-element\", \"._real.li\",\n         ((thisRoot, parent, previousSibling, nextSibling) => {\n           assert.isNull(previousSibling, \"previous sibling of A\");\n           assert.isNull(nextSibling, \"next sibling of B\");\n           assert.equal(parent, ul);\n           mark.mark(\"removed li\");\n         }) as RemovedElementHandler);\n\n       listener.startListening();\n       $li.each(function each(this: HTMLElement): void {\n         // tslint:disable-next-line:no-invalid-this\n         treeUpdater.deleteNode(this);\n       });\n       mark.check();\n     });\n\n  it(\"fires excluding-element, excluded-element, removing-element, \" +\n     \"removed-element, children-changing and children-changed when \" +\n     \"removing a fragment\", (done) => {\n       root.appendChild(fragmentToAdd);\n       mark = new Mark(10, {\n         \"excluding ul\": 1,\n         \"excluded ul\": 1,\n         \"removing ul\": 1,\n         \"removed ul\": 1,\n         \"children-changing root\": 1,\n         \"children-changed root\": 1,\n         \"excluding li\": 2,\n         \"excluded li\": 2,\n       }, listener, done);\n       listener.addHandler(\"excluding-element\", \"._real.ul\",\n                           makeExcludingHandler(\"ul\"));\n       listener.addHandler(\"excluded-element\", \"._real.ul\",\n                           makeExcludedHandler(\"ul\"));\n       listener.addHandler(\"excluding-element\", \"._real.li\",\n                           makeExcludingHandler(\"li\"));\n       listener.addHandler(\"excluded-element\", \"._real.li\",\n                           makeExcludedHandler(\"li\"));\n\n       listener.addHandler(\n         \"removing-element\", \"._real.ul\",\n         ((thisRoot, parent, previousSibling, nextSibling, element) => {\n           assert.equal(thisRoot, root);\n           assert.equal(thisRoot, parent);\n           assert.equal(element, fragmentToAdd);\n           mark.mark(\"removing ul\");\n         }) as RemovingElementHandler);\n\n       listener.addHandler(\n         \"removed-element\", \"._real.ul\",\n         ((thisRoot, parent, previousSibling, nextSibling, element) => {\n           assert.equal(thisRoot, root);\n           assert.equal(thisRoot, parent);\n           assert.equal(element, fragmentToAdd);\n           assert.isNull(previousSibling);\n           assert.isNull(nextSibling);\n           mark.mark(\"removed ul\");\n         }) as RemovedElementHandler);\n\n       listener.addHandler(\n         \"children-changing\", \"*\",\n         ((thisRoot, added, removed, previousSibling, nextSibling,\n           element) => {\n             // The marker will also trigger this handler. Ignore it.\n             if (added[0] === marker) {\n               return;\n             }\n             assert.equal(thisRoot, element);\n             assert.equal(added.length, 0);\n             assert.equal(removed.length, 1);\n             assert.equal(removed[0], fragmentToAdd);\n             assert.isNull(previousSibling);\n             assert.isNull(nextSibling);\n             mark.mark(\"children-changing root\");\n           }) as ChildrenChangingHandler);\n\n       listener.addHandler(\n         \"children-changed\", \"*\",\n         ((thisRoot, added, removed, previousSibling, nextSibling, element) => {\n           // The marker will also trigger this handler. Ignore it.\n           if (added[0] === marker) {\n             return;\n           }\n           assert.equal(thisRoot, element);\n           assert.equal(added.length, 0);\n           assert.equal(removed.length, 1);\n           assert.equal(removed[0], fragmentToAdd);\n           assert.isNull(previousSibling);\n           assert.isNull(nextSibling);\n           mark.mark(\"children-changed root\");\n         }) as ChildrenChangedHandler);\n       listener.startListening();\n       treeUpdater.deleteNode(fragmentToAdd);\n       mark.check();\n     });\n\n  it(\"trigger triggered twice, invoked once\", (done) => {\n    mark = new Mark(3, { \"triggered test\": 1, \"included li\": 2 },\n                    listener, done);\n    listener.addHandler(\"trigger\", \"test\", (thisRoot) => {\n      assert.equal(thisRoot, root);\n      mark.mark(\"triggered test\");\n    });\n    listener.addHandler(\n      \"included-element\", \"._real.li\",\n      ((thisRoot, tree, parent, previousSibling, nextSibling, element) => {\n        assert.equal(thisRoot, root);\n        assert.equal(element.className, \"_real li\");\n        listener.trigger(\"test\");\n        mark.mark(\"included li\");\n      }) as IncludedElementHandler);\n    listener.startListening();\n    treeUpdater.insertNodeAt(root, root.childNodes.length, fragmentToAdd);\n    // We have to allow for triggers to run.\n    window.setTimeout(() => {\n      mark.check();\n    }, 0);\n  });\n\n  it(\"trigger triggering a trigger\", (done) => {\n    mark = new Mark(4, {\n      \"triggered test\": 1,\n      \"triggered test2\": 1,\n      \"included li\": 2,\n    }, listener, done);\n    listener.addHandler(\"trigger\", \"test\", (thisRoot) => {\n      assert.equal(thisRoot, root);\n      listener.trigger(\"test2\");\n      mark.mark(\"triggered test\");\n    });\n    listener.addHandler(\"trigger\", \"test2\", (thisRoot) => {\n      assert.equal(thisRoot, root);\n      mark.mark(\"triggered test2\");\n    });\n\n    listener.addHandler(\n      \"included-element\", \"._real.li\",\n      ((thisRoot, tree, parent, previousSibling, nextSibling, element) => {\n        assert.equal(thisRoot, root);\n        assert.equal(element.className, \"_real li\");\n        listener.trigger(\"test\");\n        mark.mark(\"included li\");\n      }) as IncludedElementHandler);\n    listener.startListening();\n    treeUpdater.insertNodeAt(root, root.childNodes.length, fragmentToAdd);\n    // We have to allow for triggers to run.\n    window.setTimeout(() => {\n      mark.check();\n    }, 0);\n  });\n\n  it(\"fires text-changed when changing a text node\", (done) => {\n    mark = new Mark(1, { \"text-changed\": 1 }, listener, done);\n    listener.addHandler(\n      \"text-changed\", \"._real.li\", ((thisRoot, element, oldValue) => {\n        assert.equal(thisRoot, root);\n        assert.equal((element.parentNode as Element).className, \"_real li\");\n        assert.equal(element.nodeValue, \"Q\");\n        assert.equal(oldValue, \"A\");\n        mark.mark(\"text-changed\");\n      }) as TextChangedHandler);\n    root.appendChild(fragmentToAdd);\n    listener.startListening();\n    treeUpdater\n      .setTextNodeValue(root.querySelector(\"._real.li\")!.firstChild as Text,\n                        \"Q\");\n    mark.check();\n  });\n\n  it(\"fires children-changed when adding a text node\", (done) => {\n    // The handler is called twice. Once when the single text node which was\n    // already there is removed. Once when the new text node is added.\n\n    mark = new Mark(2, { \"children li\": 2 }, listener, done);\n    let li: Node;\n    let changeNo = 0;\n    listener.addHandler(\n      \"children-changed\", \"._real.li\",\n      ((thisRoot, added, removed, previousSibling, nextSibling, element) => {\n        // The marker will also trigger this handler. Ignore it.\n        if (added[0] === marker) {\n          return;\n        }\n        assert.equal(thisRoot, root);\n        assert.equal(element, li);\n        assert.equal(added.length, changeNo === 0 ? 0 : 1, \"added elements\");\n        assert.equal(removed.length, changeNo === 0 ? 1 : 0,\n                     \"removed elements\");\n        assert.isNull(previousSibling);\n        assert.isNull(nextSibling);\n        if (changeNo === 0) {\n          assert.equal(removed[0].nodeValue, \"A\");\n        }\n        else {\n          assert.equal(added[0].nodeValue, \"Q\");\n        }\n        changeNo++;\n        mark.mark(\"children li\");\n      }) as ChildrenChangedHandler);\n    root.appendChild(fragmentToAdd);\n    listener.startListening();\n    li = root.querySelector(\"._real.li\")!;\n    // We'll simulate what jQuery does: remove the text node and add a new one.\n    treeUpdater.deleteNode(li.firstChild!);\n    treeUpdater.insertText(li, 0, \"Q\");\n    mark.check();\n  });\n\n  it(\"fires attribute-changed when changing an attribute\", (done) => {\n    mark = new Mark(1, { \"attribute-changed\": 1 }, listener, done);\n    listener.addHandler(\"attribute-changed\", \"._real.li\",\n                        ((thisRoot, element, ns, name, oldValue) => {\n                          assert.equal(thisRoot, root);\n                          assert.equal(element.className, \"_real li\");\n                          // tslint:disable-next-line:no-http-string\n                          assert.equal(ns, \"http://foo.foo/foo\");\n                          assert.equal(name, \"X\");\n                          assert.equal(oldValue, null);\n                          mark.mark(\"attribute-changed\");\n                        }) as AttributeChangedHandler);\n    root.appendChild(fragmentToAdd);\n    listener.startListening();\n    treeUpdater.setAttributeNS(\n      // tslint:disable-next-line:no-http-string\n      root.querySelector(\"._real.li\")!, \"http://foo.foo/foo\", \"X\", \"ttt\");\n    mark.check();\n  });\n\n  it(\"fires attribute-changed when deleting an attribute\", (done) => {\n    mark = new Mark(1, { \"attribute-changed\": 1 }, listener, done);\n    listener.addHandler(\"attribute-changed\", \"._real.li\",\n                        ((thisRoot, element, ns, name, oldValue) => {\n                          assert.equal(thisRoot, root);\n                          assert.equal(element.className, \"_real li\");\n                          // tslint:disable-next-line:no-http-string\n                          assert.equal(ns, \"http://foo.foo/foo\");\n                          assert.equal(name, \"X\");\n                          assert.equal(oldValue, \"ttt\");\n                          mark.mark(\"attribute-changed\");\n                        }) as AttributeChangedHandler);\n    root.appendChild(fragmentToAdd);\n    const li = root.querySelector(\"._real.li\")!;\n    // tslint:disable-next-line:no-http-string\n    li.setAttributeNS(\"http://foo.foo/foo\", \"X\", \"ttt\");\n    listener.startListening();\n    // tslint:disable-next-line:no-http-string\n    treeUpdater.setAttributeNS(li, \"http://foo.foo/foo\", \"X\", null);\n    mark.check();\n  });\n\n  it(\"generates children-changed with the right previous and \" +\n     \"next siblings when adding\", (done) => {\n       mark = new Mark(1, { \"children ul\": 1 }, listener, done);\n       root.appendChild(fragmentToAdd);\n       const li = root.querySelectorAll(\"._real.li\");\n       listener.addHandler(\n         \"children-changed\", \"._real.ul\",\n         ((thisRoot, added, removed, previousSibling, nextSibling) => {\n           // The marker will also trigger this handler. Ignore it.\n           if (added[0] === marker) {\n             return;\n           }\n           assert.equal(previousSibling, li[0]);\n           assert.equal(nextSibling, li[1]);\n           mark.mark(\"children ul\");\n         }) as ChildrenChangedHandler);\n       listener.startListening();\n       const $new = $(\"<li>Q</li>\");\n       treeUpdater\n         .insertNodeAt(li[0].parentNode!,\n                       indexOf(li[0].parentNode!.childNodes, li[0]) + 1,\n                       $new[0]);\n       mark.check();\n     });\n\n  it(\"generates children-changing and children-changed with \" +\n     \"the right previous and next siblings when removing\", (done) => {\n       fragmentToAdd = $(`<div class='_real ul'><div class='_real li'>A</div>\\\n<div class='_real li'>B</div><div class='_real li'>C</div></div>`)[0];\n\n       mark = new Mark(2, {\n         \"children-changed ul\": 1,\n         \"children-changing ul\": 1,\n       }, listener, done);\n       root.appendChild(fragmentToAdd);\n       const $li = $root.find(\"._real.li\");\n       const parent = $li[0].parentNode;\n       listener.addHandler(\n         \"children-changing\", \"._real.ul\",\n         ((thisRoot, added, removed, previousSibling, nextSibling, element) => {\n           // The marker will also trigger this handler. Ignore it.\n           if (added[0] === marker) {\n             return;\n           }\n           assert.equal(previousSibling, $li[0]);\n           assert.equal(nextSibling, $li[2]);\n           assert.equal(element, parent);\n           mark.mark(\"children-changing ul\");\n         }) as ChildrenChangingHandler);\n\n       listener.addHandler(\n         \"children-changed\", \"._real.ul\",\n         ((thisRoot, added, removed, previousSibling, nextSibling, element) => {\n           // The marker will also trigger this handler. Ignore it.\n           if (added[0] === marker) {\n             return;\n           }\n           assert.isNull(previousSibling);\n           assert.isNull(nextSibling);\n           assert.equal(element, parent);\n           mark.mark(\"children-changed ul\");\n         }) as ChildrenChangedHandler);\n\n       listener.startListening();\n       treeUpdater.deleteNode($li[1]);\n       mark.check();\n     });\n\n  it(\"generates included-element with the right tree, previous, next siblings\",\n     (done) => {\n       mark = new Mark(8, {\n         \"included li at root\": 2,\n         \"included li at ul\": 2,\n         \"excluding li at ul\": 2,\n         \"excluding li at root\": 2,\n       }, listener, done);\n       const $fragment = $(`<div><p>before</p><div class='_real ul'>\\\n<div class='_real li'>A</div><div class='_real li'>B</div></div>\\\n<p>after</p></div>`);\n       function addHandler(incex: \"included\" | \"excluding\"): void {\n         listener.addHandler(\n           `${incex}-element` as \"included-element\" | \"excluding-element\",\n           \"._real.li\",\n           ((thisRoot, tree, parent, previousSibling,\n             nextSibling, element) => {\n               assert.equal(thisRoot, root, \"root\");\n               assert.equal(element.className, \"_real li\", \"element class\");\n               // The following tests are against $fragment rather than $root\n               // or $thisRoot because by the time the handler is called, the\n               // $root could be empty!\n\n               if (tree === $fragment[0]) {\n                 mark.mark(`${incex} li at root`);\n                 assert.equal(parent, root, \"parent value\");\n                 assert.isNull(previousSibling, \"previous sibling\");\n                 assert.isNull(nextSibling, \"next sibling\");\n               }\n               else {\n                 assert.equal(tree, $fragment.find(\".ul\")[0], \"tree value\");\n                 assert.equal(parent, $fragment[0]);\n                 assert.equal(previousSibling, $fragment.find(\"p\")[0]);\n                 assert.equal(nextSibling, $fragment.find(\"p\")[1]);\n                 mark.mark(`${incex} li at ul`);\n               }\n             }) as IncludedElementHandler);\n       }\n       addHandler(\"included\");\n       addHandler(\"excluding\");\n       listener.startListening();\n       treeUpdater.insertNodeAt(root, root.childNodes.length, $fragment[0]);\n       const $ul = $root.find(\".ul\");\n       treeUpdater.deleteNode($ul[0]);\n       const p = $root.find(\"p\")[0];\n       const pParent = p.parentNode!;\n       treeUpdater.insertNodeAt(pParent, indexOf(pParent.childNodes, p) + 1,\n                                $ul[0]);\n       $root.contents().each(function each(this: Node): void {\n         // tslint:disable-next-line:no-invalid-this\n         treeUpdater.deleteNode(this);\n       });\n       mark.check();\n     });\n\n  it(\"processImmediately processes immediately\", () => {\n    let marked = false;\n    mark = new Mark(2, { \"children root\": 1, trigger: 1 }, listener,\n                    () => {\n                      marked = true;\n                    });\n    listener.addHandler(\"children-changed\", \"*\",\n                        ((thisRoot, added) => {\n                          if (added[0] === marker) {\n                            return;\n                          }\n                          listener.trigger(\"t\");\n                          mark.mark(\"children root\");\n                        }) as ChildrenChangedHandler);\n    listener.addHandler(\"trigger\", \"t\", () => {\n      mark.mark(\"trigger\");\n    });\n    listener.startListening();\n\n    treeUpdater.insertNodeAt(root, root.childNodes.length, fragmentToAdd);\n    listener.processImmediately();\n    mark.check();\n    assert.isTrue(marked);\n  });\n\n  it(\"clearPending clears pending operations\", () => {\n    let marked = false;\n    mark = new Mark(1, { \"children root\": 1 }, listener, () => {\n      marked = true;\n    });\n    listener.addHandler(\"children-changed\", \"*\",\n                        ((thisRoot, added) => {\n                          if (added[0] === marker) {\n                            return;\n                          }\n                          listener.trigger(\"t\");\n                          mark.mark(\"children root\");\n                        }) as ChildrenChangedHandler);\n    listener.addHandler(\"trigger\", \"t\", () => {\n      mark.mark(\"trigger\");\n    });\n    listener.startListening();\n\n    treeUpdater.insertNodeAt(root, root.childNodes.length, fragmentToAdd);\n    listener.clearPending();\n    mark.check();\n    assert.isTrue(marked);\n  });\n});\n\n//  LocalWords:  domlistener Dubeau MPL Mangalam jsdom TreeUpdater\n//  LocalWords:  MutationObserver\n"]}