{"version":3,"sources":["../../../tests/wed/undo-test.ts"],"names":[],"mappings":"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","file":"undo-test.js","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { assert } from \"chai\";\nimport { Undo, UndoGroup, UndoList } from \"wed/undo\";\n\n// tslint:disable:no-any\n\n// tslint:disable-next-line:completed-docs\nclass MyUndo extends Undo {\n  constructor(public readonly name: string, public readonly object: any) {\n    super(`sets the field '${name}' from false to true'`);\n    this.object = object;\n    this.name = name;\n\n    object[name] = true;\n  }\n\n  undo(): void {\n    this.object[this.name] = false;\n  }\n\n  redo(): void {\n    this.object[this.name] = true;\n  }\n}\n\n// tslint:disable-next-line:completed-docs\nclass MyGroup extends UndoGroup {}\n\ndescribe(\"UndoList\", () => {\n  let obj: Record<string, boolean>;\n  let ul: UndoList;\n\n  beforeEach(() => {\n    obj = { undo1: false, undo2: false };\n    ul = new UndoList();\n  });\n\n  describe(\"canUndo\", () => {\n    it(\"returns false on new object\", () => {\n      assert.isFalse(ul.canUndo());\n    });\n\n    it(\"returns true when there is something to undo\", () =>  {\n      const undo1 = new MyUndo(\"undo1\", obj);\n      ul.record(undo1);\n      assert.isTrue(ul.canUndo());\n    });\n\n    it(\"returns false when all is undone\", () => {\n      const undo1 = new MyUndo(\"undo1\", obj);\n      ul.record(undo1);\n      const undo2 = new MyUndo(\"undo2\", obj);\n      ul.record(undo2);\n\n      ul.undo();\n      ul.undo();\n      assert.isFalse(ul.canUndo());\n    });\n\n    it(\"returns true when there is at least one group in effect\", () =>  {\n      ul.startGroup(new MyGroup(\"group 1\"));\n      assert.isTrue(ul.canUndo());\n\n      ul.endAllGroups();\n      // The group has been ended and put in the list of undo objects so this\n      // is still true.\n      assert.isTrue(ul.canUndo());\n    });\n  });\n\n  describe(\"canRedo\", () => {\n    it(\"returns false on new object\", () => {\n      assert.isFalse(ul.canRedo());\n    });\n\n    it(\"returns true when there is something to redo\", () => {\n      const undo1 = new MyUndo(\"undo1\", obj);\n      ul.record(undo1);\n      ul.undo();\n      assert.isTrue(ul.canRedo());\n    });\n\n    it(\"returns false when all is redone\", () => {\n      const undo1 = new MyUndo(\"undo1\", obj);\n      ul.record(undo1);\n      const undo2 = new MyUndo(\"undo2\", obj);\n      ul.record(undo2);\n\n      ul.undo();\n      ul.undo();\n      ul.redo();\n      ul.redo();\n      assert.isFalse(ul.canRedo());\n    });\n  });\n\n  describe(\"endGroup\", () => {\n    it(\"throws an error when the object is new\", () => {\n      assert.throws(ul.endGroup.bind(ul), Error, \"ending a non-existent group\");\n    });\n\n    it(\"throws an error upon extra calls\", () => {\n      ul.startGroup(new MyGroup(\"group1\"));\n      ul.endGroup();\n      assert.throws(ul.endGroup.bind(ul), Error, \"ending a non-existent group\");\n    });\n\n    it(\"ends groups in the proper order\", () => {\n      ul.startGroup(new MyGroup(\"group1\"));\n      ul.startGroup(new MyGroup(\"group2\"));\n      ul.endGroup();\n      ul.endGroup();\n      assert.equal((ul as any).list[0].desc, \"group1\");\n      assert.equal((ul as any).list.length, 1);\n    });\n\n    it(\"triggers the end() method on a group\", () => {\n      const group1 = new MyGroup(\"group1\");\n      let ended = false;\n      group1.end = () => {\n        ended = true;\n      };\n      ul.startGroup(group1);\n      ul.endGroup();\n      assert.isTrue(ended);\n    });\n  });\n\n  describe(\"endAllGroups\", () => {\n    it(\"does nothing when the object is new\", () => {\n      assert.doesNotThrow(ul.endAllGroups.bind(ul));\n    });\n    it(\"does nothing upon extra calls\", () => {\n      ul.startGroup(new MyGroup(\"group1\"));\n      ul.endGroup();\n      assert.doesNotThrow(ul.endAllGroups.bind(ul));\n    });\n    it(\"ends all groups\", () => {\n      ul.startGroup(new MyGroup(\"group1\"));\n      ul.startGroup(new MyGroup(\"group2\"));\n      assert.equal(ul.getGroup().desc, \"group2\");\n      ul.endAllGroups();\n      assert.isUndefined(ul.getGroup());\n    });\n\n    it(\"triggers the end() method on a group, in the correct order\",\n       () => {\n         let group1Ended = false;\n         let group2Ended = false;\n         const group1 = new MyGroup(\"group1\");\n         group1.end = () => {\n           group1Ended = true;\n         };\n         const group2 = new MyGroup(\"group2\");\n         group2.end = () => {\n           group2Ended = true;\n           assert.isFalse(group1Ended);\n         };\n         ul.startGroup(group1);\n         ul.startGroup(group2);\n         assert.isFalse(group1Ended);\n         assert.isFalse(group2Ended);\n         ul.endAllGroups();\n         assert.isTrue(group1Ended);\n         assert.isTrue(group2Ended);\n       });\n  });\n\n  describe(\"getGroup\", () => {\n    it(\"returns undefined when object is new\", () => {\n      assert.equal(ul.getGroup(), undefined);\n    });\n\n    it(\"returns undefined when all groups have ended\", () => {\n      ul.startGroup(new MyGroup(\"group1\"));\n      ul.endGroup();\n      assert.equal(ul.getGroup(), undefined);\n    });\n\n    it(\"returns the group which is current\", () => {\n      const group1 = new MyGroup(\"group1\");\n      const group2 = new MyGroup(\"group2\");\n      ul.startGroup(group1);\n      ul.startGroup(group2);\n      assert.equal(ul.getGroup(), group2);\n      ul.endGroup();\n      assert.equal(ul.getGroup(), group1);\n    });\n  });\n\n  describe(\"undoingOrRedoing\", () => {\n    it(\"returns false when object is new\", () => {\n      assert.isFalse(ul.undoingOrRedoing());\n    });\n\n    it(\"returns true in the middle of an undo but not before or after\",\n       () => {\n         const undo1 = new MyUndo(\"undo1\", obj);\n         let wasTrue;\n         undo1.undo = () => {\n           wasTrue = ul.undoingOrRedoing();\n         };\n         assert.isFalse(ul.undoingOrRedoing());\n         ul.record(undo1);\n         assert.isFalse(ul.undoingOrRedoing());\n         ul.undo();\n         assert.isFalse(ul.undoingOrRedoing());\n         assert.isTrue(wasTrue);\n       });\n\n    it(\"returns true in the middle of a redo, but not before or after\",\n       () => {\n         const undo1 = new MyUndo(\"undo1\", obj);\n         let wasTrue;\n         undo1.redo = () => {\n           wasTrue = ul.undoingOrRedoing();\n         };\n         assert.isFalse(ul.undoingOrRedoing());\n         ul.record(undo1);\n         assert.isFalse(ul.undoingOrRedoing());\n         ul.undo();\n         assert.isFalse(ul.undoingOrRedoing());\n         ul.redo();\n         assert.isFalse(ul.undoingOrRedoing());\n         assert.isTrue(wasTrue);\n       });\n  });\n\n  describe(\"record\", () => {\n    it(\"records undo operations\", () => {\n      const undo1 = new MyUndo(\"undo1\", obj);\n      ul.record(undo1);\n      const undo2 = new MyUndo(\"undo2\", obj);\n      ul.record(undo2);\n\n      // Peek in to make sure things are recorded.\n      assert.equal((ul as any).list.length, 2);\n      assert.strictEqual((ul as any).list[0], undo1);\n      assert.strictEqual((ul as any).list[1], undo2);\n    });\n\n    it(\"overwrites old history\", () => {\n      const undo1 = new MyUndo(\"undo1\", obj);\n      ul.record(undo1);\n      const undo2 = new MyUndo(\"undo2\", obj);\n      ul.record(undo2);\n\n      const undo3 = new MyUndo(\"undo3\", obj);\n      ul.record(undo3);\n      const undo4 = new MyUndo(\"undo4\", obj);\n      ul.record(undo4);\n\n      assert.isTrue(obj.undo3);\n      assert.isTrue(obj.undo4);\n      ul.undo();\n      ul.undo();\n\n      const undo5 = new MyUndo(\"undo5\", obj);\n      ul.record(undo5);\n      const undo6 = new MyUndo(\"undo6\", obj);\n      ul.record(undo6);\n      assert.equal((ul as any).list.length, 4);\n      assert.strictEqual((ul as any).list[0], undo1);\n      assert.strictEqual((ul as any).list[1], undo2);\n      assert.strictEqual((ul as any).list[2], undo5);\n      assert.strictEqual((ul as any).list[3], undo6);\n    });\n\n    it(\"records into the group when a group is in effect\", () => {\n      const group1 = new MyGroup(\"group1\");\n      ul.startGroup(group1);\n      const undo1 = new MyUndo(\"undo1\", obj);\n      ul.record(undo1);\n      const undo2 = new MyUndo(\"undo2\", obj);\n      ul.record(undo2);\n      ul.endGroup();\n\n      const undo3 = new MyUndo(\"undo3\", obj);\n      ul.record(undo3);\n      const undo4 = new MyUndo(\"undo4\", obj);\n      ul.record(undo4);\n\n      assert.equal((ul as any).list.length, 3);\n      assert.strictEqual((ul as any).list[0], group1);\n      assert.strictEqual((ul as any).list[1], undo3);\n      assert.strictEqual((ul as any).list[2], undo4);\n      assert.equal((group1 as any).list.length, 2);\n    });\n  });\n\n  describe(\"undo\", () => {\n    it(\"actually undoes operations\", () => {\n      const undo1 = new MyUndo(\"undo1\", obj);\n      ul.record(undo1);\n      const undo2 = new MyUndo(\"undo2\", obj);\n      ul.record(undo2);\n\n      assert.isTrue(obj.undo1);\n      assert.isTrue(obj.undo2);\n      ul.undo();\n      assert.isTrue(obj.undo1);\n      assert.isFalse(obj.undo2);\n      ul.undo();\n      assert.isFalse(obj.undo1);\n      assert.isFalse(obj.undo2);\n    });\n\n    it(\"is a noop if there is nothing to undo\", () => {\n      const undo1 = new MyUndo(\"undo1\", obj);\n      ul.record(undo1);\n      const undo2 = new MyUndo(\"undo2\", obj);\n      ul.record(undo2);\n\n      ul.undo();\n      ul.undo();\n      assert.equal((ul as any).list.length, 2);\n      assert.equal((ul as any).index, -1);\n      // Extra undo\n      ul.undo();\n      assert.equal((ul as any).list.length, 2);\n      assert.equal((ul as any).index, -1);\n    });\n\n    it(\"undoes groups as a unit\", () => {\n      const group1 = new MyGroup(\"group1\");\n      ul.startGroup(group1);\n      const undo1 = new MyUndo(\"undo1\", obj);\n      ul.record(undo1);\n      const undo2 = new MyUndo(\"undo2\", obj);\n      ul.record(undo2);\n      ul.endGroup();\n\n      assert.isTrue(obj.undo1);\n      assert.isTrue(obj.undo2);\n      ul.undo();\n      assert.isFalse(obj.undo1);\n      assert.isFalse(obj.undo2);\n    });\n\n    it(\"terminates any group in effect\", () => {\n      const group1 = new MyGroup(\"group1\");\n      const group2 = new MyGroup(\"group2\");\n\n      ul.startGroup(group1);\n      const undo1 = new MyUndo(\"undo1\", obj);\n      ul.record(undo1);\n\n      ul.startGroup(group2);\n      const undo2 = new MyUndo(\"undo2\", obj);\n      ul.record(undo2);\n\n      assert.isTrue(obj.undo1);\n      assert.isTrue(obj.undo2);\n      ul.undo();\n      assert.isFalse(obj.undo1);\n      assert.isFalse(obj.undo2);\n      assert.isUndefined(ul.getGroup());\n    });\n  });\n\n  describe(\"redo\", () => {\n    it(\"actually redoes operations\", () => {\n      const undo1 = new MyUndo(\"undo1\", obj);\n      ul.record(undo1);\n      const undo2 = new MyUndo(\"undo2\", obj);\n      ul.record(undo2);\n\n      ul.undo();\n      ul.undo();\n      assert.isFalse(obj.undo1);\n      assert.isFalse(obj.undo2);\n      ul.redo();\n      assert.isTrue(obj.undo1);\n      assert.isFalse(obj.undo2);\n      ul.redo();\n      assert.isTrue(obj.undo1);\n      assert.isTrue(obj.undo2);\n    });\n\n    it(\"is a noop if there is nothing to redo\", () => {\n      const undo1 = new MyUndo(\"undo1\", obj);\n      ul.record(undo1);\n      const undo2 = new MyUndo(\"undo2\", obj);\n      ul.record(undo2);\n\n      ul.undo();\n      ul.undo();\n      ul.redo();\n      ul.redo();\n      assert.equal((ul as any).list.length, 2);\n      assert.equal((ul as any).index, 1);\n      // Extra redo\n      ul.redo();\n      // No change\n      assert.equal((ul as any).list.length, 2);\n      assert.equal((ul as any).index, 1);\n    });\n\n    it(\"redoes groups as a unit\", () => {\n      const group1 = new MyGroup(\"group1\");\n      ul.startGroup(group1);\n      const undo1 = new MyUndo(\"undo1\", obj);\n      ul.record(undo1);\n      const undo2 = new MyUndo(\"undo2\", obj);\n      ul.record(undo2);\n      ul.endGroup();\n\n      assert.isTrue(obj.undo1);\n      assert.isTrue(obj.undo2);\n      ul.undo();\n      assert.isFalse(obj.undo1);\n      assert.isFalse(obj.undo2);\n      ul.redo();\n      assert.isTrue(obj.undo1);\n      assert.isTrue(obj.undo2);\n    });\n  });\n});\n\n//  LocalWords:  UndoList canUndo canRedo endGroup endAllGroups chai getGroup\n//  LocalWords:  undoingOrRedoing noop ul Dubeau MPL Mangalam\n"]}