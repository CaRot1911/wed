{"version":3,"file":"domutil-test.js","sourceRoot":"","sources":["../../../../../lib/tests/wed/domutil-test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport * as $ from \"jquery\";\n\nimport * as convert from \"wed/convert\";\nimport * as domutil from \"wed/domutil\";\n\nimport { DataProvider } from \"../util\";\n\nconst assert = chai.assert;\n\n// Utility  XML nodes.\nfunction empty(el: Element): void {\n  // tslint:disable-next-line:no-inner-html\n  el.innerHTML = \"\";\n}\n\nfunction defined<T>(x: T | null | undefined): T {\n  assert.isDefined(x);\n  // The assertion above already excludes null and undefined, but TypeScript\n  // does not know this.\n  return x as T;\n}\n\nconst commonMap = {\n  // tslint:disable-next-line:no-http-string\n  btw: \"http://mangalamresearch.org/ns/btw-storage\",\n  // tslint:disable-next-line:no-http-string\n  tei: \"http://www.tei-c.org/ns/1.0\",\n};\n\ndescribe(\"domutil\", () => {\n  let provider: DataProvider;\n  let domroot: HTMLElement;\n  let testPara: HTMLElement;\n  let sourceDoc: Document;\n\n  before(() => {\n    provider =\n      new DataProvider(\"/base/build/standalone/lib/tests/domutil_test_data/\");\n    return provider.getText(\"source_converted.xml\").then((data) => {\n      const parser = new DOMParser();\n      sourceDoc = parser.parseFromString(data, \"application/xml\");\n    });\n  });\n\n  before(() => {\n    domroot = document.createElement(\"div\");\n    testPara = document.createElement(\"p\");\n    testPara.setAttribute(\"contenteditable\", \"true\");\n    testPara.textContent = \"Test para which has to be visible.\";\n    document.body.appendChild(domroot);\n    document.body.appendChild(testPara);\n  });\n\n  after(() => {\n    document.body.removeChild(domroot);\n    document.body.removeChild(testPara);\n  });\n\n  type Callback = (data: HTMLElement) => [domutil.Caret,\n                                          domutil.Caret | null,\n                                          domutil.Caret | null | undefined,\n                                          Node];\n\n  function makeTestFactory(method: typeof domutil.nextCaretPosition):\n  (name: string, callback: Callback) => void {\n    return function makeTest(name: string, callback: Callback): void {\n      let caret: domutil.Caret;\n      let noTextExpected: domutil.Caret | null;\n      let textExpected: domutil.Caret | null | undefined;\n      let container: Node;\n\n      describe(name, () => {\n        before(() => {\n          const data = document.createElement(\"span\");\n          [caret, noTextExpected, textExpected, container] = callback(data);\n\n          empty(domroot);\n          domroot.appendChild(data);\n          if (textExpected === undefined) {\n            textExpected = noTextExpected;\n          }\n\n          // The isNotNull checks are to ensure we don't majorly screw up in\n          // setting up a test case.\n          if (noTextExpected !== null) {\n            assert.isNotNull(noTextExpected[0]);\n          }\n\n          if (textExpected !== null) {\n            assert.isNotNull(textExpected[0]);\n          }\n        });\n\n        it(\"no_text === true\", () => {\n          const result = method(caret, container, true);\n          assert.deepEqual(result, noTextExpected);\n        });\n\n        it(\"no_text === false\", () => {\n          const result = method(caret, container, false);\n          assert.deepEqual(result, textExpected);\n        });\n      });\n    };\n  }\n\n  // tslint:disable:mocha-no-side-effect-code no-inner-html\n  describe(\"nextCaretPosition\", () => {\n    const makeTest = makeTestFactory(domutil.nextCaretPosition);\n\n    makeTest(\"in text\", (data) => {\n      data.textContent = \"test\";\n      return [[data.firstChild!, 2], [data, 0], [data.firstChild!, 3], domroot];\n    });\n\n    makeTest(\"move into child from text\", (data) => {\n      data.innerHTML = \"test <b>test</b>\";\n      const child = data.firstChild!;\n      return [\n        // This puts the caret at the end of the first text node in <span>.\n        [child, child.nodeValue!.length],\n        [data.lastElementChild!, 0],\n        [data.lastElementChild!.firstChild!, 0],\n        domroot,\n      ];\n    });\n\n    makeTest(\"move to parent\", (data) => {\n      data.innerHTML = \"test <b>test</b><b>test2</b>\";\n      const child = data.firstElementChild!.firstChild!;\n      return [\n        // This puts the caret at the end of the first b element.\n        [child, child.nodeValue!.length],\n        // This position is between the two b elements.\n        [data, 2],\n        undefined,\n        domroot,\n      ];\n    });\n\n    makeTest(\"enter empty elements\", (data) => {\n      data.innerHTML = \"<i>a</i><i></i><i>b</i>\";\n      return [\n        // Just after the first <i>.\n        [data, 1],\n        [data.getElementsByTagName(\"i\")[1], 0],\n        undefined,\n        domroot,\n      ];\n    });\n\n    // The case is designed so that it skips over the white space.\n    makeTest(\"white-space: normal\", (data) => {\n      data.innerHTML = \"<s>test    </s><s>test  </s>\";\n      return [\n        // This is just after the \"test\" string in the first s element.\n        [data.firstElementChild!.firstChild!, 4],\n        // Ends between the two s elements.\n        [data, 1],\n        undefined,\n        domroot,\n      ];\n    });\n\n    // The case is designed so that it does not skip over the whitespace.\n    makeTest(\"white-space: normal, not at end of parent node\", (data) => {\n      data.innerHTML = \"test <s>test</s>\";\n      return [\n        // This is just after the \"test\" string in the top element, before the\n        // space.\n        [data.firstChild!, 4],\n        // Ends after the space\n        [data, 0],\n        [data.firstChild!, 5],\n        domroot];\n    });\n\n    // The case is designed so that it does not skip over the whitespace.\n    makeTest(\"white-space: pre\", (data) => {\n      data.innerHTML = \"<s>test    </s><s style='white-space: pre'>test  </s>\";\n      const s = data.getElementsByTagName(\"s\")[1];\n\n      return [[s.firstChild!, 4], [s, 0], [s.firstChild!, 5], domroot];\n    });\n\n    makeTest(\"does not move out of text container\", (data) => {\n      data.innerHTML = \"test\";\n      return [[data.firstChild!, 4], null, null, data.firstChild!];\n    });\n\n    makeTest(\"does not move out of element container\", (data) => {\n      data.innerHTML = \"test\";\n      return [[data, 1], null, null, data];\n    });\n\n    makeTest(\"can't find a node\", () =>\n             [[document.body.parentNode!, 30000], null, null, document]);\n  });\n\n  describe(\"prevCaretPosition\", () => {\n    const makeTest = makeTestFactory(domutil.prevCaretPosition);\n\n    makeTest(\"in text\", (data) => {\n      data.textContent = \"test\";\n      return [[data.firstChild!, 2], [data, 0], [data.firstChild!, 1],\n              domroot];\n    });\n\n    makeTest(\"move into child\", (data) => {\n      data.innerHTML = \"<b>test</b> test\";\n      return [\n        // This puts the caret at the start of the last text node.\n        [data.lastChild!, 0],\n        [data.lastElementChild!, 0],\n        [data.lastElementChild!.firstChild!, 4],\n        domroot,\n      ];\n    });\n\n    makeTest(\"move into child\", (data) => {\n      data.innerHTML = \"test <b>test</b>\";\n      return [\n        // This puts the caret at the start of the text node in <b>\n        [data.lastElementChild!.firstChild!, 0],\n        [data, 1],\n        undefined,\n        domroot,\n      ];\n    });\n\n    makeTest(\"enter empty elements\", (data) => {\n      data.innerHTML = \"<i>a</i><i></i><i>b</i>\";\n      return [\n        // This puts the caret after the 2nd <i>.\n        [data, 2],\n        [data.getElementsByTagName(\"i\")[1], 0],\n        undefined,\n        domroot,\n      ];\n    });\n\n    makeTest(\"white-space: normal\", (data) => {\n      // The case is designed so that it skips over the whitespace\n      data.innerHTML = \"<s>test</s><s>   test</s>\";\n      return [\n        // Place the caret just after the whitespace in the 2nd <s> node.\n        [data.lastElementChild!.firstChild!, 3],\n        [data, 1], undefined,\n        domroot,\n      ];\n    });\n\n    makeTest(\"white-space: normal, not at start of parent node\", (data) => {\n      // The case is designed so that it does not skip over the whitespace\n      data.innerHTML = \"<s>test</s>   test\";\n      return [\n        // Place the caret just after the whitespace in the top node\n        [data.childNodes[1], 3],\n        [data, 1], [data.childNodes[1], 2],\n        domroot,\n      ];\n    });\n\n    makeTest(\"white-space: pre\", (data) => {\n      // The case is designed so that it does not skip over the whitespace.\n      data.innerHTML = \"<s>test</s><s style='white-space: pre'>   test</s>\";\n      const s = data.lastElementChild!;\n      return [\n        // Place the caret just after the white space in the 2nd <s> node.\n        [s.firstChild!, 3],\n        [s, 0], [s.firstChild!, 2],\n        domroot,\n      ];\n    });\n\n    makeTest(\"does not move out of text container\", (data) => {\n      data.innerHTML = \"test\";\n      return [\n        [data.firstChild!, 0],\n        null, null,\n        data.firstChild!,\n      ];\n    });\n\n    makeTest(\"does not move out of element container\", (data) => {\n      data.innerHTML = \"test\";\n      return [\n        [data, 0],\n        null, null,\n        data,\n      ];\n    });\n\n    makeTest(\"can't find a node\", () =>\n             [[document.body.parentNode!.parentNode!, 0], null, null,\n              document]);\n  });\n\n  describe(\"splitTextNode\", () => {\n    let root: Document;\n    let title: HTMLElement;\n    let child: Text;\n    beforeEach(() => {\n      root = sourceDoc.cloneNode(true) as Document;\n      title = root.getElementsByTagName(\"title\")[0];\n      child = title.firstChild as Text;\n    });\n\n    it(\"fails on non-text node\", () => {\n      assert.throws(domutil.splitTextNode.bind(title, 0),\n                    Error, \"insertIntoText called on non-text\");\n    });\n\n    it(\"splits a text node\", () => {\n      const [first, second] = domutil.splitTextNode(child, 2);\n      assert.equal(first.nodeValue, \"ab\");\n      assert.equal(second.nodeValue, \"cd\");\n      assert.equal(title.childNodes.length, 2);\n    });\n\n    it(\"works fine with negative offset\", () => {\n      const [first, second] = domutil.splitTextNode(child, -1);\n      assert.equal(first.nodeValue, \"\");\n      assert.equal(second.nodeValue, \"abcd\");\n      assert.equal(title.childNodes.length, 2);\n    });\n\n    it(\"works fine with offset beyond text length\", () => {\n      const [first, second] =\n        domutil.splitTextNode(child, child.nodeValue!.length);\n      assert.equal(first.nodeValue, \"abcd\");\n      assert.equal(second.nodeValue, \"\");\n      assert.equal(title.childNodes.length, 2);\n    });\n  });\n\n  describe(\"insertIntoText\", () => {\n    let root: Document;\n    let title: HTMLElement;\n    let child: Text;\n    beforeEach(() => {\n      root = sourceDoc.cloneNode(true) as Document;\n      title = root.getElementsByTagName(\"title\")[0];\n      child = title.firstChild as Text;\n    });\n\n    it(\"fails on non-text node\", () => {\n      assert.throws(domutil.insertIntoText.bind(undefined, title, 0, title),\n                    Error, \"insertIntoText called on non-text\");\n    });\n\n    it(\"fails on undefined node to insert\", () => {\n      assert.throws(domutil.insertIntoText.bind(undefined, child, 0, undefined),\n                    Error, \"must pass an actual node to insert\");\n    });\n\n    it(\"inserts the new element\", () => {\n      const el = child.ownerDocument.createElement(\"span\");\n      const [first, second] = domutil.insertIntoText(child, 2, el);\n      assert.equal(first[0].nodeValue, \"ab\");\n      assert.equal(first[0].nextSibling, el);\n      assert.equal(first[1], 2);\n      assert.equal(second[0].nodeValue, \"cd\");\n      assert.equal(second[0].previousSibling, el);\n      assert.equal(second[1], 0);\n      assert.equal(title.childNodes.length, 3);\n      assert.equal(title.childNodes[1], el);\n    });\n\n    it(\"works fine with negative offset\", () => {\n      const el = child.ownerDocument.createElement(\"span\");\n      const [first, second] = domutil.insertIntoText(child, -1, el);\n      assert.deepEqual(first, [el.parentNode, 0], \"first caret\");\n      assert.equal(second[0].nodeValue, \"abcd\");\n      assert.equal(second[0].previousSibling, el);\n      assert.equal(second[1], 0);\n      assert.equal(title.childNodes.length, 2);\n      assert.equal(title.firstChild, el);\n    });\n\n    it(\"works fine with negative offset and fragment\", () => {\n      const frag = document.createDocumentFragment();\n      frag.appendChild(document.createTextNode(\"first\"));\n      frag.appendChild(document.createElement(\"span\")).textContent = \"blah\";\n      frag.appendChild(document.createTextNode(\"last\"));\n      const [first, second] = domutil.insertIntoText(child, -1, frag);\n      assert.deepEqual(first, [title, 0]);\n      assert.equal(second[0].nodeValue, \"lastabcd\");\n      assert.equal(second[1], 4);\n      assert.equal(title.childNodes.length, 3);\n      assert.equal(\n        title.innerHTML,\n        `first<span xmlns=\"http://www.w3.org/1999/xhtml\">blah</span>lastabcd`);\n    });\n\n    it(\"works fine with negative offset and fragment containing only text\",\n       () => {\n         const frag = document.createDocumentFragment();\n         frag.appendChild(document.createTextNode(\"first\"));\n         const [first, second] = domutil.insertIntoText(child, -1, frag);\n         assert.deepEqual(first, [title, 0]);\n         assert.deepEqual(second, [title.firstChild, 5]);\n         assert.equal(title.childNodes.length, 1);\n         assert.equal(title.innerHTML, \"firstabcd\");\n       });\n\n    it(\"works fine with offset beyond text length\", () => {\n      assert.equal(title.childNodes.length, 1,\n                   \"the parent should start with one child\");\n      const el = child.ownerDocument.createElement(\"span\");\n      const [first, second] =\n        domutil.insertIntoText(child, child.nodeValue!.length, el);\n      assert.equal(title.childNodes.length, 2,\n                   \"the parent should have two children after insertion\");\n      assert.equal(first[0].nodeValue, \"abcd\");\n      assert.equal(first[0].nextSibling, el);\n      assert.deepEqual(first, [title.firstChild, 4]);\n      assert.deepEqual(second, [title, 2]);\n      assert.equal(title.childNodes.length, 2,\n                   \"title.childNodes.length should be 2\");\n      assert.equal(title.lastChild, el);\n    });\n\n    it(\"works fine with offset beyond text length and fragment\", () => {\n      const frag = document.createDocumentFragment();\n      frag.appendChild(document.createTextNode(\"first\"));\n      frag.appendChild(document.createElement(\"span\")).textContent = \"blah\";\n      frag.appendChild(document.createTextNode(\"last\"));\n      const [first, second] =\n        domutil.insertIntoText(child, child.nodeValue!.length, frag);\n      assert.equal(first[0].nodeValue, \"abcdfirst\");\n      assert.deepEqual(first, [title.firstChild, 4]);\n      assert.deepEqual(second, [title, 3]);\n      assert.equal(title.childNodes.length, 3);\n      assert.equal(\n        title.innerHTML,\n        `abcdfirst<span xmlns=\"http://www.w3.org/1999/xhtml\">blah</span>last`);\n       });\n\n    it(\"works fine with offset beyond text length and fragment containing \" +\n       \"only text\", () => {\n         const frag = document.createDocumentFragment();\n         frag.appendChild(document.createTextNode(\"first\"));\n         const [first, second] =\n           domutil.insertIntoText(child, child.nodeValue!.length, frag);\n         assert.deepEqual(first, [title.firstChild, 4]);\n         assert.deepEqual(second, [title, title.childNodes.length]);\n         assert.equal(title.childNodes.length, 1);\n         assert.equal(title.innerHTML, \"abcdfirst\");\n       });\n\n    it(\"cleans up after inserting a text node\", () => {\n      const text = document.createTextNode(\"test\");\n      const [first, second] = domutil.insertIntoText(child, 2, text);\n      assert.equal(first[0].nodeValue, \"abtestcd\");\n      assert.equal(first[1], 2);\n      assert.equal(second[0].nodeValue, \"abtestcd\");\n      assert.equal(second[1], 6);\n      assert.equal(title.childNodes.length, 1);\n    });\n\n    it(\"cleans up after inserting a fragment with text\", () => {\n      const frag = document.createDocumentFragment();\n      frag.appendChild(document.createTextNode(\"first\"));\n      frag.appendChild(document.createElement(\"span\")).textContent = \"blah\";\n      frag.appendChild(document.createTextNode(\"last\"));\n      const [first, second] = domutil.insertIntoText(child, 2, frag);\n      assert.equal(first[0].nodeValue, \"abfirst\");\n      assert.equal(first[1], 2);\n      assert.equal(second[0].nodeValue, \"lastcd\");\n      assert.equal(second[1], 4);\n      assert.equal(title.childNodes.length, 3);\n    });\n  });\n\n  describe(\"insertText\", () => {\n    let root: Document;\n    let title: HTMLElement;\n    beforeEach(() => {\n      root = sourceDoc.cloneNode(true) as Document;\n      title = root.getElementsByTagName(\"title\")[0];\n    });\n\n    function makeSeries(seriesTitle: string,\n                        caretAtEnd: boolean,\n                        adapter: (node: Node,\n                                  offset: number,\n                                  text: string) => domutil.TextInsertionResult)\n    : void {\n      describe(seriesTitle, () => {\n        it(\"modifies a text node\", () => {\n          const node = title.firstChild!;\n          const { node: textNode, isNew, caret } = adapter(node, 2, \"Q\");\n          assert.equal(textNode, node);\n          assert.isFalse(isNew);\n          assert.equal(textNode!.nodeValue, \"abQcd\");\n          assert.equal(caret[0], textNode);\n          assert.equal(caret[1], caretAtEnd ? 3 : 2);\n        });\n\n        it(\"uses the next text node if possible\", () => {\n          const { node: textNode, isNew, caret } = adapter(title, 0, \"Q\");\n          assert.equal(textNode, title.firstChild);\n          assert.isFalse(isNew);\n          assert.equal(textNode!.nodeValue, \"Qabcd\");\n          assert.equal(caret[0], textNode);\n          assert.equal(caret[1], caretAtEnd ? 1 : 0);\n        });\n\n        it(\"uses the previous text node if possible\", () => {\n          const { node: textNode, isNew, caret } = adapter(title, 1, \"Q\");\n          assert.equal(textNode, title.firstChild);\n          assert.isFalse(isNew);\n          assert.equal(textNode!.nodeValue, \"abcdQ\");\n          assert.equal(caret[0], textNode);\n          assert.equal(caret[1], caretAtEnd ? 5 : 4);\n        });\n\n        it(\"creates a text node if needed\", () => {\n          empty(title);\n          const { node: textNode, isNew, caret } = adapter(title, 0, \"test\");\n          assert.equal(textNode, title.firstChild);\n          assert.equal(textNode!.nodeValue, \"test\");\n          assert.isTrue(isNew);\n          assert.equal(caret[0], textNode);\n          assert.equal(caret[1], caretAtEnd ? 4 : 0);\n        });\n\n        it(\"does nothing if passed an empty string\", () => {\n          assert.equal(title.firstChild!.nodeValue, \"abcd\");\n          const { node: textNode, isNew, caret } = adapter(title, 1, \"\");\n          assert.equal(title.firstChild!.nodeValue, \"abcd\");\n          assert.isUndefined(textNode);\n          assert.isFalse(isNew);\n          assert.equal(caret[0], title);\n          assert.equal(caret[1], 1);\n        });\n\n        it(\"inserts in correct position if needs to create text node\", () => {\n          empty(title);\n          const b = title.ownerDocument.createElement(\"b\");\n          b.textContent = \"q\";\n          title.appendChild(b);\n          const { node: textNode, isNew, caret } = adapter(title, 1, \"test\");\n          assert.equal(textNode, title.lastChild);\n          assert.equal(textNode!.nodeValue, \"test\");\n          assert.isTrue(isNew);\n          assert.equal(caret[0], textNode);\n          assert.equal(caret[1], caretAtEnd ? 4 : 0);\n        });\n      });\n    }\n\n    makeSeries(\"(caretAtEnd unspecified)\",\n               true,\n               (node, offset, text) =>\n               domutil.insertText(node, offset, text));\n    makeSeries(\"(caretAtEnd true)\",\n               true,\n               (node, offset, text) =>\n               domutil.insertText(node, offset, text, true));\n    makeSeries(\"(caretAtEnd false)\",\n               false,\n               (node, offset, text) =>\n               domutil.insertText(node, offset, text, false));\n  });\n\n  describe(\"deleteText\", () => {\n    let root: Document;\n    let title: HTMLElement;\n    let child: Text;\n\n    beforeEach(() => {\n      root = sourceDoc.cloneNode(true) as Document;\n      title = root.getElementsByTagName(\"title\")[0];\n      child = title.firstChild as Text;\n    });\n\n    it(\"fails on non-text node\", () => {\n      assert.throws(domutil.deleteText.bind(title, 0, 0),\n                    Error, \"deleteText called on non-text\");\n    });\n\n    it(\"modifies a text node\", () => {\n      domutil.deleteText(child, 2, 2);\n      assert.equal(child.nodeValue, \"ab\");\n    });\n\n    it(\"deletes an empty text node\", () => {\n      domutil.deleteText(child, 0, 4);\n      assert.isNull(child.parentNode);\n    });\n  });\n\n  describe(\"firstDescendantOrSelf\", () => {\n    let root: Document;\n    beforeEach(() => {\n      root = sourceDoc.cloneNode(true) as Document;\n    });\n\n    it(\"returns null when passed null\", () => {\n      assert.isNull(domutil.firstDescendantOrSelf(null));\n    });\n\n    it(\"returns null when passed undefined\", () => {\n      assert.isNull(domutil.firstDescendantOrSelf(undefined));\n    });\n\n    it(\"returns the node when it has no descendants\", () => {\n      const node = root.getElementsByTagName(\"title\")[0].firstChild;\n      assert.isNotNull(node); // make sure we got something\n      assert.isDefined(node); // make sure we got something\n      assert.equal(domutil.firstDescendantOrSelf(node), node);\n    });\n\n    it(\"returns the first descendant\", () => {\n      const node = root;\n      assert.isNotNull(node); // make sure we got something\n      assert.isDefined(node); // make sure we got something\n      assert.equal(domutil.firstDescendantOrSelf(node),\n                   root.getElementsByTagName(\"title\")[0].firstChild);\n    });\n  });\n\n  describe(\"lastDescendantOrSelf\", () => {\n    let root: Document;\n    beforeEach(() => {\n      root = sourceDoc.cloneNode(true) as Document;\n    });\n\n    it(\"returns null when passed null\", () => {\n      assert.isNull(domutil.lastDescendantOrSelf(null));\n    });\n\n    it(\"returns null when passed undefined\", () => {\n      assert.isNull(domutil.lastDescendantOrSelf(undefined));\n    });\n\n    it(\"returns the node when it has no descendants\", () => {\n      const node = root.getElementsByTagName(\"title\")[0].firstChild;\n      assert.isNotNull(node); // make sure we got something\n      assert.isDefined(node); // make sure we got something\n      assert.equal(domutil.lastDescendantOrSelf(node), node);\n    });\n\n    it(\"returns the last descendant\", () => {\n      const node = root;\n      assert.isNotNull(node); // make sure we got something\n      assert.isDefined(node); // make sure we got something\n      assert.equal(domutil.lastDescendantOrSelf(node),\n                   root.getElementsByTagName(\"p\")[5].lastChild);\n    });\n  });\n\n  describe(\"correspondingNode\", () => {\n    let root: Document;\n    beforeEach(() => {\n      root = sourceDoc.cloneNode(true) as Document;\n    });\n\n    it(\"returns the corresponding node\", () => {\n      const clone = root.cloneNode(true) as Element;\n      const corresp = domutil.correspondingNode(\n        root, clone, root.querySelectorAll(\"quote\")[1]);\n      assert.equal(corresp, clone.querySelectorAll(\"quote\")[1]);\n    });\n\n    it(\"fails if the node is not in the tree\", () => {\n      const clone = root.cloneNode(true);\n      assert.throws(\n        domutil.correspondingNode.bind(domutil, root, clone, document.body),\n        Error, \"nodeInA is not treeA or a child of treeA\");\n    });\n  });\n\n  describe(\"linkTrees\", () => {\n    let doc: Document;\n    beforeEach(() => {\n      doc = sourceDoc.cloneNode(true) as Document;\n    });\n\n    it(\"sets wed_mirror_node\", () => {\n      const root = doc.firstChild as Element;\n      const cloned = root.cloneNode(true) as Element;\n      domutil.linkTrees(cloned, root);\n      const p = root.getElementsByTagName(\"p\")[0];\n      const clonedP = cloned.getElementsByTagName(\"p\")[0];\n      assert.equal($.data(p, \"wed_mirror_node\"), clonedP);\n      assert.equal($.data(clonedP, \"wed_mirror_node\"), p);\n    });\n  });\n\n  describe(\"focusNode\", () => {\n    it(\"focuses an element\", () => {\n      const p = testPara;\n      assert.notEqual(p, p.ownerDocument.activeElement, \"p is not focused\");\n      domutil.focusNode(p);\n      assert.equal(p, p.ownerDocument.activeElement, \"p is focused\");\n    });\n\n    it(\"focuses text's parent\", () => {\n      const text = testPara.firstChild!;\n      assert.equal(text.nodeType, Node.TEXT_NODE, \"node type is text\");\n      assert.notEqual(text, text.ownerDocument.activeElement,\n                      \"text is not focused\");\n      domutil.focusNode(text);\n      assert.equal(text.parentNode, text.ownerDocument.activeElement,\n                   \"text's parent is focused\");\n    });\n\n    it(\"throws an error on anything else than element or text\", () => {\n      assert.throws(domutil.focusNode.bind(undefined, undefined), Error,\n                    \"tried to focus something other than a text node or \" +\n                    \"an element.\");\n    });\n  });\n\n  describe(\"genericCutFunction\", () => {\n    let root: Document;\n    let p: Element;\n    beforeEach(() => {\n      root = sourceDoc.cloneNode(true) as Document;\n      p = root.querySelectorAll(\"body>p\")[1];\n    });\n\n    function checkNodes(ret: Node[], nodes: Node[]): void {\n      assert.equal(ret.length, nodes.length, \"result length\");\n      for (let i = 0; i < nodes.length; ++i) {\n        assert.equal(ret[i].nodeType, nodes[i].nodeType);\n        assert.isTrue(ret[i].nodeType === Node.TEXT_NODE ||\n                      ret[i].nodeType === Node.ELEMENT_NODE,\n                      \"node type\");\n        switch (ret[i].nodeType) {\n        case Node.TEXT_NODE:\n          assert.equal(ret[i].nodeValue, nodes[i].nodeValue,\n                       `text node at ${i}`);\n          break;\n        case Node.ELEMENT_NODE:\n          assert.equal((ret[i] as Element).outerHTML,\n                       (nodes[i] as Element).outerHTML, `element node at ${i}`);\n          break;\n        default:\n          break;\n        }\n      }\n    }\n\n    let cut: Function;\n    before(() => {\n      cut = domutil.genericCutFunction.bind({\n        deleteText: domutil.deleteText,\n        deleteNode: domutil.deleteNode,\n        mergeTextNodes: domutil.mergeTextNodes,\n      });\n    });\n\n    it(\"removes nodes and merges text\", () => {\n      const start = [p.firstChild!, 4] as domutil.Caret;\n      const end = [p.lastChild!, 3] as domutil.Caret;\n      assert.equal(p.childNodes.length, 5);\n\n      const nodes = Array.prototype.slice.call(\n        p.childNodes,\n        domutil.indexOf(p.childNodes, start[0].nextSibling!),\n        domutil.indexOf(p.childNodes, end[0].previousSibling!) + 1);\n      nodes.unshift(p.ownerDocument.createTextNode(\"re \"));\n      nodes.push(p.ownerDocument.createTextNode(\" af\"));\n\n      const [final, cutContent] = cut(start, end);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(p.childNodes.length, 1);\n      assert.equal(p.innerHTML, \"befoter\");\n\n      // Check the caret position.\n      assert.deepEqual(final, [p.firstChild, 4]);\n\n      // Check that the nodes are those we expected.\n      checkNodes(cutContent, nodes);\n    });\n\n    it(\"returns proper nodes when merging a single node\", () => {\n      const start = [p.firstChild, 4];\n      const end = [p.firstChild, 6];\n      assert.equal(p.childNodes.length, 5);\n\n      const nodes = [p.ownerDocument.createTextNode(\"re\")];\n      const [final, cutContent] = cut(start, end);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(p.childNodes.length, 5);\n      assert.equal(p.firstChild!.nodeValue, \"befo \");\n\n      // Check the caret position.\n      assert.deepEqual(final, [p.firstChild, 4]);\n\n      // Check that the nodes are those we expected.\n      checkNodes(cutContent, nodes);\n    });\n\n    it(\"empties an element without problem\", () => {\n      const start = [p, 0];\n      const end = [p, p.childNodes.length];\n      assert.equal(p.childNodes.length, 5);\n\n      const nodes = Array.prototype.slice.call(p.childNodes);\n      const [final, cutContent] = cut(start, end);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(p.childNodes.length, 0);\n\n      // Check the caret position.\n      assert.deepEqual(final, [p, 0]);\n      // Check that the nodes are those we expected.\n      checkNodes(cutContent, nodes);\n    });\n\n    it(\"accepts a start caret in text and an end caret outside text\", () => {\n      const start = [p.firstChild, 0];\n      const end = [p, p.childNodes.length];\n      assert.equal(p.childNodes.length, 5);\n\n      const nodes = Array.prototype.slice.call(p.cloneNode(true).childNodes);\n      const [final, cutContent] = cut(start, end);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(p.childNodes.length, 0);\n\n      // Check the caret position.\n      assert.deepEqual(final, [p, 0]);\n      // Check that the nodes are those we expected.\n      checkNodes(cutContent, nodes);\n    });\n\n    it(\"accepts a start caret outside text and an end caret in text\", () => {\n      const start = [p, 0];\n      const end = [p.lastChild, p.lastChild!.nodeValue!.length];\n      assert.equal(p.childNodes.length, 5);\n\n      const nodes = Array.prototype.slice.call(p.cloneNode(true).childNodes);\n      const [final, cutContent] = cut(start, end);\n\n      // Check that we're doing what we think we're doing.\n      assert.equal(p.childNodes.length, 0);\n\n      // Check the caret position.\n      assert.deepEqual(final, [p, 0]);\n      // Check that the nodes are those we expected.\n      checkNodes(cutContent, nodes);\n    });\n  });\n\n  describe(\"closest\", () => {\n    let p: HTMLElement;\n    let text: HTMLElement;\n    before(() => {\n      domroot.innerHTML = `<div class=\"text\"><div class=\"body\">\\\n<div class=\"p\">aaa</div></div></div>`;\n      p = domroot.getElementsByClassName(\"p\")[0] as HTMLElement;\n      text = domroot.getElementsByClassName(\"text\")[0] as HTMLElement;\n    });\n\n    it(\"returns null when node is null\", () => {\n      assert.isNull(domutil.closest(null, \"foo\"));\n    });\n\n    it(\"returns a value when there is a match\", () => {\n      assert.equal(domutil.closest(p, \".text\"), text);\n    });\n\n    it(\"initially moves out of text nodes\", () => {\n      const textNode = p.firstChild!;\n      assert.equal(textNode.nodeType, Node.TEXT_NODE);\n      assert.equal(domutil.closest(textNode, \".text\"), text);\n    });\n\n    it(\"returns null when there is no match\", () => {\n      assert.isNull(domutil.closest(p, \"FOO\"));\n    });\n\n    it(\"returns null when it hits nothing before the limit\", () => {\n      assert.isNull(domutil.closest(p, \".text\", p.parentNode as Element));\n    });\n  });\n\n  describe(\"closestByClass\", () => {\n    let p: HTMLElement;\n    let text: HTMLElement;\n    before(() => {\n      domroot.innerHTML = `<div class=\"text\"><div class=\"body\">\\\n<div class=\"p\">aaa</div></div></div>`;\n      p = domroot.getElementsByClassName(\"p\")[0] as HTMLElement;\n      text = domroot.getElementsByClassName(\"text\")[0] as HTMLElement;\n    });\n\n    it(\"returns null when node is null\", () => {\n      assert.isNull(domutil.closestByClass(null, \"foo\"));\n    });\n\n    it(\"returns a value when there is a match\", () => {\n      assert.equal(domutil.closestByClass(p, \"text\"), text);\n    });\n\n    it(\"initially moves out of text nodes\", () => {\n      const textNode = p.firstChild!;\n      assert.equal(textNode.nodeType, Node.TEXT_NODE);\n      assert.equal(domutil.closestByClass(textNode, \"text\"), text);\n    });\n\n    it(\"returns null when there is no match\", () => {\n      assert.isNull(domutil.closestByClass(p, \"FOO\"));\n    });\n\n    it(\"returns null when it hits nothing before the limit\", () => {\n      assert.isNull(domutil.closestByClass(p, \"text\", p.parentNode as Element));\n    });\n  });\n\n  describe(\"siblingByClass\", () => {\n    let a: NodeListOf<Element>;\n    let b: NodeListOf<Element>;\n    let firstLi: HTMLElement;\n    before(() => {\n      domroot.innerHTML = `<ul><li>a</li><li class=\"a\"></li><li></li>\\\n<li class=\"b\"></li><li></li><li class=\"a\"></li></ul>`;\n      b = domroot.getElementsByClassName(\"b\");\n      a = domroot.getElementsByClassName(\"a\");\n      firstLi = domroot.getElementsByTagName(\"li\")[0];\n    });\n\n    it(\"returns null when node is null\", () => {\n      assert.isNull(domutil.siblingByClass(null, \"foo\"));\n    });\n\n    it(\"returns null when the node is not an element\", () => {\n      const text = firstLi.firstChild!;\n      assert.equal(text.nodeType, Node.TEXT_NODE);\n      assert.isNull(domutil.siblingByClass(text, \"foo\"));\n    });\n\n    it(\"returns null when the node has no parent\", () => {\n      assert.isNull(domutil.siblingByClass(document.createElement(\"q\"), \"foo\"));\n    });\n\n    it(\"returns null when nothing matches\", () => {\n      assert.isNull(domutil.siblingByClass(firstLi, \"foo\"));\n    });\n\n    it(\"returns a match when a preceding sibling matches\", () => {\n      assert.equal(domutil.siblingByClass(b[0], \"a\"), a[0]);\n    });\n\n    it(\"returns a match when a following sibling matches\", () => {\n      assert.equal(domutil.siblingByClass(a[0], \"b\"), b[0]);\n    });\n  });\n\n  describe(\"childrenByClass\", () => {\n    let a: NodeListOf<Element>;\n    let firstLi: HTMLElement;\n    let ul: HTMLElement;\n    before(() => {\n      domroot.innerHTML = `<ul><li>a</li><li class=\"a\"></li><li></li>\n<li class=\\\"b\\\"></li><li></li><li class=\"a\"></li></ul>`;\n      ul = domroot.getElementsByTagName(\"ul\")[0];\n      a = domroot.getElementsByClassName(\"a\");\n      firstLi = domroot.getElementsByTagName(\"li\")[0];\n    });\n\n    it(\"returns [] when node is null\", () => {\n      assert.sameMembers(domutil.childrenByClass(null, \"foo\"), []);\n    });\n\n    it(\"returns [] when the node is not an element\", () => {\n      const text = firstLi.firstChild!;\n      assert.equal(text.nodeType, Node.TEXT_NODE);\n      assert.sameMembers(domutil.childrenByClass(text, \"foo\"), []);\n    });\n\n    it(\"returns [] when nothing matches\", () => {\n      assert.sameMembers(domutil.childrenByClass(ul, \"foo\"), []);\n    });\n\n    it(\"returns a match\", () => {\n      assert.sameMembers(domutil.childrenByClass(ul, \"a\"),\n                         Array.prototype.slice.call(a));\n    });\n  });\n\n  describe(\"childByClass\", () => {\n    let a: NodeListOf<Element>;\n    let firstLi: HTMLElement;\n    let ul: HTMLElement;\n    before(() => {\n      domroot.innerHTML = `<ul><li>a</li><li class=\"a\"></li><li></li>\\\n<li class=\"b\"></li><li></li><li class=\"a\"></li></ul>`;\n      ul = domroot.getElementsByTagName(\"ul\")[0];\n      a = domroot.getElementsByClassName(\"a\");\n      firstLi = domroot.getElementsByTagName(\"li\")[0];\n    });\n\n    it(\"returns null when node is null\", () => {\n      assert.isNull(domutil.childByClass(null, \"foo\"));\n    });\n\n    it(\"returns null when the node is not an element\", () => {\n      const text = firstLi.firstChild!;\n      assert.equal(text.nodeType, Node.TEXT_NODE);\n      assert.isNull(domutil.childByClass(text, \"foo\"));\n    });\n\n    it(\"returns null when nothing matches\", () => {\n      assert.isNull(domutil.childByClass(ul, \"foo\"));\n    });\n\n    it(\"returns the first match when something matches\", () => {\n      assert.equal(domutil.childByClass(ul, \"a\"), a[0]);\n    });\n  });\n\n  describe(\"toGUISelector\", () => {\n    it(\"raises an error on brackets\", () => {\n      assert.throws(domutil.toGUISelector.bind(undefined, \"abcde[f]\", {}),\n                    Error, \"selector is too complex\");\n    });\n\n    it(\"raises an error on parens\", () => {\n      assert.throws(domutil.toGUISelector.bind(undefined, \"abcde:not(f)\", {}),\n                    Error, \"selector is too complex\");\n    });\n\n    it(\"converts a > sequence\", () => {\n      assert.equal(domutil.toGUISelector(\"p > term > foreign\",\n                                         { \"\": \"\" }),\n                   \"._local_p._xmlns_._real > ._local_term._xmlns_._real \\\n> ._local_foreign._xmlns_._real\");\n    });\n\n    it(\"converts a space sequence with namespaces\", () => {\n      assert.equal(domutil.toGUISelector(\"btw:cit tei:q\", commonMap),\n                   \"._local_cit.\\\n_xmlns_http\\\\:\\\\/\\\\/mangalamresearch\\\\.org\\\\/ns\\\\/btw-storage._real \\\n._local_q._xmlns_http\\\\:\\\\/\\\\/www\\\\.tei-c\\\\.org\\\\/ns\\\\/1\\\\.0._real\");\n    });\n  });\n\n  describe(\"dataFind/dataFindAll\", () => {\n    let dataRoot: Element;\n    before(() => provider.getText(\"dataFind_converted.xml\").then((data) => {\n      const parser = new DOMParser();\n      const dataDoc = parser.parseFromString(data, \"application/xml\");\n      dataRoot = dataDoc.firstChild as Element;\n      const guiRoot = convert.toHTMLTree(document, dataRoot) as HTMLElement;\n      domutil.linkTrees(dataRoot, guiRoot);\n    }));\n\n    it(\"find a node\", () => {\n      const result = domutil.dataFind(dataRoot, \"btw:sense-emphasis\",\n                                      commonMap)!;\n      assert.equal(result.tagName, \"btw:sense-emphasis\");\n      assert.isTrue(dataRoot.contains(result));\n    });\n\n    it(\"find a child node\", () => {\n      const result = domutil.dataFind(dataRoot, \"btw:overview>btw:definition\",\n                                      commonMap)!;\n      assert.equal(result.tagName, \"btw:definition\");\n      assert.isTrue(dataRoot.contains(result));\n    });\n\n    it(\"find nodes\", () => {\n      const results = domutil.dataFindAll(dataRoot, \"btw:sense-emphasis\",\n                                          commonMap);\n      assert.equal(results.length, 4);\n      results.forEach((x) => {\n        assert.equal(x.tagName, \"btw:sense-emphasis\");\n        assert.isTrue(dataRoot.contains(x));\n      });\n    });\n  });\n\n  describe(\"contains\", () => {\n    let ul: HTMLElement;\n    let li: HTMLElement;\n\n    before(() => {\n      domroot.innerHTML = \"<ul><li class=\\\"a\\\"></li></ul>\";\n      ul = domroot.getElementsByTagName(\"ul\")[0];\n      li = domroot.getElementsByTagName(\"li\")[0];\n    });\n\n    it(\"handles elements\", () => {\n      assert.isTrue(domutil.contains(ul, li));\n      assert.isFalse(domutil.contains(li, ul));\n    });\n\n    it(\"handles attributes\", () => {\n      const classAttr = li.attributes.getNamedItem(\"class\");\n      assert.isTrue(domutil.contains(li, classAttr));\n      // Transitively: the attribute is contained by li, which is contained by\n      // ul\n      assert.isTrue(domutil.contains(ul, classAttr));\n      assert.isFalse(domutil.contains(classAttr, ul));\n    });\n  });\n\n  describe(\"comparePositions\", () => {\n    let p: Node;\n    before(() => {\n      p = defined(sourceDoc.querySelector(\"body p\"));\n      assert.equal(p.nodeType, Node.ELEMENT_NODE);\n    });\n\n    it(\"returns 0 if the two locations are equal\", () => {\n      assert.equal(domutil.comparePositions(p, 0, p, 0), 0);\n    });\n\n    it(\"returns -1 if the 1st location is before the 2nd\", () => {\n      assert.equal(domutil.comparePositions(p, 0, p, 1), -1);\n    });\n\n    it(\"returns 1 if the 1st location is after the 2nd\", () => {\n      assert.equal(domutil.comparePositions(p, 1, p, 0), 1);\n    });\n\n    describe(\"(siblings)\", () => {\n      let next: Node;\n\n      before(() => {\n        next = defined(p.nextSibling);\n      });\n\n      it(\"returns -1 if 1st location precedes 2nd\", () => {\n        assert.equal(domutil.comparePositions(p, 0, next, 0), -1);\n      });\n\n      it(\"returns 1 if 1st location follows 2nd\", () => {\n        assert.equal(domutil.comparePositions(next, 0, p, 0), 1);\n      });\n    });\n\n    describe(\"(parent - child positions)\", () => {\n      let parent: Node;\n\n      before(() => {\n        parent = defined(p.parentNode);\n        // We want to check that we are looking at the p element we think\n        // we are looking at.\n        assert.equal(parent.childNodes[0], p);\n      });\n\n      it(\"returns -1 if 1st position is a parent position before 2nd\", () => {\n        assert.equal(domutil.comparePositions(parent, 0, p, 0), -1);\n      });\n\n      it(\"returns 1 if 1st position is a parent position after 2nd\", () => {\n        assert.equal(domutil.comparePositions(parent, 1, p, 0), 1);\n      });\n\n      it(\"returns 1 if 1st position is a child position after 2nd\", () => {\n        assert.equal(domutil.comparePositions(p, 0, parent, 0), 1);\n      });\n\n      it(\"returns -1 if 1st position is a child position before 2nd\", () => {\n        assert.equal(domutil.comparePositions(p, 0, parent, 1), -1);\n      });\n    });\n  });\n});\n\n//  LocalWords:  RequireJS Mangalam MPL Dubeau previousSibling jQuery\n//  LocalWords:  nextSibling whitespace linkTrees pathToNode abcdQ cd\n//  LocalWords:  nodeToPath firstDescendantOrSelf deleteText Qabcd\n//  LocalWords:  abQcd insertText lastcd abfirst abcdfirst abtestcd\n//  LocalWords:  firstabcd lastabcd insertIntoText requirejs abcd pre\n//  LocalWords:  splitTextNode prevCaretPosition html isNotNull chai\n//  LocalWords:  domroot nextCaretPosition domutil jquery\n"]}