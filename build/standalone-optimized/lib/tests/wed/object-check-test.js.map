{"version":3,"file":"object-check-test.js","sourceRoot":"","sources":["../../../../../lib/tests/wed/object-check-test.ts"],"names":[],"mappings":";;;IAOA,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IAE3B,QAAQ,CAAC,cAAc,EAAE;QACvB,IAAM,QAAQ,GAAG;YACf,GAAG,EAAE,KAAK;YACV,GAAG,EAAE;gBACH,GAAG,EAAE,IAAI;gBACT,GAAG,EAAE,KAAK;aACX;YACD,GAAG,EAAE;gBACH,GAAG,EAAE,KAAK;gBACV,GAAG,EAAE,KAAK;gBACV,IAAI,EAAE,IAAI;aACX;YACD,IAAI,EAAE,IAAI;SACX,CAAC;QAEF,IAAM,OAAO,GAAG;YACd,GAAG,EAAE;gBACH,GAAG,EAAE,CAAC;aACP;YACD,GAAG,EAAE;gBACH,IAAI,EAAE,CAAC;aACR;YACD,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;SACvB,CAAC;QAEF,QAAQ,CAAC,OAAO,EAAE;YAChB,EAAE,CAAC,2BAA2B,EAAE;gBAC9B,IAAM,GAAG,GAAG,oBAAK,CAAC,QAAQ,EAAE;oBAC1B,QAAQ,EAAE,MAAM;oBAChB,QAAQ,EAAE,MAAM;oBAChB,GAAG,EAAE;wBACH,GAAG,EAAE,CAAC;wBACN,QAAQ,EAAE,MAAM;qBACjB;oBACD,GAAG,EAAE;wBACH,IAAI,EAAE,CAAC,CAAC,CAAC;qBACV;oBACD,QAAQ,EAAE;wBACR,QAAQ,EAAE,IAAI;qBACf;oBACD,IAAI,EAAE,CAAC;iBACR,CAAC,CAAC;gBACH,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE;oBACpB,KAAK,EAAE,CAAC,cAAc,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC;iBAC5D,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,wBAAwB,EAAE;gBAC3B,IAAM,GAAG,GAAG,oBAAK,CAAC,QAAQ,EAAE;oBAC1B,GAAG,EAAE;wBACH,GAAG,EAAE,CAAC;qBACP;iBACF,CAAC,CAAC;gBACH,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE;oBACpB,OAAO,EAAE,CAAC,KAAK,EAAE,UAAU,EAAE,MAAM,CAAC;iBACrC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,8CAA8C,EAAE;gBACjD,IAAM,GAAG,GAAG,oBAAK,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;gBAC5C,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE;oBACpB,OAAO,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC;oBAC/B,KAAK,EAAE,CAAC,SAAS,CAAC;iBACnB,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,kBAAkB,EAAE;gBACrB,MAAM,CAAC,SAAS,CAAC,oBAAK,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,iBAAiB,EAAE;YAC1B,EAAE,CAAC,iCAAiC,EAAE;gBACpC,8BAAe,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,0BAA0B,EAAE;gBAC7B,MAAM,CAAC,MAAM,CAAC;oBACZ,8BAAe,CAAC,QAAQ,EAAE;wBACxB,GAAG,EAAE;4BACH,IAAI,EAAE,CAAC;yBACR;wBACD,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;qBACvB,CAAC,CAAC;gBACL,CAAC,EAAE,KAAK,EAAE,qBAAqB,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,wBAAwB,EAAE;gBAC3B,MAAM,CAAC,MAAM,CAAC;oBACZ,8BAAe,CAAC,QAAQ,EAAE;wBACxB,GAAG,EAAE;4BACH,GAAG,EAAE,CAAC;4BACN,OAAO,EAAE,CAAC;yBACX;wBACD,GAAG,EAAE;4BACH,IAAI,EAAE,CAAC;yBACR;wBACD,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;qBACvB,CAAC,CAAC;gBACL,CAAC,EAAE,KAAK,EAAE,2BAA2B,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,mBAAmB,EAAE;YAC5B,EAAE,CAAC,iCAAiC,EAAE;gBACpC,gCAAiB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,kBAAkB,EAAE;gBACrB,MAAM,CAAC,MAAM,CAAC;oBACZ,gCAAiB,CAAC,QAAQ,EAAE;wBAC1B,GAAG,EAAE;4BACH,IAAI,EAAE,CAAC;4BACP,OAAO,EAAE,CAAC;yBACX;wBACD,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;qBACvB,CAAC,CAAC;gBACL,CAAC,EAAE,KAAK,EAAE,gDAAgD,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { assertExtensively, assertSummarily, check } from \"wed/object-check\";\n\nconst assert = chai.assert;\n\ndescribe(\"object-check\", () => {\n  const template = {\n    foo: false,\n    bar: {\n      baz: true,\n      bin: false,\n    },\n    bip: {\n      baz: false,\n      bin: false,\n      toto: true,\n    },\n    toto: true,\n  };\n\n  const correct = {\n    bar: {\n      baz: 1,\n    },\n    bip: {\n      toto: 1,\n    },\n    toto: { blah: \"blah\" },\n  };\n\n  describe(\"check\", () => {\n    it(\"reports extraneous fields\", () => {\n      const ret = check(template, {\n        unknown1: \"blah\",\n        unknown2: \"blah\",\n        bar: {\n          baz: 1,\n          unknown3: \"blah\",\n        },\n        bip: {\n          toto: [1],\n        },\n        unknown4: {\n          unknown5: true,\n        },\n        toto: 1,\n      });\n      assert.deepEqual(ret, {\n        extra: [\"bar.unknown3\", \"unknown1\", \"unknown2\", \"unknown4\"],\n      });\n    });\n\n    it(\"reports missing fields\", () => {\n      const ret = check(template, {\n        bip: {\n          baz: 1,\n        },\n      });\n      assert.deepEqual(ret, {\n        missing: [\"bar\", \"bip.toto\", \"toto\"],\n      });\n    });\n\n    it(\"reports missing fields and extraneous fields\", () => {\n      const ret = check(template, { unknown: 1 });\n      assert.deepEqual(ret, {\n        missing: [\"bar\", \"bip\", \"toto\"],\n        extra: [\"unknown\"],\n      });\n    });\n\n    it(\"reports no error\", () => {\n      assert.deepEqual(check(template, correct), {});\n    });\n  });\n\n  describe(\"assertSummarily\", () => {\n    it(\"does not throw on correct input\", () => {\n      assertSummarily(template, correct);\n    });\n\n    it(\"throws on missing fields\", () => {\n      assert.throws(() => {\n        assertSummarily(template, {\n          bip: {\n            toto: 1,\n          },\n          toto: { blah: \"blah\" },\n        });\n      }, Error, \"missing option: bar\");\n    });\n\n    it(\"throws on extra fields\", () => {\n      assert.throws(() => {\n        assertSummarily(template, {\n          bar: {\n            baz: 1,\n            unknown: 1,\n          },\n          bip: {\n            toto: 1,\n          },\n          toto: { blah: \"blah\" },\n        });\n      }, Error, \"extra option: bar.unknown\");\n    });\n  });\n\n  describe(\"assertExtensively\", () => {\n    it(\"does not throw on correct input\", () => {\n      assertExtensively(template, correct);\n    });\n\n    it(\"throws on errors\", () => {\n      assert.throws(() => {\n        assertExtensively(template, {\n          bip: {\n            toto: 1,\n            unknown: 2,\n          },\n          toto: { blah: \"blah\" },\n        });\n      }, Error, \"missing option: bar, extra option: bip.unknown\");\n    });\n  });\n});\n"]}