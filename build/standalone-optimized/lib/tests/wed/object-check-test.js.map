{"version":3,"sources":["../../../tests/wed/object-check-test.ts"],"names":[],"mappings":";;;IAOA,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IAE3B,QAAQ,CAAC,cAAc,EAAE;QACvB,QAAQ,CAAC,OAAO,EAAE;YAChB,IAAM,QAAQ,GAAG;gBACf,GAAG,EAAE,KAAK;gBACV,GAAG,EAAE;oBACH,GAAG,EAAE,IAAI;oBACT,GAAG,EAAE,KAAK;iBACX;gBACD,GAAG,EAAE;oBACH,GAAG,EAAE,KAAK;oBACV,GAAG,EAAE,KAAK;oBACV,IAAI,EAAE,IAAI;iBACX;gBACD,IAAI,EAAE,IAAI;aACX,CAAC;YAEF,EAAE,CAAC,2BAA2B,EAAE;gBAC9B,IAAM,GAAG,GAAG,oBAAK,CAAC,QAAQ,EAAE;oBAC1B,QAAQ,EAAE,MAAM;oBAChB,QAAQ,EAAE,MAAM;oBAChB,GAAG,EAAE;wBACH,GAAG,EAAE,CAAC;wBACN,QAAQ,EAAE,MAAM;qBACjB;oBACD,GAAG,EAAE;wBACH,IAAI,EAAE,CAAC,CAAC,CAAC;qBACV;oBACD,QAAQ,EAAE;wBACR,QAAQ,EAAE,IAAI;qBACf;oBACD,IAAI,EAAE,CAAC;iBACR,CAAC,CAAC;gBACH,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE;oBACpB,KAAK,EAAE,CAAC,cAAc,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC;iBAC5D,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,wBAAwB,EAAE;gBAC3B,IAAM,GAAG,GAAG,oBAAK,CAAC,QAAQ,EAAE;oBAC1B,GAAG,EAAE;wBACH,GAAG,EAAE,CAAC;qBACP;iBACF,CAAC,CAAC;gBACH,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE;oBACpB,OAAO,EAAE,CAAC,KAAK,EAAE,UAAU,EAAE,MAAM,CAAC;iBACrC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,8CAA8C,EAAE;gBACjD,IAAM,GAAG,GAAG,oBAAK,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;gBAC5C,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE;oBACpB,OAAO,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC;oBAC/B,KAAK,EAAE,CAAC,SAAS,CAAC;iBACnB,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,kBAAkB,EAAE;gBACrB,IAAM,GAAG,GAAG,oBAAK,CAAC,QAAQ,EAAE;oBAC1B,GAAG,EAAE;wBACH,GAAG,EAAE,CAAC;qBACP;oBACD,GAAG,EAAE;wBACH,IAAI,EAAE,CAAC;qBACR;oBACD,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;iBACvB,CAAC,CAAC;gBACH,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC","file":"object-check-test.js","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { check } from \"wed/object-check\";\n\nconst assert = chai.assert;\n\ndescribe(\"object-check\", () => {\n  describe(\"check\", () => {\n    const template = {\n      foo: false,\n      bar: {\n        baz: true,\n        bin: false,\n      },\n      bip: {\n        baz: false,\n        bin: false,\n        toto: true,\n      },\n      toto: true,\n    };\n\n    it(\"reports extraneous fields\", () => {\n      const ret = check(template, {\n        unknown1: \"blah\",\n        unknown2: \"blah\",\n        bar: {\n          baz: 1,\n          unknown3: \"blah\",\n        },\n        bip: {\n          toto: [1],\n        },\n        unknown4: {\n          unknown5: true,\n        },\n        toto: 1,\n      });\n      assert.deepEqual(ret, {\n        extra: [\"bar.unknown3\", \"unknown1\", \"unknown2\", \"unknown4\"],\n      });\n    });\n\n    it(\"reports missing fields\", () => {\n      const ret = check(template, {\n        bip: {\n          baz: 1,\n        },\n      });\n      assert.deepEqual(ret, {\n        missing: [\"bar\", \"bip.toto\", \"toto\"],\n      });\n    });\n\n    it(\"reports missing fields and extraneous fields\", () => {\n      const ret = check(template, { unknown: 1 });\n      assert.deepEqual(ret, {\n        missing: [\"bar\", \"bip\", \"toto\"],\n        extra: [\"unknown\"],\n      });\n    });\n\n    it(\"reports no error\", () => {\n      const ret = check(template, {\n        bar: {\n          baz: 1,\n        },\n        bip: {\n          toto: 1,\n        },\n        toto: { blah: \"blah\" },\n      });\n      assert.deepEqual(ret, {});\n    });\n  });\n});\n"]}