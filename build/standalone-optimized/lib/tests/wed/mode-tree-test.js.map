{"version":3,"sources":["../../../tests/wed/mode-tree-test.ts"],"names":[],"mappings":"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","file":"mode-tree-test.js","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { expect, use } from \"chai\";\nimport * as mergeOptions from \"merge-options\";\nimport * as sinon from \"sinon\";\nimport * as sinonChai from \"sinon-chai\";\nuse(sinonChai);\n\nimport { ModeTree } from \"wed/mode-tree\";\nimport { Options } from \"wed/options\";\nimport * as wed from \"wed/wed\";\n\nimport * as globalConfig from \"../base-config\";\nimport { expectError } from \"../util\";\nimport { EditorSetup } from \"../wed-test-util\";\n\nconst options: Options = {\n  schema: \"/base/build/schemas/tei-simplified-rng.js\",\n  mode: {\n    path: \"wed/modes/generic/generic\",\n    options: {\n      metadata: \"/base/build/schemas/tei-metadata.json\",\n    },\n    // We set a submode that operates on teiHeader so as to be able to test\n    // that input triggers operate only on their own region.\n    submode: {\n      method: \"selector\",\n      selector: \"p\",\n      mode: {\n        path: \"wed/modes/test/test-mode\",\n        options: {\n          metadata: \"/base/build/schemas/tei-metadata.json\",\n          nameSuffix: \"1\",\n          hide_attributes: true,\n          stylesheets: [\"a.css\", \"b.css\"],\n        },\n        submode: {\n          method: \"selector\",\n          selector: \"teiHeader\",\n          mode: {\n            path: \"wed/modes/test/test-mode\",\n            options: {\n              metadata: \"/base/build/schemas/tei-metadata.json\",\n              nameSuffix: \"2\",\n              stylesheets: [\"b.css\", \"c.css\"],\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\ndescribe(\"ModeTree\", () => {\n  let setup: EditorSetup;\n  let editor: wed.Editor;\n\n  before(() => {\n    setup = new EditorSetup(\n      \"/base/build/standalone/lib/tests/wed_test_data/source_converted.xml\",\n      mergeOptions(globalConfig.config, options),\n      document);\n    ({ editor } = setup);\n    return setup.init();\n  });\n\n  after(() => {\n    setup.restore();\n\n    // tslint:disable-next-line:no-any\n    (editor as any) = undefined;\n  });\n\n  // tslint:disable-next-line:no-empty\n  describe(\"#init\", () => {\n    it(\"resolves to the mode tree\", async () => {\n      const tree = new ModeTree(editor, options.mode);\n      const resolved = await tree.init();\n      expect(resolved).to.equal(tree);\n    });\n\n    it(\"rejects if there are any wedOptions errors\", async () => {\n      const newOptions = mergeOptions({}, options.mode);\n      const path = \"tests/modes/failing-init\";\n      newOptions.path = path;\n\n      const tree = new ModeTree(editor, newOptions);\n      await expectError(() => tree.init(), Error, /^failed init$/);\n    });\n  });\n\n  describe(\"#getMode\", () => {\n    let tree: ModeTree;\n    beforeEach(async () => {\n      tree = new ModeTree(editor, options.mode);\n      await tree.init();\n    });\n\n    it(\"returns the top mode for the top GUI node\", () => {\n      const mode = tree.getMode(editor.guiRoot);\n      expect(mode.getWedOptions()).to.have.deep.property(\"metadata.name\")\n        .equal(\"Generic\");\n    });\n\n    it(\"returns the top mode for the top data node\", () => {\n      const mode = tree.getMode(editor.dataRoot);\n      expect(mode.getWedOptions()).to.have.deep.property(\"metadata.name\")\n        .equal(\"Generic\");\n    });\n\n    it(\"returns a submode for a GUI node governed by a submode\", () => {\n      const p = editor.guiRoot.querySelector(\".p._real\")!;\n      const mode = tree.getMode(p);\n      expect(mode.getWedOptions()).to.have.deep.property(\"metadata.name\")\n        .equal(\"Test1\");\n    });\n\n    it(\"returns a submode for a data node governed by a submode\", () => {\n      const p = editor.dataRoot.querySelector(\"p\")!;\n      const mode = tree.getMode(p);\n      expect(mode.getWedOptions()).to.have.deep.property(\"metadata.name\")\n        .equal(\"Test1\");\n    });\n\n    it(\"returns the same submode for nodes governed by same submode\", () => {\n      const ps = editor.dataRoot.querySelectorAll(\"p\");\n      const mode = tree.getMode(ps[0]);\n      expect(mode.getWedOptions()).to.have.deep.property(\"metadata.name\")\n        .equal(\"Test1\");\n      for (const p of Array.from(ps)) {\n        expect(mode).to.equal(tree.getMode(p));\n      }\n    });\n\n    it(\"constrain submodes to the region of their parent mode\", () => {\n      // We have set a submode that matches teiHeader but that submode is a\n      // child of a mode that matches p. The one teiHeader in the document is\n      // not a child of p and so should not match the submode. teiHeader should\n      // be governed by the top mode.\n      const el = editor.dataRoot.querySelector(\"teiHeader\")!;\n      const mode = tree.getMode(el);\n      expect(mode.getWedOptions()).to.have.deep.property(\"metadata.name\")\n        .equal(\"Generic\");\n    });\n\n    it(\"fails if the node passed was not in the GUI or data trees\", () => {\n      expect(tree.getMode.bind(tree, editor.guiRoot.parentNode)).to.throw(\n        Error,\n        /^did not pass a node in the GUI or data tree$/);\n    });\n  });\n\n  describe(\"#getWedOptions\", () => {\n    let tree: ModeTree;\n    beforeEach(async () => {\n      tree = new ModeTree(editor, options.mode);\n      await tree.init();\n    });\n\n    it(\"returns the top options for the top GUI node\", () => {\n      const opts = tree.getWedOptions(editor.guiRoot);\n      expect(opts).to.have.deep.property(\"metadata.name\").equal(\"Generic\");\n    });\n\n    it(\"returns the top options for the top data node\", () => {\n      const opts = tree.getWedOptions(editor.dataRoot);\n      expect(opts).to.have.deep.property(\"metadata.name\").equal(\"Generic\");\n    });\n\n    it(\"returns the submode options for a GUI node governed by a submode\",\n       () => {\n         const p = editor.guiRoot.querySelector(\".p._real\")!;\n         const opts = tree.getWedOptions(p);\n         expect(opts).to.have.deep.property(\"metadata.name\").equal(\"Test1\");\n       });\n\n    it(\"returns the submode options for a data node governed by a submode\",\n       () => {\n         const p = editor.dataRoot.querySelector(\"p\")!;\n         const opts = tree.getWedOptions(p);\n         expect(opts).have.deep.property(\"metadata.name\").equal(\"Test1\");\n       });\n\n    it(\"returns the same submode options for nodes governed by same submode\",\n       () => {\n         const ps = editor.dataRoot.querySelectorAll(\"p\");\n         const opts = tree.getWedOptions(ps[0]);\n         expect(opts).to.have.deep.property(\"metadata.name\")\n           .equal(\"Test1\");\n         for (const p of Array.from(ps)) {\n           expect(opts).to.equal(tree.getWedOptions(p));\n         }\n       });\n\n    it(\"constrain submodes to the region of their parent mode\", () => {\n      // We have set a submode that matches teiHeader but that submode is a\n      // child of a mode that matches p. The one teiHeader in the document is\n      // not a child of p and so should not match the submode. teiHeader should\n      // be governed by the top mode.\n      const el = editor.dataRoot.querySelector(\"teiHeader\")!;\n      const opts = tree.getWedOptions(el);\n      expect(opts).to.have.deep.property(\"metadata.name\").equal(\"Generic\");\n    });\n\n    it(\"fails if the node passed was not in the GUI or data trees\", () => {\n      expect(tree.getMode.bind(tree, editor.guiRoot.parentNode)).to.throw(\n        Error,\n        /^did not pass a node in the GUI or data tree$/);\n    });\n  });\n\n  describe(\"#getAttributeHandling\", () => {\n    let tree: ModeTree;\n    beforeEach(async () => {\n      tree = new ModeTree(editor, options.mode);\n      await tree.init();\n    });\n\n    it(\"returns the right value for the top GUI node\", () => {\n      const handling = tree.getAttributeHandling(editor.guiRoot);\n      expect(handling).to.equal(\"edit\");\n    });\n\n    it(\"returns the right value for the top data node\", () => {\n      const handling = tree.getAttributeHandling(editor.guiRoot);\n      expect(handling).to.equal(\"edit\");\n    });\n\n    it(\"returns the right value for a GUI node governed by a submode\", () => {\n      const p = editor.guiRoot.querySelector(\".p._real\")!;\n      const handling = tree.getAttributeHandling(p);\n      expect(handling).to.equal(\"hide\");\n    });\n\n    it(\"returns the right value for a data node governed by a submode\", () => {\n      const p = editor.dataRoot.querySelector(\"p\")!;\n      const handling = tree.getAttributeHandling(p);\n      expect(handling).to.equal(\"hide\");\n    });\n  });\n\n  describe(\"#getAttributeHidingSpecs\", () => {\n    let tree: ModeTree;\n    beforeEach(async () => {\n      // We modify the default to have test-mode do its default behavior\n      // which is to hide *some* attributes.\n      const localOptions: Options = mergeOptions({}, options);\n      localOptions.mode.submode!.mode.options!.hide_attributes = false;\n      tree = new ModeTree(editor, localOptions.mode);\n      await tree.init();\n    });\n\n    it(\"returns the right value for the top GUI node\", () => {\n      const handling = tree.getAttributeHidingSpecs(editor.guiRoot);\n      expect(handling).to.be.null;\n    });\n\n    it(\"returns the right value for the top data node\", () => {\n      const handling = tree.getAttributeHidingSpecs(editor.guiRoot);\n      expect(handling).to.be.null;\n    });\n\n    it(\"returns the right value for a GUI node governed by a submode\", () => {\n      const p = editor.guiRoot.querySelector(\".p._real\")!;\n      const handling = tree.getAttributeHidingSpecs(p);\n      expect(handling).to.not.be.null;\n    });\n\n    it(\"returns the right value for a data node governed by a submode\", () => {\n      const p = editor.dataRoot.querySelector(\"p\")!;\n      const handling = tree.getAttributeHidingSpecs(p);\n      expect(handling).to.not.be.null;\n    });\n  });\n\n  describe(\"#getStylesheets\", () => {\n    let tree: ModeTree;\n    beforeEach(async () => {\n      tree = new ModeTree(editor, options.mode);\n      await tree.init();\n    });\n\n    it(\"returns the stylesheets used, without duplicates\", () => {\n      expect(tree.getStylesheets()).to.have\n        .members([\"a.css\", \"b.css\", \"c.css\"]);\n    });\n  });\n\n  describe(\"#getStylesheets\", () => {\n    let tree: ModeTree;\n    beforeEach(async () => {\n      tree = new ModeTree(editor, options.mode);\n      await tree.init();\n    });\n\n    it(\"returns the stylesheets used, without duplicates\", () => {\n      expect(tree.getStylesheets()).to.have\n        .members([\"a.css\", \"b.css\", \"c.css\"]);\n    });\n  });\n\n  describe(\"#getMaxLabelLevel\", () => {\n    let tree: ModeTree;\n    beforeEach(async () => {\n      tree = new ModeTree(editor, options.mode);\n      await tree.init();\n    });\n\n    it(\"returns the maximum level set\", () => {\n      expect(tree.getMaxLabelLevel()).to.equal(2);\n    });\n  });\n\n  describe(\"#getInitialLabelLevel\", () => {\n    let tree: ModeTree;\n    beforeEach(async () => {\n      tree = new ModeTree(editor, options.mode);\n      await tree.init();\n    });\n\n    it(\"returns the level set by the same mode as the maximum\", () => {\n      expect(tree.getInitialLabelLevel()).to.equal(1);\n    });\n  });\n\n  describe(\"#getValidators\", () => {\n    let tree: ModeTree;\n    beforeEach(async () => {\n      tree = new ModeTree(editor, options.mode);\n      await tree.init();\n    });\n\n    it(\"returns all the validators\", () => {\n      // We have two validators because the generic mode does not define one.\n      // We use test-mode twice. So two validators.\n      const validators = tree.getValidators();\n      expect(validators).to.have.length(2);\n      expect(validators).to.have.deep.property(\"[0].validateDocument\");\n    });\n  });\n\n  describe(\"#addDecoratorHandlers\", () => {\n    let tree: ModeTree;\n    let sandbox: sinon.SinonSandbox;\n\n    before(() => {\n      sandbox = sinon.sandbox.create();\n    });\n\n    beforeEach(async () => {\n      tree = new ModeTree(editor, options.mode);\n      await tree.init();\n    });\n\n    afterEach(() => {\n      sandbox.restore();\n    });\n\n    it(\"calls addHandlers on all decorators\", () => {\n      // tslint:disable-next-line:no-any\n      const root = (tree as any).root;\n      const decorators =\n        // tslint:disable-next-line:no-any\n        root.reduceTopFirst((accumulator: any[], node: any) => {\n          return accumulator.concat(node.decorator);\n        }, []);\n      const spies = [];\n      for (const decorator of decorators) {\n        spies.push(sandbox.spy(decorator, \"addHandlers\"));\n      }\n      tree.addDecoratorHandlers();\n      for (const spy of spies) {\n        expect(spy).to.have.been.calledOnce;\n      }\n    });\n  });\n\n  describe(\"#startListening\", () => {\n    let tree: ModeTree;\n    let sandbox: sinon.SinonSandbox;\n\n    before(() => {\n      sandbox = sinon.sandbox.create();\n    });\n\n    beforeEach(async () => {\n      tree = new ModeTree(editor, options.mode);\n      await tree.init();\n    });\n\n    afterEach(() => {\n      sandbox.restore();\n    });\n\n    it(\"calls startListening on all decorators\", () => {\n      // tslint:disable-next-line:no-any\n      const root = (tree as any).root;\n      const decorators =\n        // tslint:disable-next-line:no-any\n        root.reduceTopFirst((accumulator: any[], node: any) => {\n          return accumulator.concat(node.decorator);\n        }, []);\n      const spies = [];\n      for (const decorator of decorators) {\n        spies.push(sandbox.spy(decorator, \"startListening\"));\n      }\n      tree.startListening();\n      for (const spy of spies) {\n        expect(spy).to.have.been.calledOnce;\n      }\n    });\n  });\n});\n"]}