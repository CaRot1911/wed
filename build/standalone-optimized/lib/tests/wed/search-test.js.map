{"version":3,"file":"search-test.js","sourceRoot":"","sources":["../../../../../lib/tests/wed/search-test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { CaretManager } from \"wed/caret-manager\";\nimport { DLoc, DLocRange } from \"wed/dloc\";\nimport { Editor } from \"wed/editor\";\nimport { Context, Search } from \"wed/search\";\n\nimport * as globalConfig from \"../base-config\";\n\nimport { EditorSetup } from \"../wed-test-util\";\n\nconst expect = chai.expect;\n\n// tslint:disable:no-any\n\ndescribe(\"search\", () => {\n  let setup: EditorSetup;\n  let editor: Editor;\n  let guiRoot: HTMLElement;\n  let dataRoot: Document;\n  let docScope: DLocRange;\n  let caretManager: CaretManager;\n\n  let ps: Element[];\n  let firstBodyP: Element;\n  let firstBodyPLocation: DLoc;\n  let pFiveFirstThree: DLocRange;\n  let pFiveFirstFour: DLocRange;\n  let pSevenFirstThree: DLocRange;\n  let firstABCText: DLocRange;\n  let firstABCDText: DLocRange;\n  let firstABCAttribute: DLocRange;\n  let firstABCDAttribute: DLocRange;\n  let secondABCAttribute: DLocRange;\n\n  before(() => {\n    setup = new EditorSetup(\n      \"/base/build/standalone/lib/tests/search_test_data/source_converted.xml\",\n      globalConfig.config,\n      document);\n    ({ editor } = setup);\n    return setup.init();\n  });\n\n  before(() => {\n    guiRoot = editor.guiRoot;\n    dataRoot = editor.dataRoot;\n    caretManager = editor.caretManager;\n    docScope = editor.caretManager.docDLocRange;\n\n    ps = Array.from(editor.dataRoot.querySelectorAll(\"body p\"));\n    firstBodyP = ps[0];\n    firstBodyPLocation = caretManager.mustFromDataLocation(\n      DLoc.mustMakeDLoc(dataRoot, firstBodyP, 0));\n\n    // First 3 text characters in the 5th paragraph (at index 4).\n    const pFiveStart = DLoc.mustMakeDLoc(dataRoot, ps[4].firstChild, 0);\n    pFiveFirstThree = new DLocRange(\n      caretManager.mustFromDataLocation(pFiveStart),\n      caretManager.mustFromDataLocation(pFiveStart.makeWithOffset(3)));\n    expect(pFiveFirstThree.mustMakeDOMRange().toString()).to.equal(\"abc\");\n\n    pFiveFirstFour = new DLocRange(\n      caretManager.mustFromDataLocation(pFiveStart),\n      caretManager.mustFromDataLocation(pFiveStart.makeWithOffset(4)));\n    expect(pFiveFirstFour.mustMakeDOMRange().toString()).to.equal(\"abcd\");\n\n    const pSevenStart = DLoc.mustMakeDLoc(dataRoot, ps[6].firstChild, 0);\n    pSevenFirstThree = new DLocRange(\n      caretManager.mustFromDataLocation(pSevenStart),\n      caretManager.mustFromDataLocation(pSevenStart.makeWithOffset(3)));\n    expect(pSevenFirstThree.mustMakeDOMRange().toString()).to.equal(\"abc\");\n\n    // This is the first \"abc\" found when doing a TEXT search.\n    firstABCText = new DLocRange(\n      caretManager.mustFromDataLocation(ps[3].firstChild!.firstChild!, 0),\n      caretManager.mustFromDataLocation(ps[3].lastChild!, 1));\n\n    // This is the first \"abcd\" found when doing a TEXT search.\n    firstABCDText = new DLocRange(\n      caretManager.mustFromDataLocation(ps[3].firstChild!.firstChild!, 0),\n      caretManager.mustFromDataLocation(ps[3].lastChild!, 2));\n\n    const rend = ps[7].getAttributeNode(\"rend\");\n    firstABCAttribute = new DLocRange(\n      caretManager.mustFromDataLocation(rend, 0),\n      caretManager.mustFromDataLocation(rend, 3));\n\n    firstABCDAttribute = new DLocRange(\n      caretManager.mustFromDataLocation(rend, 0),\n      caretManager.mustFromDataLocation(rend, 4));\n\n    secondABCAttribute = new DLocRange(\n      caretManager.mustFromDataLocation(rend, 4),\n      caretManager.mustFromDataLocation(rend, 7));\n  });\n\n  beforeEach(() => {\n    caretManager.setCaret(editor.caretManager.minCaret);\n  });\n\n  afterEach(() => {\n    setup.reset();\n  });\n\n  after(() => {\n    setup.restore();\n    (editor as any) = undefined;\n  });\n\n  function makeSearch(start: DLoc, scope?: DLocRange): Search {\n    return new Search(caretManager, guiRoot, start, scope);\n  }\n\n  function equalRanges(a: DLocRange, b: DLocRange): boolean {\n    return a.equals(b);\n  }\n\n  function isDocScope(x: DLocRange): boolean {\n    return x.equals(docScope);\n  }\n\n  describe(\"Search\", () => {\n    it(\"throws if start is not in scope\", () => {\n      expect(() => makeSearch(caretManager.caret!, pFiveFirstFour))\n        .to.throw(Error, \"the scope does not contain the start position\");\n    });\n\n    it(\"starts with undefined current\", () => {\n      const search = makeSearch(caretManager.caret!);\n      // We have to test not.have.property instead of testing for the presence\n      // of a property with the value \"undefined\";\n      expect(search).to.not.have.property(\"current\");\n    });\n\n    describe(\"(private) scope\", () => {\n      it(\"is the whole document if no scope is specified\", () => {\n        const search = makeSearch(caretManager.caret!);\n        expect(search).to.have.property(\"scope\").satisfy(isDocScope);\n      });\n\n      it(\"is always the same object, if the scope has not been changed\", () => {\n        const search = makeSearch(caretManager.caret!);\n        const scope = (search as any).scope;\n        expect(search).to.have.property(\"scope\").equal(scope);\n      });\n    });\n\n    describe(\"(private) setScope\", () => {\n      it(\"can set scope to undefined\", () => {\n        const search = makeSearch(caretManager.caret!,\n                                  new DLocRange(caretManager.minCaret,\n                                                caretManager.minCaret));\n        (search as any).setScope(undefined);\n        expect(search).to.have.property(\"scope\").satisfy(isDocScope);\n      });\n\n      it(\"throws on an invalid range\", () => {\n        const search = makeSearch(caretManager.caret!);\n        const invalid = DLoc.mustMakeDLoc(guiRoot, guiRoot,\n                                          guiRoot.childNodes.length);\n        // We cheat and make the value invalid manually. Otherwise, we'd have to\n        // modify the gui tree....\n        (invalid as any).offset++;\n        expect(invalid.isValid()).to.be.false;\n        expect(\n          () =>\n            (search as any).setScope(\n              new DLocRange(caretManager.minCaret, invalid)))\n          .to.throw(Error, \"passed an invalid range\");\n      });\n\n      it(\"throws on a range outside of root\", () => {\n        const search = makeSearch(caretManager.caret!);\n        const outside = DLoc.mustMakeDLoc(editor.dataRoot, editor.dataRoot, 0);\n        expect(() => (search as any).setScope(new DLocRange(outside, outside)))\n          .to.throw(Error, \"the range does not use the search's root\");\n      });\n\n      it(\"reverses the range, if needed\", () => {\n        const search = makeSearch(caretManager.caret!);\n        // We pass a reversed docScope...\n        (search as any).setScope(new DLocRange(caretManager.maxCaret,\n                                               caretManager.minCaret));\n        // ... so once reversed, it should be equal to docScope.\n        expect(search).to.have.property(\"scope\").satisfy(isDocScope);\n      });\n    });\n\n    // tslint:disable-next-line:max-func-body-length\n    function makeSeries(context: Context): void {\n      describe(`(context ${Context[context]})`, () => {\n        function makeContextSearch(start: DLoc, scope?: DLocRange): Search {\n          const s = makeSearch(start, scope);\n          s.context = context;\n          return s;\n        }\n\n        function firstABCHit(): DLocRange {\n          return {\n            [Context.EVERYWHERE]: pFiveFirstThree,\n            [Context.TEXT]: firstABCText,\n            [Context.ATTRIBUTE_VALUES]: firstABCAttribute,\n          }[context];\n        }\n\n        function firstABCDHit(): DLocRange {\n          return {\n            [Context.EVERYWHERE]: pFiveFirstFour,\n            [Context.TEXT]: firstABCDText,\n            [Context.ATTRIBUTE_VALUES]: firstABCDAttribute,\n          }[context];\n        }\n\n        describe(\"updateCurrent\", () => {\n          it(\"finds the first hit\", () => {\n            const search = makeContextSearch(firstBodyPLocation);\n            search.pattern = \"abc\";\n            search.updateCurrent();\n            expect(search).to.have.property(\"current\")\n              .satisfy(equalRanges.bind(undefined, firstABCHit()));\n          });\n\n          it(\"is idempotent if pattern has not changed\", () => {\n            const search = makeContextSearch(firstBodyPLocation);\n            search.pattern = \"abc\";\n            search.updateCurrent();\n            expect(search).to.have.property(\"current\")\n              .satisfy(equalRanges.bind(undefined, firstABCHit()));\n            search.updateCurrent();\n            expect(search).to.have.property(\"current\")\n              .satisfy(equalRanges.bind(undefined, firstABCHit()));\n          });\n\n          it(\"shortens the current hit\", () => {\n            const search = makeContextSearch(firstBodyPLocation);\n            search.pattern = \"abcd\";\n            search.updateCurrent();\n            expect(search).to.have.property(\"current\")\n              .satisfy(equalRanges.bind(undefined, firstABCDHit()));\n\n            search.pattern = \"abc\";\n            search.updateCurrent();\n            expect(search, \"end\").to.have.property(\"current\")\n              .satisfy(equalRanges.bind(undefined, firstABCHit()));\n          });\n\n          it(\"extends the current hit, when possible\", () => {\n            const search = makeContextSearch(firstBodyPLocation);\n            search.pattern = \"abc\";\n            search.updateCurrent();\n            expect(search).to.have.property(\"current\")\n              .satisfy(equalRanges.bind(undefined, firstABCHit()));\n\n            search.pattern = \"abcd\";\n            search.updateCurrent();\n            expect(search).to.have.property(\"current\")\n              .satisfy(equalRanges.bind(undefined, firstABCDHit()));\n          });\n\n          it(\"updates current to null if the pattern is empty\", () => {\n            const search = makeContextSearch(firstBodyPLocation);\n            search.pattern = \"abc\";\n            search.updateCurrent();\n            expect(search).to.have.property(\"current\")\n              .satisfy(equalRanges.bind(undefined, firstABCHit()));\n\n            search.pattern = \"\";\n            search.updateCurrent();\n            expect(search).to.have.property(\"current\").null;\n          });\n\n          it(\"updates current to null if the pattern does not match\", () => {\n            const search = makeContextSearch(firstBodyPLocation);\n            search.pattern = \"abc\";\n            search.updateCurrent();\n            expect(search).to.have.property(\"current\")\n              .satisfy(equalRanges.bind(undefined, firstABCHit()));\n\n            search.pattern = \"abcDOES NOT MATCH\";\n            search.updateCurrent();\n            expect(search).to.have.property(\"current\").null;\n          });\n\n          if (context === Context.EVERYWHERE) {\n            it(\"finds into GUI elements\", () => {\n              const start = firstBodyPLocation;\n              const pattern = \"hi >\";\n\n              {\n                const search = makeContextSearch(start);\n                search.pattern = pattern;\n                search.updateCurrent();\n                // We are not particularly interested in the specific location.\n                expect(search).to.have.property(\"current\")\n                  .to.be.instanceof(DLocRange);\n              }\n\n              // Make sure we don't have it in text. We create a 2nd search so\n              // that we start from the same place, with the same conditions\n              // (except context).\n              {\n                const search = makeContextSearch(start);\n                search.context = Context.TEXT;\n                search.pattern = pattern;\n                search.updateCurrent();\n                expect(search).to.have.property(\"current\").null;\n              }\n\n              // Make sure we don't have it in attributes. We create a 3rd\n              // search so that we start from the same place, with the same\n              // conditions (except context).\n              {\n                const search = makeContextSearch(start);\n                search.context = Context.ATTRIBUTE_VALUES;\n                search.pattern = pattern;\n                search.updateCurrent();\n                expect(search).to.have.property(\"current\").null;\n              }\n            });\n          }\n          else {\n            it(\"does not find into GUI elements\", () => {\n              const start = firstBodyPLocation;\n              const pattern = \"hi >\";\n\n              {\n                const search = makeContextSearch(start);\n                search.pattern = pattern;\n                search.updateCurrent();\n                expect(search).to.have.property(\"current\").null;\n              }\n\n              // Make sure we have it somewhere. We create a 2nd search so\n              // that we start from the same place, with the same conditions\n              // (except context).\n              {\n                const search = makeContextSearch(start);\n                search.context = Context.EVERYWHERE;\n                search.pattern = pattern;\n                search.updateCurrent();\n                // We are not particularly interested in the specific location.\n                expect(search).to.have.property(\"current\")\n                  .to.be.instanceof(DLocRange);\n              }\n            });\n          }\n\n          if (context === Context.EVERYWHERE ||\n              context === Context.ATTRIBUTE_VALUES) {\n            it(\"finds into attributes\", () => {\n              const start = firstBodyPLocation;\n              const pattern = \"foo\";\n\n              {\n                const search = makeContextSearch(start);\n                search.pattern = pattern;\n                search.updateCurrent();\n                // We are not particularly interested in the specific location.\n                expect(search).to.have.property(\"current\")\n                  .to.be.instanceof(DLocRange);\n              }\n\n              // Make sure we don't have it in text. We create a 2nd search so\n              // that we start from the same place, with the same conditions\n              // (except context).\n              {\n                const search = makeContextSearch(start);\n                search.context = Context.TEXT;\n                search.pattern = pattern;\n                search.updateCurrent();\n                expect(search).to.have.property(\"current\").null;\n              }\n\n              // Make sure we have it in attributes. We create a 3rd search so\n              // that we start from the same place, with the same conditions\n              // (except context).\n              {\n                const search = makeContextSearch(start);\n                search.context = Context.ATTRIBUTE_VALUES;\n                search.pattern = pattern;\n                search.updateCurrent();\n                // We are not particularly interested in the specific location.\n                expect(search).to.have.property(\"current\")\n                  .to.be.instanceof(DLocRange);\n              }\n            });\n          }\n          else {\n            it(\"does not find into attributes\", () => {\n              const start = firstBodyPLocation;\n              const pattern = \"foo\";\n\n              {\n                const search = makeContextSearch(start);\n                search.pattern = pattern;\n                search.updateCurrent();\n                expect(search).to.have.property(\"current\").null;\n              }\n\n              // Make sure we have it in attributes. We create a 2nd search so\n              // that we start from the same place, with the same conditions\n              // (except context).\n              {\n                const search = makeContextSearch(start);\n                search.context = Context.ATTRIBUTE_VALUES;\n                search.pattern = pattern;\n                search.updateCurrent();\n                // We are not particularly interested in the specific location.\n                expect(search).to.have.property(\"current\")\n                  .to.be.instanceof(DLocRange);\n              }\n            });\n          }\n\n          it(\"respects the scope\", () => {\n            const search = makeContextSearch(firstBodyPLocation);\n            search.pattern = \"abc\";\n            search.updateCurrent();\n            expect(search).to.have.property(\"current\")\n              .satisfy(equalRanges.bind(undefined, firstABCHit()));\n\n            // We restrict the scope to a range that contains \"abc\". Searching\n            // for abcd won't find anything, although the text exists outside\n            // the scope.\n            const restricted = makeContextSearch(pFiveFirstThree.start,\n                                                 pFiveFirstThree);\n            restricted.pattern = \"abcd\";\n            restricted.updateCurrent();\n            expect(restricted).to.have.property(\"current\").null;\n          });\n        });\n\n        describe(\"next\", () => {\n          it(\"finds the first hit\", () => {\n            const search = makeContextSearch(firstBodyPLocation);\n            search.pattern = \"abc\";\n            search.next();\n            expect(search).to.have.property(\"current\")\n              .satisfy(equalRanges.bind(undefined, firstABCHit()));\n          });\n\n          it(\"moves to the next hit when called multiple times\", () => {\n            const search = makeContextSearch(firstBodyPLocation);\n            search.pattern = \"abc\";\n            search.next();\n            expect(search).to.have.property(\"current\")\n              .satisfy(equalRanges.bind(undefined, firstABCHit()));\n\n            search.next();\n            const nextExpected: DLocRange = {\n              [Context.EVERYWHERE]: pSevenFirstThree,\n              [Context.TEXT]: pFiveFirstThree,\n              [Context.ATTRIBUTE_VALUES]: secondABCAttribute,\n            }[context];\n            expect(search).to.have.property(\"current\")\n              .satisfy(equalRanges.bind(undefined, nextExpected));\n          });\n\n          it(\"changes current to null if nothing can be found anymore\", () => {\n            // This test also tests that next respects the scope.\n            let start: DLoc;\n            let scope: DLocRange;\n            let expectedFirst: DLocRange;\n            if (context !== Context.ATTRIBUTE_VALUES) {\n              start = pFiveFirstThree.start;\n              scope = pFiveFirstThree;\n              expectedFirst = pFiveFirstThree;\n            }\n            else {\n              start = firstABCAttribute.start;\n              scope = firstABCAttribute;\n              expectedFirst = firstABCAttribute;\n            }\n\n            const search = makeContextSearch(start, scope);\n            search.pattern = \"abc\";\n            search.next();\n            expect(search).to.have.property(\"current\")\n              .satisfy(equalRanges.bind(undefined, expectedFirst));\n            search.next();\n            expect(search).to.have.property(\"current\").be.null;\n          });\n\n          it(\"rolls over, short range\", () => {\n            // This test also tests that next respects the scope.\n            let start: DLoc;\n            let scope: DLocRange;\n            let expectedFirst: DLocRange;\n            if (context !== Context.ATTRIBUTE_VALUES) {\n              start = pFiveFirstThree.start;\n              scope = pFiveFirstThree;\n              expectedFirst = pFiveFirstThree;\n            }\n            else {\n              start = firstABCAttribute.start;\n              scope = firstABCAttribute;\n              expectedFirst = firstABCAttribute;\n            }\n\n            const search = makeContextSearch(start, scope);\n            search.pattern = \"abc\";\n            search.next();\n            expect(search).to.have.property(\"current\")\n              .satisfy(equalRanges.bind(undefined, expectedFirst));\n\n            search.next();\n            expect(search).to.have.property(\"current\").be.null;\n\n            search.next();\n            expect(search).to.have.property(\"current\")\n              .satisfy(equalRanges.bind(undefined, expectedFirst));\n          });\n\n          it(\"rolls over, whole document\", () => {\n            // What we're doing here is record all hits until we get null.\n            // Then we roll over and record all hits again. The two sets of\n            // hits should be equal.\n            const search = makeContextSearch(docScope.start);\n            search.pattern = \"abc\";\n            let current: DLocRange | undefined | null;\n            const found: DLocRange[] = [];\n            do {\n              search.next();\n              current = search.current;\n              if (current != null) {\n                found.push(current);\n              }\n            } while (current !== null);\n\n            const found2nd: DLocRange[] = [];\n            do {\n              search.next();\n              current = search.current;\n              if (current != null) {\n                found2nd.push(current);\n              }\n            } while (current !== null);\n\n            expect(found2nd).to.be.lengthOf(found.length);\n            for (let ix = 0; ix < found.length; ++ix) {\n              expect(found[ix]).to\n                .satisfy((x: DLocRange) => x.equals(found2nd[ix]));\n            }\n          });\n        });\n      });\n    }\n\n    // tslint:disable-next-line:mocha-no-side-effect-code\n    makeSeries(Context.EVERYWHERE);\n    // tslint:disable-next-line:mocha-no-side-effect-code\n    makeSeries(Context.TEXT);\n    // tslint:disable-next-line:mocha-no-side-effect-code\n    makeSeries(Context.ATTRIBUTE_VALUES);\n  });\n});\n"]}