{"version":3,"file":"guiroot-test.js","sourceRoot":"","sources":["../../../../../lib/tests/wed/guiroot-test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\"use strict\";\n\nimport * as $ from \"jquery\";\n\nimport * as convert from \"wed/convert\";\nimport { DLocRoot, findRoot } from \"wed/dloc\";\nimport { linkTrees } from \"wed/domutil\";\nimport * as guiroot from \"wed/guiroot\";\n\nimport { DataProvider } from \"../util\";\n\nconst assert = chai.assert;\n\nfunction defined<T>(x: T | null | undefined): T {\n  assert.isDefined(x);\n  // The assertion above already excludes null and undefined, but TypeScript\n  // does not know this.\n  return x as T;\n}\n\ndescribe(\"guiroot\", () => {\n  let $root: JQuery;\n  let root: HTMLElement;\n  let rootObj: guiroot.GUIRoot;\n  let htmlTree: Node;\n  let xmlDoc: Document;\n\n  before(() =>\n         new DataProvider(\"/base/build/standalone/lib/tests/guiroot_test_data/\")\n         .getText(\"source_converted.xml\")\n         .then((sourceXML) => {\n           root = document.createElement(\"div\");\n           document.body.appendChild(root);\n           $root = $(root);\n           const parser = new window.DOMParser();\n           xmlDoc = parser.parseFromString(sourceXML, \"text/xml\");\n           htmlTree = convert.toHTMLTree(window.document,\n                                         xmlDoc.firstElementChild!);\n           root.appendChild(htmlTree.cloneNode(true));\n           rootObj = new guiroot.GUIRoot(root);\n         }));\n\n  after(() => {\n    document.body.removeChild(root);\n  });\n\n  describe(\"GUIRoot\", () => {\n    it(\"marks the root\", () => {\n      assert.equal(findRoot(root), rootObj);\n    });\n\n    it(\"fails if the node is already marked\", () => {\n      assert.throws(() => {\n        new guiroot.GUIRoot(root);\n      },\n                    Error, \"node already marked as root\");\n    });\n\n    describe(\"nodeToPath\", () => {\n      afterEach(() => {\n        // Reset the tree.\n        $root.empty();\n        root.appendChild(htmlTree.cloneNode(true));\n      });\n\n      it(\"returns an empty string on root\", () => {\n        assert.equal(rootObj.nodeToPath(root), \"\");\n      });\n\n      it(\"returns a correct path on text node\", () => {\n        const node = defined($root.find(\".title\")[0].childNodes[0]);\n        assert.equal(rootObj.nodeToPath(node), \"0/0/0/0/0/0\");\n      });\n\n      it(\"returns a correct path on phantom_wrap nodes\", () => {\n        $root.find(\".p\").wrap(\"<div class='_phantom_wrap'>\");\n        const node = defined($root.find(\".p\").get(-1));\n        assert.equal(rootObj.nodeToPath(node), \"0/1/0/1\");\n      });\n\n      it(\"returns a correct path on later text node\", () => {\n        const node = defined($root.find(\".body>.p\").get(-1).childNodes[2]);\n        assert.equal(rootObj.nodeToPath(node), \"0/1/0/1/2\");\n      });\n\n      it(\"returns a correct path on attribute\", () => {\n        let node = defined($root.find(\".body>.p:last-of-type>.quote\")[0]);\n        // Decorate it.\n        $(node).prepend(\n          \"<span class=\\\"_gui _phantom __start_label _quote_label\" +\n            \" _label_level_1 _label\\\"><span class=\\\"_phantom\\\">\" +\n            \"&nbsp; quote <span class=\\\"_phantom _attribute\\\">\" +\n            \"<span class=\\\"_phantom _attribute_name\\\">type</span>\" +\n            \"=<span class=\\\"_phantom _attribute_value\\\">q</span>\" +\n            \"</span> >&nbsp;</span></span>\");\n        node = defined($(node).find(\"._attribute_value\")[0]);\n        assert.equal(rootObj.nodeToPath(node), \"0/1/0/1/1/@type\");\n      });\n\n      it(\"returns a correct path on text node in attribute\", () => {\n        let node: Node =\n          defined($root.find(\".body>.p:last-of-type>.quote\")[0]);\n        // Decorate it.\n        $(node).prepend(\n          \"<span class=\\\"_gui _phantom __start_label _quote_label\" +\n            \" _label_level_1 _label\\\"><span class=\\\"_phantom\\\">\" +\n            \"&nbsp; quote <span class=\\\"_phantom _attribute\\\">\" +\n            \"<span class=\\\"_phantom _attribute_name\\\">type</span>\" +\n            \"=<span class=\\\"_phantom _attribute_value\\\">q</span>\" +\n            \"</span> >&nbsp;</span></span>\");\n        node = defined($(node).find(\"._attribute_value\")[0].childNodes[0]);\n        assert.equal(rootObj.nodeToPath(node), \"0/1/0/1/1/@type\");\n      });\n\n      it(\"fails on a node which is not a descendant of its root\", () => {\n        const node = defined($(\"body\")[0]);\n        assert.throws(rootObj.nodeToPath.bind(rootObj, node),\n                      Error, \"node is not a descendant of root\");\n      });\n\n      it(\"fails on invalid node\", () => {\n        assert.throws(rootObj.nodeToPath.bind(rootObj, null),\n                      Error, \"node is not a descendant of root\");\n\n        assert.throws(rootObj.nodeToPath.bind(rootObj, undefined),\n                      Error, \"node is not a descendant of root\");\n      });\n\n      it(\"is equivalent to nodeToPath on a data tree\", () => {\n        const dataRootObj = new DLocRoot(xmlDoc);\n\n        linkTrees(xmlDoc.firstElementChild!, root.firstElementChild!);\n        let targetDataNode = xmlDoc.getElementsByTagName(\"quote\")[0];\n        const phantomWrapTemplate = \"<span class='_phantom_wrap'></span>\";\n        $($.data(targetDataNode, \"wed_mirror_node\"))\n          .wrap(phantomWrapTemplate)\n          .after(\"<span class='_phantom'>Boo</span>Blip\")\n          .wrap(phantomWrapTemplate);\n\n        const dataNode = targetDataNode.parentNode as Element;\n        // Wrap twice for good measure.\n        $($.data(dataNode, \"wed_mirror_node\"))\n          .wrap(phantomWrapTemplate)\n          .wrap(phantomWrapTemplate);\n\n        targetDataNode = xmlDoc.getElementsByTagName(\"quote\")[1];\n        const targetGuiNode = $.data(targetDataNode, \"wed_mirror_node\");\n        const guiPath = rootObj.nodeToPath(targetGuiNode);\n        const dataPath = dataRootObj.nodeToPath(targetDataNode);\n\n        // Both paths should be equal.\n        assert.equal(guiPath, dataPath);\n\n        // It should also be reversible.\n        assert.equal(rootObj.pathToNode(guiPath), targetGuiNode);\n      });\n    });\n\n    describe(\"pathToNode\", () => {\n      it(\"returns root when passed an empty string\", () => {\n        assert.equal(rootObj.pathToNode(\"\"), root);\n      });\n\n      it(\"returns a correct node on a text path\", () => {\n        const node = defined($root.find(\".title\")[0].childNodes[0]);\n        assert.equal(rootObj.pathToNode(\"0/0/0/0/0/0\"), node);\n      });\n\n      it(\"returns a correct node on a later text path\", () => {\n        const node = defined($root.find(\".body>.p\").get(-1).childNodes[2]);\n        assert.equal(rootObj.pathToNode(\"0/1/0/1/2\"), node);\n      });\n\n      it(\"returns a correct node on attribute path\", () => {\n        let node = defined($root.find(\".body>.p:last-of-type>.quote\")[0]);\n        // Decorate it.\n        $(node).prepend(\n          \"<span class=\\\"_gui _phantom __start_label _quote_label\" +\n            \" _label_level_1 _label\\\"><span class=\\\"_phantom\\\">\" +\n            \"&nbsp; quote <span class=\\\"_phantom _attribute\\\">\" +\n            \"<span class=\\\"_phantom _attribute_name\\\">type</span>\" +\n            \"=<span class=\\\"_phantom _attribute_value\\\">q</span>\" +\n            \"</span> >&nbsp;</span></span>\");\n        node = defined($(node).find(\"._attribute_value\")[0]);\n        assert.equal(rootObj.pathToNode(\"0/1/0/1/1/@type\"), node);\n      });\n\n      it(\"returns a correct node when path contains _phantom_wrap\",\n         () => {\n           $root.find(\".p\").wrap(\"<div class='_phantom_wrap'>\");\n           const node = defined($root.find(\".p\").get(-1));\n           assert.equal(rootObj.pathToNode(\"0/1/0/1\"), node);\n         });\n\n      it(\"accepts more than one digit per path step\", () => {\n        // There was a stupid bug in an earlier version which would make this\n        // fail with an exception complaining that the path was malformed due to\n        // the presence of \"10\". The null return value is fine since there is no\n        // such element, but at least it should not generate an exception.\n        assert.equal(rootObj.pathToNode(\"0/10\"), null);\n      });\n\n      it(\"fails on malformed path\", () => {\n        assert.throws(rootObj.pathToNode.bind(rootObj, \"+\"),\n                      Error, \"malformed path expression\");\n      });\n    });\n  });\n});\n"]}