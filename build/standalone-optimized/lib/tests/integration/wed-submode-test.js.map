{"version":3,"file":"wed-submode-test.js","sourceRoot":"","sources":["../../../../../lib/tests/integration/wed-submode-test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { expect } from \"chai\";\n\nimport { Editor } from \"wed/editor\";\nimport { encodeAttrName } from \"wed/util\";\n\nimport { config } from \"../submode-config\";\nimport { activateContextMenu, contextMenuHasOption, EditorSetup,\n         getAttributeValuesFor } from \"../wed-test-util\";\n\ndescribe(\"wed submodes\", () => {\n  let setup: EditorSetup;\n  let editor: Editor;\n\n  before(() => {\n    setup = new EditorSetup(\n      \"/base/build/standalone/lib/tests/wed_test_data/\\\nsource_for_submodes_converted.xml\",\n      config,\n      document);\n    ({ editor } = setup);\n    return setup.init();\n  });\n\n  after(() => {\n    setup.restore();\n  });\n\n  it(\"dispatch to proper decorators\", () => {\n    const wrapped =\n      editor.guiRoot.querySelectorAll(\n        `[${encodeAttrName(\"rend\")}='wrap'].tei\\\\:p._real`);\n    expect(wrapped).to.have.length(2);\n    function parentTest(el: HTMLElement, msg: string, expected: boolean): void {\n      const parent = el.parentNode as HTMLElement;\n      expect(parent.classList.contains(\"_gui_test\"), msg).to.equal(expected);\n    }\n\n    parentTest(wrapped[0] as HTMLElement,\n               \"the first paragraph with rend='wrap' should be decorated by \\\nthe test mode\",\n               true);\n    parentTest(wrapped[1] as HTMLElement,\n               \"the second paragraph with rend='wrap' should not be decorated \\\nby the test mode\",\n               false);\n  });\n\n  it(\"present a contextual menu showing mode-specific actions\", () => {\n    function check(el: HTMLElement, msg: string, custom: boolean): void {\n      expect(el).to.not.be.null;\n      activateContextMenu(editor, el);\n      contextMenuHasOption(editor, /^Test draggable$/, custom ? 1 : 0);\n      editor.editingMenuManager.dismiss();\n    }\n\n    const first =\n      editor.guiRoot.querySelector(\".tei\\\\:sourceDesc._real>.tei\\\\:p._real\");\n    check(first as HTMLElement,\n          \"the first paragraph should have the test-mode options\", true);\n\n    const second =\n      editor.guiRoot.querySelector(\".tei\\\\:body._real>.tei\\\\:p._real\");\n    check(second as HTMLElement,\n          \"the second paragraph should not have the test-mode options\", false);\n  });\n\n  it(\"present mode-specific completions\", () => {\n    function check(el: HTMLElement, msg: string, custom: boolean): void {\n      expect(el).to.not.be.null;\n      const attrVals = getAttributeValuesFor(el);\n      editor.caretManager.setCaret(attrVals[0].firstChild, 0);\n      // This is an arbitrary menu item we check for.\n      if (custom) {\n        contextMenuHasOption(editor, /^completion1$/);\n      }\n      else {\n        const menu = editor.window.document\n          .getElementsByClassName(\"wed-context-menu\")[0];\n        expect(menu).to.be.undefined;\n      }\n    }\n\n    const first =\n      editor.guiRoot.querySelector(\".tei\\\\:sourceDesc._real>.tei\\\\:p._real\");\n    check(first as HTMLElement,\n          \"the first paragraph should have the completions\", true);\n\n    const second =\n      editor.guiRoot.querySelectorAll(\".tei\\\\:body._real>.tei\\\\:p._real\")[13];\n    check(second as HTMLElement,\n          \"the second paragraph should not have the completions\", false);\n  });\n\n  it(\"adds mode-specific toolbar buttons\", () => {\n    function check(el: HTMLElement | null, expected: number): void {\n      if (el !== null) {\n        editor.caretManager.setCaret(el, 0);\n      }\n      const span = editor.toolbar.top.lastElementChild!;\n      expect(span.children).to.have.lengthOf(expected);\n    }\n\n    // Initially we are out and so no mode-specific button.\n    check(null, 0);\n\n    // Move into the submode, and check again.\n    const inSubmode =\n      editor.guiRoot.querySelector(\".tei\\\\:sourceDesc._real>.tei\\\\:p._real\");\n    check(inSubmode as HTMLElement, 1);\n\n    // Move out, and check again.\n    const outsideSubmode =\n      editor.guiRoot.querySelectorAll(\".tei\\\\:body._real>.tei\\\\:p._real\")[13];\n    check(outsideSubmode as HTMLElement, 0);\n  });\n});\n"]}