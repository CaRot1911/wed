{"version":3,"sources":["../../../wed/tasks/process-validation-errors.ts"],"names":[],"mappings":";;;IAgBA;;;OAGG;IACH;QAGE,iCAA6B,UAAsB;YAAtB,eAAU,GAAV,UAAU,CAAY;QACnD,CAAC;QAED,uCAAK,GAAL;YACE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC;QAChD,CAAC;QAED,uCAAK,GAAL;YACE,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;YACnC,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YAC3B,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;YAED,4CAA4C;YAC5C,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YAExC,IAAM,KAAK,GAAG,EAAE,CAAC;YACjB,IAAM,OAAO,GAAG,EAAE,CAAC;YACnB,IAAI,EAAE,GAAG,CAAC,CAAC;YACX,OAAO,KAAK,KAAK,CAAC,EAAE,CAAC;gBACnB,KAAK,EAAE,CAAC;gBACR,IAAM,KAAK,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;gBACzB,EAAE,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,KAAK,CAAY,CAAC,CAAC,CAAC;oBAC9C,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBACrB,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;oBACxB,EAAE,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;wBACvB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;oBAC7C,CAAC;oBAED,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACjB,IAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;oBAC5B,8BAA8B;oBAC9B,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;wBACnB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACvB,CAAC;gBACH,CAAC;gBACD,IAAI,CAAC,CAAC;oBACJ,EAAE,EAAE,CAAC;gBACP,CAAC;YACH,CAAC;YAED,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAC9B,UAAU,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC;QAC7B,CAAC;QACH,8BAAC;IAAD,CAjDA,AAiDC,IAAA;IAjDY,0DAAuB;;AAmDpC,oBAAoB","file":"process-validation-errors.js","sourcesContent":["/**\n * A task that processes the validation errors.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { GUIValidationError } from \"../gui-validation-error\";\nimport { Task } from \"../task-runner\";\n\nexport interface Controller {\n  copyErrorList(): GUIValidationError[];\n  processError(error: GUIValidationError): boolean;\n  appendItems(items: HTMLElement[]): void;\n  appendMarkers(markers: HTMLElement[]): void;\n}\n\n/**\n * This task processes the new validation errors that have not been processed\n * yet.\n */\nexport class ProcessValidationErrors implements Task {\n  private errors: GUIValidationError[];\n\n  constructor(private readonly controller: Controller) {\n  }\n\n  reset(): void {\n    this.errors = this.controller.copyErrorList();\n  }\n\n  cycle(): boolean {\n    const controller = this.controller;\n    const errors = this.errors;\n    if (errors.length === 0) {\n      return false;\n    }\n\n    // The figure in the next line is arbitrary.\n    let count = Math.min(errors.length, 30);\n\n    const items = [];\n    const markers = [];\n    let ix = 0;\n    while (count !== 0) {\n      count--;\n      const error = errors[ix];\n      if (controller.processError(error) as boolean) {\n        errors.splice(ix, 1);\n        const item = error.item;\n        if (item === undefined) {\n          throw new Error(\"there should be an item\");\n        }\n\n        items.push(item);\n        const marker = error.marker;\n        // There may be no marker set.\n        if (marker != null) {\n          markers.push(marker);\n        }\n      }\n      else {\n        ++ix;\n      }\n    }\n\n    controller.appendItems(items);\n    controller.appendMarkers(markers);\n    return errors.length !== 0;\n  }\n}\n\n//  LocalWords:  MPL\n"]}