{"version":3,"sources":["../../../wed/modes/generic/generic-meta.ts"],"names":[],"mappings":"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","file":"generic-meta.js","sourcesContent":["/**\n * Meta-information regarding the schema.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport * as Promise from \"bluebird\";\nimport * as $ from \"jquery\";\n\nimport { Runtime } from \"wed/runtime\";\n\n/**\n * Meta-information for the generic mode. This is information that cannot be\n * simply derived from the schema.\n *\n * Objects of this class take the following options:\n *\n * + ``metadata``: a URL to a JSON file that contains metadata that\n * this meta should read.\n *\n * It is illegal to use the meta before the value from ``init`` has resolved.\n */\nexport class Meta {\n\n  protected descMap: Record<string, string> | null = null;\n  protected namespaceMappings: Record<string, string>;\n  protected reverseMapping: Record<string, string>;\n  // tslint:disable-next-line:no-any\n  protected metadata: any;\n  /**\n   * @param runtime The runtime in which this meta is executing.\n   *\n   * @param options The options to pass to the Meta.\n   */\n  constructor(protected readonly runtime: Runtime,\n              // tslint:disable-next-line:no-any\n              protected options: any = {}) {}\n\n  /**\n   * Initialize the meta.\n   *\n   * @returns A promise that resolves when the meta is ready.\n   */\n  init(): Promise<void> {\n    return Promise.resolve()\n      .then(() => {\n        const options = this.options;\n        const resolved = $.extend(true, {}, options);\n        if (options != null && options.metadata != null) {\n          return this.runtime.resolveToString(options.metadata)\n            .then((data) => {\n              data = JSON.parse(data);\n              resolved.metadata = data;\n              this.options = resolved;\n            });\n        }\n\n        return undefined;\n      })\n      .then(() => {\n        this.metadata = this.options.metadata;\n\n        if (this.metadata != null) {\n          if (this.metadata.version !== \"1\") {\n            throw new Error(\n              `unexpected version number: ${this.metadata.version}`);\n          }\n\n          this.namespaceMappings = this.metadata.namespaces;\n          if (\"xml\" in this.namespaceMappings) {\n            throw new Error(\"xml mapping already defined\");\n          }\n\n          // tslint:disable-next-line:no-http-string\n          this.namespaceMappings.xml = \"http://www.w3.org/XML/1998/namespace\";\n\n          this.reverseMapping = Object.create(null);\n          // tslint:disable-next-line:forin\n          for (const prefix in this.namespaceMappings) {\n            const ns = this.namespaceMappings[prefix];\n            // If prefix foo resolves to http://bar and bar resolves to the same\n            // URI and foo is before bar, then foo wins.\n            if (this.reverseMapping[ns] === undefined) {\n              this.reverseMapping[ns] = prefix;\n            }\n          }\n          this.reverseMapping[this.namespaceMappings[\"\"]] = \"\";\n\n          const elements = this.metadata.elements;\n          const descMap: Record<string, string> = Object.create(null);\n          for (const el of elements) {\n            // Here, an undefined namespace is the tei namespace.\n            const elNs = el.ns !== undefined ? el.ns :\n              // tslint:disable-next-line:no-http-string\n              \"http://www.tei-c.org/ns/1.0\";\n            const elPrefix = this.reverseMapping[elNs];\n            if (elPrefix === undefined) {\n              throw new Error(`undefined namespace: ${elNs}`);\n            }\n            const name = elPrefix === \"\" ? el.name : `${elPrefix}:${el.name}`;\n            descMap[name] = el.desc;\n          }\n          this.descMap = descMap;\n        }\n      });\n  }\n\n  /**\n   * This method determines whether a node needs to be represented inline.\n   *\n   * @param node The node to examine.\n   *\n   * @return True if the node should be inline, false otherwise.\n   */\n  isInline(node: Element): boolean {\n    return false;\n  }\n\n  /**\n   * Returns additional classes that should apply to a node.\n   *\n   * @param node The node to check.\n   *\n   * @returns A string that contains all the class names separated by spaces. In\n   * other words, a string that could be put as the value of the ``class``\n   * attribute in an HTML tree.\n   */\n  getAdditionalClasses(node: Element): string {\n    const ret = [];\n    if (this.isInline(node)) {\n      ret.push(\"_inline\");\n    }\n    return ret.join(\" \");\n  }\n\n  /**\n   * Returns absolute namespace mappings. The default implementation returns an\n   * empty mapping.\n   *\n   * @returns An object whose keys are namespace prefixes and values are\n   * namespace URIs. The object returned by this method should not be modified.\n   */\n  getNamespaceMappings(): Record<string, string> {\n    return this.namespaceMappings;\n  }\n\n  /**\n   * Returns a short description for an element. The element should be named\n   * according to the mappings reported by [[Meta.getNamespaceMappings]]. The\n   * default implementation returns the description provided by the metadata\n   * file loaded when the Meta object was created.\n   *\n   * While this API provides for the case where descriptions have not been\n   * loaded yet or cannot be loaded, this class does not allow such eventuality\n   * to occur. Derived classes could allow it.\n   *\n   * @param name The name of the element.\n   *\n   * @returns The description. If the value returned is ``undefined``, then the\n   * description is not available. If the value returned is ``null``, the\n   * description has not been loaded yet.\n   */\n  shortDescriptionFor(name: string): string | null | undefined {\n    return this.descMap != null ? this.descMap[name] : null;\n  }\n\n  /**\n   * Returns a URL to the documentation for an element. The element should be\n   * named according to the mappings reported by the resolve returned by\n   * [[\"mode\".Mode.getAbsoluteResolver]].\n   *\n   * While this API provides for the case such URL have not been loaded yet or\n   * cannot be loaded, this class does not allow such eventuality to\n   * occur. Derived classes could allow it.\n   *\n   * @param name The name of the element.\n   *\n   * @returns The URL. If the value returned is ``undefined``, then the URL is\n   * not available. If the value returned is ``null``, the URL has not been\n   * loaded yet.\n   */\n  documentationLinkFor(name: string): string | null | undefined {\n    if (this.metadata == null) {\n      return undefined;\n    }\n\n    const root = this.metadata.dochtml;\n\n    // The TEI odd2html stylesheet creates file names of the form\n    // prefix_local-name.html. So replace the colon with an underscore.\n    name = name.replace(\":\", \"_\");\n\n    return `${root}ref-${name}.html`;\n  }\n}\n\n//  LocalWords:  classdesc Mangalam MPL Dubeau\n"]}