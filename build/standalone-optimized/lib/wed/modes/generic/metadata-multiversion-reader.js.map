{"version":3,"sources":["../../../wed/modes/generic/metadata-multiversion-reader.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;IAgBH;;;OAGG;IACH;QAAA;QAyBA,CAAC;QArBQ,+BAAI,GAAX;YACE,IAAM,OAAO,GAAG,CAAC,qCAAgB,EAAE,qCAAgB,CAAC,CAAC;YACrD,GAAG,CAAC,CAAiB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;gBAAvB,IAAM,MAAM,gBAAA;gBACf,0BAA0B,CAAC,oBAAoB,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC;aAC1E;QACH,CAAC;QAED,yCAAI,GAAJ,UAAK,MAAc;YACjB,kCAAkC;YAClC,IAAM,OAAO,GAAI,MAAc,CAAC,OAAO,CAAC;YACxC,EAAE,CAAC,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC1B,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;YAC9D,CAAC;YAED,IAAM,IAAI,GAAG,0BAA0B,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;YACtE,EAAE,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;gBACvB,MAAM,IAAI,KAAK,CAAC,2BAAyB,OAAS,CAAC,CAAC;YACtD,CAAC;YAED,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACjC,CAAC;QAvBuB,+CAAoB,GACV,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAuBxD,iCAAC;KAzBD,AAyBC,IAAA;IAzBY,gEAA0B;IA2BvC,0BAA0B,CAAC,IAAI,EAAE,CAAC;;AAElC,oBAAoB","file":"metadata-multiversion-reader.js","sourcesContent":["/**\n * Reading facilities that allow reading different versions of a metadata file.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport { Metadata } from \"./metadata\";\nimport { MetadataReader } from \"./metadata-reader\";\nimport { MetadataReaderV1 } from \"./metadata-reader-v1\";\nimport { MetadataReaderV2 } from \"./metadata-reader-v2\";\n\n/**\n * This interface must be implemented by the classes that can participate in the\n * work done by [[MetadataMultiversionReader]].\n */\nexport interface VersionedReader {\n  new (...args: void[]): MetadataReader;\n  version: string;\n}\n\n/**\n * A metadata reader that automatically handles different versions of the\n * metadata format.\n */\nexport class MetadataMultiversionReader implements MetadataReader {\n  private static readonly versionToConstructor:\n  Record<string, VersionedReader> = Object.create(null);\n\n  static init(): void {\n    const readers = [MetadataReaderV1, MetadataReaderV2];\n    for (const reader of readers) {\n      MetadataMultiversionReader.versionToConstructor[reader.version] = reader;\n    }\n  }\n\n  read(object: Object): Metadata {\n    // tslint:disable-next-line:no-any\n    const version = (object as any).version;\n    if (version === undefined) {\n      throw new Error(\"no version field, cannot decode metadata\");\n    }\n\n    const ctor = MetadataMultiversionReader.versionToConstructor[version];\n    if (ctor === undefined) {\n      throw new Error(`cannot handle version ${version}`);\n    }\n\n    return new ctor().read(object);\n  }\n}\n\nMetadataMultiversionReader.init();\n\n//  LocalWords:  MPL\n"]}