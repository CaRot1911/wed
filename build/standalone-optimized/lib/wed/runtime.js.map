{"version":3,"sources":["../../../wed/runtime.ts"],"names":[],"mappings":"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","file":"runtime.js","sourcesContent":["/**\n * An execution runtime for editors.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport * as Promise from \"bluebird\";\nimport * as bluejax from \"bluejax\";\nimport { Dexie } from \"dexie\";\nimport * as mergeOptions from \"merge-options\";\n\nimport { make as ajax } from \"./ajax\";\nimport * as util from \"./util\";\n\n/**\n * An object representing the runtime environment in which an editor is\n * running. In particular it allows loading external resources.\n */\nexport class Runtime {\n  // tslint:disable-next-line:no-any\n  private readonly options: any;\n\n  public readonly ajax: bluejax.AjaxCall;\n  public readonly ajax$: bluejax.AjaxCall$;\n\n  // tslint:disable-next-line:no-any\n  constructor(options: any) {\n    // Make a private deep copy.\n    options = mergeOptions({}, options);\n    this.options = options;\n    const bluejaxOptions = options.bluejaxOptions != null ?\n      options.bluejaxOptions : {\n      tries: 3,\n      delay: 100,\n      diagnose: {\n        on: true,\n        // It would be desirable to support this...\n        // serverURL: \"/ping\",\n        knownServers: [\n          // tslint:disable:no-http-string\n          \"http://www.google.com/\",\n          \"http://www.cloudfront.com/\",\n          // tslint:enable:no-http-string\n        ],\n      },\n    };\n    const made = ajax(bluejaxOptions);\n\n    this.ajax = made.ajax;\n    this.ajax$ = made.ajax$;\n  }\n\n  /**\n   * Resolve resource references. References may be of the form:\n   *\n   * - String without a URL scheme identifier. Performs an Ajax query with the\n   *   resource string as-is.\n   *\n   * - `indexeddb://v1/database/table/type/key/property` Loads from\n   *    IndexedDB. It opens the database `database`, looks for the table\n   *    `table`, loads the item with primary key `key` and extracts the value of\n   *    the property `property`. (`property` is optional. When not specified,\n   *    the whole record will be returned.) The `type` must have the values\n   *    `number` or `string` determining how `key` is going to be\n   *    interpreted. `v1` is the version number of the interpretation scheme\n   *    used.\n   */\n  // The promise must resolve to any because when we address a field we really\n  // can get anything.\n  //\n  // tslint:disable-next-line:no-any\n  resolve(resource: string): Promise<any> {\n    return Promise.resolve().then(() => {\n      const schemeSep = resource.indexOf(\"://\");\n\n      if (schemeSep === -1) {\n        return this.ajax({\n          url: resource,\n          dataType: \"text\",\n        });\n      }\n\n      const scheme = resource.substr(0, schemeSep);\n      if (scheme === \"indexeddb\") {\n        const path = resource.substr(schemeSep + 3);\n        const parts = path.split(\"/\");\n        const version = parts[0];\n        const db = parts[1];\n        const table = parts[2];\n        const keyType = parts[3];\n        let key: string | number = parts[4];\n        const property = parts[5];\n\n        if (version !== \"v1\") {\n          throw new Error(`unsupported version number: ${version}`);\n        }\n\n        switch (keyType) {\n        case \"string\":\n          break;\n        case \"number\":\n          key = Number(key);\n          break;\n        default:\n          throw new Error(`unknown type: ${keyType}`);\n        }\n\n        const store = new Dexie(db);\n        return store.open()\n        // We have to use .then<any> otherwise, TS is unable to use the right\n        // signature.\n        //\n        // tslint:disable-next-line:no-any\n          .then<any>(() => store.table(table).get(key))\n          .then((record) => {\n            if (record == null) {\n              throw Error(`cannot resolve key from: ${resource}`);\n            }\n\n            if (property === undefined) {\n              return record;\n            }\n\n            if (!(property in record)) {\n              throw Error(\n                `cannot resolve property in the record of: ${resource}`);\n            }\n\n            return record[property];\n          });\n      }\n\n      throw new Error(`unknown scheme: ${scheme}`);\n    });\n  }\n\n  resolveToString(resource: string): Promise<string> {\n    return this.resolve(resource).then((data: {}) => {\n      if (typeof data === \"string\") {\n        return data;\n      }\n\n      if (data instanceof File) {\n        return util.readFile(data);\n      }\n\n      return String(data);\n    });\n  }\n\n  /**\n   * Resolve modules through the underlying module loader.\n   *\n   * @param resources A single module name or an array of such names.\n   *\n   * @returns promise of modules.\n   */\n  resolveModules(resources: string | string[]): Promise<{}[]> {\n    return Promise.resolve().then(() => {\n      if (!(resources instanceof Array)) {\n        resources = [resources];\n      }\n\n      return new Promise((resolve, reject) => {\n        // tslint:disable-next-line:no-require-imports non-literal-require\n        require(resources as string[], function success(): void {\n          resolve(Array.prototype.slice.call(arguments));\n        }, reject);\n      }) as Promise<{}[]>;\n    });\n  }\n}\n"]}