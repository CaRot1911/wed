{"version":3,"file":"editor-actions.js","sourceRoot":"","sources":["../../../../lib/wed/editor-actions.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Actions that all editors support.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { Observable } from \"rxjs/Observable\";\nimport { Subject } from \"rxjs/Subject\";\n\nimport { Action } from \"./action\";\nimport { Button, ToggleButton } from \"./gui/button\";\nimport { makeHTML } from \"./gui/icon\";\nimport { EditorAPI } from \"./mode-api\";\n\nexport type ActionCtor = { new (editor: EditorAPI): Action<{}> };\n\nexport type Handler = (editor: EditorAPI) => void;\n\nexport function makeAction(desc: string,\n                           icon: string,\n                           needsInput: boolean,\n                           fn: Handler): ActionCtor;\nexport function makeAction(desc: string,\n                           icon: string,\n                           abbreviatedDesc: string,\n                           needsInput: boolean,\n                           fn: Handler): ActionCtor;\nexport function makeAction(desc: string,\n                           abbreviatedDesc: string | undefined,\n                           icon: string | boolean,\n                           needsInput: boolean | Handler,\n                           fn?: Handler): ActionCtor {\n  let actualAbbreviatedDesc: string | undefined;\n  let actualIcon: string;\n  let actualNeedsInput: boolean;\n  let actualFn: Handler;\n  if (typeof icon === \"boolean\") {\n    actualAbbreviatedDesc = undefined;\n    actualIcon = abbreviatedDesc as string;\n    actualNeedsInput = icon;\n    actualFn = needsInput as Handler;\n  }\n  else {\n    actualAbbreviatedDesc = abbreviatedDesc;\n    actualIcon = icon;\n    actualNeedsInput = needsInput as boolean;\n    actualFn = fn as Handler;\n  }\n\n  return class extends Action<{}> {\n    constructor(editor: EditorAPI) {\n      super(editor, desc, actualAbbreviatedDesc, actualIcon, actualNeedsInput);\n    }\n\n    execute(): void {\n      actualFn(this.editor);\n    }\n  };\n}\n\n// tslint:disable-next-line:variable-name\nexport const Save =\n  makeAction(\"Save\", makeHTML(\"upload\"), false,\n             (editor) => {\n               // tslint:disable-next-line:no-floating-promises\n               editor.save();\n             });\n\n// tslint:disable-next-line:variable-name\nexport const Undo =\n  makeAction(\"Undo\", makeHTML(\"undo\"), false,\n             (editor) => {\n               editor.undo();\n             });\n\n// tslint:disable-next-line:variable-name\nexport const Redo =\n  makeAction(\"Redo\", makeHTML(\"redo\"), false,\n             (editor) => {\n               editor.redo();\n             });\n\n// tslint:disable-next-line:variable-name\nexport const DecreaseLabelVisibilityLevel =\n  makeAction(\"Decrease label visibility level\", \"Decrease label visibility\",\n             makeHTML(\"arrow-down\"), false,\n             (editor) => {\n               editor.decreaseLabelVisiblityLevel();\n             });\n\n// tslint:disable-next-line:variable-name\nexport const IncreaseLabelVisibilityLevel =\n  makeAction(\"Increase label visibility level\", \"Increase label visibility\",\n             makeHTML(\"arrow-up\"), false,\n             (editor) => {\n               editor.increaseLabelVisibilityLevel();\n             });\n\nexport interface PressedEvent {\n  name: \"Pressed\";\n  action: ToggleAttributeHiding;\n}\n\n/**\n * An action that toggles the editors attribute hiding.\n */\nexport class ToggleAttributeHiding extends Action<boolean> {\n  protected pressed: boolean = true;\n\n  /**\n   * The object on which this class and subclasses may push new events.\n   */\n  protected readonly _events: Subject<PressedEvent> = new Subject();\n\n  /**\n   * The observable on which clients can listen for events.\n   */\n  readonly events: Observable<PressedEvent> = this._events.asObservable();\n\n  constructor(editor: EditorAPI) {\n    super(editor, \"Toggle attribute hiding\", \"AH\", undefined, false);\n  }\n\n  execute(data: boolean): void {\n    if (this.pressed !== data) {\n      this.pressed = data;\n      this.editor.toggleAttributeHiding();\n      this._events.next({ name: \"Pressed\", action: this });\n    }\n  }\n\n  makeButton(data?: boolean): Button {\n    const button = new ToggleButton(\n      this.pressed,\n      data !== undefined ? this.getDescriptionFor(data) : this.getDescription(),\n      this.getAbbreviatedDescription(),\n      this.getIcon());\n\n    button.events.subscribe(() => {\n      this.execute(button.pressed);\n    });\n\n    this.events.subscribe(() => {\n      button.pressed = this.pressed;\n    });\n\n    return button;\n  }\n}\n"]}