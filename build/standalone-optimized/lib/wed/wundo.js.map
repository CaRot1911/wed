{"version":3,"sources":["../../../wed/wundo.ts"],"names":[],"mappings":"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","file":"wundo.js","sourcesContent":["/**\n * Wed-specific undo functionality.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport * as undo from \"./undo\";\nimport { Editor } from \"./wed\";\n\nexport type Caret = [string | undefined, number | undefined];\n\n/**\n * This class extends the vanilla UndoGroup class by recording the\n * location of the caret when the group is created and when group\n * recording ends. This allows restoring the caret to sensible\n * positions before and after undoing or redoing.\n */\nexport class UndoGroup extends undo.UndoGroup {\n  private readonly editor: Editor;\n  private readonly caretAsPathBefore: Caret;\n  private caretAsPathAfter: Caret | undefined;\n\n  /**\n   * @param desc The description of this group.\n   *\n   * @param editor The editor for which this undo group is created.\n   */\n  constructor(desc: string, editor: Editor) {\n    super(desc);\n    this.editor = editor;\n    this.caretAsPathBefore = this.getDataCaretAsPath();\n  }\n\n  undo(): void {\n    super.undo();\n    this.setDataCaretAsPath(this.caretAsPathBefore);\n  }\n\n  redo(): void {\n    super.redo();\n    if (this.caretAsPathAfter === undefined) {\n      throw new Error(`caretAsPathAfter is undefined, this indicates a \\\ncorrupted state and thus an internal error`);\n    }\n    this.setDataCaretAsPath(this.caretAsPathAfter);\n  }\n\n  /**\n   * Get the current data caret position as a path.\n   *\n   * @returns A caret.\n   */\n  getDataCaretAsPath(): Caret {\n    const caret = this.editor.caretManager.getDataCaret(true);\n    if (caret === undefined) {\n      // Returning undefined for \"the caret was undefined\" would not\n      // trap stupid mistakes in managing the data.\n      return [undefined, undefined];\n    }\n    return [this.editor.dataUpdater.nodeToPath(caret.node), caret.offset];\n  }\n\n  /**\n   * Set the data caret.\n   *\n   * @param caret A caret.\n   */\n  setDataCaretAsPath(caret: Caret): void {\n    // [undefined, undefined] === the caret was undefined. We can't do anything.\n    if (caret[0] === undefined && caret[1] === undefined) {\n      return;\n    }\n    this.editor.caretManager.setCaret(\n      this.editor.dataUpdater.pathToNode(caret[0]!), caret[1]);\n  }\n\n  /**\n   * This method can be used to record the caret position after the acts\n   * recorded by this undo are performed. If the caret is recorded by means of\n   * this method, then [[end]] will not record the caret position again. This\n   * can be useful in cases for which it is not clear when an UndoGroup might\n   * end. [[TextUndoGroup]] is a case in point. This method can be called any\n   * number of times to update the caret position at the end of the group.\n   */\n  recordCaretAfter(): void {\n    this.caretAsPathAfter = this.getDataCaretAsPath();\n  }\n\n  end(): void {\n    if (this.caretAsPathAfter === undefined) {\n      this.recordCaretAfter();\n    }\n  }\n}\n\n/**\n * Grouping of text operations should be limited in size. For instance, if the\n * user hits backspace to delete a whole sentence and then wants to undo this\n * operation. It is better to undo it in chunks instead of reinserting the whole\n * sentence. This class allows for limiting the length of such chunks.\n */\nexport class TextUndoGroup extends UndoGroup {\n    /**\n     * @param desc The description of this group.\n     *\n     * @param editor The editor for which this undo group is created.\n     *\n     * @param undoList The list which will hold this group.\n     *\n     * @param limit The maximum number of undo operations that this group should\n     * record.\n     */\n  constructor(desc: string, editor: Editor,\n              private readonly undoList: undo.UndoList,\n              private readonly limit: number) {\n    super(desc, editor);\n  }\n\n  record(undoToRecord: undo.Undo): void {\n    if (this.list.length >= this.limit) {\n      throw new Error(\"TextUndoGroup.record called beyond the limit\");\n    }\n    super.record(undoToRecord);\n    if (this.list.length === this.limit) {\n      this.undoList.endGroup();\n    }\n  }\n}\n\n/**\n * Serves as a marker for debugging.\n */\nexport class MarkerUndo extends undo.Undo {\n  /**\n   * @param msg A message to identify the marker.\n   */\n  constructor(msg: string) {\n    super(`*** MARKER *** ${msg}`);\n  }\n\n  // tslint:disable-next-line:no-empty\n  undo(): void {}\n  // tslint:disable-next-line:no-empty\n  redo(): void {}\n}\n\n//  LocalWords:  pathToNode nodeToPath Dubeau MPL Mangalam param UndoGroup\n//  LocalWords:  TextUndoGroup caretAsPathAfter\n"]}