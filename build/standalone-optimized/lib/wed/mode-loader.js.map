{"version":3,"file":"mode-loader.js","sourceRoot":"","sources":["../../../../lib/wed/mode-loader.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAeH;;OAEG;IACH;QACE;;WAEG;QACH,oBAA6B,MAAc,EACd,OAAgB;YADhB,WAAM,GAAN,MAAM,CAAQ;YACd,YAAO,GAAP,OAAO,CAAS;QAAG,CAAC;QAEjD;;;;;;;;WAQG;QACG,6BAAQ,GAAd,UAAe,IAAY,EAAE,OAA4B;YAA5B,wBAAA,EAAA,YAA4B;;;;;gCAC3B,qBAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAA;;4BAA/C,OAAO,GAAe,SAAyB;4BAC/C,IAAI,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;4BAEpD,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;4BAAjB,SAAiB,CAAC;4BAClB,sBAAO,IAAI,EAAC;;;;SACb;QAED;;;;;;WAMG;QACW,6BAAQ,GAAtB,UAAuB,IAAY;;;;;;4BAC3B,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;;;;4BAEnB,qBAAM,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,EAAA;gCAA1C,sBAAO,CAAC,SAAkC,CAAC,CAAC,CAAC,CAAe,EAAC;;;;;4BAK/D,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gCAC7B,yDAAyD;gCACzD,MAAM,IAAI,KAAK,CAAC,qBAAmB,IAAM,CAAC,CAAC;4BAC7C,CAAC;4BAED,IAAI,GAAG,eAAa,IAAI,SAAI,IAAM,CAAC;;;;4BAGzB,qBAAM,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,EAAA;gCAA1C,sBAAO,CAAC,SAAkC,CAAC,CAAC,CAAC,CAAe,EAAC;;;;;;4BAMrD,qBAAM,OAAO,CAAC,cAAc,CAAI,IAAI,UAAO,CAAC,EAAA;gCAApD,sBAAO,CAAC,SAA4C,CAAC,CAAC,CAAC,CAAe,EAAC;;;;iCAKjE,qBAAM,OAAO,CAAC,cAAc,CAAI,IAAI,UAAO,CAAC,EAAA;iCAApD,sBAAO,CAAC,SAA4C,CAAC,CAAC,CAAC,CAAe,EAAC;;;;SACxE;QACH,iBAAC;IAAD,CAAC,AA5DD,IA4DC;IA5DY,gCAAU;;AA8DvB,4BAA4B","sourcesContent":["/**\n * Load and initialize modes.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport { Editor } from \"./editor\";\nimport { Mode } from \"./mode\";\nimport { EditorAPI } from \"./mode-api\";\nimport { Runtime } from \"./runtime\";\n\ninterface ModeConstructor {\n  new (editor: EditorAPI, modeOptions: {}): Mode;\n}\n\ninterface ModeModule {\n  Mode: ModeConstructor;\n}\n\n/**\n * A class that can load modes.\n */\nexport class ModeLoader {\n  /**\n   * @param runtime The runtime to use to load the mode module.\n   */\n  constructor(private readonly editor: Editor,\n              private readonly runtime: Runtime) {}\n\n  /**\n   * Load and initialize a mode.\n   *\n   * @param path The path to the mode.\n   *\n   * @param options The mode's options.\n   *\n   * @returns A promise that resolves to the initialized [[Mode]] object.\n   */\n  async initMode(path: string, options: {} | undefined = {}): Promise<Mode> {\n    const mmodule: ModeModule = await this.loadMode(path);\n    const mode = new mmodule.Mode(this.editor, options);\n\n    await mode.init();\n    return mode;\n  }\n\n  /**\n   * Loads a mode.\n   *\n   * @param path The path to the mode.\n   *\n   * @returns A promise that resolves to the module that holds the mode.\n   */\n  private async loadMode(path: string): Promise<ModeModule> {\n    const runtime = this.runtime;\n    try {\n      return (await runtime.resolveModules(path))[0] as ModeModule;\n    }\n    // tslint:disable-next-line:no-empty\n    catch (ex) {}\n\n    if (path.indexOf(\"/\") !== -1) {\n      // It is an actual path so don't try any further loading.\n      throw new Error(`can't load mode ${path}`);\n    }\n\n    path = `wed/modes/${path}/${path}`;\n\n    try {\n      return (await runtime.resolveModules(path))[0] as ModeModule;\n    }\n    // tslint:disable-next-line:no-empty\n    catch (ex) {}\n\n    try {\n      return (await runtime.resolveModules(`${path}-mode`))[0] as ModeModule;\n    }\n    // tslint:disable-next-line:no-empty\n    catch (ex) {}\n\n    return (await runtime.resolveModules(`${path}_mode`))[0] as ModeModule;\n  }\n}\n\n//  LocalWords:  MPL runtime\n"]}