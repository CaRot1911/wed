{"version":3,"sources":["../../../wed/gui/quick-search.ts"],"names":[],"mappings":";;;IAaS,oBAHS,0BAAS,CAGT;IAElB;;;;;OAKG;IACH;QAGE;;;;;;WAMG;QACH,qBAA6B,MAAc,EAAE,QAAkB,EAC3C,SAAoB;YADX,WAAM,GAAN,MAAM,CAAQ;YACvB,cAAS,GAAT,SAAS,CAAW;YACtC,IAAI,CAAC,MAAM,GAAG,IAAI,8BAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAClD,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YACtC,IAAI,CAAC,YAAY,EAAE,CAAC;QACtB,CAAC;QAED,uEAAuE;QAC/D,kCAAY,GAApB;YACE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,GAAG;gBAC9B,GAAC,0BAAS,CAAC,OAAO,IAAG,iBAAiB;gBACtC,GAAC,0BAAS,CAAC,SAAS,IAAG,mBAAmB;oBAC1C,IAAI,CAAC,SAAS,CAAC,CAAC;;QACpB,CAAC;QAED;;;;;WAKG;QACH,yCAAmB,GAAnB,UAAoB,EAAwB;YAC1C,EAAE,CAAC,CAAC,mCAAmB,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACzC,IAAI,CAAC,SAAS,GAAG,0BAAS,CAAC,OAAO,CAAC;gBACnC,IAAI,CAAC,IAAI,EAAE,CAAC;gBACZ,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,qCAAqB,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAChD,IAAI,CAAC,SAAS,GAAG,0BAAS,CAAC,SAAS,CAAC;gBACrC,IAAI,CAAC,IAAI,EAAE,CAAC;gBACZ,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;YAED,MAAM,CAAC,SAAS,CAAC;QACnB,CAAC;QAED;;WAEG;QACK,sCAAgB,GAAxB;YACE,MAAM,CAAC;gBACL,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,OAAO,EAAE,wBAAO,CAAC,IAAI;aACtB,CAAC;QACJ,CAAC;QAED;;WAEG;QACK,0BAAI,GAAZ;YACE,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;QAC5C,CAAC;QAED;;WAEG;QACH,wCAAkB,GAAlB,UAAmB,EAAe;YAChC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;QAC/D,CAAC;QAED;;WAEG;QACH,iCAAW,GAAX;YACE,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC;YAC7B,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC;QAChC,CAAC;QACH,kBAAC;IAAD,CA9EA,AA8EC,IAAA;IA9EY,kCAAW","file":"quick-search.js","sourcesContent":["/**\n * Quick search GUI.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { QUICKSEARCH_BACKWARDS, QUICKSEARCH_FORWARD } from \"../key-constants\";\nimport { Editor } from \"../wed\";\nimport { ChangeEvent } from \"./minibuffer\";\nimport { Scroller } from \"./scroller\";\nimport { Context, Direction, SearchOptions,\n         SearchReplace } from \"./search-replace\";\n\nexport { Direction };\n\n/**\n * A quick search interface. The quick search sets the minibuffer to prompt the\n * user for a term and searches through the document in the specified search\n * direction. See the section on \"Quick Search\" in the editor's embedded help\n * for details of how it works for the user.\n */\nexport class QuickSearch {\n  private readonly search: SearchReplace;\n\n  /**\n   * @param editor The editor for which we are searching.\n   *\n   * @param scroller The scroller that contains the document.\n   *\n   * @param direction The direction of the search.\n   */\n  constructor(private readonly editor: Editor, scroller: Scroller,\n              private direction: Direction) {\n    this.search = new SearchReplace(editor, scroller);\n    editor.minibuffer.installClient(this);\n    this.updatePrompt();\n  }\n\n  /** Update the prompt shown to the user to indicate a new direction. */\n  private updatePrompt(): void {\n    this.editor.minibuffer.prompt = {\n      [Direction.FORWARD]: \"Search forward:\",\n      [Direction.BACKWARDS]: \"Search backwards:\",\n    }[this.direction];\n  }\n\n  /**\n   * The minibuffer calls this function so that the quick search can handle\n   * keydown events.\n   *\n   * @returns ``false`` if the key was handled, ``undefined`` otherwise.\n   */\n  onMinibufferKeydown(ev: JQueryKeyEventObject): boolean | undefined {\n    if (QUICKSEARCH_FORWARD.matchesEvent(ev)) {\n      this.direction = Direction.FORWARD;\n      this.next();\n      return false;\n    }\n    else if (QUICKSEARCH_BACKWARDS.matchesEvent(ev)) {\n      this.direction = Direction.BACKWARDS;\n      this.next();\n      return false;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Get the current search options to pass to the underlying search engine.\n   */\n  private getSearchOptions(): SearchOptions {\n    return {\n      direction: this.direction,\n      context: Context.TEXT,\n    };\n  }\n\n  /**\n   * Move to the next hit in the direction specified by the user.\n   */\n  private next(): void {\n    this.updatePrompt();\n    this.search.next(this.getSearchOptions());\n  }\n\n  /**\n   * Called by the minibuffer whenever the text in the minibuffer input changes.\n   */\n  onMinibufferChange(ev: ChangeEvent): void {\n    this.search.updatePattern(ev.value, this.getSearchOptions());\n  }\n\n  /**\n   * Called by the minibuffer when the user exits the minibuffer.\n   */\n  onUninstall(): void {\n    this.search.clearHighlight();\n    this.search.setCaretToMatch();\n  }\n}\n"]}