{"version":3,"file":"search-replace.js","sourceRoot":"","sources":["../../../../../lib/wed/gui/search-replace.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Search and replace engine common to quick search and more complex searches.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { CaretManager } from \"../caret-manager\";\nimport { DLoc, DLocRange } from \"../dloc\";\nimport { isWellFormedRange} from \"../domutil\";\nimport { Editor, ReplaceRangeTransformationData } from \"../editor\";\nimport { Context, Direction, Search } from \"../search\";\nimport { Scroller } from \"./scroller\";\n\nexport { Context, Direction };\n\n/**\n * The options directing new searches.\n */\nexport interface SearchOptions {\n  /** The direction in which to search. */\n  direction: Direction;\n\n  /** The context of the search. */\n  context: Context;\n}\n\nenum Edge {\n  START,\n  END,\n}\n\n/**\n * A search-and-replace engine for editor instances. This implements the code\n * that is common to quick searches and more complex searches. This object is\n * responsible for maintaining a search position in the document, and replacing\n * hits as required.\n */\nexport class SearchReplace {\n  private search: Search;\n  private readonly caretManager: CaretManager;\n  private highlight: Element | undefined;\n  private lastMatch: DLocRange | null = null;\n\n  /**\n   * @param editor The editor for which we are searching.\n   *\n   * @param scroller The scroller holding the document.\n   */\n  constructor(private readonly editor: Editor,\n              private readonly scroller: Scroller) {\n    this.caretManager = this.editor.caretManager;\n    const sel = this.caretManager.sel;\n    const scope = (sel !== undefined && !sel.collapsed) ?\n      new DLocRange(sel.anchor, sel.focus) : undefined;\n\n    // If we have a scope, then we had a selection and we want to use the\n    // selection's anchor, which is scope.start at this point.\n    const start = scope !== undefined ? scope.start : this.caretManager.caret;\n    if (start === undefined) {\n      throw new Error(\"search without a caret!\");\n    }\n    this.search = new Search(this.caretManager, editor.guiRoot, start, scope);\n  }\n\n  /**\n   * The current match. This is ``undefined`` if we have not searched yet.  It\n   * is ``null`` if nothing matches.\n   */\n  get current(): DLocRange | undefined | null {\n    return this.search.current;\n  }\n\n  /**\n   * Whether we can replace the current hit. If there is no hit, then this is\n   * ``false``. If the hit is somehow collapsed, this is also\n   * ``false``. Otherwise, the hit must be a well-formed range.\n   */\n  get canReplace(): boolean {\n    const current = this.search.current;\n    if (current == null) {\n      return false;\n    }\n\n    if (current.collapsed) {\n      return false;\n    }\n\n    return isWellFormedRange(current.mustMakeDOMRange());\n  }\n\n  /**\n   * Update the pattern to a new value. Calling this method attempts to update\n   * the current hit first, and may move in the direction of the search if\n   * updating the current hit is not possible. This updates [[current]].\n   *\n   * @param value The new pattern value.\n   *\n   * @param options The search options.\n   */\n  updatePattern(value: string, options: SearchOptions): void {\n    this.search.pattern = value;\n    this.search.direction = options.direction;\n    this.search.context = options.context;\n    this.search.updateCurrent();\n    this.updateHighlight();\n  }\n\n  /**\n   * Find the next hit in the direction of the search. This updates [[current]].\n   *\n   * @param options The search options.\n   */\n  next(options: SearchOptions): void {\n    this.search.direction = options.direction;\n    this.search.context = options.context;\n    this.search.next();\n    this.updateHighlight();\n  }\n\n  /**\n   * Update the highlight marking the current hit.\n   */\n  private updateHighlight(): void {\n    this.clearHighlight();\n    const match = this.current;\n    if (match != null) {\n      this.lastMatch = match;\n      this.setCaretToMatch();\n      const range = match.start.mustMakeDLocRange(match.end);\n      const domRange = range.mustMakeDOMRange();\n      this.highlight = this.caretManager.highlightRange(range);\n      const scRect = this.scroller.getBoundingClientRect();\n      const rect = domRange.getBoundingClientRect();\n      const leftOffset = this.scroller.scrollLeft - scRect.left;\n      const topOffset = this.scroller.scrollTop - scRect.top;\n\n      this.scroller.scrollIntoView(rect.left + leftOffset,\n                                   rect.top + topOffset,\n                                   rect.right + leftOffset,\n                                   rect.bottom + topOffset);\n    }\n  }\n\n  /**\n   * Clear the highlight that this object produced to mark a hit.\n   */\n  clearHighlight(): void {\n    if (this.highlight !== undefined) {\n      this.highlight.parentNode!.removeChild(this.highlight);\n      this.highlight = undefined;\n    }\n  }\n\n  /**\n   * Set the caret position to the latest hit we ran into.\n   */\n  setCaretToMatch(): void {\n    if (this.lastMatch !== null) {\n      const loc = this.getDirectionalEnd(this.lastMatch);\n      this.caretManager.setCaret(loc, { focus: false });\n    }\n  }\n\n  private getDirectionalEnd(range: DLocRange): DLoc {\n    return this.getDirectionalEdge(range, Edge.END);\n  }\n\n  private getDirectionalStart(range: DLocRange): DLoc {\n    return this.getDirectionalEdge(range, Edge.START);\n  }\n\n  private getDirectionalEdge(range: DLocRange, edge: Edge): DLoc {\n    let field: \"start\" | \"end\";\n    const direction = this.search.direction;\n    const start = edge === Edge.START;\n    switch (direction) {\n    case Direction.FORWARD:\n      field = start ? \"start\" : \"end\";\n      break;\n    case Direction.BACKWARDS:\n      field = start ? \"end\" : \"start\";\n      break;\n    default:\n      const d: never = direction;\n      throw new Error(`unknown direction: ${d}`);\n    }\n\n    return range[field];\n  }\n\n  /**\n   * Replace the current hit with text.\n   *\n   * @param value The new text.\n   *\n   * @throw {Error} When called if [[canReplace]] is false.\n   */\n  replace(value: string): void {\n    if (!this.canReplace) {\n      throw new Error(\"tried to replace when it is not possible\");\n    }\n\n    const current = this.current;\n\n    // With the !this.canReplace test above, it is not currently possible to\n    // hit this condition.\n    if (current == null) {\n      throw new Error(\"no current match\");\n    }\n\n    const caret = this.getDirectionalStart(current);\n    this.caretManager.setCaret(caret, { focus: false });\n    this.editor.fireTransformation(this.editor.replaceRangeTr, {\n      range: current!,\n      newText: value,\n    } as ReplaceRangeTransformationData);\n    this.clearHighlight();\n    const caretAfter = this.caretManager.caret;\n    if (caretAfter === undefined) {\n      throw new Error(\"no caret after replacement!\");\n    }\n\n    // We must update the current match because the old range is no longe valid.\n    this.search.current = caretAfter.mustMakeDLocRange();\n  }\n}\n"]}