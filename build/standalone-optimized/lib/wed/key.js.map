{"version":3,"sources":["../../../wed/key.ts"],"names":[],"mappings":"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","file":"key.js","sourcesContent":["/**\n * Module implementing an class that describes keyboard keys.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport \"jquery\";\nimport * as browsers from \"./browsers\";\n\nlet id = 0;\n\n/**\n * One and only one instance of a Key object exists per set of parameters used\n * for its construction. So if ``a = new Key(1, 2, 3)`` and ``b = new Key(1, 2,\n * 3)`` then ``a === b`` is true. The last three parameters are normalized to\n * boolean values, so ``new Key(1, 2, 3)`` is the same as ``new Key(1, 2, 3,\n * false, false, false)``.\n *\n * Key objects should be considered immutable. Modifying them after their\n * creation is likely to cause code to execute erratically.\n */\nexport class Key {\n  // tslint:disable-next-line:variable-name\n  static __cache: Record<string, Key> = Object.create(null);\n\n  public readonly which: number;\n  public readonly keyCode: number;\n  public readonly charCode: number;\n  public readonly ctrlKey: boolean;\n  public readonly altKey: boolean;\n  public readonly metaKey: boolean;\n  public readonly keypress: boolean;\n\n  public readonly hashKey: string;\n\n  private readonly id: number;\n\n  /**\n   *\n   * Client code should use the convenience functions provided by this module to\n   * create keys rather than use this constructor directly.\n   *\n   * @param which The character code of the key.\n   *\n   * @param keypress Whether this key is meant to be used for keypress events\n   * rather than keyup and keydown.\n   *\n   * @param keyCode The key code of the key.\n   *\n   * @param charCode The character code of the key.\n   *\n   * @param ctrlKey Whether this key requires the Ctrl key held.\n   *\n   * @param altKey Whether this key requires the Alt key held.\n   *\n   * @param metaKey Whether this key requires the meta key held.\n   */\n  constructor(which: number, keypress: boolean = true,\n              keyCode: number, charCode: number = 0, ctrlKey: boolean = false,\n              altKey: boolean = false, metaKey: boolean = false) {\n\n    // Some separator is necessary because otherwise there would be no way to\n    // distinguish (1, 23, 4, ...) from (12, 3, 4, ...) or (1, 2, 34, ...).\n    const key = [which, keyCode, charCode, ctrlKey, altKey, metaKey,\n                 keypress].join(\",\");\n\n    // Ensure we have only one of each key created.\n    const cached = Key.__cache[key];\n    if (cached !== undefined) {\n      return cached;\n    }\n\n    this.which = which;\n    this.keyCode = keyCode;\n    this.charCode = charCode;\n    this.ctrlKey = ctrlKey;\n    this.altKey = altKey;\n    this.metaKey = metaKey;\n    this.keypress = keypress;\n\n    this.hashKey = key;\n    this.id = id++;\n\n    Key.__cache[key] = this;\n  }\n\n  /**\n   * This method compares the key object to an event object. The event object\n   * should have been generated for a keyboard event. This method does not check\n   * the type of object.\n   *\n   * @param ev A jQuery or DOM event object.\n   * @returns True if the key object matches the event, false\n   * otherwise.\n   */\n  matchesEvent(ev: KeyboardEvent | JQueryKeyEventObject): boolean {\n    return ev.which === this.which &&\n      ev.keyCode === this.keyCode &&\n      ev.charCode === this.charCode &&\n      ev.ctrlKey === this.ctrlKey &&\n      ev.altKey === this.altKey &&\n      ev.metaKey === this.metaKey &&\n      (this.keypress ? (ev.type === \"keypress\") :\n       ((ev.type === \"keydown\") || (ev.type === \"keyup\")));\n  }\n\n  /**\n   * Sets an event object so that it matches this key. If this is not a keypress\n   * event, the event type will be set to keydown. The caller can set it to\n   * keyup as needed.\n   *\n   * @param ev A jQuery or DOM event object. This object is modified by the\n   * method.\n   */\n  setEventToMatch(ev: KeyboardEvent | JQueryKeyEventObject): void {\n    // tslint:disable-next-line:no-any\n    const asAny = ev as any;\n    asAny.which = this.which;\n    asAny.keyCode = this.keyCode;\n    asAny.charCode = this.charCode;\n    asAny.ctrlKey = this.ctrlKey;\n    asAny.altKey = this.altKey;\n    asAny.metaKey = this.metaKey;\n    if (this.keypress) {\n      asAny.type = \"keypress\";\n    }\n    else {\n      asAny.type = \"keydown\";\n    }\n  }\n\n  /**\n   * The uniqueness of the return value this method returns is guaranteed only\n   * per module instance, which generally translates to \"per JavaScript\n   * execution context\". For instance, if this code is loaded in two different\n   * browser pages, the module will be instantiated once per page and the return\n   * values for Key objects that were created with the same parameters might\n   * differ. So if these two pages communicate with one another they cannot use\n   * the return value of this method to identify objects.\n   *\n   * @returns A hash value that uniquely identifies the object. The value should\n   * be considered to be opaque.\n   */\n  hash(): number {\n    return this.id;\n  }\n\n  /**\n   * @returns True if any modifiers are turned on for this key. False\n   * otherwise. Shift is not considered a modifier for our purposes.\n   */\n  anyModifier(): boolean {\n    return this.ctrlKey || this.altKey || this.metaKey;\n  }\n}\n\n/**\n * This function creates a key object.\n *\n * @param which This parameter can be a string of length one which contains the\n * character for which we want to create a Key. If a number, it is the character\n * code of the key.\n *\n * @param keypress Whether this key is meant to be used for keypress events\n * rather than keyup and keydown.\n *\n * @param keyCode The key code of the key.\n *\n * @param charCode The character code of the key.\n *\n * @param ctrlKey Whether this key requires the Ctrl key held.\n *\n * @param altKey Whether this key requires the Alt key held.\n *\n * @param metaKey Whether this key requires the meta key held.\n *\n * @returns The key created.\n *\n * @throws {Error} If ``which`` is not a single character string or a number.\n */\nexport function makeKey(which: string | number,\n                        keypress: boolean = true,\n                        keyCode?: number, charCode?: number,\n                        ctrlKey: boolean = false,\n                        altKey: boolean = false,\n                        metaKey: boolean = false): Key {\n    if (typeof (which) === \"string\") {\n      if (which.length !== 1) {\n        throw new Error(\"when the first parameter is a string, \" +\n                        \"a one-character string is required\");\n      }\n      which = which.charCodeAt(0);\n    }\n    else if (typeof (which) !== \"number\") {\n      throw new Error(\"the first parameter must be a string or number\");\n    }\n\n    if (keypress === undefined) {\n      keypress = true;\n    }\n    else {\n      keypress = !!keypress;\n    }\n\n    if (keyCode == null) {\n      keyCode = (keypress && browsers.GECKO) ? 0 : which;\n    }\n\n    if (charCode == null) {\n      charCode = keypress ? which : 0;\n    }\n\n    // Normalize\n    ctrlKey = !!ctrlKey;\n    altKey = !!altKey;\n    metaKey = !!metaKey;\n\n    return new Key(which, keypress, keyCode, charCode, ctrlKey, altKey,\n                   metaKey);\n  }\n\n/**\n * This function creates a key object which represents a control character (a\n * character typed while Ctrl is held).\n *\n *\n * @param ch This parameter can be a string of length one which contains the\n * character for which we want to create a Key. If a number, it is the character\n * code of the key.\n *\n * @returns The key created.\n */\nexport function makeCtrlKey(ch: string | number): Key {\n  return makeKey(ch, false, undefined, undefined, true, false, false);\n}\n\n/**\n * This function creates a key object which represents a meta character (a\n * character typed while Meta is held).\n *\n *\n * @param ch This parameter can be a string of length one which contains the\n * character for which we want to create a Key. If a number, it is the character\n * code of the key.\n *\n * @returns The key created.\n */\nexport function makeMetaKey(ch: string | number): Key {\n  return makeKey(ch, false, undefined, undefined, false, false, true);\n}\n\n/**\n * This function creates a key object which represents a \"control equivalent\"\n * character. A \"control equivalent\" is equivalent to a control key on all\n * platforms, except in OS X where it is equivalent to a command key. That is if\n * one makes a \"control equivalent\" with the character \"X\", then on all\n * platforms it would be equivalent to hitting Ctrl-X, except in OS X where it\n * is equivalent to hitting Command-X.\n *\n * @param ch This parameter can be a string of length one which contains the\n * character for which we want to create a Key. If a number, it is the character\n * code of the key.\n *\n * @returns The key created.\n */\nexport function makeCtrlEqKey(ch: string | number): Key {\n  if (!browsers.OSX) {\n    return makeCtrlKey(ch);\n  }\n\n  // Command === Meta\n  return makeMetaKey(ch);\n}\n\n//  LocalWords:  metaKey altKey ctrlKey charcode keyCode param keyup\n//  LocalWords:  Ctrl DOM Mangalam MPL Dubeau boolean keypress\n//  LocalWords:  keydown jQuery\n"]}