define("wed", ["jquery","bootstrap","salve-dom","merge-options","ajv","salve","bootbox","interactjs","rangy","typeahead","bootstrap-notify","log4javascript","dexie","bluejax"], function(__WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_27__, __WEBPACK_EXTERNAL_MODULE_70__, __WEBPACK_EXTERNAL_MODULE_75__, __WEBPACK_EXTERNAL_MODULE_103__, __WEBPACK_EXTERNAL_MODULE_113__, __WEBPACK_EXTERNAL_MODULE_249__, __WEBPACK_EXTERNAL_MODULE_250__, __WEBPACK_EXTERNAL_MODULE_252__, __WEBPACK_EXTERNAL_MODULE_258__, __WEBPACK_EXTERNAL_MODULE_262__, __WEBPACK_EXTERNAL_MODULE_265__, __WEBPACK_EXTERNAL_MODULE_274__, __WEBPACK_EXTERNAL_MODULE_276__) { return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 76);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = __extends;
/* unused harmony export __assign */
/* unused harmony export __rest */
/* unused harmony export __decorate */
/* unused harmony export __param */
/* unused harmony export __metadata */
/* unused harmony export __awaiter */
/* unused harmony export __generator */
/* unused harmony export __exportStar */
/* unused harmony export __values */
/* unused harmony export __read */
/* unused harmony export __spread */
/* unused harmony export __await */
/* unused harmony export __asyncGenerator */
/* unused harmony export __asyncDelegator */
/* unused harmony export __asyncValues */
/* unused harmony export __makeTemplateObject */
/* unused harmony export __importStar */
/* unused harmony export __importDefault */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __exportStar(m, exports) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; }; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator];
    return m ? m.call(o) : typeof __values === "function" ? __values(o) : o[Symbol.iterator]();
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Subscriber; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_isFunction__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Observer__ = __webpack_require__(79);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Subscription__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__internal_symbol_rxSubscriber__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__config__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_hostReportError__ = __webpack_require__(54);
/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */







/**
 * Implements the {@link Observer} interface and extends the
 * {@link Subscription} class. While the {@link Observer} is the public API for
 * consuming the values of an {@link Observable}, all Observers get converted to
 * a Subscriber, in order to provide Subscription-like capabilities such as
 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
 * implementing operators, but it is rarely used as a public API.
 *
 * @class Subscriber<T>
 */
var Subscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](Subscriber, _super);
    /**
     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
     * defined Observer or a `next` callback function.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     */
    function Subscriber(destinationOrNext, error, complete) {
        var _this = _super.call(this) || this;
        /** @internal */ _this.syncErrorValue = null;
        /** @internal */ _this.syncErrorThrown = false;
        /** @internal */ _this.syncErrorThrowable = false;
        _this.isStopped = false;
        switch (arguments.length) {
            case 0:
                _this.destination = __WEBPACK_IMPORTED_MODULE_2__Observer__["a" /* empty */];
                break;
            case 1:
                if (!destinationOrNext) {
                    _this.destination = __WEBPACK_IMPORTED_MODULE_2__Observer__["a" /* empty */];
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    // HACK(benlesh): For situations where Node has multiple copies of rxjs in
                    // node_modules, we cannot rely on `instanceof` checks
                    if (isTrustedSubscriber(destinationOrNext)) {
                        var trustedSubscriber = destinationOrNext[__WEBPACK_IMPORTED_MODULE_4__internal_symbol_rxSubscriber__["a" /* rxSubscriber */]]();
                        _this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;
                        _this.destination = trustedSubscriber;
                        trustedSubscriber.add(_this);
                    }
                    else {
                        _this.syncErrorThrowable = true;
                        _this.destination = new SafeSubscriber(_this, destinationOrNext);
                    }
                    break;
                }
            default:
                _this.syncErrorThrowable = true;
                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
                break;
        }
        return _this;
    }
    Subscriber.prototype[__WEBPACK_IMPORTED_MODULE_4__internal_symbol_rxSubscriber__["a" /* rxSubscriber */]] = function () { return this; };
    /**
     * A static factory for a Subscriber, given a (potentially partial) definition
     * of an Observer.
     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
     * Observer represented by the given arguments.
     * @nocollapse
     */
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    /**
     * The {@link Observer} callback to receive notifications of type `next` from
     * the Observable, with a value. The Observable may call this method 0 or more
     * times.
     * @param {T} [value] The `next` value.
     * @return {void}
     */
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    /**
     * The {@link Observer} callback to receive notifications of type `error` from
     * the Observable, with an attached {@link Error}. Notifies the Observer that
     * the Observable has experienced an error condition.
     * @param {any} [err] The `error` exception.
     * @return {void}
     */
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    /**
     * The {@link Observer} callback to receive a valueless notification of type
     * `complete` from the Observable. Notifies the Observer that the Observable
     * has finished sending push-based notifications.
     * @return {void}
     */
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        this._parent = null;
        this._parents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parent = _parent;
        this._parents = _parents;
        return this;
    };
    return Subscriber;
}(__WEBPACK_IMPORTED_MODULE_3__Subscription__["a" /* Subscription */]));

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SafeSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this._parentSubscriber = _parentSubscriber;
        var next;
        var context = _this;
        if (Object(__WEBPACK_IMPORTED_MODULE_1__util_isFunction__["a" /* isFunction */])(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== __WEBPACK_IMPORTED_MODULE_2__Observer__["a" /* empty */]) {
                context = Object.create(observerOrNext);
                if (Object(__WEBPACK_IMPORTED_MODULE_1__util_isFunction__["a" /* isFunction */])(context.unsubscribe)) {
                    _this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = _this.unsubscribe.bind(_this);
            }
        }
        _this._context = context;
        _this._next = next;
        _this._error = error;
        _this._complete = complete;
        return _this;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!__WEBPACK_IMPORTED_MODULE_5__config__["a" /* config */].useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            var useDeprecatedSynchronousErrorHandling = __WEBPACK_IMPORTED_MODULE_5__config__["a" /* config */].useDeprecatedSynchronousErrorHandling;
            if (this._error) {
                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                if (useDeprecatedSynchronousErrorHandling) {
                    throw err;
                }
                Object(__WEBPACK_IMPORTED_MODULE_6__util_hostReportError__["a" /* hostReportError */])(err);
            }
            else {
                if (useDeprecatedSynchronousErrorHandling) {
                    _parentSubscriber.syncErrorValue = err;
                    _parentSubscriber.syncErrorThrown = true;
                }
                else {
                    Object(__WEBPACK_IMPORTED_MODULE_6__util_hostReportError__["a" /* hostReportError */])(err);
                }
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        var _this = this;
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                var wrappedComplete = function () { return _this._complete.call(_this._context); };
                if (!__WEBPACK_IMPORTED_MODULE_5__config__["a" /* config */].useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            if (__WEBPACK_IMPORTED_MODULE_5__config__["a" /* config */].useDeprecatedSynchronousErrorHandling) {
                throw err;
            }
            else {
                Object(__WEBPACK_IMPORTED_MODULE_6__util_hostReportError__["a" /* hostReportError */])(err);
            }
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        if (!__WEBPACK_IMPORTED_MODULE_5__config__["a" /* config */].useDeprecatedSynchronousErrorHandling) {
            throw new Error('bad call');
        }
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            if (__WEBPACK_IMPORTED_MODULE_5__config__["a" /* config */].useDeprecatedSynchronousErrorHandling) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            else {
                Object(__WEBPACK_IMPORTED_MODULE_6__util_hostReportError__["a" /* hostReportError */])(err);
                return true;
            }
        }
        return false;
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber));
function isTrustedSubscriber(obj) {
    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[__WEBPACK_IMPORTED_MODULE_4__internal_symbol_rxSubscriber__["a" /* rxSubscriber */]]);
}
//# sourceMappingURL=Subscriber.js.map


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Observable; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_toSubscriber__ = __webpack_require__(130);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_symbol_observable__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_pipe__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__config__ = __webpack_require__(40);
/** PURE_IMPORTS_START _util_toSubscriber,_internal_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */




/**
 * A representation of any set of values over any amount of time. This is the most basic building block
 * of RxJS.
 *
 * @class Observable<T>
 */
var Observable = /*@__PURE__*/ (function () {
    /**
     * @constructor
     * @param {Function} subscribe the function that is called when the Observable is
     * initially subscribed to. This function is given a Subscriber, to which new values
     * can be `next`ed, or an `error` method can be called to raise an error, or
     * `complete` can be called to notify of a successful completion.
     */
    function Observable(subscribe) {
        /** Internal implementation detail, do not use directly. */
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    /**
     * Creates a new Observable, with this Observable as the source, and the passed
     * operator defined as the new observable's operator.
     * @method lift
     * @param {Operator} operator the operator defining the operation to take on the observable
     * @return {Observable} a new observable with the Operator applied
     */
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    /**
     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.
     *
     * <span class="informal">Use it when you have all these Observables, but still nothing is happening.</span>
     *
     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It
     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is
     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling
     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often
     * thought.
     *
     * Apart from starting the execution of an Observable, this method allows you to listen for values
     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two
     * following ways.
     *
     * The first way is creating an object that implements {@link Observer} interface. It should have methods
     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create
     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do
     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also
     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't
     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will
     * be left uncaught.
     *
     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.
     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent
     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,
     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,
     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes
     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.
     *
     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.
     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean
     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback
     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.
     *
     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.
     * It is an Observable itself that decides when these functions will be called. For example {@link of}
     * by default emits all its values synchronously. Always check documentation for how given Observable
     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.
     *
     * @example <caption>Subscribe with an Observer</caption>
     * const sumObserver = {
     *   sum: 0,
     *   next(value) {
     *     console.log('Adding: ' + value);
     *     this.sum = this.sum + value;
     *   },
     *   error() { // We actually could just remove this method,
     *   },        // since we do not really care about errors right now.
     *   complete() {
     *     console.log('Sum equals: ' + this.sum);
     *   }
     * };
     *
     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.
     * .subscribe(sumObserver);
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Subscribe with functions</caption>
     * let sum = 0;
     *
     * Rx.Observable.of(1, 2, 3)
     * .subscribe(
     *   function(value) {
     *     console.log('Adding: ' + value);
     *     sum = sum + value;
     *   },
     *   undefined,
     *   function() {
     *     console.log('Sum equals: ' + sum);
     *   }
     * );
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Cancel a subscription</caption>
     * const subscription = Rx.Observable.interval(1000).subscribe(
     *   num => console.log(num),
     *   undefined,
     *   () => console.log('completed!') // Will not be called, even
     * );                                // when cancelling subscription
     *
     *
     * setTimeout(() => {
     *   subscription.unsubscribe();
     *   console.log('unsubscribed!');
     * }, 2500);
     *
     * // Logs:
     * // 0 after 1s
     * // 1 after 2s
     * // "unsubscribed!" after 2.5s
     *
     *
     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,
     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed
     *  Observable.
     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,
     *  the error will be thrown as unhandled.
     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.
     * @return {ISubscription} a subscription reference to the registered handlers
     * @method subscribe
     */
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = Object(__WEBPACK_IMPORTED_MODULE_0__util_toSubscriber__["a" /* toSubscriber */])(observerOrNext, error, complete);
        if (operator) {
            operator.call(sink, this.source);
        }
        else {
            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));
        }
        if (__WEBPACK_IMPORTED_MODULE_3__config__["a" /* config */].useDeprecatedSynchronousErrorHandling) {
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
        }
        return sink;
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            if (__WEBPACK_IMPORTED_MODULE_3__config__["a" /* config */].useDeprecatedSynchronousErrorHandling) {
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
            }
            sink.error(err);
        }
    };
    /**
     * @method forEach
     * @param {Function} next a handler for each value emitted by the observable
     * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise
     * @return {Promise} a promise that either resolves on observable completion or
     *  rejects with the handled error
     */
    Observable.prototype.forEach = function (next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            // Must be declared in a separate statement to avoid a RefernceError when
            // accessing subscription below in the closure due to Temporal Dead Zone.
            var subscription;
            subscription = _this.subscribe(function (value) {
                try {
                    next(value);
                }
                catch (err) {
                    reject(err);
                    if (subscription) {
                        subscription.unsubscribe();
                    }
                }
            }, reject, resolve);
        });
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Observable.prototype._subscribe = function (subscriber) {
        var source = this.source;
        return source && source.subscribe(subscriber);
    };
    /**
     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
     * @method Symbol.observable
     * @return {Observable} this instance of the observable
     */
    Observable.prototype[__WEBPACK_IMPORTED_MODULE_1__internal_symbol_observable__["a" /* observable */]] = function () {
        return this;
    };
    /* tslint:enable:max-line-length */
    /**
     * Used to stitch together functional operators into a chain.
     * @method pipe
     * @return {Observable} the Observable result of all of the operators having
     * been called in the order they were passed in.
     *
     * @example
     *
     * import { map, filter, scan } from 'rxjs/operators';
     *
     * Rx.Observable.interval(1000)
     *   .pipe(
     *     filter(x => x % 2 === 0),
     *     map(x => x + x),
     *     scan((acc, x) => acc + x)
     *   )
     *   .subscribe(x => console.log(x))
     */
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        if (operations.length === 0) {
            return this;
        }
        return Object(__WEBPACK_IMPORTED_MODULE_2__util_pipe__["b" /* pipeFromArray */])(operations)(this);
    };
    /* tslint:enable:max-line-length */
    Observable.prototype.toPromise = function (promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    // HACK: Since TypeScript inherits static properties too, we have to
    // fight against TypeScript here so Subject can have a different static create signature
    /**
     * Creates a new cold Observable by calling the Observable constructor
     * @static true
     * @owner Observable
     * @method create
     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
     * @return {Observable} a new cold observable
     * @nocollapse
     */
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());

/**
 * Decides between a passed promise constructor from consuming code,
 * A default configured promise constructor, and the native promise
 * constructor and returns it. If nothing can be found, it will throw
 * an error.
 * @param promiseCtor The optional promise constructor to passed by consuming code
 */
function getPromiseCtor(promiseCtor) {
    if (!promiseCtor) {
        promiseCtor = __WEBPACK_IMPORTED_MODULE_3__config__["a" /* config */].Promise || Promise;
    }
    if (!promiseCtor) {
        throw new Error('no Promise impl found');
    }
    return promiseCtor;
}
//# sourceMappingURL=Observable.js.map


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return OuterSubscriber; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var OuterSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](OuterSubscriber, _super);
    function OuterSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
        this.destination.error(error);
    };
    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
        this.destination.complete();
    };
    return OuterSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));

//# sourceMappingURL=OuterSubscriber.js.map


/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = subscribeToResult;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__InnerSubscriber__ = __webpack_require__(144);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__subscribeTo__ = __webpack_require__(92);
/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo PURE_IMPORTS_END */


function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
    var destination = new __WEBPACK_IMPORTED_MODULE_0__InnerSubscriber__["a" /* InnerSubscriber */](outerSubscriber, outerValue, outerIndex);
    return Object(__WEBPACK_IMPORTED_MODULE_1__subscribeTo__["a" /* subscribeTo */])(result)(destination);
}
//# sourceMappingURL=subscribeToResult.js.map


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Utilities that manipulate or query the DOM tree.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(7), __webpack_require__(6), __webpack_require__(17)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, jquery_1, domtypeguards_1, util) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    jquery_1 = __importDefault(jquery_1);
    util = __importStar(util);
    exports.isAttr = domtypeguards_1.isAttr;
    function indexOf(a, target) {
        var length = a.length;
        for (var i = 0; i < length; ++i) {
            if (a[i] === target) {
                return i;
            }
        }
        return -1;
    }
    exports.indexOf = indexOf;
    /**
     * Compare two locations that have already been determined to be in a
     * parent-child relation. **Important: the relationship must have been formally
     * tested *before* calling this function.**
     *
     * @returns -1 if ``parent`` is before ``child``, 1 otherwise.
     */
    function parentChildCompare(parentNode, parentOffset, childNode) {
        // Find which child of parent is or contains the other node.
        var curChild = parentNode.firstChild;
        var ix = 0;
        while (curChild !== null) {
            if (curChild.contains(childNode)) {
                break;
            }
            ix++;
            curChild = curChild.nextSibling;
        }
        // This is ``<= 0`` and not just ``< 0`` because if our offset points exactly
        // to the child we found, then parent location is necessarily before the child
        // location.
        return (parentOffset - ix) <= 0 ? -1 : 1;
    }
    /**
     * Compare two positions in document order.
     *
     * This function relies on DOM's ``compareDocumentPosition`` function. Remember
     * that calling that function with attributes can be problematic. (For instance,
     * two attributes on the same element are not ordered.)
     *
     * @param firstNode Node of the first position.
     *
     * @param firstOffset Offset of the first position.
     *
     * @param secondNode Node of the second position.
     *
     * @param secondOffset Offset of the second position.
     *
     * @returns -1 if the first position comes before the second. 1 if the first
     * position comes after the other. 0 if the two positions are equal.
     */
    function comparePositions(firstNode, firstOffset, secondNode, secondOffset) {
        if (firstNode === secondNode) {
            var d = firstOffset - secondOffset;
            if (d === 0) {
                return 0;
            }
            return d < 0 ? -1 : 1;
        }
        var comparison = firstNode.compareDocumentPosition(secondNode);
        // tslint:disable:no-bitwise
        if ((comparison & Node.DOCUMENT_POSITION_DISCONNECTED) !== 0) {
            throw new Error("cannot compare disconnected nodes");
        }
        if ((comparison & Node.DOCUMENT_POSITION_CONTAINED_BY) !== 0) {
            return parentChildCompare(firstNode, firstOffset, secondNode);
        }
        if ((comparison & Node.DOCUMENT_POSITION_CONTAINS) !== 0) {
            // This raises a type error:
            //
            // return -parentChildCompare(secondNode, secondOffset, firstNode);
            return parentChildCompare(secondNode, secondOffset, firstNode) < 0 ? 1 : -1;
        }
        if ((comparison & Node.DOCUMENT_POSITION_PRECEDING) !== 0) {
            return 1;
        }
        if ((comparison & Node.DOCUMENT_POSITION_FOLLOWING) !== 0) {
            return -1;
        }
        // tslint:enable:no-bitwise
        throw new Error("neither preceding nor following: this should not happen");
    }
    exports.comparePositions = comparePositions;
    /**
     * Gets the first range in the selection.
     *
     * @param win The window for which we want the selection.
     *
     * @returns The first range in the selection. Undefined if there is no selection
     * or no range.
     */
    function getSelectionRange(win) {
        var sel = win.getSelection();
        if (sel === undefined || sel.rangeCount < 1) {
            return undefined;
        }
        return sel.getRangeAt(0);
    }
    exports.getSelectionRange = getSelectionRange;
    /**
     * Creates a range from two points in a document.
     *
     * @returns The range information.
     */
    function rangeFromPoints(startContainer, startOffset, endContainer, endOffset) {
        var range = startContainer.ownerDocument.createRange();
        var reversed = false;
        if (comparePositions(startContainer, startOffset, endContainer, endOffset) <= 0) {
            range.setStart(startContainer, startOffset);
            range.setEnd(endContainer, endOffset);
        }
        else {
            range.setStart(endContainer, endOffset);
            range.setEnd(startContainer, startOffset);
            reversed = true;
        }
        return { range: range, reversed: reversed };
    }
    exports.rangeFromPoints = rangeFromPoints;
    /**
     * Focuses the node itself or if the node is a text node, focuses the parent.
     *
     * @param node The node to focus.
     *
     * @throws {Error} If the node is neither a text node nor an element. Trying to
     * focus something other than these is almost certainly an algorithmic bug.
     */
    function focusNode(node) {
        var nodeType = node != null ? node.nodeType : undefined;
        switch (nodeType) {
            case Node.TEXT_NODE:
                if (node.parentNode == null) {
                    throw new Error("detached node");
                }
                node.parentNode.focus();
                break;
            case Node.ELEMENT_NODE:
                node.focus();
                break;
            default:
                throw new Error("tried to focus something other than a text node or " +
                    "an element.");
        }
    }
    exports.focusNode = focusNode;
    /**
     * This function determines the caret position if the caret was moved forward.
     *
     * This function does not fully emulate how a browser moves the caret. The sole
     * emulation it performs is to check whether whitespace matters or not. It skips
     * whitespace that does not matter.
     *
     * @param caret A caret position where the search starts. This should be an
     * array of length two that has in first position the node where the caret is
     * and in second position the offset in that node. This pair is to be
     * interpreted in the same way node, offset pairs are interpreted in selection
     * or range objects.
     *
     * @param container A DOM node which indicates the container within which caret
     * movements must be contained.
     *
     * @param noText If true, and a text node would be returned, the function will
     * instead return the parent of the text node.
     *
     * @returns The next caret position, or ``null`` if such position does not
     * exist. The ``container`` parameter constrains movements to positions inside
     * it.
     */
    // tslint:disable-next-line:cyclomatic-complexity
    function nextCaretPosition(caret, container, noText) {
        var node = caret[0], offset = caret[1];
        var found = false;
        if (!container.contains(node)) {
            return null;
        }
        var doc = domtypeguards_1.isDocument(node) ? node : node.ownerDocument;
        var window = doc.defaultView;
        var parent;
        search_loop: while (!found) {
            parent = node.parentNode;
            switch (node.nodeType) {
                case Node.TEXT_NODE:
                    if (offset >= node.length ||
                        // If the parent node is set to normal whitespace handling, then
                        // moving the caret forward by one position will skip this whitespace.
                        (parent != null && parent.lastChild === node &&
                            window.getComputedStyle(parent, undefined).whiteSpace ===
                                "normal" && /^\s+$/.test(node.data.slice(offset)))) {
                        // We would move outside the container
                        if (parent == null || node === container) {
                            break search_loop;
                        }
                        offset = indexOf(parent.childNodes, node) + 1;
                        node = parent;
                    }
                    else {
                        offset++;
                        found = true;
                    }
                    break;
                case Node.ELEMENT_NODE:
                    if (offset >= node.childNodes.length) {
                        // If we've hit the end of what we can search, stop.
                        if (parent == null || node === container) {
                            break search_loop;
                        }
                        offset = indexOf(parent.childNodes, node) + 1;
                        node = parent;
                        found = true;
                    }
                    else {
                        node = node.childNodes[offset];
                        offset = 0;
                        found = !(node.childNodes.length > 0 &&
                            domtypeguards_1.isText(node.childNodes[offset]));
                    }
                    break;
                default:
            }
        }
        if (!found) {
            return null;
        }
        if (noText && domtypeguards_1.isText(node)) {
            parent = node.parentNode;
            if (parent == null) {
                throw new Error("detached node");
            }
            offset = indexOf(parent.childNodes, node);
            node = parent;
        }
        // We've moved to a position outside the container.
        if (!container.contains(node) ||
            (node === container && offset >= node.childNodes.length)) {
            return null;
        }
        return [node, offset];
    }
    exports.nextCaretPosition = nextCaretPosition;
    /**
     * This function determines the caret position if the caret was moved backwards.
     *
     * This function does not fully emulate how a browser moves the caret. The sole
     * emulation it performs is to check whether whitespace matters or not. It skips
     * whitespace that does not matter.
     *
     * @param caret A caret position where the search starts. This should be an
     * array of length two that has in first position the node where the caret is
     * and in second position the offset in that node. This pair is to be
     * interpreted in the same way node, offset pairs are interpreted in selection
     * or range objects.
     *
     * @param container A DOM node which indicates the container within which caret
     * movements must be contained.
     *
     * @param noText If true, and a text node would be returned, the function will
     * instead return the parent of the text node.
     *
     * @returns The previous caret position, or ``null`` if such position does not
     * exist. The ``container`` parameter constrains movements to positions inside
     * it.
     */
    // tslint:disable-next-line:cyclomatic-complexity
    function prevCaretPosition(caret, container, noText) {
        var node = caret[0], offset = caret[1];
        var found = false;
        if (!container.contains(node)) {
            return null;
        }
        var doc = domtypeguards_1.isDocument(node) ? node : node.ownerDocument;
        var window = doc.defaultView;
        var parent;
        search_loop: while (!found) {
            offset--;
            // We've moved to a position outside the container.
            if (node === container && offset < 0) {
                return null;
            }
            parent = node.parentNode;
            switch (node.nodeType) {
                case Node.TEXT_NODE:
                    if (offset < 0 ||
                        // If the parent node is set to normal whitespace handling, then
                        // moving the caret back by one position will skip this whitespace.
                        (parent != null && parent.firstChild === node &&
                            window.getComputedStyle(parent, undefined).whiteSpace ===
                                "normal" && /^\s+$/.test(node.data.slice(0, offset)))) {
                        // We would move outside the container
                        if (parent === null || node === container) {
                            break search_loop;
                        }
                        offset = indexOf(parent.childNodes, node);
                        node = parent;
                    }
                    else {
                        found = true;
                    }
                    break;
                case Node.ELEMENT_NODE:
                    if (offset < 0 || node.childNodes.length === 0) {
                        // If we've hit the end of what we can search, stop.
                        if (parent == null || node === container) {
                            break search_loop;
                        }
                        offset = indexOf(parent.childNodes, node);
                        node = parent;
                        found = true;
                    }
                    // If node.childNodes.length === 0, the first branch would have been
                    // taken. No need to test that offset indexes to something that exists.
                    else {
                        node = node.childNodes[offset];
                        if (domtypeguards_1.isElement(node)) {
                            offset = node.childNodes.length;
                            found = !(node.childNodes.length > 0 &&
                                domtypeguards_1.isText(node.childNodes[offset - 1]));
                        }
                        else {
                            offset = node.length + 1;
                        }
                    }
                    break;
                default:
            }
        }
        if (!found) {
            return null;
        }
        if (noText && domtypeguards_1.isText(node)) {
            parent = node.parentNode;
            if (parent == null) {
                throw new Error("detached node");
            }
            offset = indexOf(parent.childNodes, node);
            node = parent;
        }
        // We've moved to a position outside the container.
        if (!container.contains(node) || (node === container && offset < 0)) {
            return null;
        }
        return [node, offset];
    }
    exports.prevCaretPosition = prevCaretPosition;
    /**
     * Given two trees A and B of DOM nodes, this function finds the node in tree B
     * which corresponds to a node in tree A. The two trees must be structurally
     * identical. If tree B is cloned from tree A, it will satisfy this
     * requirement. This function does not work with attribute nodes.
     *
     * @param treeA The root of the first tree.
     *
     * @param treeB The root of the second tree.
     *
     * @param nodeInA A node in the first tree.
     *
     * @returns The node which corresponds to ``nodeInA`` in ``treeB``.
     *
     * @throws {Error} If ``nodeInA`` is not ``treeA`` or a child of ``treeA``.
     */
    function correspondingNode(treeA, treeB, nodeInA) {
        var path = [];
        var current = nodeInA;
        while (current !== treeA) {
            var parent_1 = current.parentNode;
            if (parent_1 == null) {
                throw new Error("nodeInA is not treeA or a child of treeA");
            }
            path.unshift(indexOf(parent_1.childNodes, current));
            current = parent_1;
        }
        var ret = treeB;
        while (path.length !== 0) {
            ret = ret.childNodes[path.shift()];
        }
        return ret;
    }
    exports.correspondingNode = correspondingNode;
    /**
     * Makes a placeholder element
     *
     * @param text The text to put in the placeholder.
     *
     * @returns A node.
     */
    function makePlaceholder(text) {
        var span = document.createElement("span");
        span.className = "_placeholder";
        span.setAttribute("contenteditable", "true");
        span.textContent = text !== undefined ? text : " ";
        return span;
    }
    exports.makePlaceholder = makePlaceholder;
    /**
     * Inserts an element into text, effectively splitting the text node in
     * two. This function takes care to modify the DOM tree only once.
     *
     * @private
     *
     * @param textNode The text node that will be cut in two by the new element.
     *
     * @param index The offset into the text node where the new element is to be
     * inserted.
     *
     * @param node The node to insert. If undefined, then this function effectively
     * splits the text node into two parts.
     *
     * @param The operation must clean contiguous text nodes so as to merge them and
     * must not create empty nodes. **This code assumes that the text node into
     * which data is added is not preceded or followed by another text node and that
     * it is not empty.** In other words, if the DOM tree on which this code is used
     * does not have consecutive text nodes and no empty nodes, then after the call,
     * it still won't.
     *
     * @returns A pair containing a caret position marking the boundary between what
     * comes before the material inserted and the material inserted, and a caret
     * position marking the boundary between the material inserted and what comes
     * after. If I insert "foo" at position 2 in "abcd", then the final result would
     * be "abfoocd" and the first caret would mark the boundary between "ab" and
     * "foo" and the second caret the boundary between "foo" and "cd".
     *
     * @throws {Error} If ``textNode`` is not a text node.
     */
    function _genericInsertIntoText(textNode, index, node, clean) {
        if (clean === void 0) { clean = true; }
        // This function is meant to be called with this set to a proper
        // value.
        /* jshint validthis:true */
        if (!domtypeguards_1.isText(textNode)) {
            throw new Error("insertIntoText called on non-text");
        }
        var startCaret;
        var endCaret;
        if (clean === undefined) {
            clean = true;
        }
        // Normalize
        if (index < 0) {
            index = 0;
        }
        else if (index > textNode.length) {
            index = textNode.length;
        }
        var prev;
        var next;
        var isFragment = domtypeguards_1.isDocumentFragment(node);
        // A parent is necessarily an element.
        var parent = textNode.parentNode;
        if (parent == null) {
            throw new Error("detached node");
        }
        var textNodeAt = indexOf(parent.childNodes, textNode);
        if (clean && (node == null || (isFragment && node.childNodes.length === 0))) {
            startCaret = endCaret = [textNode, index];
        }
        else {
            var frag = document.createDocumentFragment();
            prev = document.createTextNode(textNode.data.slice(0, index));
            frag.appendChild(prev);
            if (node != null) {
                frag.appendChild(node);
            }
            next = document.createTextNode(textNode.data.slice(index));
            var nextLen = next.length;
            frag.appendChild(next);
            if (clean) {
                frag.normalize();
            }
            if (clean && index === 0) {
                startCaret = [parent, textNodeAt];
            }
            else {
                startCaret = [frag.firstChild, index];
            }
            if (clean && index === textNode.length) {
                endCaret = [parent, textNodeAt + frag.childNodes.length];
            }
            else {
                endCaret = [frag.lastChild, frag.lastChild.length - nextLen];
            }
            // tslint:disable:no-invalid-this
            this.deleteNode(textNode);
            if (this.insertFragAt !== undefined) {
                this.insertFragAt(parent, textNodeAt, frag);
            }
            else {
                while (frag.firstChild != null) {
                    this.insertNodeAt(parent, textNodeAt++, frag.firstChild);
                }
            }
            // tslint:enable:no-invalid-this
        }
        return [startCaret, endCaret];
    }
    /**
     * Inserts an element into text, effectively splitting the text node in
     * two. This function takes care to modify the DOM tree only once.
     *
     * @param textNode The text node that will be cut in two by the new element.
     *
     * @param index The offset into the text node where the new element is to be
     * inserted.
     *
     * @param node The node to insert.
     *
     * @returns A pair containing a caret position marking the boundary between what
     * comes before the material inserted and the material inserted, and a caret
     * position marking the boundary between the material inserted and what comes
     * after. If I insert "foo" at position 2 in "abcd", then the final result would
     * be "abfoocd" and the first caret would mark the boundary between "ab" and
     * "foo" and the second caret the boundary between "foo" and "cd".
     *
     * @throws {Error} If the node to insert is undefined or null.
     */
    function genericInsertIntoText(textNode, index, node) {
        // This function is meant to be called with this set to a proper
        // value.
        if (node == null) {
            throw new Error("must pass an actual node to insert");
        }
        // tslint:disable-next-line:no-invalid-this
        return _genericInsertIntoText.call(this, textNode, index, node);
    }
    exports.genericInsertIntoText = genericInsertIntoText;
    /**
     * Inserts text into a node. This function will use already existing
     * text nodes whenever possible rather than create a new text node.
     *
     * @param node The node where the text is to be inserted.
     *
     * @param index The location in the node where the text is
     * to be inserted.
     *
     * @param text The text to insert.
     *
     * @param caretAtEnd Whether the caret position returned should be placed at the
     * end of the inserted text.
     *
     * @returns The result of inserting the text.
     *
     * @throws {Error} If ``node`` is not an element or text Node type.
     */
    function genericInsertText(node, index, text, caretAtEnd) {
        if (caretAtEnd === void 0) { caretAtEnd = true; }
        // This function is meant to be called with this set to a proper
        // value.
        if (text === "") {
            return {
                node: undefined,
                isNew: false,
                caret: [node, index],
            };
        }
        var isNew = false;
        var textNode;
        var caret;
        work: 
        // tslint:disable-next-line:no-constant-condition strict-boolean-expressions
        while (true) {
            switch (node.nodeType) {
                case Node.ELEMENT_NODE:
                    var child = node.childNodes[index];
                    if (domtypeguards_1.isText(child)) {
                        // Prepend to already existing text node.
                        node = child;
                        index = 0;
                        continue work;
                    }
                    var prev = node.childNodes[index - 1];
                    if (domtypeguards_1.isText(prev)) {
                        // Append to already existing text node.
                        node = prev;
                        index = prev.length;
                        continue work;
                    }
                    // We have to create a text node
                    textNode = document.createTextNode(text);
                    isNew = true;
                    // Node is necessarily an element when we get here.
                    // tslint:disable-next-line:no-invalid-this
                    this.insertNodeAt(node, index, textNode);
                    caret = [textNode, caretAtEnd ? text.length : 0];
                    break work;
                case Node.TEXT_NODE:
                    textNode = node;
                    var pre = textNode.data.slice(0, index);
                    var post = textNode.data.slice(index);
                    // tslint:disable-next-line:no-invalid-this
                    this.setTextNodeValue(textNode, pre + text + post);
                    caret = [textNode, caretAtEnd ? index + text.length : index];
                    break work;
                default:
                    throw new Error("unexpected node type: " + node.nodeType);
            }
        }
        return {
            node: textNode,
            isNew: isNew,
            caret: caret,
        };
    }
    exports.genericInsertText = genericInsertText;
    /**
     * Deletes text from a text node. If the text node becomes empty, it is deleted.
     *
     * @param node The text node from which to delete text.
     *
     * @param index The index at which to delete text.
     *
     * @param length The length of text to delete.
     *
     * @throws {Error} If ``node`` is not a text Node type.
     */
    function deleteText(node, index, length) {
        if (!domtypeguards_1.isText(node)) {
            throw new Error("deleteText called on non-text");
        }
        node.deleteData(index, length);
        if (node.length === 0) {
            if (node.parentNode == null) {
                throw new Error("detached node");
            }
            node.parentNode.removeChild(node);
        }
    }
    exports.deleteText = deleteText;
    /**
     * This function recursively links two DOM trees through the jQuery ``.data()``
     * method. For an element in the first tree the data item named
     * "wed_mirror_node" points to the corresponding element in the second tree, and
     * vice-versa. It is presumed that the two DOM trees are perfect mirrors of each
     * other, although no test is performed to confirm this.
     */
    function linkTrees(rootA, rootB) {
        jquery_1.default.data(rootA, "wed_mirror_node", rootB);
        jquery_1.default.data(rootB, "wed_mirror_node", rootA);
        for (var i = 0; i < rootA.children.length; ++i) {
            var childA = rootA.children[i];
            var childB = rootB.children[i];
            linkTrees(childA, childB);
        }
    }
    exports.linkTrees = linkTrees;
    /**
     * This function recursively unlinks a DOM tree though the jQuery ``.data()``
     * method.
     *
     * @param root A DOM node.
     *
     */
    function unlinkTree(root) {
        jquery_1.default.removeData(root, "wed_mirror_node");
        for (var i = 0; i < root.children.length; ++i) {
            unlinkTree(root.children[i]);
        }
    }
    exports.unlinkTree = unlinkTree;
    /**
     * Returns the first descendant or the node passed to the function if the node
     * happens to not have a descendant. The function searches in document order.
     *
     * When passed ``<p><b>A</b><b><q>B</q></b></p>`` this code would return the
     * text node "A" because it has no children and is first.
     *
     * @param node The node to search.
     *
     * @returns The first node which is both first in its parent and has no
     * children.
     */
    function firstDescendantOrSelf(node) {
        if (node === undefined) {
            node = null;
        }
        while (node !== null && node.firstChild !== null) {
            node = node.firstChild;
        }
        return node;
    }
    exports.firstDescendantOrSelf = firstDescendantOrSelf;
    /**
     * Returns the last descendant or the node passed to the function if the node
     * happens to not have a descendant. The function searches in reverse document
     * order.
     *
     * When passed ``<p><b>A</b><b><q>B</q></b></p>`` this code would return the
     * text node "B" because it has no children and is last.
     *
     * @param node The node to search.
     *
     * @returns The last node which is both last in its parent and has no
     * children.
     */
    function lastDescendantOrSelf(node) {
        if (node === undefined) {
            node = null;
        }
        while (node !== null && node.lastChild !== null) {
            node = node.lastChild;
        }
        return node;
    }
    exports.lastDescendantOrSelf = lastDescendantOrSelf;
    /**
     * Removes the node. Mainly for use with the generic functions defined here.
     *
     * @param node The node to remove.
     */
    function deleteNode(node) {
        if (node.parentNode == null) {
            // For historical reasons we raise an error rather than make it a noop.
            throw new Error("detached node");
        }
        node.parentNode.removeChild(node);
    }
    exports.deleteNode = deleteNode;
    /**
     * Inserts a node at the position specified. Mainly for use with the generic
     * functions defined here.
     *
     * @param parent The node which will become the parent of the inserted node.
     *
     * @param index The position at which to insert the node into the parent.
     *
     * @param node The node to insert.
     */
    function insertNodeAt(parent, index, node) {
        var child = parent.childNodes[index];
        parent.insertBefore(node, child != null ? child : null);
    }
    /**
     * Inserts text into a node. This function will use already existing text nodes
     * whenever possible rather than create a new text node.
     *
     * @function
     *
     * @param node The node where the text is to be inserted.
     *
     * @param index The location in the node where the text is to be inserted.
     *
     * @param text The text to insert.
     *
     * @param caretAtEnd Whether to return the caret position at the end of the
     * inserted text or at the beginning. Default to ``true``.
     *
     * @returns The result of inserting the text.
     *
     * @throws {Error} If ``node`` is not an element or text Node type.
     */
    function insertText(node, index, text, caretAtEnd) {
        return genericInsertText.call({
            insertNodeAt: insertNodeAt,
            setTextNodeValue: function (textNode, value) {
                textNode.data = value;
            },
        }, node, index, text, caretAtEnd);
    }
    exports.insertText = insertText;
    var plainDOMMockup = {
        insertNodeAt: insertNodeAt,
        insertFragAt: insertNodeAt,
        deleteNode: deleteNode,
    };
    /**
     * See [[_genericInsertIntoText]].
     *
     * @private
     */
    function _insertIntoText(textNode, index, node, clean) {
        if (clean === void 0) { clean = true; }
        return _genericInsertIntoText.call(plainDOMMockup, textNode, index, node, clean);
    }
    /**
     * Inserts an element into text, effectively splitting the text node in
     * two. This function takes care to modify the DOM tree only once.
     *
     * @param textNode The text node that will be cut in two by the new element.
     *
     * @param index The offset into the text node where the new element is to be
     * inserted.
     *
     * @param node The node to insert.
     *
     * @returns A pair containing a caret position marking the boundary between what
     * comes before the material inserted and the material inserted, and a caret
     * position marking the boundary between the material inserted and what comes
     * after. If I insert "foo" at position 2 in "abcd", then the final result would
     * be "abfoocd" and the first caret would mark the boundary between "ab" and
     * "foo" and the second caret the boundary between "foo" and "cd".
     */
    function insertIntoText(textNode, index, node) {
        return genericInsertIntoText.call(plainDOMMockup, textNode, index, node);
    }
    exports.insertIntoText = insertIntoText;
    /**
     * Splits a text node into two nodes. This function takes care to modify the DOM
     * tree only once.
     *
     * @param textNode The text node to split into two text nodes.
     *
     * @param index The offset into the text node where to split.
     *
     * @returns The first element is the node before index after split and the
     * second element is the node after the index after split.
     */
    function splitTextNode(textNode, index) {
        var carets = _insertIntoText(textNode, index, undefined, false);
        return [carets[0][0], carets[1][0]];
    }
    exports.splitTextNode = splitTextNode;
    /**
     * Merges a text node with the next text node, if present. When called on
     * something which is not a text node or if the next node is not text, does
     * nothing. Mainly for use with the generic functions defined here.
     *
     * @param node The node to merge with the next node.
     *
     * @returns A caret position between the two parts that were merged, or between
     * the two nodes that were not merged (because they were not both text).
     */
    function mergeTextNodes(node) {
        var next = node.nextSibling;
        if (domtypeguards_1.isText(node) && domtypeguards_1.isText(next)) {
            var offset = node.length;
            node.appendData(next.data);
            next.parentNode.removeChild(next);
            return [node, offset];
        }
        var parent = node.parentNode;
        if (parent == null) {
            throw new Error("detached node");
        }
        return [parent, indexOf(parent.childNodes, node) + 1];
    }
    exports.mergeTextNodes = mergeTextNodes;
    /**
     * Returns the **element** nodes that contain the start and the end of the
     * range. If an end of the range happens to be in a text node, the element node
     * will be that node's parent.
     *
     * @private
     *
     * @param range An object which has the ``startContainer``, ``startOffset``,
     * ``endContainer``, ``endOffset`` attributes set. The interpretation of these
     * values is the same as for DOM ``Range`` objects. Therefore, the object passed
     * can be a DOM range.
     *
     * @returns A pair of nodes.
     *
     * @throws {Error} If a node in ``range`` is not of element or text Node types.
     */
    function nodePairFromRange(range) {
        var startNode;
        switch (range.startContainer.nodeType) {
            case Node.TEXT_NODE:
                startNode = range.startContainer.parentNode;
                if (startNode == null) {
                    throw new Error("detached node");
                }
                break;
            case Node.ELEMENT_NODE:
                startNode = range.startContainer;
                break;
            default:
                throw new Error("unexpected node type: " + range.startContainer.nodeType);
        }
        var endNode;
        switch (range.endContainer.nodeType) {
            case Node.TEXT_NODE:
                endNode = range.endContainer.parentNode;
                if (endNode == null) {
                    throw new Error("detached node");
                }
                break;
            case Node.ELEMENT_NODE:
                endNode = range.endContainer;
                break;
            default:
                throw new Error("unexpected node type: " + range.endContainer.nodeType);
        }
        return [startNode, endNode];
    }
    /**
     * Determines whether a range is well-formed. A well-formed range is one which
     * starts and ends in the same element.
     *
     * @param range An object which has the ``startContainer``,
     * ``startOffset``, ``endContainer``, ``endOffset`` attributes set. The
     * interpretation of these values is the same as for DOM ``Range``
     * objects. Therefore, the object passed can be a DOM range.
     *
     * @returns ``true`` if the range is well-formed.  ``false`` if not.
     */
    function isWellFormedRange(range) {
        var pair = nodePairFromRange(range);
        return pair[0] === pair[1];
    }
    exports.isWellFormedRange = isWellFormedRange;
    /**
     * Removes the contents between the start and end carets from the DOM tree. If
     * two text nodes become adjacent, they are merged.
     *
     * @param startCaret Start caret position.
     *
     * @param endCaret Ending caret position.
     *
     * @returns The first item is the caret position indicating where the cut
     * happened. The second item is a list of nodes, the cut contents.
     *
     * @throws {Error} If Nodes in the range are not in the same element.
     */
    // tslint:disable-next-line:max-func-body-length
    function genericCutFunction(startCaret, endCaret) {
        if (!isWellFormedRange({ startContainer: startCaret[0],
            startOffset: startCaret[1],
            endContainer: endCaret[0],
            endOffset: endCaret[1] })) {
            throw new Error("range is not well-formed");
        }
        var startContainer = startCaret[0], startOffset = startCaret[1];
        var endContainer = endCaret[0], endOffset = endCaret[1];
        var parent = startContainer.parentNode;
        if (parent == null) {
            throw new Error("detached node");
        }
        var finalCaret;
        var startText;
        if (domtypeguards_1.isText(startContainer) && startOffset === 0) {
            // We are at the start of a text node, move up to the parent.
            startOffset = indexOf(parent.childNodes, startContainer);
            startContainer = parent;
            parent = startContainer.parentNode;
            if (parent == null) {
                throw new Error("detached node");
            }
        }
        if (domtypeguards_1.isText(startContainer)) {
            var sameContainer = startContainer === endContainer;
            var startContainerOffset = indexOf(parent.childNodes, startContainer);
            var endTextOffset = sameContainer ? endOffset : startContainer.length;
            startText = parent.ownerDocument.createTextNode(startContainer.data.slice(startOffset, endTextOffset));
            // tslint:disable-next-line:no-invalid-this
            this.deleteText(startContainer, startOffset, startText.length);
            finalCaret = (startContainer.parentNode != null) ?
                [startContainer, startOffset] :
                // Selection was such that the text node was emptied.
                [parent, startContainerOffset];
            if (sameContainer) {
                // Both the start and end were in the same node, so the deleteText
                // operation above did everything needed.
                return [finalCaret, [startText]];
            }
            // Alter our start to take care of the rest
            startOffset = (startContainer.parentNode != null) ?
                // Look after the text node we just modified.
                startContainerOffset + 1 :
                // Selection was such that the text node was emptied, and thus removed. So
                // stay at the same place.
                startContainerOffset;
            startContainer = parent;
        }
        else {
            finalCaret = [startContainer, startOffset];
        }
        var endText;
        if (domtypeguards_1.isText(endContainer)) {
            parent = endContainer.parentNode;
            if (parent == null) {
                throw new Error("detached node");
            }
            var endContainerOffset = indexOf(parent.childNodes, endContainer);
            endText = parent.ownerDocument.createTextNode(endContainer.data.slice(0, endOffset));
            // tslint:disable-next-line:no-invalid-this
            this.deleteText(endContainer, 0, endOffset);
            // Alter our end to take care of the rest
            endOffset = endContainerOffset;
            endContainer = parent;
        }
        // At this point, the following checks must hold
        if (startContainer !== endContainer) {
            throw new Error("internal error in cut: containers unequal");
        }
        if (!domtypeguards_1.isElement(startContainer)) {
            throw new Error("internal error in cut: not an element");
        }
        var returnNodes = [];
        endOffset--;
        // Doing it in reverse allows us to not worry about offsets getting out of
        // whack.
        while (endOffset >= startOffset) {
            returnNodes.unshift(endContainer.childNodes[endOffset]);
            // tslint:disable-next-line:no-invalid-this
            this.deleteNode(endContainer.childNodes[endOffset]);
            endOffset--;
        }
        if (startText != null) {
            returnNodes.unshift(startText);
        }
        if (endText != null) {
            returnNodes.push(endText);
        }
        // At this point, endOffset points to the node that is before the list of
        // nodes removed.
        if (endContainer.childNodes[endOffset] != null) {
            // tslint:disable-next-line:no-invalid-this
            this.mergeTextNodes(endContainer.childNodes[endOffset]);
        }
        return [finalCaret, returnNodes];
    }
    exports.genericCutFunction = genericCutFunction;
    /**
     * Dumps a range to the console.
     *
     * @param msg A message to output in front of the range information.
     *
     * @param range The range.
     */
    function dumpRange(msg, range) {
        if (range == null) {
            // tslint:disable-next-line:no-console
            console.log(msg, "no range");
        }
        else {
            // tslint:disable-next-line:no-console
            console.log(msg, range.startContainer, range.startOffset, range.endContainer, range.endOffset);
        }
    }
    exports.dumpRange = dumpRange;
    /**
     * Dumps the current selection to the console.
     *
     * @param msg A message to output in front of the range information.
     *
     * @param win The window for which to dump selection information.
     */
    function dumpCurrentSelection(msg, win) {
        dumpRange(msg, getSelectionRange(win));
    }
    exports.dumpCurrentSelection = dumpCurrentSelection;
    /**
     * Dumps a range to a string.
     *
     * @param msg A message to output in front of the range information.
     *
     * @param range The range.
     */
    function dumpRangeToString(msg, range) {
        var ret;
        if (range == null) {
            ret = [msg, "no range"];
        }
        else {
            ret = [msg,
                range.startContainer.outerHTML,
                range.startOffset,
                range.endContainer.outerHTML,
                range.endOffset];
        }
        return ret.join(", ");
    }
    exports.dumpRangeToString = dumpRangeToString;
    /**
     * Checks whether a point is in the element's contents. This means inside the
     * element and **not** inside one of the scrollbars that the element may
     * have. The coordinates passed must be **relative to the document.** If the
     * coordinates are taken from an event, this means passing ``pageX`` and
     * ``pageY``.
     *
     * @param element The element to check.
     *
     * @param x The x coordinate **relative to the document.**
     *
     * @param y The y coordinate **relative to the document.**
     *
     * @returns ``true`` if inside, ``false`` if not.
     */
    function pointInContents(element, x, y) {
        // Convert the coordinates relative to the document to coordinates relative to
        // the element.
        var body = element.ownerDocument.body;
        // Using clientLeft and clientTop is not equivalent to using the rect.
        var rect = element.getBoundingClientRect();
        x -= rect.left + body.scrollLeft;
        y -= rect.top + body.scrollTop;
        return ((x >= 0) && (y >= 0) &&
            (x < element.clientWidth) && (y < element.clientHeight));
    }
    exports.pointInContents = pointInContents;
    /**
     * Starting with the node passed, and walking up the node's
     * parents, returns the first node that matches the selector.
     *
     * @param node The node to start with.
     *
     * @param selector The selector to use for matches.
     *
     * @param limit The algorithm will search up to this limit, inclusively.
     *
     * @returns The first element that matches the selector, or ``null`` if nothing
     * matches.
     */
    function closest(node, selector, limit) {
        if (node == null) {
            return null;
        }
        // Immediately move out of text nodes.
        if (domtypeguards_1.isText(node)) {
            node = node.parentNode;
        }
        while (node != null) {
            if (!domtypeguards_1.isElement(node)) {
                return null;
            }
            if (node.matches(selector)) {
                break;
            }
            if (node === limit) {
                node = null;
                break;
            }
            node = node.parentNode;
        }
        return node;
    }
    exports.closest = closest;
    /**
     * Starting with the node passed, and walking up the node's parents, returns the
     * first element that matches the class.
     *
     * @param node The node to start with.
     *
     * @param cl The class to use for matches.
     *
     * @param limit The algorithm will search up to this limit, inclusively.
     *
     * @returns The first element that matches the class, or ``null`` if nothing
     * matches.
     */
    function closestByClass(node, cl, limit) {
        if (node == null) {
            return null;
        }
        // Immediately move out of text nodes.
        if (domtypeguards_1.isText(node)) {
            node = node.parentNode;
        }
        while (node != null) {
            if (!domtypeguards_1.isElement(node)) {
                return null;
            }
            if (node.classList.contains(cl)) {
                break;
            }
            if (node === limit) {
                node = null;
                break;
            }
            node = node.parentNode;
        }
        return node;
    }
    exports.closestByClass = closestByClass;
    /**
     * Find a sibling matching the class.
     *
     * @param node The element whose sibling we are looking for.
     *
     * @param cl The class to use for matches.
     *
     * @returns The first sibling (in document order) that matches the class, or
     * ``null`` if nothing matches.
     */
    function siblingByClass(node, cl) {
        if (!domtypeguards_1.isElement(node)) {
            return null;
        }
        var parent = node.parentNode;
        if (parent == null) {
            return null;
        }
        var child = parent.firstElementChild;
        while (child != null && !child.classList.contains(cl)) {
            child = child.nextElementSibling;
        }
        return child;
    }
    exports.siblingByClass = siblingByClass;
    /**
     * Find children matching the class.
     *
     * @param node The element whose children we are looking for.
     *
     * @param cl The class to use for matches.
     *
     * @returns The children (in document order) that match the class.
     */
    function childrenByClass(node, cl) {
        if (!domtypeguards_1.isElement(node)) {
            return [];
        }
        var ret = [];
        var child = node.firstElementChild;
        while (child != null) {
            if (child.classList.contains(cl)) {
                ret.push(child);
            }
            child = child.nextElementSibling;
        }
        return ret;
    }
    exports.childrenByClass = childrenByClass;
    /**
     * Find child matching the class.
     *
     * @param node The element whose child we are looking for.
     *
     * @param cl The class to use for matches.
     *
     * @returns The first child (in document order) that matches the class, or
     * ``null`` if nothing matches.
     */
    function childByClass(node, cl) {
        if (!domtypeguards_1.isElement(node)) {
            return null;
        }
        var child = node.firstElementChild;
        while (child != null && !child.classList.contains(cl)) {
            child = child.nextElementSibling;
        }
        return child;
    }
    exports.childByClass = childByClass;
    var textToHTMLSpan;
    /**
     * Convert a string to HTML encoding. For instance if you want to have the
     * less-than symbol be part of the contents of a ``span`` element, it would have
     * to be escaped to ``<`` otherwise it would be interpreted as the beginning of
     * a tag. This function does this kind of escaping.
     *
     * @param text The text to convert.
     *
     * @returns The converted text.
     */
    function textToHTML(text) {
        if (textToHTMLSpan == null) {
            textToHTMLSpan = document.createElement("span");
        }
        textToHTMLSpan.textContent = text;
        return textToHTMLSpan.innerHTML;
    }
    exports.textToHTML = textToHTML;
    var separators = ",>+~ ";
    var separatorRe = new RegExp("([" + separators + "]+)");
    /**
     * Converts a CSS selector written as if it were run against the XML document
     * being edited by wed into a selector that will match the corresponding items
     * in the GUI tree. This implementation is extremely naive and likely to break
     * on complex selectors. Some specific things it cannot do:
     *
     * - Match attributes.
     *
     * - Match pseudo-elements.
     *
     * @param selector The selector to convert.
     *
     * @param namespaces The namespaces that are known. This is used to convert
     * element name prefixes to namespace URIs.
     *
     * @returns The converted selector.
     */
    function toGUISelector(selector, namespaces) {
        if (/[\]['"()]/.test(selector)) {
            throw new Error("selector is too complex");
        }
        if (/\\:/.test(selector)) {
            throw new Error("we do not accept escaped colons for now");
        }
        var parts = selector.split(separatorRe);
        var ret = [];
        for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
            var part = parts_1[_i];
            if (part.length !== 0) {
                if (separators.indexOf(part) > -1) {
                    ret.push(part);
                }
                else if (/[a-zA-Z]/.test(part[0])) {
                    part = part.trim();
                    var nameSplit = part.split(/(.#)/);
                    ret.push(util.classFromOriginalName(nameSplit[0], namespaces));
                    ret = ret.concat(nameSplit.slice(1));
                }
                else {
                    ret.push(part);
                }
            }
        }
        return ret.join("");
    }
    exports.toGUISelector = toGUISelector;
    /**
     * Allows applying simple CSS selectors on the data tree as if it were an HTML
     * tree. This is necessary because the current browsers are unable to handle tag
     * prefixes or namespaces in selectors passed to ``matches``, ``querySelector``
     * and related functions.
     *
     * The steps are:
     *
     * 1. Convert ``selector`` with [[toGUISelector]] into a selector that can be
     * applied to the GUI tree.
     *
     * 2. Convert ``node`` to a GUI node.
     *
     * 3. Apply the converted selector to the GUI node.
     *
     * 4. Convert the resulting node to a data node.
     *
     * @param node The element to use as the starting point of the query.
     *
     * @param selector The selector to use.
     *
     * @param namespaces The namespaces that are known. This is used to convert
     * element name prefixes to namespace URIs.
     *
     * @returns The resulting data node.
     */
    function dataFind(node, selector, namespaces) {
        var guiSelector = toGUISelector(selector, namespaces);
        var guiNode = jquery_1.default.data(node, "wed_mirror_node");
        var foundNodes = guiNode.querySelector(guiSelector);
        if (foundNodes == null) {
            return null;
        }
        var data = jquery_1.default.data(foundNodes, "wed_mirror_node");
        return (data != null) ? data : null;
    }
    exports.dataFind = dataFind;
    /**
     * Allows applying simple CSS selectors on the data tree as if it were an HTML
     * tree. Operates like [[dataFind]] but returns an array of nodes.
     *
     * @param node The data node to use as the starting point of the query.
     *
     * @param selector The selector to use.
     *
     * @param namespaces The namespaces that are known. This is used to convert
     * element name prefixes to namespace URIs.
     *
     * @returns The resulting data nodes.
     */
    function dataFindAll(node, selector, namespaces) {
        var guiSelector = toGUISelector(selector, namespaces);
        var guiNode = jquery_1.default.data(node, "wed_mirror_node");
        var foundNodes = guiNode.querySelectorAll(guiSelector);
        var ret = [];
        for (var i = 0; i < foundNodes.length; ++i) {
            ret.push(jquery_1.default.data(foundNodes[i], "wed_mirror_node"));
        }
        return ret;
    }
    exports.dataFindAll = dataFindAll;
    /**
     * Converts an HTML string to an array of DOM nodes. **This function is not
     * responsible for checking the HTML for security holes it is the responsibility
     * of the calling code to ensure the HTML passed is clean.**
     *
     * @param html The HTML to convert.
     *
     * @param document The document for which to create the nodes. If not specified,
     * the document will be the global ``document``.
     *
     * @returns The resulting nodes.
     */
    function htmlToElements(html, document) {
        var doc = document != null ? document : window.document;
        var frag = doc.createDocumentFragment();
        var div = doc.createElement("div");
        frag.appendChild(div);
        //
        // Entire point of this function is to convert arbitrary HTML to DOM
        // elements. It is the responsibility of the caller to make sure the HTML
        // passed is clean.
        //
        // tslint:disable-next-line:no-inner-html
        div.innerHTML = html;
        var ret = Array.prototype.slice.call(div.childNodes);
        // Clear the div so that the children cannot access the DOM objects we created
        // only to convert the HTML to DOM elements.
        while (div.firstChild !== null) {
            div.removeChild(div.firstChild);
        }
        return ret;
    }
    exports.htmlToElements = htmlToElements;
    /**
     * Gets the character immediately before the caret. The word "immediately" here
     * means that this function does not walk the DOM. If the caret is pointing into
     * an element node, it will check whether the node before the offset is a text
     * node and use it. That's the extent to which it walks the DOM.
     *
     * @param caret The caret position.
     *
     * @return The character, if it exists.
     */
    function getCharacterImmediatelyBefore(caret) {
        var node = caret[0], offset = caret[1];
        switch (node.nodeType) {
            case Node.TEXT_NODE:
                var value = node.data;
                return value[offset - 1];
            case Node.ELEMENT_NODE:
                var prev = node.childNodes[offset - 1];
                if (domtypeguards_1.isText(prev)) {
                    return prev.data[prev.data.length - 1];
                }
                break;
            default:
                throw new Error("unexpected node type: " + node.nodeType);
        }
        return undefined;
    }
    exports.getCharacterImmediatelyBefore = getCharacterImmediatelyBefore;
    /**
     * Gets the character immediately at the caret. The word "immediately" here
     * means that this function does not walk the DOM. If the caret is pointing into
     * an element node, it will check whether the node at the offset is a text
     * node and use it. That's the extent to which it walks the DOM.
     *
     * @param caret The caret position.
     *
     * @return The character, if it exists.
     */
    function getCharacterImmediatelyAt(caret) {
        var node = caret[0], offset = caret[1];
        switch (node.nodeType) {
            case Node.TEXT_NODE:
                var value = node.data;
                return value[offset];
            case Node.ELEMENT_NODE:
                var next = node.childNodes[offset];
                if (domtypeguards_1.isText(next)) {
                    return next.data[0];
                }
                break;
            default:
                throw new Error("unexpected node type: " + node.nodeType);
        }
        return undefined;
    }
    exports.getCharacterImmediatelyAt = getCharacterImmediatelyAt;
    /**
     * Determine whether an element is displayed. This function is designed to
     * handle checks in wed's GUI tree, and not as a general purpose solution. It
     * only checks whether the element or its parents have ``display`` set to
     * ``"none"``.
     *
     * @param el The DOM element for which we want to check whether it is displayed
     * or not.
     *
     * @param root The parent of ``el`` beyond which we do not search.
     *
     * @returns ``true`` if the element or any of its parents is not
     * displayed. ``false`` otherwise. If the search up the DOM tree hits ``root``,
     * then the value returned is ``false``.
     */
    function isNotDisplayed(el, root) {
        var win = el.ownerDocument.defaultView;
        // We don't put a menu for attributes that are somehow not
        // displayed.
        while (el != null && el !== root) {
            if (el.style.display === "none") {
                return true;
            }
            var display = win.getComputedStyle(el).getPropertyValue("display");
            if (display === "none") {
                return true;
            }
            el = el.parentNode;
        }
        return false;
    }
    exports.isNotDisplayed = isNotDisplayed;
    /**
     * A ``contains`` function that handles attributes. Attributes are not part of
     * the node tree and performing a ``contains`` test on them is always ``false``.
     *
     * Yet it makes sense to say that an element A contains its own attributes and
     * thus by transitivity if element A is contained by element B, then all
     * attributes of A are contained by B. This function supports the contention
     * just described.
     *
     * Usage note: this function is typically not *needed* when doing tests in the
     * GUI tree because we do not address attributes in that tree. There is,
     * however, no harm in using it where it is not strictly needed. In the data
     * tree, however, we do address attributes. Code that works with either tree
     * (e.g. the [["wed/dloc"]] module) should use this function as a general rule
     * so that it can work with either tree.
     *
     * @param container The thing which should contain in the test.
     *
     * @param contained The thing which should be contained in the test.
     *
     * @returns Whether ``container`` contains ``contained``.
     */
    function contains(container, contained) {
        if (domtypeguards_1.isAttr(contained)) {
            contained = contained.ownerElement;
        }
        return container.contains(contained);
    }
    exports.contains = contains;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  wed's URIs rect clientTop jquery util whitespace clientLeft cd
//  LocalWords:  contenteditable abcd abfoocd insertIntoText Prepend scrollbars
//  LocalWords:  deleteText jQuery getSelectionRange prev lastChild nodeType zA
//  LocalWords:  dom deleteNode mergeTextNodes jshint insertNodeAt noop treeA
//  LocalWords:  validthis insertFragAt versa nextSibling Dubeau MPL nodeInA
//  LocalWords:  Mangalam gui DOM unlinks startContainer startOffset childNodes
//  LocalWords:  endContainer endOffset genericInsertIntoText secondNode
//  LocalWords:  parentChildCompare secondOffset firstNode
//# sourceMappingURL=domutil.js.map

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Typeguards to facilitate working with TypeScript and the DOM.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // tslint:disable-next-line:no-any
    function isNode(thing) {
        return thing != null && typeof thing.nodeType === "number";
    }
    exports.isNode = isNode;
    function isElement(node) {
        return node != null && node.nodeType === Node.ELEMENT_NODE;
    }
    exports.isElement = isElement;
    function isText(node) {
        return node != null && node.nodeType === Node.TEXT_NODE;
    }
    exports.isText = isText;
    var attrNodeType = Node.ATTRIBUTE_NODE;
    // Specialized for when Node.ATTRIBUTE_NODE still exists.
    function isAttrWithType(it) {
        return it instanceof Attr || (it != null && it.nodeType === attrNodeType);
    }
    // Specialized for when the platform has removed Node.ATTRIBUTE_NODE.
    function isAttrNoType(it) {
        return it instanceof Attr;
    }
    /**
     * Determines whether the thing passed is an attribute. This function does not
     * try to be strict about what is passed to it. Pass anything that has a
     * ``nodeType`` field with a value equal to ``Node.ATTRIBUTE_NODE`` and it will
     * return ``true``, even if the thing is not actually an attribute.
     *
     * This is needed because wed works with HTML and XML DOM trees and
     * unfortunately, things have gotten murky. Once upon a time, an attribute was
     * determined by checking the ``nodeType`` field. This worked both for HTML and
     * XML nodes. This worked because attributes inherited from ``Node``, which is
     * the DOM interface that defines ``nodeType``. It was paradise.
     *
     * Then the luminaries that drive the implementation of DOM in actual browsers
     * decided that attributes were no longer really nodes. So they decided to make
     * attribute objects inherit from the ``Attr`` interface **only**. This means
     * that ``nodeType`` no longer exists for attributes. The new way to test
     * whether something is an attribute is to test with ``instanceof Attr``.
     * However, as usual, the DOM implementation for XML lags behind the HTML side
     * and on Chrome 49 (to name just one case), ``instanceof Attr`` does not work
     * on XML attributes whereas testing ``nodeType`` does.
     *
     * This function performs a test that works on HTML attributes and XML
     * attributes.
     *
     * @param it The thing to test.
     *
     * @returns ``true`` if an attribute, ``false`` if not.
     */
    var isAttr = 
    // We check that ``attrNodeType`` is not undefined because eventually
    // ``ATTRIBUTE_NODE`` will be removed from the ``Node`` interface, and then we
    // could be testing ``undefined === undefined`` for objects which are not
    // attributes, which would return ``true``. The function is not very strict
    // but it should not be too lax either.
    (attrNodeType === undefined) ? isAttrNoType : isAttrWithType;
    exports.isAttr = isAttr;
    function isDocumentFragment(node) {
        return node != null && node.nodeType === Node.DOCUMENT_FRAGMENT_NODE;
    }
    exports.isDocumentFragment = isDocumentFragment;
    function isDocument(node) {
        return node != null && node.nodeType === Node.DOCUMENT_NODE;
    }
    exports.isDocument = isDocument;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  Typeguards MPL isAttribute attrNodeType
//# sourceMappingURL=domtypeguards.js.map

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_7__;

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Subscription; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_isArray__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_isObject__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isFunction__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_tryCatch__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_errorObject__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_UnsubscriptionError__ = __webpack_require__(81);
/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_tryCatch,_util_errorObject,_util_UnsubscriptionError PURE_IMPORTS_END */






/**
 * Represents a disposable resource, such as the execution of an Observable. A
 * Subscription has one important method, `unsubscribe`, that takes no argument
 * and just disposes the resource held by the subscription.
 *
 * Additionally, subscriptions may be grouped together through the `add()`
 * method, which will attach a child Subscription to the current Subscription.
 * When a Subscription is unsubscribed, all its children (and its grandchildren)
 * will be unsubscribed as well.
 *
 * @class Subscription
 */
var Subscription = /*@__PURE__*/ (function () {
    /**
     * @param {function(): void} [unsubscribe] A function describing how to
     * perform the disposal of resources when the `unsubscribe` method is called.
     */
    function Subscription(unsubscribe) {
        /**
         * A flag to indicate whether this Subscription has already been unsubscribed.
         * @type {boolean}
         */
        this.closed = false;
        /** @internal */
        this._parent = null;
        /** @internal */
        this._parents = null;
        /** @internal */
        this._subscriptions = null;
        if (unsubscribe) {
            this._unsubscribe = unsubscribe;
        }
    }
    /**
     * Disposes the resources held by the subscription. May, for instance, cancel
     * an ongoing Observable execution or cancel any other type of work that
     * started when the Subscription was created.
     * @return {void}
     */
    Subscription.prototype.unsubscribe = function () {
        var hasErrors = false;
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parent = null;
        this._parents = null;
        // null out _subscriptions first so any child subscriptions that attempt
        // to remove themselves from this subscription will noop
        this._subscriptions = null;
        var index = -1;
        var len = _parents ? _parents.length : 0;
        // if this._parent is null, then so is this._parents, and we
        // don't have to remove ourselves from any parent subscriptions.
        while (_parent) {
            _parent.remove(this);
            // if this._parents is null or index >= len,
            // then _parent is set to null, and the loop exits
            _parent = ++index < len && _parents[index] || null;
        }
        if (Object(__WEBPACK_IMPORTED_MODULE_2__util_isFunction__["a" /* isFunction */])(_unsubscribe)) {
            var trial = Object(__WEBPACK_IMPORTED_MODULE_3__util_tryCatch__["a" /* tryCatch */])(_unsubscribe).call(this);
            if (trial === __WEBPACK_IMPORTED_MODULE_4__util_errorObject__["a" /* errorObject */]) {
                hasErrors = true;
                errors = errors || (__WEBPACK_IMPORTED_MODULE_4__util_errorObject__["a" /* errorObject */].e instanceof __WEBPACK_IMPORTED_MODULE_5__util_UnsubscriptionError__["a" /* UnsubscriptionError */] ?
                    flattenUnsubscriptionErrors(__WEBPACK_IMPORTED_MODULE_4__util_errorObject__["a" /* errorObject */].e.errors) : [__WEBPACK_IMPORTED_MODULE_4__util_errorObject__["a" /* errorObject */].e]);
            }
        }
        if (Object(__WEBPACK_IMPORTED_MODULE_0__util_isArray__["a" /* isArray */])(_subscriptions)) {
            index = -1;
            len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if (Object(__WEBPACK_IMPORTED_MODULE_1__util_isObject__["a" /* isObject */])(sub)) {
                    var trial = Object(__WEBPACK_IMPORTED_MODULE_3__util_tryCatch__["a" /* tryCatch */])(sub.unsubscribe).call(sub);
                    if (trial === __WEBPACK_IMPORTED_MODULE_4__util_errorObject__["a" /* errorObject */]) {
                        hasErrors = true;
                        errors = errors || [];
                        var err = __WEBPACK_IMPORTED_MODULE_4__util_errorObject__["a" /* errorObject */].e;
                        if (err instanceof __WEBPACK_IMPORTED_MODULE_5__util_UnsubscriptionError__["a" /* UnsubscriptionError */]) {
                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                        }
                        else {
                            errors.push(err);
                        }
                    }
                }
            }
        }
        if (hasErrors) {
            throw new __WEBPACK_IMPORTED_MODULE_5__util_UnsubscriptionError__["a" /* UnsubscriptionError */](errors);
        }
    };
    /**
     * Adds a tear down to be called during the unsubscribe() of this
     * Subscription.
     *
     * If the tear down being added is a subscription that is already
     * unsubscribed, is the same reference `add` is being called on, or is
     * `Subscription.EMPTY`, it will not be added.
     *
     * If this subscription is already in an `closed` state, the passed
     * tear down logic will be executed immediately.
     *
     * @param {TeardownLogic} teardown The additional logic to execute on
     * teardown.
     * @return {Subscription} Returns the Subscription used or created to be
     * added to the inner subscriptions list. This Subscription can be used with
     * `remove()` to remove the passed teardown logic from the inner subscriptions
     * list.
     */
    Subscription.prototype.add = function (teardown) {
        if (!teardown || (teardown === Subscription.EMPTY)) {
            return Subscription.EMPTY;
        }
        if (teardown === this) {
            return this;
        }
        var subscription = teardown;
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (typeof subscription._addParent !== 'function' /* quack quack */) {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default:
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
        var subscriptions = this._subscriptions || (this._subscriptions = []);
        subscriptions.push(subscription);
        subscription._addParent(this);
        return subscription;
    };
    /**
     * Removes a Subscription from the internal list of subscriptions that will
     * unsubscribe during the unsubscribe process of this Subscription.
     * @param {Subscription} subscription The subscription to remove.
     * @return {void}
     */
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    /** @internal */
    Subscription.prototype._addParent = function (parent) {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        if (!_parent || _parent === parent) {
            // If we don't have a parent, or the new parent is the same as the
            // current parent, then set this._parent to the new parent.
            this._parent = parent;
        }
        else if (!_parents) {
            // If there's already one parent, but not multiple, allocate an Array to
            // store the rest of the parent Subscriptions.
            this._parents = [parent];
        }
        else if (_parents.indexOf(parent) === -1) {
            // Only add the new parent to the _parents list if it's not already there.
            _parents.push(parent);
        }
    };
    /** @nocollapse */
    Subscription.EMPTY = (function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription()));
    return Subscription;
}());

function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof __WEBPACK_IMPORTED_MODULE_5__util_UnsubscriptionError__["a" /* UnsubscriptionError */]) ? err.errors : err); }, []);
}
//# sourceMappingURL=Subscription.js.map


/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SubjectSubscriber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Subject; });
/* unused harmony export AnonymousSubject */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Subscription__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_ObjectUnsubscribedError__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__SubjectSubscription__ = __webpack_require__(83);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__internal_symbol_rxSubscriber__ = __webpack_require__(55);
/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */







/**
 * @class SubjectSubscriber<T>
 */
var SubjectSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        return _this;
    }
    return SubjectSubscriber;
}(__WEBPACK_IMPORTED_MODULE_2__Subscriber__["a" /* Subscriber */]));

/**
 * @class Subject<T>
 */
var Subject = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.observers = [];
        _this.closed = false;
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype[__WEBPACK_IMPORTED_MODULE_6__internal_symbol_rxSubscriber__["a" /* rxSubscriber */]] = function () {
        return new SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype.next = function (value) {
        if (this.closed) {
            throw new __WEBPACK_IMPORTED_MODULE_4__util_ObjectUnsubscribedError__["a" /* ObjectUnsubscribedError */]();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        if (this.closed) {
            throw new __WEBPACK_IMPORTED_MODULE_4__util_ObjectUnsubscribedError__["a" /* ObjectUnsubscribedError */]();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
        if (this.closed) {
            throw new __WEBPACK_IMPORTED_MODULE_4__util_ObjectUnsubscribedError__["a" /* ObjectUnsubscribedError */]();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Subject.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new __WEBPACK_IMPORTED_MODULE_4__util_ObjectUnsubscribedError__["a" /* ObjectUnsubscribedError */]();
        }
        else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Subject.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new __WEBPACK_IMPORTED_MODULE_4__util_ObjectUnsubscribedError__["a" /* ObjectUnsubscribedError */]();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return __WEBPACK_IMPORTED_MODULE_3__Subscription__["a" /* Subscription */].EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return __WEBPACK_IMPORTED_MODULE_3__Subscription__["a" /* Subscription */].EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new __WEBPACK_IMPORTED_MODULE_5__SubjectSubscription__["a" /* SubjectSubscription */](this, subscriber);
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new __WEBPACK_IMPORTED_MODULE_1__Observable__["a" /* Observable */]();
        observable.source = this;
        return observable;
    };
    /**@nocollapse */
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(__WEBPACK_IMPORTED_MODULE_1__Observable__["a" /* Observable */]));

/**
 * @class AnonymousSubject<T>
 */
var AnonymousSubject = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return __WEBPACK_IMPORTED_MODULE_3__Subscription__["a" /* Subscription */].EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject));

//# sourceMappingURL=Subject.js.map


/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isArray; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
//# sourceMappingURL=isArray.js.map


/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EMPTY; });
/* harmony export (immutable) */ __webpack_exports__["b"] = empty;
/* unused harmony export emptyScheduled */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

/**
 * The same Observable instance returned by any call to {@link empty} without a
 * {@link Scheduler}. It is preferrable to use this over `empty()`.
 */
var EMPTY = /*@__PURE__*/ new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) { return subscriber.complete(); });
/**
 * Creates an Observable that emits no items to the Observer and immediately
 * emits a complete notification.
 *
 * <span class="informal">Just emits 'complete', and nothing else.
 * </span>
 *
 * <img src="./img/empty.png" width="100%">
 *
 * This static operator is useful for creating a simple Observable that only
 * emits the complete notification. It can be used for composing with other
 * Observables, such as in a {@link mergeMap}.
 *
 * @example <caption>Emit the number 7, then complete.</caption>
 * var result = Rx.Observable.empty().startWith(7);
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
 * var interval = Rx.Observable.interval(1000);
 * var result = interval.mergeMap(x =>
 *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
 * );
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following to the console:
 * // x is equal to the count on the interval eg(0,1,2,3,...)
 * // x will occur every 1000ms
 * // if x % 2 is equal to 1 print abc
 * // if x % 2 is not equal to 1 nothing will be output
 *
 * @see {@link create}
 * @see {@link never}
 * @see {@link of}
 * @see {@link throw}
 *
 * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
 * the emission of the complete notification.
 * @return {Observable} An "empty" Observable: emits only the complete
 * notification.
 * @static true
 * @name empty
 * @owner Observable
 * @deprecated Deprecated in favor of using EMPTY constant.
 */
function empty(scheduler) {
    return scheduler ? emptyScheduled(scheduler) : EMPTY;
}
function emptyScheduled(scheduler) {
    return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
}
//# sourceMappingURL=empty.js.map


/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return async; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AsyncAction__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsyncScheduler__ = __webpack_require__(30);
/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */


/**
 *
 * Async Scheduler
 *
 * <span class="informal">Schedule task as if you used setTimeout(task, duration)</span>
 *
 * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript
 * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating
 * in intervals.
 *
 * If you just want to "defer" task, that is to perform it right after currently
 * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),
 * better choice will be the {@link asap} scheduler.
 *
 * @example <caption>Use async scheduler to delay task</caption>
 * const task = () => console.log('it works!');
 *
 * Rx.Scheduler.async.schedule(task, 2000);
 *
 * // After 2 seconds logs:
 * // "it works!"
 *
 *
 * @example <caption>Use async scheduler to repeat task in intervals</caption>
 * function task(state) {
 *   console.log(state);
 *   this.schedule(state + 1, 1000); // `this` references currently executing Action,
 *                                   // which we reschedule with new state and delay
 * }
 *
 * Rx.Scheduler.async.schedule(task, 3000, 0);
 *
 * // Logs:
 * // 0 after 3s
 * // 1 after 4s
 * // 2 after 5s
 * // 3 after 6s
 *
 * @static true
 * @name async
 * @owner Scheduler
 */
var async = /*@__PURE__*/ new __WEBPACK_IMPORTED_MODULE_1__AsyncScheduler__["a" /* AsyncScheduler */](__WEBPACK_IMPORTED_MODULE_0__AsyncAction__["a" /* AsyncAction */]);
//# sourceMappingURL=async.js.map


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(7), __webpack_require__(6), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, jquery_1, domtypeguards_1, domutil_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    jquery_1 = __importDefault(jquery_1);
    /**
     * A class for objects that are used to mark DOM nodes as roots for the purpose
     * of using DLoc objects.
     */
    var DLocRoot = /** @class */ (function () {
        /**
         * @param el The element to which this object is associated.
         */
        function DLocRoot(node) {
            this.node = node;
            if (jquery_1.default.data(node, "wed-dloc-root") != null) {
                throw new Error("node already marked as root");
            }
            jquery_1.default.data(node, "wed-dloc-root", this);
        }
        /**
         * Converts a node to a path. A path is a string representation of the
         * location of a node relative to the root.
         *
         * @param node The node for which to construct a path.
         *
         * @returns The path.
         */
        DLocRoot.prototype.nodeToPath = function (node) {
            if (node == null) {
                throw new Error("invalid node parameter");
            }
            var root = this.node;
            if (root === node) {
                return "";
            }
            if (!domutil_1.contains(root, node)) {
                throw new Error("node is not a descendant of root");
            }
            var ret = [];
            while (node !== root) {
                var parent_1 = void 0;
                if (domtypeguards_1.isAttr(node)) {
                    parent_1 = node.ownerElement;
                    ret.unshift("@" + node.name);
                }
                else {
                    var offset = 0;
                    parent_1 = node.parentNode;
                    var offsetNode = node.previousSibling;
                    while (offsetNode !== null) {
                        var t = offsetNode.nodeType;
                        if ((t === Node.TEXT_NODE) || (t === Node.ELEMENT_NODE)) {
                            offset++;
                        }
                        offsetNode = offsetNode.previousSibling;
                    }
                    ret.unshift(String(offset));
                }
                // We checked whether the node is contained by root so we should never run
                // into a null parent.
                node = parent_1;
            }
            return ret.join("/");
        };
        /**
         * This function recovers a DOM node on the basis of a path previously created
         * by [[nodeToPath]].
         *
         * @param path The path to interpret.
         *
         * @returns The node corresponding to the path, or ``null`` if no such node
         * exists.
         *
         * @throws {Error} If given a malformed ``path``.
         */
        DLocRoot.prototype.pathToNode = function (path) {
            var root = this.node;
            if (path === "") {
                return root;
            }
            var parts = path.split(/\//);
            var parent = root;
            var attribute;
            // Set aside the last part if it is an attribute.
            if (parts[parts.length - 1][0] === "@") {
                attribute = parts.pop();
            }
            for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
                var part = parts_1[_i];
                if (/^(\d+)$/.test(part)) {
                    var index = parseInt(part);
                    var found = null;
                    var node = parent.firstChild;
                    while (node !== null && found === null) {
                        var t = node.nodeType;
                        if ((t === Node.TEXT_NODE || (t === Node.ELEMENT_NODE)) &&
                            --index < 0) {
                            found = node;
                        }
                        node = node.nextSibling;
                    }
                    if (found === null) {
                        return null;
                    }
                    parent = found;
                }
                else {
                    throw new Error("malformed path expression");
                }
            }
            if (attribute === undefined) {
                return parent;
            }
            if (!domtypeguards_1.isElement(parent)) {
                throw new Error("parent must be an element since we are looking for an attribute");
            }
            return parent.getAttributeNode(attribute.slice(1));
        };
        return DLocRoot;
    }());
    exports.DLocRoot = DLocRoot;
    function getTestLength(node) {
        var testLength;
        if (domtypeguards_1.isAttr(node)) {
            testLength = node.value.length;
        }
        else {
            switch (node.nodeType) {
                case Node.TEXT_NODE:
                    testLength = node.data.length;
                    break;
                case Node.DOCUMENT_NODE:
                case Node.ELEMENT_NODE:
                    testLength = node.childNodes.length;
                    break;
                default:
                    throw new Error("unexpected node type");
            }
        }
        return testLength;
    }
    /**
     * ``DLoc`` objects model locations in a DOM tree. Although the current
     * implementation does not enforce this, **these objects are to be treated as
     * immutable**. These objects have ``node`` and ``offset`` properties that are
     * to be interpreted in the same way DOM locations usually are: the ``node`` is
     * the location of a DOM ``Node`` in a DOM tree (or an attribute), and
     * ``offset`` is a location in that node. ``DLoc`` objects are said to have a
     * ``root`` relative to which they are positioned.
     *
     * A DLoc object can point to an offset inside an ``Element``, inside a ``Text``
     * node or inside an ``Attr``.
     *
     * Use [[makeDLoc]] to make ``DLoc`` objects. Calling this constructor directly
     * is not legal.
     *
     */
    var DLoc = /** @class */ (function () {
        /**
         * @param root The root of the DOM tree to which this DLoc applies.
         *
         * @param node The node of the location.
         *
         * @param offset The offset of the location.
         */
        function DLoc(root, node, offset) {
            this.root = root;
            this.node = node;
            this.offset = offset;
        }
        Object.defineProperty(DLoc.prototype, "pointedNode", {
            /**
             * This is the node to which this location points. For locations pointing to
             * attributes and text nodes, that's the same as [[node]]. For locations
             * pointing to an element, that's the child to which the ``node, offset`` pair
             * points. Since this pair may point after the last child of an element, the
             * child obtained may be ``undefined``.
             */
            get: function () {
                if (domtypeguards_1.isElement(this.node)) {
                    return this.node.childNodes[this.offset];
                }
                return this.node;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates a copy of the location.
         */
        DLoc.prototype.clone = function () {
            return new DLoc(this.root, this.node, this.offset);
        };
        DLoc.makeDLoc = function (root, node, offset, normalize) {
            if (node instanceof Array) {
                normalize = offset;
                _a = node, node = _a[0], offset = _a[1];
            }
            if (normalize === undefined) {
                normalize = false;
            }
            if (node == null) {
                return undefined;
            }
            if (offset === undefined) {
                var parent_2 = node.parentNode;
                if (parent_2 === null) {
                    throw new Error("trying to get parent of a detached node");
                }
                offset = domutil_1.indexOf(parent_2.childNodes, node);
                node = parent_2;
            }
            else {
                if (typeof offset !== "number") {
                    throw new Error("offset is not a number, somehow");
                }
                if (offset < 0) {
                    if (normalize) {
                        offset = 0;
                    }
                    else {
                        throw new Error("negative offsets are not allowed");
                    }
                }
            }
            if (root instanceof DLocRoot) {
                root = root.node;
            }
            else if (jquery_1.default.data(root, "wed-dloc-root") == null) {
                throw new Error("root has not been marked as a root");
            }
            if (!domutil_1.contains(root, node)) {
                throw new Error("node not in root");
            }
            var testLength = getTestLength(node);
            if (offset > testLength) {
                if (normalize) {
                    offset = testLength;
                }
                else {
                    throw new Error("offset greater than allowable value");
                }
            }
            return new DLoc(root, node, offset);
            var _a;
        };
        // @ts-ignore
        DLoc.mustMakeDLoc = function (root, node, 
        // @ts-ignore
        offset, 
        // @ts-ignore
        normalize) {
            var nodeToCheck = node;
            if (nodeToCheck instanceof Array) {
                nodeToCheck = nodeToCheck[0];
            }
            if (nodeToCheck == null) {
                throw new Error("called mustMakeDLoc with an absent node");
            }
            return this.makeDLoc.apply(this, arguments);
        };
        DLoc.prototype.make = function (node, offset) {
            if (node instanceof Array) {
                return DLoc.mustMakeDLoc(this.root, node);
            }
            if (offset !== undefined && typeof offset !== "number") {
                throw new Error("if the 1st argument is a node, the 2nd must be a number or undefined");
            }
            return DLoc.mustMakeDLoc(this.root, node, offset);
        };
        /**
         * Make a new location with the same node as the current location but with a
         * new offset.
         *
         * @param offset The offset of the new location.
         *
         * @returns The new location.
         */
        DLoc.prototype.makeWithOffset = function (offset) {
            if (offset === this.offset) {
                return this;
            }
            return this.make(this.node, offset);
        };
        /**
         * Make a new location. Let's define "current node" as the node of the current
         * location. The new location points to the current node. (The offset of the
         * current location is effectively ignored.) That is, the new location has for
         * node the parent node of the current node, and for offset the offset of the
         * current node in its parent.
         *
         * @returns The location in the parent, as described above.
         *
         * @throws {Error} If the current node has no parent.
         */
        DLoc.prototype.getLocationInParent = function () {
            var node = this.node;
            var parent = node.parentNode;
            if (parent === null) {
                throw new Error("trying to get parent of a detached node");
            }
            return this.make(parent, domutil_1.indexOf(parent.childNodes, node));
        };
        /**
         * Same as [[getLocationInParent]] except that the location points *after* the
         * current node.
         *
         * @returns The location in the parent, as described above.
         *
         * @throws {Error} If the current node has no parent.
         */
        DLoc.prototype.getLocationAfterInParent = function () {
            var node = this.node;
            var parent = node.parentNode;
            if (parent === null) {
                throw new Error("trying to get parent of a detached node");
            }
            return this.make(parent, domutil_1.indexOf(parent.childNodes, node) + 1);
        };
        /**
         * Converts the location to an array. This array contains only the node and
         * offset of the location. The root is not included because this method is of
         * use to pass data to functions that work with raw DOM information. These
         * functions do not typically expect a root.
         *
         * @returns The node and offset pair.
         */
        DLoc.prototype.toArray = function () {
            return [this.node, this.offset];
        };
        DLoc.prototype.makeRange = function (other) {
            if (domtypeguards_1.isAttr(this.node)) {
                throw new Error("cannot make range from attribute node");
            }
            if (!this.isValid()) {
                return undefined;
            }
            if (other === undefined) {
                var range = this.node.ownerDocument.createRange();
                range.setStart(this.node, this.offset);
                return range;
            }
            if (domtypeguards_1.isAttr(other.node)) {
                throw new Error("cannot make range from attribute node");
            }
            if (!other.isValid()) {
                return undefined;
            }
            return domutil_1.rangeFromPoints(this.node, this.offset, other.node, other.offset);
        };
        /**
         * Make a range from this location. If ``other`` is not specified, the range
         * starts and ends with this location. If ``other`` is specified, the range
         * goes from this location to the ``other`` location.
         *
         * @param other The other location to use.
         *
         * @returns The range.
         */
        DLoc.prototype.makeDLocRange = function (other) {
            if (!this.isValid()) {
                return undefined;
            }
            if (other === undefined) {
                // tslint:disable-next-line:no-use-before-declare
                return new DLocRange(this, this);
            }
            if (!other.isValid()) {
                return undefined;
            }
            // tslint:disable-next-line:no-use-before-declare
            return new DLocRange(this, other);
        };
        /**
         * Like [[makeDLocRange]] but throws if it cannot make a range, rather than
         * return ``undefined``.
         */
        DLoc.prototype.mustMakeDLocRange = function (other) {
            var ret = other !== undefined ?
                this.makeDLocRange(other) : this.makeDLocRange();
            if (ret === undefined) {
                throw new Error("cannot make a range");
            }
            return ret;
        };
        /**
         * Verifies whether the ``DLoc`` object points to a valid location. The
         * location is valid if its ``node`` is a child of its ``root`` and if its
         * ``offset`` points inside the range of children of its ``node``.
         *
         * @returns {boolean} Whether the object is valid.
         */
        DLoc.prototype.isValid = function () {
            var node = this.node;
            // We do not check that offset is greater than 0 as this would be
            // done while constructing the object.
            return this.root.contains(domtypeguards_1.isAttr(node) ? node.ownerElement : node) &&
                this.offset <= getTestLength(node);
        };
        /**
         * Creates a new ``DLoc`` object with an offset that is valid. It does this by
         * "normalizing" the offset, i.e. by setting the offset to its maximum
         * possible value.
         *
         * @returns The normalized location. This will be ``this``, if it so happens
         * that ``this`` is already valid.
         */
        DLoc.prototype.normalizeOffset = function () {
            var node = this.node;
            var testLength = getTestLength(node);
            if (this.offset > testLength) {
                return this.make(node, testLength);
            }
            return this;
        };
        /**
         * @returns Whether ``this`` and ``other`` are equal. They are equal if they
         * are the same object or if they point to the same location.
         */
        DLoc.prototype.equals = function (other) {
            if (other == null) {
                return false;
            }
            return this === other ||
                (this.node === other.node) &&
                    (this.offset === other.offset);
        };
        /**
         * Compare two locations. Note that for attribute ordering, this class
         * arbitrarily decides that the order of two attributes on the same element is
         * the same as the order of their ``name`` fields as if they were sorted in an
         * array with ``Array.prototype.sort()``. This differs from how
         * ``Node.compareDocumentPosition`` determines the order of attributes. We
         * want something stable, which is not implementation dependent. In all other
         * cases, the nodes are compared in the same way
         * ``Node.compareDocumentPosition`` does.
         *
         * @param other The other location to compare this one with.
         *
         * @returns ``0`` if the locations are the same. ``-1`` if this location comes
         * first. ``1`` if the other location comes first.
         *
         * @throws {Error} If the nodes are disconnected.
         */
        DLoc.prototype.compare = function (other) {
            if (this.equals(other)) {
                return 0;
            }
            var _a = this, thisNode = _a.node, thisOffset = _a.offset;
            var otherNode = other.node, otherOffset = other.offset;
            // We need to handle attributes specially, because
            // ``compareDocumentPosition`` does not work reliably with attribute nodes.
            if (domtypeguards_1.isAttr(thisNode)) {
                if (domtypeguards_1.isAttr(otherNode)) {
                    // We do not want an implementation-specific order when we compare
                    // attributes. So we perform our own test.
                    if (thisNode.ownerElement === otherNode.ownerElement) {
                        // It is not clear what the default comparison function is, so create
                        // a temporary array and sort.
                        var names = [thisNode.name, otherNode.name].sort();
                        // 0 is not a possible value here because it is not possible for
                        // thisNode.name to equal otherNode.name.
                        return names[0] === thisNode.name ? -1 : 1;
                    }
                }
                var owner = thisNode.ownerElement;
                if (owner === other.pointedNode) {
                    // This location points into an attribute that belongs to the node
                    // that other points to. So this is later than other.
                    return 1;
                }
                // If we get here we'll rely on ``compareDocumentPosition`` but using the
                // position of the element that has the attribute.
                thisNode = owner.parentNode;
                thisOffset = domutil_1.indexOf(thisNode.childNodes, owner);
            }
            if (domtypeguards_1.isAttr(otherNode)) {
                var owner = otherNode.ownerElement;
                if (owner === this.pointedNode) {
                    // The other location points into an attribute that belongs to the node
                    // that this location points to. So this is earlier than other.
                    return -1;
                }
                // If we get here we'll rely on ``compareDocumentPosition`` but using the
                // position of the element that has the attribute.
                otherNode = owner.parentNode;
                otherOffset = domutil_1.indexOf(otherNode.childNodes, owner);
            }
            return domutil_1.comparePositions(thisNode, thisOffset, otherNode, otherOffset);
        };
        return DLoc;
    }());
    exports.DLoc = DLoc;
    /**
     * Finds the root under which a node resides. Note that in cases where an
     * undefined result is useless, you should use [[getRoot]] instead.
     *
     * @param node The node whose root we want.
     *
     * @returns The root object, or ``undefined`` if the root can't be found.
     */
    function findRoot(node) {
        while (node != null) {
            if (domtypeguards_1.isElement(node) || domtypeguards_1.isDocument(node)) {
                var root = jquery_1.default.data(node, "wed-dloc-root");
                if (root != null) {
                    return root;
                }
            }
            node = node.parentNode;
        }
        return undefined;
    }
    exports.findRoot = findRoot;
    /**
     * Gets the root under which a node resides.
     *
     * @param node The node whose root we want.
     *
     * @returns The root node.
     *
     * @throws {Error} If the root cannot be found.
     */
    function getRoot(node) {
        var ret = findRoot(node);
        if (ret == null) {
            throw new Error("no root found");
        }
        return ret;
    }
    exports.getRoot = getRoot;
    /**
     * Represents a range spanning locations indicated by two [[DLoc]] objects.
     * Though this is not enforced at the VM level, objects of this class are to be
     * considered immutable.
     */
    var DLocRange = /** @class */ (function () {
        /**
         * @param start The start of the range.
         * @param end The end of the range.
         */
        function DLocRange(start, end) {
            this.start = start;
            this.end = end;
            if (start.root !== end.root) {
                throw new Error("the start and end must be in the same document");
            }
        }
        Object.defineProperty(DLocRange.prototype, "collapsed", {
            /** Whether this range is collapsed. */
            get: function () {
                return this.start.equals(this.end);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Make a DOM range.
         *
         * @returns The range. Or ``undefined`` if either the start or end are not
         * pointing to valid positions.
         *
         * @throws {Error} If trying to make a range from an attribute node. DOM
         * ranges can only point into elements or text nodes.
         */
        DLocRange.prototype.makeDOMRange = function () {
            if (domtypeguards_1.isAttr(this.start.node)) {
                throw new Error("cannot make range from attribute node");
            }
            if (!this.start.isValid()) {
                return undefined;
            }
            if (domtypeguards_1.isAttr(this.end.node)) {
                throw new Error("cannot make range from attribute node");
            }
            if (!this.end.isValid()) {
                return undefined;
            }
            return domutil_1.rangeFromPoints(this.start.node, this.start.offset, this.end.node, this.end.offset).range;
        };
        /**
         * Same as [[makeDOMRange]] but throws instead of returning ``undefined``.
         */
        DLocRange.prototype.mustMakeDOMRange = function () {
            var ret = this.makeDOMRange();
            if (ret === undefined) {
                throw new Error("cannot make a range");
            }
            return ret;
        };
        /**
         * @returns Whether ``this`` and ``other`` are equal. They are equal if they
         * are the same object or if they have equal start and ends.
         */
        DLocRange.prototype.equals = function (other) {
            if (other == null) {
                return false;
            }
            return this === other ||
                (this.start.equals(other.start) && this.end.equals(other.end));
        };
        /**
         * @returns Whether the two endpoints of the range are valid.
         */
        DLocRange.prototype.isValid = function () {
            return this.start.isValid() && this.end.isValid();
        };
        /**
         * @param loc The location to test.
         *
         * @returns Whether a location is within the range.
         */
        DLocRange.prototype.contains = function (loc) {
            var startTest = this.start.compare(loc);
            var endTest = this.end.compare(loc);
            // Reversed ranges are valid. So one end must be lower or equal to loc, and
            // the other end must be greater or equal to loc. The following test ensures
            // this. (If both are -1, then the result is > 0, and if both are 1, then
            // then result > 0.)
            return startTest * endTest <= 0;
        };
        return DLocRange;
    }());
    exports.DLocRange = DLocRange;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  makeDLoc DLoc domutil jquery MPL dloc mustMakeDLoc nd thisNode
//  LocalWords:  otherNode compareDocumentPosition makeDOMRange
//# sourceMappingURL=dloc.js.map

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return errorObject; });
// typeof any so that it we don't have to cast when comparing a result to the error object
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var errorObject = { e: {} };
//# sourceMappingURL=errorObject.js.map


/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isScheduler;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}
//# sourceMappingURL=isScheduler.js.map


/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = map;
/* unused harmony export MapOperator */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/**
 * Applies a given `project` function to each value emitted by the source
 * Observable, and emits the resulting values as an Observable.
 *
 * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
 * it passes each source value through a transformation function to get
 * corresponding output values.</span>
 *
 * <img src="./img/map.png" width="100%">
 *
 * Similar to the well known `Array.prototype.map` function, this operator
 * applies a projection to each value and emits that projection in the output
 * Observable.
 *
 * @example <caption>Map every click to the clientX position of that click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks.map(ev => ev.clientX);
 * positions.subscribe(x => console.log(x));
 *
 * @see {@link mapTo}
 * @see {@link pluck}
 *
 * @param {function(value: T, index: number): R} project The function to apply
 * to each `value` emitted by the source Observable. The `index` parameter is
 * the number `i` for the i-th emission that has happened since the
 * subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to define what `this` is in the
 * `project` function.
 * @return {Observable<R>} An Observable that emits the values from the source
 * Observable transformed by the given `project` function.
 * @method map
 * @owner Observable
 */
function map(project, thisArg) {
    return function mapOperation(source) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return source.lift(new MapOperator(project, thisArg));
    };
}
var MapOperator = /*@__PURE__*/ (function () {
    function MapOperator(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
}());

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MapSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.count = 0;
        _this.thisArg = thisArg || _this;
        return _this;
    }
    // NOTE: This looks unoptimized, but it's actually purposefully NOT
    // using try/catch optimizations.
    MapSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return MapSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=map.js.map


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Various utilities for wed.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(128)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, diff_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Calculates the distance on the basis of two deltas. This would typically be
     * called with the difference of X coordinates and the difference of Y
     * coordinates.
     *
     * @param delta1 The first delta.
     *
     * @param delta2 The second delta.
     *
     * @returns The distance.
     */
    function distFromDeltas(delta1, delta2) {
        return Math.sqrt(delta1 * delta1 + delta2 * delta2);
    }
    exports.distFromDeltas = distFromDeltas;
    /**
     * Measures the distance of a point from a rectangle. If the point is in the
     * rectangle or touches it, the distance is 0. In the nomenclature below, left
     * and right are on the X axis and top and bottom on the Y axis.
     *
     * @param x The x coordinate of the point.
     *
     * @param y The y coordinate of the point.
     *
     * @param left The left coordinate of the rectangle.
     *
     * @param top The top coordinate of the rectangle.
     *
     * @param right The right coordinate of the rectangle.
     *
     * @param bottom The bottom coordinate of the rectangle.
     *
     * @returns The distance.
     */
    function distFromRect(x, y, left, top, right, bottom) {
        var topDelta = y - top;
        var leftDelta = x - left;
        var bottomDelta = y - bottom;
        var rightDelta = x - right;
        var above = topDelta < 0;
        var below = bottomDelta > 0;
        // Neologism used to avoid conflict with left above.
        var lefter = leftDelta < 0;
        var righter = rightDelta > 0;
        var deltaX = lefter ? leftDelta : (righter ? rightDelta : 0);
        var deltaY = above ? topDelta : (below ? bottomDelta : 0);
        return distFromDeltas(deltaX, deltaY);
    }
    exports.distFromRect = distFromRect;
    /**
     * Measures the absolute horizontal and vertical distances of a point from a
     * rectangle. If the point is in the rectangle or touches it, the distance is
     * 0. In the nomenclature below, left and right are on the X axis and top and
     * bottom on the Y axis.
     *
     * @param x The x coordinate of the point.
     *
     * @param y The y coordinate of the point.
     *
     * @param left The left coordinate of the rectangle.
     *
     * @param top The top coordinate of the rectangle.
     *
     * @param right The right coordinate of the rectangle.
     *
     * @param bottom The bottom coordinate of the rectangle.
     *
     * @returns The distance.
     */
    function distsFromRect(x, y, left, top, right, bottom) {
        var topDelta = y - top;
        var leftDelta = x - left;
        var bottomDelta = y - bottom;
        var rightDelta = x - right;
        var above = topDelta < 0;
        var below = bottomDelta > 0;
        // Neologism used to avoid conflict with left above.
        var lefter = leftDelta < 0;
        var righter = rightDelta > 0;
        var deltaX = lefter ? leftDelta : (righter ? rightDelta : 0);
        var deltaY = above ? topDelta : (below ? bottomDelta : 0);
        return { x: Math.abs(deltaX), y: Math.abs(deltaY) };
    }
    exports.distsFromRect = distsFromRect;
    /**
     * Escape character in CSS class that could cause trouble in CSS
     * selectors. *This is not a general solution.* It supports enough for the needs
     * of wed.
     *
     * @param cls The class
     *
     * @returns The escaped class.
     */
    function escapeCSSClass(cls) {
        // We should investigate replacing this with CSS.escape whenever the spec for
        // that function becomes stable.
        return cls.replace(/([\][\\/!"#$%&'()*+,.:;<=>?@^`{|}~])/g, "\\$1");
    }
    exports.escapeCSSClass = escapeCSSClass;
    /**
     * Get the original element name of a node created for wed's data tree.
     *
     * @param el The element whose name we want.
     *
     * @returns The name.
     */
    function getOriginalName(el) {
        // The original name is the first class name of the element that was created.
        return el.classList[0];
    }
    exports.getOriginalName = getOriginalName;
    /**
     * Makes a class string for a node in wed's data tree. The string is meant to be
     * used for the corresponding node in wed's GUI tree.
     *
     * @param name The original element name.
     *
     * @param namespaces The namespaces that are known. This is used to convert
     * element name prefixes to namespace URIs.
     *
     * @returns The class string.
     */
    function classFromOriginalName(name, namespaces) {
        // Special case if we want to match all
        if (name === "*") {
            return "._real";
        }
        var _a = name.split(":"), prefix = _a[0], localName = _a[1];
        if (localName === undefined) {
            localName = prefix;
            prefix = "";
        }
        var ns = namespaces[prefix];
        if (ns === undefined) {
            throw new Error("prefix " + prefix + " is not defined in namespaces");
        }
        // We do not output `.${escapeCSSClass(name)}` because that's redundant for a
        // search.
        return "._local_" + escapeCSSClass(localName) + "._xmlns_" + escapeCSSClass(ns) + "._real";
    }
    exports.classFromOriginalName = classFromOriginalName;
    /**
     * Convert a string to a sequence of char codes. Each char code will be preceded
     * by the character ``x``. The char codes are converted to hexadecimal.
     *
     * This is meant to be used by wed's internal code.
     *
     * @private
     *
     * @param str The string to encode.
     *
     * @returns The encoded string.
     */
    function stringToCodeSequence(str) {
        var encoded = "";
        for (var _i = 0, str_1 = str; _i < str_1.length; _i++) {
            var char = str_1[_i];
            encoded += "x" + char.charCodeAt(0).toString(16);
        }
        return encoded;
    }
    exports.stringToCodeSequence = stringToCodeSequence;
    var ENCODED_RE = /^(?:x[a-f0-9]+)+$/;
    /**
     * Convert a code sequence created with [[stringToCodeSequence]] to a string.
     *
     * This is meant to be used by wed's internal code.
     *
     * @private
     *
     * @param str The sequence to decode.
     *
     * @returns The decoded string.
     */
    function codeSequenceToString(str) {
        if (!ENCODED_RE.test(str)) {
            throw new Error("badly encoded string");
        }
        var decoded = "";
        // We slice to skip the initial x, and not get a first part which is "".
        for (var _i = 0, _a = str.slice(1).split("x"); _i < _a.length; _i++) {
            var code = _a[_i];
            decoded += String.fromCharCode(parseInt(code, 16));
        }
        return decoded;
    }
    exports.codeSequenceToString = codeSequenceToString;
    /**
     * Encode the difference between an original string, and a modified string. This
     * is a specialized function designed to handle the difference between the name
     * we want to set for an attribute, and the name that HTML actually records.
     *
     * This function records the difference as a series of steps to recover the
     * original string:
     *
     * - ``g[number]`` means take ``[number]`` characters from the modified string
     *   as they are.
     *
     * - ``m[number]`` means remove ``[number]`` characters from the modified
     *   string.
     *
     * - ``p[codes]`` means add the codes ``[codes]`` to the modified string.
     *
     * - ``u[number]`` means convert ``[number]`` characters from the modified
     *   string to uppercase.
     *
     * This is meant to be used by wed's internal code.
     *
     * @private
     *
     * @param orig The original.
     *
     * @param modified The modified string.
     *
     * @returns The difference, encoded as a string.
     */
    function encodeDiff(orig, modified) {
        var diff = "";
        if (orig !== modified) {
            var results = diff_1.diffChars(modified, orig);
            var last = results[results.length - 1];
            for (var ix = 0; ix < results.length; ++ix) {
                var result = results[ix];
                if (result.added === true) {
                    diff += "p" + stringToCodeSequence(result.value);
                }
                else if (result.removed === true) {
                    var next = results[ix + 1];
                    if ((next !== undefined && next.added === true) &&
                        (result.value.toUpperCase() === next.value)) {
                        diff += "u" + result.value.length;
                        ix++;
                    }
                    else {
                        diff += "m" + result.value.length;
                    }
                }
                else {
                    // We don't output this if it is last, as it is implied.
                    if (result !== last) {
                        diff += "g" + result.value.length;
                    }
                }
            }
        }
        return diff;
    }
    exports.encodeDiff = encodeDiff;
    var OP_RE = /^(?:p([xa-f0-9]+))|(?:[gmu](\d+))/;
    /**
     * Decode the diff produced with [[encodeDiff]].
     *
     * This is meant to be used by wed's internal code.
     *
     * @private
     *
     * @param name The name, after encoding.
     *
     * @param diff The diff.
     *
     * @returns The decoded attribute name.
     */
    function decodeDiff(name, diff) {
        if (diff === "") {
            return name;
        }
        var nameIndex = 0;
        var result = "";
        while (diff.length > 0) {
            var match = diff.match(OP_RE);
            if (match !== null) {
                diff = diff.slice(match[0].length);
                var op = match[0][0];
                switch (op) {
                    case "g":
                    case "m":
                    case "u":
                        var length_1 = parseInt(match[2]);
                        switch (op) {
                            case "g":
                                result += name.slice(nameIndex, nameIndex + length_1);
                                break;
                            case "u":
                                result += name.slice(nameIndex, nameIndex + length_1).toUpperCase();
                                break;
                            case "m":
                                break;
                            default:
                                throw new Error("internal error: unexpected op " + op);
                        }
                        nameIndex += length_1;
                        break;
                    case "p":
                        result += codeSequenceToString(match[1]);
                        break;
                    default:
                        throw new Error("unexpected operator " + op);
                }
            }
            // Nothing matched
            if (match === null) {
                throw new Error("cannot parse diff: " + diff);
            }
        }
        // It is implied that the rest of the name is added.
        result += name.slice(nameIndex);
        return result;
    }
    exports.decodeDiff = decodeDiff;
    /**
     * Transforms an attribute name from wed's data tree to the original attribute
     * name before the data was transformed for use with wed. This reverses the
     * transformation done with [[encodeAttrName]].
     *
     * @param encoded The encoded name.
     *
     * @returns A structure containing the decoded name the optional qualifier.
     */
    function decodeAttrName(encoded) {
        var match = /^data-wed-(.+)-([^-]*?)$/.exec(encoded);
        if (match === null) {
            throw new Error("malformed name");
        }
        // tslint:disable-next-line:prefer-const
        var name = match[1], diff = match[2];
        var qualifier;
        // qualifier
        if (name[0] === "-") {
            var parts = /^-(.+?)-(.+)$/.exec(name);
            if (parts === null) {
                throw new Error("malformed name");
            }
            qualifier = parts[1], name = parts[2];
        }
        name = name.replace(/---/, ":").replace(/---(-+)/g, "--$1");
        if (diff !== "") {
            name = decodeDiff(name, diff);
        }
        return { name: name, qualifier: qualifier };
    }
    exports.decodeAttrName = decodeAttrName;
    /**
     * Transforms an attribute name from its unencoded form in the original XML data
     * (before transformation for use with wed) to its encoded name.
     *
     * The first thing this algorithm does is compute a difference between the
     * original XML name and how HTML will record it. The issue here is that XML
     * allows more characters in a name than what HTML allows and doing
     * ``setAttribute(name, value)`` will silently convert ``name`` to something
     * HTML likes. The issue most frequently encountered is that uppercase letters
     * are encoded as lowercase. This is especially vexing seeing as XML allows the
     * attribute names ``x`` and ``X`` to exist as different attributes, whereas
     * HTML does not. For HTML ``x`` and ``X`` are the same attribute. This function
     * records any differences between the original name and the way HTML records it
     * with a diff string that is appended to the final name after a dash. If
     * nothing appears after the final dash, then the HTML name and the XML name are
     * the same.
     *
     * A sequence of three dashes or more is converted by adding another dash. (So
     * sequences of single dash, or a pair of dashes remain unchanged. But all
     * sequences of 3 dashes or more gets an additional dash.)
     *
     * A colon (``:``) is converted to three dashes ``---``.
     *
     * After transformation above the name is prepended with ``data-wed-`` and it is
     * appended with the diff described above.
     *
     * Examples:
     *
     * - ``foo:bar`` becomes ``data-wed-foo---bar-``. Note how the diff is
     *    empty, because ``foo:bar`` can be represented as-is in HTML.
     *
     * - ``MOO:aBc---def`` becomes ``data-wed-moo---abc----def-u3g2u1``. Note the
     *   diff suffix, which allows restoring the orignal case.
     *
     * When ``qualifier`` is used, the qualifier is added just after ``data-wed-``
     * and is prepended and appended with a dash. So ``foo:bar`` with the qualifier
     * ``ns`` would become ``data-wed--ns-foo---bar-``. The addition of a dash in
     * front of the qualifier makes it impossible to confuse an encoding that has a
     * qualifier from one that does not, as XML attribute names are not allowed to
     * start with a dash.
     *
     * @param name The unencoded name (i.e. the attribute name as it is in XML).
     *
     * @param qualifier An optional qualifier.
     *
     * @returns The encoded name.
     */
    function encodeAttrName(name, qualifier) {
        var el = document.createElement("div");
        // We havve to add the "data-" prefix to guard against some problems. IE11,
        // for instance, will choke if we set an attribute with the name "style". It
        // simply does not generally allow ``setAttribute("style", ...)``. Adding the
        // prefix, works around the problem. And we know "data-" will not be mangled,
        // so we can just strip it afterwards.
        el.setAttribute("data-" + name, "");
        // Slice it to remove the "data-" prefix.
        var attrName = el.attributes[0].name.slice(5);
        var sanitized = attrName.replace(/--(-+)/g, "---$1").replace(/:/, "---");
        qualifier = qualifier === undefined ? "" : "-" + qualifier + "-";
        return "data-wed-" + qualifier + sanitized + "-" + encodeDiff(name, attrName);
    }
    exports.encodeAttrName = encodeAttrName;
    /**
     * Determines whether a ``data-wed-`` attribute corresponds to an XML attribute.
     */
    function isXMLAttrName(name) {
        return /^data-wed-(?!-)/.test(name);
    }
    exports.isXMLAttrName = isXMLAttrName;
    /**
     * Gets all the attributes of the node that were "original" attributes in the
     * XML document being edited, by opposition to those attributes that exist only
     * for HTML rendering.
     *
     * @param node The node to process.
     *
     * @returns An object whose keys are attribute names and values are attribute
     * values.
     */
    function getOriginalAttributes(node) {
        var original = Object.create(null);
        var attributes = node.attributes;
        for (var i = 0; i < attributes.length; ++i) {
            var attr = attributes[i];
            var localName = attr.localName;
            if (isXMLAttrName(localName)) {
                original[decodeAttrName(localName).name] = attr.value;
            }
        }
        return original;
    }
    exports.getOriginalAttributes = getOriginalAttributes;
    var nextID = 0;
    /**
     * Generates a new generic element id. This id is guaranteed to be unique for
     * the current run of wed. The ids generated by this function are meant to be
     * eventually replaced by something more permanent.
     *
     * @returns An element id.
     */
    function newGenericID() {
        return "WED-ID-" + ++nextID;
    }
    exports.newGenericID = newGenericID;
    /**
     * @param ev A DOM event.
     *
     * @returns ``true`` if Control, Alt or Meta were held when the event was
     * created. Otherwise, ``false``.
     */
    function anySpecialKeyHeld(ev) {
        var anyEv = ev;
        return anyEv.altKey || anyEv.ctrlKey || anyEv.metaKey;
    }
    exports.anySpecialKeyHeld = anySpecialKeyHeld;
    /**
     * **This function is meant to be used in debugging.** It creates a
     * ``selenium_log`` object on ``window`` which is an array that contains the
     * series of ``obj`` passed to this function. Remember that ultimately
     * ``selenium_log`` is going to be serialized by Selenium. So go easy on what
     * you put in there and be aware that Selenium may have bugs that prevent
     * serialization of certain objects.
     *
     * @param args Objects to log.
     */
    /* tslint:disable:no-any no-unsafe-any */
    function seleniumLog() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var w = window;
        if (w.selenium_log === undefined) {
            w.selenium_log = [];
        }
        w.selenium_log.push.apply(w.selenium_log, args);
    }
    exports.seleniumLog = seleniumLog;
    function _exceptionStackTrace(err) {
        try {
            throw err;
        }
        catch (e) {
            return e.stack;
        }
    }
    /* tslint:enable */
    /**
     * **This function is meant to be used in debugging.** Gets a stack trace. This
     * is only as cross-platform as needed for the platforms we support.
     *
     * Support for IE 9 is missing because it was designed by baboons.
     */
    function stackTrace() {
        var err = new Error();
        if (err.stack != null) {
            return err.stack;
        }
        // If the stack is not filled already (true of IE 10, 11) then raise an
        // exception to fill it.
        return _exceptionStackTrace(err);
    }
    exports.stackTrace = stackTrace;
    /**
     * Convert a "pattern object" to a string that can be shown to the user. This
     * function is meant to be used for "complex" name patterns that we may get from
     * salve. Note that a "pattern object" is the result of calling ``toObject()``
     * on the pattern. The goal of this function is to convert the pattern object to
     * a string that would be interpretable by the end user.
     *
     * An explanation about how this handles namespaces and wildcard patterns is in
     * order. In a Relax NG schema the name pattern ``*`` in the compact notation is
     * equivalent to ``<anyName/>`` in the expanded notation. And ``foo:*`` is
     * equivalent to ``<nsName ns="uri_of_foo">`` where ``uri_of_foo`` is the URI
     * that has been associated with ``foo`` in the compact schema. It would be nice
     * if the function here could reuse this notation, but we cannot. Consider the
     * case where an Relax NG schema in the compact notation wants to declare a name
     * pattern which means "any name in the default namespace". In XML we express a
     * name in the default namespace currently in effect by simply not prefixing it
     * with a namespace name: whereas ``foo:bar`` is the ``bar`` element in the
     * ``foo`` namespace, ``bar`` is the ``bar`` element in the default
     * namespace. The pattern "any element in namespace foo" is represented with
     * ``foo:*``, however we cannot use ``*`` to mean "any element in the default
     * namespace", because ``*`` means "any name in any namespace whatsoever". The
     * compact notation forces the author of the schema to use a prefix for the
     * default namespace. And because of this, ``*`` means unambiguously "any
     * element in any namespace".
     *
     * So the ``*`` in the Relax NG schema becomes ``*:*`` here. "Any element in the
     * default namespace" is represented by ``*``. Thus ``foo:*`` and ``*`` can
     * stand in the same relation to one another as ``foo:bar`` and ``bar``.
     *
     * @param obj The "pattern object" to convert.
     * @param resolver The resolver to use to convert URIs to prefixes.
     * @returns The string representing the pattern.
     */
    /* tslint:disable:no-any no-unsafe-any */
    function convertPatternObj(obj, resolver) {
        // NameChoice
        if (obj.a != null && obj.b != null) {
            return "(" + convertPatternObj(obj.a, resolver) + ") or (" + convertPatternObj(obj.b, resolver) + ")";
        }
        var ret;
        // AnyName
        if (obj.pattern === "AnyName") {
            ret = "*:*";
        }
        else {
            // Name and NsName
            if (obj.ns === undefined) {
                throw new Error("unexpected undefined obj.ns");
            }
            if (obj.name !== undefined) {
                ret = resolver.unresolveName(obj.ns, obj.name);
                // Cannot unresolve, use the expanded name.
                if (ret === undefined) {
                    ret = "{" + obj.ns + "}" + obj.name;
                }
            }
            else {
                var ns = resolver.prefixFromURI(obj.ns);
                // If ns is undefined, we cannot resolve the URI, so we
                // display the expanded name.
                if (ns === undefined) {
                    ret = "{" + obj.ns + "}";
                }
                else {
                    // An empty ns happens if the URI refers to the default
                    // namespace.
                    ret = (ns !== "") ? (ns + ":") : ns;
                }
                ret += "*";
            }
        }
        if (obj.except != null) {
            ret += " except (" + convertPatternObj(obj.except, resolver) + ")";
        }
        return ret;
    }
    exports.convertPatternObj = convertPatternObj;
    /* tslint:enable */
    function readFile(file) {
        var reader = new FileReader();
        return new Promise(function (resolve, reject) {
            reader.onload = function () {
                resolve(reader.result);
            };
            reader.onerror = reject;
            reader.readAsText(file);
        });
    }
    exports.readFile = readFile;
    /**
     * This is required to work around a problem when extending built-in classes
     * like ``Error``. Some of the constructors for these classes return a value
     * from the constructor, which is then picked up by the constructors generated
     * by TypeScript (same with ES6 code transpiled through Babel), and this messes
     * up the inheritance chain.
     *
     * See https://github.com/Microsoft/TypeScript/issues/12123.
     */
    // tslint:disable:no-any
    function fixPrototype(obj, parent) {
        var oldProto = Object.getPrototypeOf !== undefined ?
            Object.getPrototypeOf(obj) : obj.__proto__;
        if (oldProto !== parent) {
            if (Object.setPrototypeOf !== undefined) {
                Object.setPrototypeOf(obj, parent.prototype);
            }
            else {
                obj.__proto__ = parent.prototype;
            }
        }
    }
    exports.fixPrototype = fixPrototype;
    function suppressUnhandledRejections(p) {
        var pAsAny = p;
        if (pAsAny.suppressUnhandledRejections) {
            pAsAny.suppressUnhandledRejections();
        }
        return p;
    }
    exports.suppressUnhandledRejections = suppressUnhandledRejections;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
// tslint:enable:no-any
//  LocalWords:  Mangalam MPL Dubeau util CSS wed's unencoded URIs localName ns
//  LocalWords:  escapeCSSClass xmlns prepended nextID NG NameChoice AnyName
//  LocalWords:  convertPatternObj NsName
//# sourceMappingURL=util.js.map

/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = tryCatch;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__errorObject__ = __webpack_require__(14);
/** PURE_IMPORTS_START _errorObject PURE_IMPORTS_END */

var tryCatchTarget;
function tryCatcher() {
    try {
        return tryCatchTarget.apply(this, arguments);
    }
    catch (e) {
        __WEBPACK_IMPORTED_MODULE_0__errorObject__["a" /* errorObject */].e = e;
        return __WEBPACK_IMPORTED_MODULE_0__errorObject__["a" /* errorObject */];
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}
//# sourceMappingURL=tryCatch.js.map


/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_Observable__ = __webpack_require__(2);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Observable", function() { return __WEBPACK_IMPORTED_MODULE_0__internal_Observable__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_observable_ConnectableObservable__ = __webpack_require__(82);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectableObservable", function() { return __WEBPACK_IMPORTED_MODULE_1__internal_observable_ConnectableObservable__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_operators_groupBy__ = __webpack_require__(84);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "GroupedObservable", function() { return __WEBPACK_IMPORTED_MODULE_2__internal_operators_groupBy__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_symbol_observable__ = __webpack_require__(24);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "observable", function() { return __WEBPACK_IMPORTED_MODULE_3__internal_symbol_observable__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__internal_Subject__ = __webpack_require__(9);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Subject", function() { return __WEBPACK_IMPORTED_MODULE_4__internal_Subject__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__internal_BehaviorSubject__ = __webpack_require__(85);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "BehaviorSubject", function() { return __WEBPACK_IMPORTED_MODULE_5__internal_BehaviorSubject__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__internal_ReplaySubject__ = __webpack_require__(58);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ReplaySubject", function() { return __WEBPACK_IMPORTED_MODULE_6__internal_ReplaySubject__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__internal_AsyncSubject__ = __webpack_require__(44);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AsyncSubject", function() { return __WEBPACK_IMPORTED_MODULE_7__internal_AsyncSubject__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__internal_scheduler_asap__ = __webpack_require__(90);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "asapScheduler", function() { return __WEBPACK_IMPORTED_MODULE_8__internal_scheduler_asap__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__internal_scheduler_async__ = __webpack_require__(12);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "asyncScheduler", function() { return __WEBPACK_IMPORTED_MODULE_9__internal_scheduler_async__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__internal_scheduler_queue__ = __webpack_require__(86);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "queueScheduler", function() { return __WEBPACK_IMPORTED_MODULE_10__internal_scheduler_queue__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__internal_scheduler_animationFrame__ = __webpack_require__(137);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "animationFrameScheduler", function() { return __WEBPACK_IMPORTED_MODULE_11__internal_scheduler_animationFrame__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__internal_scheduler_VirtualTimeScheduler__ = __webpack_require__(140);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualTimeScheduler", function() { return __WEBPACK_IMPORTED_MODULE_12__internal_scheduler_VirtualTimeScheduler__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualAction", function() { return __WEBPACK_IMPORTED_MODULE_12__internal_scheduler_VirtualTimeScheduler__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__internal_Scheduler__ = __webpack_require__(87);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Scheduler", function() { return __WEBPACK_IMPORTED_MODULE_13__internal_Scheduler__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__internal_Subscription__ = __webpack_require__(8);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Subscription", function() { return __WEBPACK_IMPORTED_MODULE_14__internal_Subscription__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__internal_Subscriber__ = __webpack_require__(1);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Subscriber", function() { return __WEBPACK_IMPORTED_MODULE_15__internal_Subscriber__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__internal_Notification__ = __webpack_require__(43);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Notification", function() { return __WEBPACK_IMPORTED_MODULE_16__internal_Notification__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__internal_util_pipe__ = __webpack_require__(56);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "pipe", function() { return __WEBPACK_IMPORTED_MODULE_17__internal_util_pipe__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__internal_util_noop__ = __webpack_require__(41);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "noop", function() { return __WEBPACK_IMPORTED_MODULE_18__internal_util_noop__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__internal_util_identity__ = __webpack_require__(25);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return __WEBPACK_IMPORTED_MODULE_19__internal_util_identity__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__internal_util_isObservable__ = __webpack_require__(141);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isObservable", function() { return __WEBPACK_IMPORTED_MODULE_20__internal_util_isObservable__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__internal_util_ArgumentOutOfRangeError__ = __webpack_require__(31);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ArgumentOutOfRangeError", function() { return __WEBPACK_IMPORTED_MODULE_21__internal_util_ArgumentOutOfRangeError__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__internal_util_EmptyError__ = __webpack_require__(32);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "EmptyError", function() { return __WEBPACK_IMPORTED_MODULE_22__internal_util_EmptyError__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__internal_util_ObjectUnsubscribedError__ = __webpack_require__(42);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectUnsubscribedError", function() { return __WEBPACK_IMPORTED_MODULE_23__internal_util_ObjectUnsubscribedError__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__internal_util_UnsubscriptionError__ = __webpack_require__(81);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "UnsubscriptionError", function() { return __WEBPACK_IMPORTED_MODULE_24__internal_util_UnsubscriptionError__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__internal_util_TimeoutError__ = __webpack_require__(91);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "TimeoutError", function() { return __WEBPACK_IMPORTED_MODULE_25__internal_util_TimeoutError__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__internal_observable_bindCallback__ = __webpack_require__(142);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "bindCallback", function() { return __WEBPACK_IMPORTED_MODULE_26__internal_observable_bindCallback__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__internal_observable_bindNodeCallback__ = __webpack_require__(143);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "bindNodeCallback", function() { return __WEBPACK_IMPORTED_MODULE_27__internal_observable_bindNodeCallback__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__internal_observable_combineLatest__ = __webpack_require__(62);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "combineLatest", function() { return __WEBPACK_IMPORTED_MODULE_28__internal_observable_combineLatest__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__internal_observable_concat__ = __webpack_require__(45);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "concat", function() { return __WEBPACK_IMPORTED_MODULE_29__internal_observable_concat__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__internal_observable_defer__ = __webpack_require__(64);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "defer", function() { return __WEBPACK_IMPORTED_MODULE_30__internal_observable_defer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__internal_observable_empty__ = __webpack_require__(11);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "empty", function() { return __WEBPACK_IMPORTED_MODULE_31__internal_observable_empty__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__internal_observable_forkJoin__ = __webpack_require__(150);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "forkJoin", function() { return __WEBPACK_IMPORTED_MODULE_32__internal_observable_forkJoin__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__internal_observable_from__ = __webpack_require__(20);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "from", function() { return __WEBPACK_IMPORTED_MODULE_33__internal_observable_from__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__internal_observable_fromEvent__ = __webpack_require__(151);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "fromEvent", function() { return __WEBPACK_IMPORTED_MODULE_34__internal_observable_fromEvent__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__internal_observable_fromEventPattern__ = __webpack_require__(152);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "fromEventPattern", function() { return __WEBPACK_IMPORTED_MODULE_35__internal_observable_fromEventPattern__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__internal_observable_generate__ = __webpack_require__(153);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "generate", function() { return __WEBPACK_IMPORTED_MODULE_36__internal_observable_generate__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__internal_observable_iif__ = __webpack_require__(154);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "iif", function() { return __WEBPACK_IMPORTED_MODULE_37__internal_observable_iif__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__internal_observable_interval__ = __webpack_require__(155);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "interval", function() { return __WEBPACK_IMPORTED_MODULE_38__internal_observable_interval__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__internal_observable_merge__ = __webpack_require__(99);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "merge", function() { return __WEBPACK_IMPORTED_MODULE_39__internal_observable_merge__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__internal_observable_never__ = __webpack_require__(100);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "never", function() { return __WEBPACK_IMPORTED_MODULE_40__internal_observable_never__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__internal_observable_of__ = __webpack_require__(59);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "of", function() { return __WEBPACK_IMPORTED_MODULE_41__internal_observable_of__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__internal_observable_onErrorResumeNext__ = __webpack_require__(156);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "onErrorResumeNext", function() { return __WEBPACK_IMPORTED_MODULE_42__internal_observable_onErrorResumeNext__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__internal_observable_pairs__ = __webpack_require__(157);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "pairs", function() { return __WEBPACK_IMPORTED_MODULE_43__internal_observable_pairs__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__internal_observable_race__ = __webpack_require__(101);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "race", function() { return __WEBPACK_IMPORTED_MODULE_44__internal_observable_race__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_45__internal_observable_range__ = __webpack_require__(158);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "range", function() { return __WEBPACK_IMPORTED_MODULE_45__internal_observable_range__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_46__internal_observable_throwError__ = __webpack_require__(61);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "throwError", function() { return __WEBPACK_IMPORTED_MODULE_46__internal_observable_throwError__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_47__internal_observable_timer__ = __webpack_require__(102);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "timer", function() { return __WEBPACK_IMPORTED_MODULE_47__internal_observable_timer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_48__internal_observable_using__ = __webpack_require__(159);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "using", function() { return __WEBPACK_IMPORTED_MODULE_48__internal_observable_using__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_49__internal_observable_zip__ = __webpack_require__(65);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "zip", function() { return __WEBPACK_IMPORTED_MODULE_49__internal_observable_zip__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "EMPTY", function() { return __WEBPACK_IMPORTED_MODULE_31__internal_observable_empty__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "NEVER", function() { return __WEBPACK_IMPORTED_MODULE_40__internal_observable_never__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_50__internal_config__ = __webpack_require__(40);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "config", function() { return __WEBPACK_IMPORTED_MODULE_50__internal_config__["a"]; });
/* Observable */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */




/* Subjects */




/* Schedulers */






/* Subscription */


/* Notification */

/* Utils */




/* Error types */





/* Static observable creation exports */
























/* Constants */


/* Config */

//# sourceMappingURL=index.js.map


/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = from;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_isPromise__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isArrayLike__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_isInteropObservable__ = __webpack_require__(145);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_isIterable__ = __webpack_require__(146);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__fromArray__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__fromPromise__ = __webpack_require__(147);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__fromIterable__ = __webpack_require__(148);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__fromObservable__ = __webpack_require__(149);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__util_subscribeTo__ = __webpack_require__(92);
/** PURE_IMPORTS_START _Observable,_util_isPromise,_util_isArrayLike,_util_isInteropObservable,_util_isIterable,_fromArray,_fromPromise,_fromIterable,_fromObservable,_util_subscribeTo PURE_IMPORTS_END */










function from(input, scheduler) {
    if (!scheduler) {
        if (input instanceof __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */]) {
            return input;
        }
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](Object(__WEBPACK_IMPORTED_MODULE_9__util_subscribeTo__["a" /* subscribeTo */])(input));
    }
    if (input != null) {
        if (Object(__WEBPACK_IMPORTED_MODULE_3__util_isInteropObservable__["a" /* isInteropObservable */])(input)) {
            return Object(__WEBPACK_IMPORTED_MODULE_8__fromObservable__["a" /* fromObservable */])(input, scheduler);
        }
        else if (Object(__WEBPACK_IMPORTED_MODULE_1__util_isPromise__["a" /* isPromise */])(input)) {
            return Object(__WEBPACK_IMPORTED_MODULE_6__fromPromise__["a" /* fromPromise */])(input, scheduler);
        }
        else if (Object(__WEBPACK_IMPORTED_MODULE_2__util_isArrayLike__["a" /* isArrayLike */])(input)) {
            return Object(__WEBPACK_IMPORTED_MODULE_5__fromArray__["a" /* fromArray */])(input, scheduler);
        }
        else if (Object(__WEBPACK_IMPORTED_MODULE_4__util_isIterable__["a" /* isIterable */])(input) || typeof input === 'string') {
            return Object(__WEBPACK_IMPORTED_MODULE_7__fromIterable__["a" /* fromIterable */])(input, scheduler);
        }
    }
    throw new TypeError((input !== null && typeof input || input) + ' is not observable');
}
//# sourceMappingURL=from.js.map


/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = fromArray;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscription__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_subscribeToArray__ = __webpack_require__(89);
/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToArray PURE_IMPORTS_END */



function fromArray(input, scheduler) {
    if (!scheduler) {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](Object(__WEBPACK_IMPORTED_MODULE_2__util_subscribeToArray__["a" /* subscribeToArray */])(input));
    }
    else {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
            var sub = new __WEBPACK_IMPORTED_MODULE_1__Subscription__["a" /* Subscription */]();
            var i = 0;
            sub.add(scheduler.schedule(function () {
                if (i === input.length) {
                    subscriber.complete();
                    return;
                }
                subscriber.next(input[i++]);
                if (!subscriber.closed) {
                    sub.add(this.schedule());
                }
            }));
            return sub;
        });
    }
}
//# sourceMappingURL=fromArray.js.map


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Browser detection. Extremely ad hoc and meant for wed's internal purposes
 * only.
 *
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    //
    // Yes, testing features rather versions or specific browsers is the way to go,
    // generally speaking. However, when we are working around bugs in *specific
    // versions* of *specific browsers*, feature testing is mostly
    // useless. So... here we are.
    //
    // Note that symbols are introduced for purely ad hoc reasons. If we need to
    // test for a specific combination somewhere in wed's code base, we have a
    // flag. If we don't need the test, we don't have a flag.
    //
    // Also this code only satisfies the interests of wed. Don't take the tests here
    // as gospel. If *you* need to test for some combinations that wed does not care
    // about, you may find that the code here gives incorrect results relative to
    // *your* goals. This code is meant to give correct results only relative to
    // what wed cares about. (Salient example: wed is not designed (at this time) to
    // run in tablets or phones. So the tests below don't take into account what
    // might happen when running in a tablet or phone.)
    //
    var agent = navigator.userAgent;
    /**
     * True if the browser is Edge.
     */
    exports.EDGE = agent.indexOf(" Edge/") !== -1;
    /**
     * True if the browser is Chrome.
     */
    // We have to test exclude Edge from the possibilities because Edge lies about
    // its identity.
    exports.CHROME = !exports.EDGE && agent.indexOf(" Chrome/") !== -1;
    /**
     * True if the browser is Internet Explorer up to version 10.
     */
    exports.MSIE_TO_10 = agent.indexOf(" MSIE ") !== -1;
    /**
     * True if the browser is Internet Explorer from version 11 and up.
     */
    //
    // This may be overbroad but at this point, we don't care.  The string "like
    // Gecko" appears in a number of user agent strings but AFAIK it is only IE 11
    // that puts it at the end. We might want to refine this eventually.
    //
    var MSIE_11_MARK = " like Gecko";
    exports.MSIE_11_AND_UP = agent.indexOf(MSIE_11_MARK, navigator.userAgent.length - MSIE_11_MARK.length) !== -1;
    /**
     * True if the browser is Internet Explorer, any version.
     */
    exports.MSIE = exports.MSIE_11_AND_UP || exports.MSIE_TO_10;
    /**
     * True if the browser is Firefox.
     */
    exports.FIREFOX = agent.indexOf(" Firefox/") !== -1;
    /**
     * True if the browser is Firefox 24. This is an ESR version.
     */
    exports.FIREFOX_24 = agent.indexOf(" Firefox/24") !== -1;
    /**
     * True if the browser is Gecko-based.
     */
    exports.GECKO = agent.indexOf(" Gecko/") !== -1;
    /**
     * True if running on a OS X system.
     */
    exports.OSX = navigator.platform.lastIndexOf("Mac", 0) === 0;
    /**
     * True if running on Windows.
     */
    // We don't care about old platforms or oddball Windows platforms.
    exports.WINDOWS = navigator.platform === "Win32";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL wed's MSIE
//# sourceMappingURL=browsers.js.map

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Keys that wed uses, as constants.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(22), __webpack_require__(51)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, browsers_1, key) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    key = __importStar(key);
    // A few constants are named by their key.
    exports.LEFT_ARROW = key.makeKey(37, false);
    exports.UP_ARROW = key.makeKey(38, false);
    exports.RIGHT_ARROW = key.makeKey(39, false);
    exports.DOWN_ARROW = key.makeKey(40, false);
    exports.BACKSPACE = key.makeKey(8, false);
    exports.DELETE = key.makeKey(46, false);
    exports.ENTER = key.makeKey(13, false);
    exports.SPACE = key.makeKey(32, false);
    exports.ESCAPE = key.makeKey(27, false);
    // Others are named by the function they perform.
    exports.SAVE = key.makeCtrlEqKey("S", false);
    exports.UNDO = key.makeCtrlEqKey("Z", false);
    exports.REDO = key.makeCtrlEqKey("Y", false);
    exports.COPY = key.makeCtrlEqKey("C", false);
    exports.CUT = key.makeCtrlEqKey("X", false);
    exports.PASTE = key.makeCtrlEqKey("V", false);
    exports.DEVELOPMENT = key.makeCtrlEqKey(192, false); // Cmd or Ctrl-`
    exports.QUICKSEARCH_FORWARD = key.makeCtrlEqKey("F", false);
    exports.QUICKSEARCH_BACKWARDS = key.makeCtrlEqKey("B", false);
    exports.SEARCH_FORWARD = key.makeCtrlEqKey("F", true);
    exports.SEARCH_BACKWARDS = key.makeCtrlEqKey("B", true);
    exports.CONTEXTUAL_MENU = key.makeCtrlEqKey(191, false); // Cmd or Ctrl-/
    exports.REPLACEMENT_MENU = key.makeCtrlEqKey(191, true); // Cmd or Ctrl-?
    exports.LOWER_LABEL_VISIBILITY = browsers_1.OSX ? key.NULL_KEY : key.makeCtrlKey(219, false); // Ctrl-[
    exports.INCREASE_LABEL_VISIBILITY = browsers_1.OSX ? key.NULL_KEY : key.makeCtrlKey(221, false); // Ctrl-]
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  Mangalam MPL Dubeau Ctrl
//# sourceMappingURL=key-constants.js.map

/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return observable; });
/** Symbol.observable or a string "@@observable". Used for interop */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';
//# sourceMappingURL=observable.js.map


/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = identity;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function identity(x) {
    return x;
}
//# sourceMappingURL=identity.js.map


/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = multicast;
/* unused harmony export MulticastOperator */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__observable_ConnectableObservable__ = __webpack_require__(82);
/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */

/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the results of invoking a specified selector on items
 * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
 *
 * <img src="./img/multicast.png" width="100%">
 *
 * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through
 * which the source sequence's elements will be multicast to the selector function
 * or Subject to push source elements into.
 * @param {Function} [selector] - Optional selector function that can use the multicasted source stream
 * as many times as needed, without causing multiple subscriptions to the source stream.
 * Subscribers to the given source will receive all notifications of the source from the
 * time of the subscription forward.
 * @return {Observable} An Observable that emits the results of invoking the selector
 * on the items emitted by a `ConnectableObservable` that shares a single subscription to
 * the underlying stream.
 * @method multicast
 * @owner Observable
 */
function multicast(subjectOrSubjectFactory, selector) {
    return function multicastOperatorFunction(source) {
        var subjectFactory;
        if (typeof subjectOrSubjectFactory === 'function') {
            subjectFactory = subjectOrSubjectFactory;
        }
        else {
            subjectFactory = function subjectFactory() {
                return subjectOrSubjectFactory;
            };
        }
        if (typeof selector === 'function') {
            return source.lift(new MulticastOperator(subjectFactory, selector));
        }
        var connectable = Object.create(source, __WEBPACK_IMPORTED_MODULE_0__observable_ConnectableObservable__["b" /* connectableObservableDescriptor */]);
        connectable.source = source;
        connectable.subjectFactory = subjectFactory;
        return connectable;
    };
}
var MulticastOperator = /*@__PURE__*/ (function () {
    function MulticastOperator(subjectFactory, selector) {
        this.subjectFactory = subjectFactory;
        this.selector = selector;
    }
    MulticastOperator.prototype.call = function (subscriber, source) {
        var selector = this.selector;
        var subject = this.subjectFactory();
        var subscription = selector(subject).subscribe(subscriber);
        subscription.add(source.subscribe(subject));
        return subscription;
    };
    return MulticastOperator;
}());

//# sourceMappingURL=multicast.js.map


/***/ }),
/* 27 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_27__;

/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isFunction;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isFunction(x) {
    return typeof x === 'function';
}
//# sourceMappingURL=isFunction.js.map


/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AsyncAction; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Action__ = __webpack_require__(132);
/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */


/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AsyncAction = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (this.closed) {
            return this;
        }
        // Always replace the current state with the new state.
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        //
        // Important implementation note:
        //
        // Actions only execute once by default, unless rescheduled from within the
        // scheduled callback. This allows us to implement single and repeat
        // actions via the same code path, without adding API surface area, as well
        // as mimic traditional recursion but across asynchronous boundaries.
        //
        // However, JS runtimes and timers distinguish between intervals achieved by
        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of
        // serial `setTimeout` calls can be individually delayed, which delays
        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to
        // guarantee the interval callback will be invoked more precisely to the
        // interval period, regardless of load.
        //
        // Therefore, we use `setInterval` to schedule single and repeat actions.
        // If the action reschedules itself with the same delay, the interval is not
        // canceled. If the action doesn't reschedule, or reschedules with a
        // different delay, the interval will be canceled after scheduled callback
        // execution.
        //
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        // Set the pending flag indicating that this action has been scheduled, or
        // has recursively rescheduled itself.
        this.pending = true;
        this.delay = delay;
        // If this action has already an async Id, don't request a new one.
        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        // If this action is rescheduled with the same delay time, don't clear the interval id.
        if (delay !== null && this.delay === delay && this.pending === false) {
            return id;
        }
        // Otherwise, if the action's delay time is different from the current delay,
        // or the action has been rescheduled before it's executed, clear the interval id
        return clearInterval(id) && undefined || undefined;
    };
    /**
     * Immediately executes this action and the `work` it contains.
     * @return {any}
     */
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            // Dequeue if the action didn't reschedule itself. Don't call
            // unsubscribe(), because the action could reschedule later.
            // For example:
            // ```
            // scheduler.schedule(function doWork(counter) {
            //   /* ... I'm a busy worker bee ... */
            //   var originalAction = this;
            //   /* wait 100ms before rescheduling the action */
            //   setTimeout(function () {
            //     originalAction.schedule(counter + 1);
            //   }, 100);
            // }, 1000);
            // ```
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, delay) {
        var errored = false;
        var errorValue = undefined;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = !!e && e || new Error(e);
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    AsyncAction.prototype._unsubscribe = function () {
        var id = this.id;
        var scheduler = this.scheduler;
        var actions = scheduler.actions;
        var index = actions.indexOf(this);
        this.work = null;
        this.state = null;
        this.pending = false;
        this.scheduler = null;
        if (index !== -1) {
            actions.splice(index, 1);
        }
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
        }
        this.delay = null;
    };
    return AsyncAction;
}(__WEBPACK_IMPORTED_MODULE_1__Action__["a" /* Action */]));

//# sourceMappingURL=AsyncAction.js.map


/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AsyncScheduler; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Scheduler__ = __webpack_require__(87);
/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */


var AsyncScheduler = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](AsyncScheduler, _super);
    function AsyncScheduler(SchedulerAction, now) {
        if (now === void 0) {
            now = __WEBPACK_IMPORTED_MODULE_1__Scheduler__["a" /* Scheduler */].now;
        }
        var _this = _super.call(this, SchedulerAction, function () {
            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
                return AsyncScheduler.delegate.now();
            }
            else {
                return now();
            }
        }) || this;
        _this.actions = [];
        /**
         * A flag to indicate whether the Scheduler is currently executing a batch of
         * queued actions.
         * @type {boolean}
         * @deprecated internal use only
         */
        _this.active = false;
        /**
         * An internal ID used to track the latest asynchronous task such as those
         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and
         * others.
         * @type {any}
         * @deprecated internal use only
         */
        _this.scheduled = undefined;
        return _this;
    }
    AsyncScheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) {
            delay = 0;
        }
        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
            return AsyncScheduler.delegate.schedule(work, delay, state);
        }
        else {
            return _super.prototype.schedule.call(this, work, delay, state);
        }
    };
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this.active) {
            actions.push(action);
            return;
        }
        var error;
        this.active = true;
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (action = actions.shift()); // exhaust the scheduler queue
        this.active = false;
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(__WEBPACK_IMPORTED_MODULE_1__Scheduler__["a" /* Scheduler */]));

//# sourceMappingURL=AsyncScheduler.js.map


/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ArgumentOutOfRangeError; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */

/**
 * An error thrown when an element was queried at a certain index of an
 * Observable, but no such index or position exists in that sequence.
 *
 * @see {@link elementAt}
 * @see {@link take}
 * @see {@link takeLast}
 *
 * @class ArgumentOutOfRangeError
 */
var ArgumentOutOfRangeError = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ArgumentOutOfRangeError, _super);
    function ArgumentOutOfRangeError() {
        var _this = _super.call(this, 'argument out of range') || this;
        _this.name = 'ArgumentOutOfRangeError';
        Object.setPrototypeOf(_this, ArgumentOutOfRangeError.prototype);
        return _this;
    }
    return ArgumentOutOfRangeError;
}(Error));

//# sourceMappingURL=ArgumentOutOfRangeError.js.map


/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EmptyError; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */

/**
 * An error thrown when an Observable or a sequence was queried but has no
 * elements.
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link single}
 *
 * @class EmptyError
 */
var EmptyError = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](EmptyError, _super);
    function EmptyError() {
        var _this = _super.call(this, 'no elements in sequence') || this;
        _this.name = 'EmptyError';
        Object.setPrototypeOf(_this, EmptyError.prototype);
        return _this;
    }
    return EmptyError;
}(Error));

//# sourceMappingURL=EmptyError.js.map


/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export getSymbolIterator */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return iterator; });
/* unused harmony export $$iterator */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
        return '@@iterator';
    }
    return Symbol.iterator;
}
var iterator = /*@__PURE__*/ getSymbolIterator();
/**
 * @deprecated use {@link iterator} instead
 */
var $$iterator = iterator;
//# sourceMappingURL=iterator.js.map


/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = mergeMap;
/* unused harmony export MergeMapOperator */
/* unused harmony export MergeMapSubscriber */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_subscribeToResult__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__map__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__observable_from__ = __webpack_require__(20);
/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_map,_observable_from PURE_IMPORTS_END */





/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link mergeAll}.</span>
 *
 * <img src="./img/mergeMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger.
 *
 * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
 * var letters = Rx.Observable.of('a', 'b', 'c');
 * var result = letters.mergeMap(x =>
 *   Rx.Observable.interval(1000).map(i => x+i)
 * );
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // a0
 * // b0
 * // c0
 * // a1
 * // b1
 * // c1
 * // continues to list a,b,c with respective ascending integers
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and merging the results of the Observables obtained
 * from this transformation.
 * @method mergeMap
 * @owner Observable
 */
function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    if (typeof resultSelector === 'function') {
        // DEPRECATED PATH
        return function (source) { return source.pipe(mergeMap(function (a, i) { return Object(__WEBPACK_IMPORTED_MODULE_4__observable_from__["a" /* from */])(project(a, i)).pipe(Object(__WEBPACK_IMPORTED_MODULE_3__map__["a" /* map */])(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
    }
    else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
}
var MergeMapOperator = /*@__PURE__*/ (function () {
    function MergeMapOperator(project, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        this.project = project;
        this.concurrent = concurrent;
    }
    MergeMapOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
    };
    return MergeMapOperator;
}());

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeMapSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.concurrent = concurrent;
        _this.hasCompleted = false;
        _this.buffer = [];
        _this.active = 0;
        _this.index = 0;
        return _this;
    }
    MergeMapSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            this._tryNext(value);
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeMapSubscriber.prototype._tryNext = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.active++;
        this._innerSub(result, value, index);
    };
    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
        this.add(Object(__WEBPACK_IMPORTED_MODULE_1__util_subscribeToResult__["a" /* subscribeToResult */])(this, ish, value, index));
    };
    MergeMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
    };
    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeMapSubscriber;
}(__WEBPACK_IMPORTED_MODULE_2__OuterSubscriber__["a" /* OuterSubscriber */]));

//# sourceMappingURL=mergeMap.js.map


/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = defaultIfEmpty;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/* tslint:enable:max-line-length */
/**
 * Emits a given value if the source Observable completes without emitting any
 * `next` value, otherwise mirrors the source Observable.
 *
 * <span class="informal">If the source Observable turns out to be empty, then
 * this operator will emit a default value.</span>
 *
 * <img src="./img/defaultIfEmpty.png" width="100%">
 *
 * `defaultIfEmpty` emits the values emitted by the source Observable or a
 * specified default value if the source Observable is empty (completes without
 * having emitted any `next` value).
 *
 * @example <caption>If no clicks happen in 5 seconds, then emit "no clicks"</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));
 * var result = clicksBeforeFive.defaultIfEmpty('no clicks');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link empty}
 * @see {@link last}
 *
 * @param {any} [defaultValue=null] The default value used if the source
 * Observable is empty.
 * @return {Observable} An Observable that emits either the specified
 * `defaultValue` if the source Observable emits no items, or the values emitted
 * by the source Observable.
 * @method defaultIfEmpty
 * @owner Observable
 */
function defaultIfEmpty(defaultValue) {
    if (defaultValue === void 0) {
        defaultValue = null;
    }
    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };
}
var DefaultIfEmptyOperator = /*@__PURE__*/ (function () {
    function DefaultIfEmptyOperator(defaultValue) {
        this.defaultValue = defaultValue;
    }
    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
    };
    return DefaultIfEmptyOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DefaultIfEmptySubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](DefaultIfEmptySubscriber, _super);
    function DefaultIfEmptySubscriber(destination, defaultValue) {
        var _this = _super.call(this, destination) || this;
        _this.defaultValue = defaultValue;
        _this.isEmpty = true;
        return _this;
    }
    DefaultIfEmptySubscriber.prototype._next = function (value) {
        this.isEmpty = false;
        this.destination.next(value);
    };
    DefaultIfEmptySubscriber.prototype._complete = function () {
        if (this.isEmpty) {
            this.destination.next(this.defaultValue);
        }
        this.destination.complete();
    };
    return DefaultIfEmptySubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=defaultIfEmpty.js.map


/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = filter;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/* tslint:enable:max-line-length */
/**
 * Filter items emitted by the source Observable by only emitting those that
 * satisfy a specified predicate.
 *
 * <span class="informal">Like
 * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
 * it only emits a value from the source if it passes a criterion function.</span>
 *
 * <img src="./img/filter.png" width="100%">
 *
 * Similar to the well-known `Array.prototype.filter` method, this operator
 * takes values from the source Observable, passes them through a `predicate`
 * function and only emits those values that yielded `true`.
 *
 * @example <caption>Emit only click events whose target was a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
 * clicksOnDivs.subscribe(x => console.log(x));
 *
 * @see {@link distinct}
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 * @see {@link ignoreElements}
 * @see {@link partition}
 * @see {@link skip}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates each value emitted by the source Observable. If it returns `true`,
 * the value is emitted, if `false` the value is not passed to the output
 * Observable. The `index` parameter is the number `i` for the i-th source
 * emission that has happened since the subscription, starting from the number
 * `0`.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable} An Observable of values from the source that were
 * allowed by the `predicate` function.
 * @method filter
 * @owner Observable
 */
function filter(predicate, thisArg) {
    return function filterOperatorFunction(source) {
        return source.lift(new FilterOperator(predicate, thisArg));
    };
}
var FilterOperator = /*@__PURE__*/ (function () {
    function FilterOperator(predicate, thisArg) {
        this.predicate = predicate;
        this.thisArg = thisArg;
    }
    FilterOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
    };
    return FilterOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FilterSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](FilterSubscriber, _super);
    function FilterSubscriber(destination, predicate, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.thisArg = thisArg;
        _this.count = 0;
        return _this;
    }
    // the try catch block below is left specifically for
    // optimization and perf reasons. a tryCatcher is not necessary here.
    FilterSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.predicate.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.destination.next(value);
        }
    };
    return FilterSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=filter.js.map


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(13), __webpack_require__(6), __webpack_require__(71)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, dloc_1, domtypeguards_1, guiroot_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // Utility function for boundaryXY.
    function parentBoundary(node, root) {
        var parent = node.parentNode;
        // Cannot find a sensible boundary
        if (!root.contains(parent)) {
            return { left: 0, top: 0, bottom: 0 };
        }
        return boundaryXY(dloc_1.DLoc.mustMakeDLoc(root, node));
    }
    // tslint:disable-next-line:max-func-body-length
    function boundaryXY(boundary) {
        var node = boundary.node;
        var offset = boundary.offset;
        var nodeIsElement = domtypeguards_1.isElement(node);
        var nodeIsText = domtypeguards_1.isText(node);
        var nodeLen;
        if (nodeIsElement) {
            nodeLen = node.childNodes.length;
        }
        else if (nodeIsText) {
            nodeLen = node.length;
        }
        else {
            throw new Error("unexpected node type: " + node.nodeType);
        }
        // The node is empty ...
        if (nodeLen === 0) {
            return parentBoundary(node, boundary.root);
        }
        var range = node.ownerDocument.createRange();
        var rect;
        var child;
        while (offset < nodeLen) {
            // The array is empty if the node is a text node, and child will be
            // undefined.
            child = node.childNodes[offset];
            // We use getClientRects()[0] so that when we are working with an inline
            // node, we get only the first rect of the node. If the node is a block,
            // then there should be only one rect anyway.
            if (domtypeguards_1.isElement(child)) {
                rect = child.getClientRects()[0];
            }
            else {
                range.setStart(node, offset);
                range.setEnd(node, offset + 1);
                rect = range.getClientRects()[0];
            }
            // If the element that covers the range is invisible, then getClientRects
            // can return undefined. A 0, 0, 0, 0 rect is also theoretically possible.
            if (rect != null &&
                (rect.left !== 0 || rect.right !== 0 || rect.top !== 0 ||
                    rect.bottom !== 0)) {
                return { left: rect.left, top: rect.top, bottom: rect.bottom };
            }
            offset++;
        }
        // We failed to find something after our offset from which to get
        // coordinates. Try again.
        offset = boundary.offset;
        var win = node.ownerDocument.defaultView;
        while (offset !== 0) {
            offset--;
            child = undefined;
            // We check whether the thing we are going to cover with the range is
            // inline.
            var inline = void 0;
            if (nodeIsText) {
                inline = true;
            }
            else if (nodeIsElement) {
                child = node.childNodes[offset];
                if (domtypeguards_1.isText(child)) {
                    inline = true;
                }
                else if (domtypeguards_1.isElement(child)) {
                    var display = win.getComputedStyle(child).getPropertyValue("display");
                    inline = (display === "inline" || display === "inline-block");
                }
                else {
                    throw new Error("unexpected node type: " + child.nodeType);
                }
            }
            else {
                throw new Error("unexpected node type: " + node.nodeType);
            }
            // If it is not empty, and offset is at the end of the contents, then there
            // must be something *before* the point indicated by offset. Get a rectangle
            // around that and return the right side as the left value.
            var rects = void 0;
            if (domtypeguards_1.isElement(child)) {
                rects = child.getClientRects();
            }
            else {
                range.setStart(node, offset);
                range.setEnd(node, offset + 1);
                rects = range.getClientRects();
            }
            rect = rects[rects.length - 1];
            if (rect != null) {
                return (inline ?
                    // Yep, we use the right side when it is inline.
                    { left: rect.right, top: rect.top, bottom: rect.bottom } :
                    { left: rect.left, top: rect.top, bottom: rect.bottom });
            }
        }
        // We can get here with an offset of 0. In this case, we have to move to the
        // parent.
        return parentBoundary(node, boundary.root);
    }
    exports.boundaryXY = boundaryXY;
    function getAttrValueNode(attrVal) {
        if (!attrVal.classList.contains("_attribute_value")) {
            throw new Error("getAttrValueNode operates only on attribute values");
        }
        var ret = attrVal;
        var child = attrVal.firstChild;
        if (child !== null) {
            while (child !== null && !domtypeguards_1.isText(child)) {
                child = child.nextSibling;
            }
            if (child !== null) {
                ret = child;
            }
        }
        return ret;
    }
    exports.getAttrValueNode = getAttrValueNode;
    function getGUINodeIfExists(editor, node) {
        if (node == null) {
            return undefined;
        }
        try {
            var caret = editor.caretManager.fromDataLocation(node, 0);
            return caret != null ? caret.node : undefined;
        }
        catch (ex) {
            if (ex instanceof guiroot_1.AttributeNotFound) {
                return undefined;
            }
            throw ex;
        }
    }
    exports.getGUINodeIfExists = getGUINodeIfExists;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL domutil util boundaryXY nodeType getClientRects rect
//  LocalWords:  getAttrValueNode
//# sourceMappingURL=wed-util.js.map

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * The icons used by the user interface.
     * @author Louis-Dominique Dubeau
     * @license MPL 2.0
     * @copyright Mangalam Research Center for Buddhist Languages
     */
    var ICON_NAMES = Object.create(null);
    ICON_NAMES.add = "fa-plus";
    ICON_NAMES.delete = "fa-times";
    ICON_NAMES.wrap = "fa-caret-square-o-down";
    ICON_NAMES.unwrap = "fa-caret-square-o-up";
    ICON_NAMES.documentation = "fa-question-circle";
    ICON_NAMES.transform = "fa-cog";
    ICON_NAMES.any = "fa-asterisk";
    ICON_NAMES.element = "fa-angle-left";
    ICON_NAMES.attribute = "fa-at";
    ICON_NAMES.other = "fa-circle-thin";
    ICON_NAMES.exclamation = "fa-exclamation";
    ICON_NAMES["arrow-up"] = "fa-arrow-up";
    ICON_NAMES["arrow-down"] = "fa-arrow-down";
    ICON_NAMES.upload = "fa-cloud-upload";
    ICON_NAMES.undo = "fa-undo";
    ICON_NAMES.redo = "fa-repeat";
    /**
     * Generates the HTML for an icon. The icon name can be any of:
     *
     * - ``"add"`` for actions that add content.
     *
     * - ``"delete"`` for actions that delete content.
     *
     * - ``"wrap"`` for actions that wrap content.
     *
     * - ``"unwrap"`` for actions that unwrap content.
     *
     * - ``"documentation"`` for actions that present documentation.
     *
     * - ``"any"`` for any action.
     *
     * @param name The name of the icon to create.
     * @returns The HTML for the icon.
     */
    function makeHTML(name) {
        var cl = ICON_NAMES[name];
        if (cl === undefined) {
            throw new Error("unknown icon name: " + name);
        }
        return "<i class=\"fa fa-fw " + cl + "\"></i>";
    }
    exports.makeHTML = makeHTML;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL fw
//# sourceMappingURL=icon.js.map

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Transformation framework.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(118), __webpack_require__(19), __webpack_require__(49), __webpack_require__(6), __webpack_require__(5), __webpack_require__(73), __webpack_require__(38)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, lodash_1, rxjs_1, action_1, domtypeguards_1, domutil_1, exceptions_1, icon) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    lodash_1 = __importDefault(lodash_1);
    icon = __importStar(icon);
    var TYPE_TO_KIND = lodash_1.default.extend(Object.create(null), {
        // These are not actually type names. It is possible to use a kind name as a
        // type name if the transformation is not more specific. In this case the kind
        // === type.
        add: "add",
        delete: "delete",
        transform: "transform",
        insert: "add",
        "delete-element": "delete",
        "delete-parent": "delete",
        wrap: "wrap",
        "wrap-content": "wrap",
        "merge-with-next": "transform",
        "merge-with-previous": "transform",
        "swap-with-next": "transform",
        "swap-with-previous": "transform",
        split: "transform",
        append: "add",
        prepend: "add",
        unwrap: "unwrap",
        "add-attribute": "add",
        "delete-attribute": "delete",
    });
    var TYPE_TO_NODE_TYPE = lodash_1.default.extend(Object.create(null), {
        // These are not actually type names. These are here to handle the
        // case where the type is actually a kind name. Since they are not
        // more specific, the node type is set to "other". Note that
        // "wrap" and "unwrap" are always about elements so there is no
        // way to have a "wrap/unwrap" which has "other" for the node
        // type.
        add: "other",
        delete: "other",
        transform: "other",
        insert: "element",
        "delete-element": "element",
        "delete-parent": "element",
        wrap: "element",
        "wrap-content": "element",
        "merge-with-next": "element",
        "merge-with-previous": "element",
        "swap-with-next": "element",
        "swap-with-previous": "element",
        split: "element",
        append: "element",
        prepend: "element",
        unwrap: "element",
        "add-attribute": "attribute",
        "delete-attribute": "attribute",
    });
    function computeIconHtml(iconHtml, transformationType) {
        if (iconHtml !== undefined) {
            return iconHtml;
        }
        var kind = TYPE_TO_KIND[transformationType];
        if (kind !== undefined) {
            return icon.makeHTML(kind);
        }
        return undefined;
    }
    /**
     * An operation that transforms the data tree.
     */
    var Transformation = /** @class */ (function (_super) {
        __extends(Transformation, _super);
        function Transformation(editor, transformationType, desc, abbreviatedDesc, iconHtml, needsInput, handler) {
            var _this = this;
            if (typeof abbreviatedDesc === "function") {
                handler = abbreviatedDesc;
                _this = _super.call(this, editor, desc, undefined, computeIconHtml(undefined, transformationType), false) || this;
            }
            else {
                if (!(abbreviatedDesc === undefined ||
                    typeof abbreviatedDesc === "string")) {
                    throw new TypeError("abbreviatedDesc must be a string or undefined");
                }
                if (typeof iconHtml === "function") {
                    handler = iconHtml;
                    _this = _super.call(this, editor, desc, abbreviatedDesc, computeIconHtml(undefined, transformationType), false) || this;
                }
                else {
                    if (!(iconHtml === undefined || typeof iconHtml === "string")) {
                        throw new TypeError("iconHtml must be a string or undefined");
                    }
                    if (typeof needsInput === "function") {
                        handler = needsInput;
                        _this = _super.call(this, editor, desc, abbreviatedDesc, computeIconHtml(iconHtml, transformationType), false) || this;
                    }
                    else {
                        if (!(needsInput === undefined || typeof needsInput === "boolean")) {
                            throw new TypeError("needsInput must be a boolean or undefined");
                        }
                        _this = _super.call(this, editor, desc, abbreviatedDesc, computeIconHtml(iconHtml, transformationType), needsInput) || this;
                    }
                }
            }
            if (handler === undefined) {
                throw new Error("did not specify a handler");
            }
            _this.handler = handler;
            _this.transformationType = transformationType;
            _this.kind = TYPE_TO_KIND[transformationType];
            _this.nodeType = TYPE_TO_NODE_TYPE[transformationType];
            return _this;
        }
        Transformation.prototype.getDescriptionFor = function (data) {
            if (data.name === undefined) {
                return this.desc;
            }
            return this.desc.replace(/<name>/, data.name);
        };
        /**
         * Calls the ``fireTransformation`` method on this transformation's editor.
         *
         * @param data The data object to pass.
         */
        Transformation.prototype.execute = function (data) {
            this.editor.fireTransformation(this, data);
        };
        return Transformation;
    }(action_1.Action));
    exports.Transformation = Transformation;
    /**
     * Transformation events are generated by an editor before and after a
     * transformation is executed. The ``StartTransformation`` event is generated
     * before, and the ``EndTransformation`` is generated after. These events allow
     * modes to perform additional processing before or after a transformation, or
     * to abort a transformation while it is being processed.
     */
    var TransformationEvent = /** @class */ (function () {
        /**
         * @param name The name of the event.
         * @param transformation The transformation to which the event pertains.
         */
        function TransformationEvent(name, transformation) {
            this.name = name;
            this.transformation = transformation;
            this._aborted = false;
        }
        Object.defineProperty(TransformationEvent.prototype, "aborted", {
            /** Whether the transformation is aborted. */
            get: function () {
                return this._aborted;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Mark the transformation as aborted. Once aborted, a transformation cannot
         * be unaborted.
         */
        TransformationEvent.prototype.abort = function (message) {
            this._aborted = true;
            this._abortMessage = message;
        };
        /**
         * Raise an [[AbortTransformationException]] if the event was marked as
         * aborted.
         */
        TransformationEvent.prototype.throwIfAborted = function () {
            if (this.aborted) {
                throw new exceptions_1.AbortTransformationException(this._abortMessage);
            }
        };
        return TransformationEvent;
    }());
    exports.TransformationEvent = TransformationEvent;
    /**
     * A subject that emits [[TransformationEvent]] objects and immediately stops
     * calling subscribers when the [[TransformationEvent]] object it is processing
     * is aborted.
     */
    var TransformationEventSubject = /** @class */ (function (_super) {
        __extends(TransformationEventSubject, _super);
        function TransformationEventSubject() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TransformationEventSubject.prototype.next = function (value) {
            if (this.closed) {
                throw new rxjs_1.ObjectUnsubscribedError();
            }
            if (this.isStopped || value.aborted) {
                return;
            }
            for (var _i = 0, _a = this.observers.slice(); _i < _a.length; _i++) {
                var observer = _a[_i];
                observer.next(value);
                if (value.aborted) {
                    break;
                }
            }
        };
        return TransformationEventSubject;
    }(rxjs_1.Subject));
    exports.TransformationEventSubject = TransformationEventSubject;
    /**
     * Makes an element appropriate for a wed data tree.
     *
     * @param doc The document for which to make the element.
     *
     * @param ns The URI of the namespace to use for the new element.
     *
     * @param name The name of the new element.
     *
     * @param attrs An object whose fields will become attributes for the new
     * element.
     *
     * @returns The new element.
     */
    function makeElement(doc, ns, name, attrs) {
        var e = doc.createElementNS(ns, name);
        if (attrs !== undefined) {
            // Create attributes
            var keys = Object.keys(attrs).sort();
            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                var key = keys_1[_i];
                e.setAttribute(key, attrs[key]);
            }
        }
        return e;
    }
    exports.makeElement = makeElement;
    /**
     * Insert an element in a wed data tree.
     *
     * @param dataUpdater A tree updater through which to update the DOM tree.
     *
     * @param parent The parent of the new node.
     *
     * @param index Offset in the parent where to insert the new node.
     *
     * @param ns The URI of the namespace to use for the new element.
     *
     * @param name The name of the new element.
     *
     * @param attrs An object whose fields will become attributes for the new
     * element.
     *
     * @returns The new element.
     */
    function insertElement(dataUpdater, parent, index, ns, name, attrs) {
        var ownerDocument = domtypeguards_1.isDocument(parent) ? parent : parent.ownerDocument;
        var el = makeElement(ownerDocument, ns, name, attrs);
        dataUpdater.insertAt(parent, index, el);
        return el;
    }
    exports.insertElement = insertElement;
    /**
     * Wraps a span of text in a new element.
     *
     * @param dataUpdater A tree updater through which to update the DOM tree.
     *
     * @param node The DOM node where to wrap. Must be a text node.
     *
     * @param offset The offset in the node. This parameter specifies where to start
     * wrapping.
     *
     * @param endOffset Offset in the node. This parameter specifies where to end
     * wrapping.
     *
     * @param ns The URI of the namespace to use for the new element.
     *
     * @param name The name of the wrapping element.
     *
     * @param attrs An object whose fields will become attributes for the new
     * element.
     *
     * @returns The new element.
     */
    function wrapTextInElement(dataUpdater, node, offset, endOffset, ns, name, attrs) {
        var textToWrap = node.data.slice(offset, endOffset);
        var parent = node.parentNode;
        if (parent === null) {
            throw new Error("detached node");
        }
        var nodeOffset = domutil_1.indexOf(parent.childNodes, node);
        dataUpdater.deleteText(node, offset, textToWrap.length);
        var newElement = makeElement(node.ownerDocument, ns, name, attrs);
        if (textToWrap !== "") {
            // It is okay to manipulate the DOM directly as long as the DOM tree being
            // manipulated is not *yet* inserted into the data tree. That is the case
            // here.
            newElement.appendChild(node.ownerDocument.createTextNode(textToWrap));
        }
        if (node.parentNode === null) {
            // The entire node was removed.
            dataUpdater.insertAt(parent, nodeOffset, newElement);
        }
        else {
            dataUpdater.insertAt(node, offset, newElement);
        }
        return newElement;
    }
    exports.wrapTextInElement = wrapTextInElement;
    /**
     * Utility function for [[wrapInElement]].
     *
     * @param dataUpdater A tree updater through which to update the DOM tree.
     *
     * @param container The text node to split.
     *
     * @param offset Where to split the node
     *
     * @returns A caret location marking where the split occurred.
     */
    function _wie_splitTextNode(dataUpdater, container, offset) {
        var parent = container.parentNode;
        if (parent === null) {
            throw new Error("detached node");
        }
        var containerOffset = domutil_1.indexOf(parent.childNodes, container);
        // The first two cases here just return a caret outside of the text node
        // rather than make a split that will create a useless empty text node.
        if (offset === 0) {
            offset = containerOffset;
        }
        else if (offset >= container.length) {
            offset = containerOffset + 1;
        }
        else {
            var text = container.data.slice(offset);
            dataUpdater.setTextNode(container, container.data.slice(0, offset));
            dataUpdater.insertNodeAt(parent, containerOffset + 1, container.ownerDocument.createTextNode(text));
            offset = containerOffset + 1;
        }
        return [parent, offset];
    }
    /**
     * Wraps a well-formed span in a new element. This span can contain text and
     * element nodes.
     *
     * @param dataUpdater A tree updater through which to update the DOM tree.
     *
     * @param startContainer The node where to start wrapping.
     *
     * @param startOffset The offset where to start wrapping.
     *
     * @param endContainer The node where to end wrapping.
     *
     * @param endOffset The offset where to end wrapping.
     *
     * @param ns The URI of the namespace to use for the new element.
     *
     * @param name The name of the new element.
     *
     * @param [attrs] An object whose fields will become attributes for the new
     * element.
     *
     * @returns The new element.
     *
     * @throws {Error} If the range is malformed or if there is an internal error.
     */
    function wrapInElement(dataUpdater, startContainer, startOffset, endContainer, endOffset, ns, name, attrs) {
        if (!domutil_1.isWellFormedRange({ startContainer: startContainer, startOffset: startOffset, endContainer: endContainer,
            endOffset: endOffset })) {
            throw new Error("malformed range");
        }
        if (domtypeguards_1.isText(startContainer)) {
            // We already have an algorithm for this case.
            if (startContainer === endContainer) {
                return wrapTextInElement(dataUpdater, startContainer, startOffset, endOffset, ns, name, attrs);
            }
            _a = _wie_splitTextNode(dataUpdater, startContainer, startOffset), startContainer = _a[0], startOffset = _a[1];
        }
        if (domtypeguards_1.isText(endContainer)) {
            _b = _wie_splitTextNode(dataUpdater, endContainer, endOffset), endContainer = _b[0], endOffset = _b[1];
        }
        if (startContainer !== endContainer) {
            throw new Error("startContainer and endContainer are not the same;" +
                "probably due to an algorithmic mistake");
        }
        var newElement = makeElement(startContainer.ownerDocument, ns, name, attrs);
        while (--endOffset >= startOffset) {
            var endNode = endContainer.childNodes[endOffset];
            dataUpdater.deleteNode(endNode);
            // Okay to change a tree which is not yet connected to the data tree.
            newElement.insertBefore(endNode, newElement.firstChild);
        }
        dataUpdater.insertAt(startContainer, startOffset, newElement);
        return newElement;
        var _a, _b;
    }
    exports.wrapInElement = wrapInElement;
    /**
     * Replaces an element with its contents.
     *
     * @param dataUpdater A tree updater through which to update the DOM tree.
     *
     * @param node The element to unwrap.
     *
     * @returns The contents of the element.
     */
    function unwrap(dataUpdater, node) {
        var parent = node.parentNode;
        if (parent === null) {
            throw new Error("detached node");
        }
        var children = Array.prototype.slice.call(node.childNodes);
        var prev = node.previousSibling;
        var next = node.nextSibling;
        // This does not merge text nodes, which is what we want. We also want to
        // remove it first so that we don't generate so many update events.
        dataUpdater.deleteNode(node);
        // We want to calculate this index *after* removal.
        var nextIx = (next !== null) ? domutil_1.indexOf(parent.childNodes, next) :
            parent.childNodes.length;
        var lastChild = node.lastChild;
        // This also does not merge text nodes.
        while (node.firstChild != null) {
            dataUpdater.insertNodeAt(parent, nextIx++, node.firstChild);
        }
        // The order of the next two calls is important. We start at the end because
        // going the other way around could cause lastChild to leave the DOM tree.
        // Merge possible adjacent text nodes: the last child of the node that was
        // removed in the unwrapping and the node that was after the node that was
        // removed in the unwrapping.
        if (lastChild !== null) {
            dataUpdater.mergeTextNodes(lastChild);
        }
        // Merge the possible adjacent text nodes: the one before the start of the
        // children we unwrapped and the first child that was unwrapped. There may not
        // be a prev so we use the NF form of the call.
        dataUpdater.mergeTextNodesNF(prev);
        return children;
    }
    exports.unwrap = unwrap;
    /**
     * This function splits a node at the position of the caret. If the caret is not
     * inside the node or its descendants, an exception is raised.
     *
     * @param editor The editor on which we are to perform the transformation.
     *
     * @param node The node to split.
     *
     * @throws {Error} If the caret is not inside the node or its descendants.
     */
    function splitNode(editor, node) {
        var caret = editor.caretManager.getDataCaret();
        if (caret === undefined) {
            throw new Error("no caret");
        }
        if (!node.contains(caret.node)) {
            throw new Error("caret outside node");
        }
        var pair = editor.dataUpdater.splitAt(node, caret);
        // Find the deepest location at the start of the 2nd element.
        editor.caretManager.setCaret(domutil_1.firstDescendantOrSelf(pair[1]), 0);
    }
    exports.splitNode = splitNode;
    /**
     * This function merges an element with a previous element of the same name. For
     * the operation to go forward, the element must have a previous sibling and
     * this sibling must have the same name as the element being merged.
     *
     * @param editor The editor on which we are to perform the transformation.
     *
     * @param node The element to merge with previous.
     */
    function mergeWithPreviousHomogeneousSibling(editor, node) {
        var prev = node.previousElementSibling;
        if (prev === null) {
            return;
        }
        if (prev.localName !== node.localName ||
            prev.namespaceURI !== node.namespaceURI) {
            return;
        }
        // We need to record these to set the caret to a good position.
        var caretPos = prev.childNodes.length;
        var lastChild = prev.lastChild;
        var wasText = domtypeguards_1.isText(lastChild);
        // We need to record this *now* for future use, because it is possible that
        // the next loop could modify lastChild in place.
        var textLen = wasText ? lastChild.length : 0;
        var insertionPoint = prev.childNodes.length;
        // Reverse order
        for (var i = node.childNodes.length - 1; i >= 0; --i) {
            editor.dataUpdater.insertAt(prev, insertionPoint, node.childNodes[i].cloneNode(true));
        }
        if (wasText) {
            // If wasText is true, lastChild cannot be null.
            editor.dataUpdater.mergeTextNodes(lastChild);
            editor.caretManager.setCaret(prev.childNodes[caretPos - 1], textLen);
        }
        else {
            editor.caretManager.setCaret(prev, caretPos);
        }
        editor.dataUpdater.removeNode(node);
    }
    exports.mergeWithPreviousHomogeneousSibling = mergeWithPreviousHomogeneousSibling;
    /**
     * This function merges an element with a next element of the same name. For the
     * operation to go forward, the element must have a next sibling and this
     * sibling must have the same name as the element being merged.
     *
     * @param editor The editor on which we are to perform the transformation.
     *
     * @param node The element to merge with next.
     */
    function mergeWithNextHomogeneousSibling(editor, node) {
        var next = node.nextElementSibling;
        if (next === null) {
            return;
        }
        mergeWithPreviousHomogeneousSibling(editor, next);
    }
    exports.mergeWithNextHomogeneousSibling = mergeWithNextHomogeneousSibling;
    /**
     * This function swaps an element with a previous element of the same name. For
     * the operation to go forward, the element must have a previous sibling and
     * this sibling must have the same name as the element being merged.
     *
     * @param editor The editor on which we are to perform the transformation.
     *
     * @param node The element to swap with previous.
     */
    function swapWithPreviousHomogeneousSibling(editor, node) {
        var prev = node.previousElementSibling;
        if (prev === null) {
            return;
        }
        if (prev.localName !== node.localName ||
            prev.namespaceURI !== node.namespaceURI) {
            return;
        }
        var parent = prev.parentNode;
        if (parent === null) {
            throw new Error("detached node");
        }
        editor.dataUpdater.removeNode(node);
        editor.dataUpdater.insertBefore(parent, node, prev);
        editor.caretManager.setCaret(node);
    }
    exports.swapWithPreviousHomogeneousSibling = swapWithPreviousHomogeneousSibling;
    /**
     * This function swaps an element with a next element of the same name. For the
     * operation to go forward, the element must have a next sibling and this
     * sibling must have the same name as the element being merged.
     *
     * @param editor The editor on which we are to perform the transformation.
     *
     * @param node The element to swap with next.
     */
    function swapWithNextHomogeneousSibling(editor, node) {
        var next = node.nextElementSibling;
        if (next === null) {
            return;
        }
        swapWithPreviousHomogeneousSibling(editor, next);
    }
    exports.swapWithNextHomogeneousSibling = swapWithNextHomogeneousSibling;
    /**
     * Remove markup from the current selection. This turns mixed content into pure
     * text. The selection must be well-formed, otherwise the transformation is
     * aborted.
     *
     * @param editor The editor for which we are doing the transformation.
     */
    function removeMarkup(editor) {
        var selection = editor.caretManager.sel;
        // Do nothing if we don't have a selection.
        if (selection === undefined || selection.collapsed) {
            return;
        }
        if (!selection.wellFormed) {
            editor.modals.getModal("straddling").modal();
            throw new exceptions_1.AbortTransformationException("selection is not well-formed");
        }
        var _a = selection.asDataCarets(), start = _a[0], end = _a[1];
        var cutRet = editor.dataUpdater.cut(start, end);
        var newText = "";
        var cutNodes = cutRet[1];
        for (var _i = 0, cutNodes_1 = cutNodes; _i < cutNodes_1.length; _i++) {
            var el = cutNodes_1[_i];
            newText += el.textContent;
        }
        var insertRet = editor.dataUpdater.insertText(cutRet[0], newText);
        editor.caretManager.setRange(start.make(insertRet.node, insertRet.isNew ? cutRet[0].offset : 0), insertRet.caret);
    }
    exports.removeMarkup = removeMarkup;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  wasText endOffset prepend endContainer startOffset html DOM
//  LocalWords:  startContainer Mangalam Dubeau previousSibling nextSibling MPL
//  LocalWords:  insertNodeAt deleteNode mergeTextNodes lastChild prev Prepend
//  LocalWords:  deleteText domutil
//# sourceMappingURL=transformation.js.map

/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return config; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var _enable_super_gross_mode_that_will_cause_bad_things = false;
/**
 * The global configuration object for RxJS, used to configure things
 * like what Promise contructor should used to create Promises
 */
var config = {
    /**
     * The promise constructor used by default for methods such as
     * {@link toPromise} and {@link forEach}
     */
    Promise: undefined,
    /**
     * If true, turns on synchronous error rethrowing, which is a deprecated behavior
     * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe
     * call in a try/catch block. It also enables producer interference, a nasty bug
     * where a multicast can be broken for all observers by a downstream consumer with
     * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME
     * FOR MIGRATION REASONS.
     */
    set useDeprecatedSynchronousErrorHandling(value) {
        if (value) {
            var error = /*@__PURE__*/ new Error();
            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
        }
        else if (_enable_super_gross_mode_that_will_cause_bad_things) {
            /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');
        }
        _enable_super_gross_mode_that_will_cause_bad_things = value;
    },
    get useDeprecatedSynchronousErrorHandling() {
        return _enable_super_gross_mode_that_will_cause_bad_things;
    },
};
//# sourceMappingURL=config.js.map


/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = noop;
/* tslint:disable:no-empty */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function noop() { }
//# sourceMappingURL=noop.js.map


/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ObjectUnsubscribedError; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */

/**
 * An error thrown when an action is invalid because the object has been
 * unsubscribed.
 *
 * @see {@link Subject}
 * @see {@link BehaviorSubject}
 *
 * @class ObjectUnsubscribedError
 */
var ObjectUnsubscribedError = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ObjectUnsubscribedError, _super);
    function ObjectUnsubscribedError() {
        var _this = _super.call(this, 'object unsubscribed') || this;
        _this.name = 'ObjectUnsubscribedError';
        Object.setPrototypeOf(_this, ObjectUnsubscribedError.prototype);
        return _this;
    }
    return ObjectUnsubscribedError;
}(Error));

//# sourceMappingURL=ObjectUnsubscribedError.js.map


/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Notification; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__observable_empty__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__observable_of__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__observable_throwError__ = __webpack_require__(61);
/** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */



/**
 * Represents a push-based event or value that an {@link Observable} can emit.
 * This class is particularly useful for operators that manage notifications,
 * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
 * others. Besides wrapping the actual delivered value, it also annotates it
 * with metadata of, for instance, what type of push message it is (`next`,
 * `error`, or `complete`).
 *
 * @see {@link materialize}
 * @see {@link dematerialize}
 * @see {@link observeOn}
 *
 * @class Notification<T>
 */
var Notification = /*@__PURE__*/ (function () {
    function Notification(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === 'N';
    }
    /**
     * Delivers to the given `observer` the value wrapped by this Notification.
     * @param {Observer} observer
     * @return
     */
    Notification.prototype.observe = function (observer) {
        switch (this.kind) {
            case 'N':
                return observer.next && observer.next(this.value);
            case 'E':
                return observer.error && observer.error(this.error);
            case 'C':
                return observer.complete && observer.complete();
        }
    };
    /**
     * Given some {@link Observer} callbacks, deliver the value represented by the
     * current Notification to the correctly corresponding callback.
     * @param {function(value: T): void} next An Observer `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.do = function (next, error, complete) {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return next && next(this.value);
            case 'E':
                return error && error(this.error);
            case 'C':
                return complete && complete();
        }
    };
    /**
     * Takes an Observer or its individual callback functions, and calls `observe`
     * or `do` methods accordingly.
     * @param {Observer|function(value: T): void} nextOrObserver An Observer or
     * the `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.accept = function (nextOrObserver, error, complete) {
        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
            return this.observe(nextOrObserver);
        }
        else {
            return this.do(nextOrObserver, error, complete);
        }
    };
    /**
     * Returns a simple Observable that just delivers the notification represented
     * by this Notification instance.
     * @return {any}
     */
    Notification.prototype.toObservable = function () {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return Object(__WEBPACK_IMPORTED_MODULE_1__observable_of__["a" /* of */])(this.value);
            case 'E':
                return Object(__WEBPACK_IMPORTED_MODULE_2__observable_throwError__["a" /* throwError */])(this.error);
            case 'C':
                return Object(__WEBPACK_IMPORTED_MODULE_0__observable_empty__["b" /* empty */])();
        }
        throw new Error('unexpected notification kind value');
    };
    /**
     * A shortcut to create a Notification instance of the type `next` from a
     * given value.
     * @param {T} value The `next` value.
     * @return {Notification<T>} The "next" Notification representing the
     * argument.
     * @nocollapse
     */
    Notification.createNext = function (value) {
        if (typeof value !== 'undefined') {
            return new Notification('N', value);
        }
        return Notification.undefinedValueNotification;
    };
    /**
     * A shortcut to create a Notification instance of the type `error` from a
     * given error.
     * @param {any} [err] The `error` error.
     * @return {Notification<T>} The "error" Notification representing the
     * argument.
     * @nocollapse
     */
    Notification.createError = function (err) {
        return new Notification('E', undefined, err);
    };
    /**
     * A shortcut to create a Notification instance of the type `complete`.
     * @return {Notification<any>} The valueless "complete" Notification.
     * @nocollapse
     */
    Notification.createComplete = function () {
        return Notification.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    Notification.undefinedValueNotification = new Notification('N', undefined);
    return Notification;
}());

//# sourceMappingURL=Notification.js.map


/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AsyncSubject; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subject__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Subscription__ = __webpack_require__(8);
/** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */



/**
 * @class AsyncSubject<T>
 */
var AsyncSubject = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](AsyncSubject, _super);
    function AsyncSubject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.value = null;
        _this.hasNext = false;
        _this.hasCompleted = false;
        return _this;
    }
    /** @deprecated This is an internal implementation detail, do not use. */
    AsyncSubject.prototype._subscribe = function (subscriber) {
        if (this.hasError) {
            subscriber.error(this.thrownError);
            return __WEBPACK_IMPORTED_MODULE_2__Subscription__["a" /* Subscription */].EMPTY;
        }
        else if (this.hasCompleted && this.hasNext) {
            subscriber.next(this.value);
            subscriber.complete();
            return __WEBPACK_IMPORTED_MODULE_2__Subscription__["a" /* Subscription */].EMPTY;
        }
        return _super.prototype._subscribe.call(this, subscriber);
    };
    AsyncSubject.prototype.next = function (value) {
        if (!this.hasCompleted) {
            this.value = value;
            this.hasNext = true;
        }
    };
    AsyncSubject.prototype.error = function (error) {
        if (!this.hasCompleted) {
            _super.prototype.error.call(this, error);
        }
    };
    AsyncSubject.prototype.complete = function () {
        this.hasCompleted = true;
        if (this.hasNext) {
            _super.prototype.next.call(this, this.value);
        }
        _super.prototype.complete.call(this);
    };
    return AsyncSubject;
}(__WEBPACK_IMPORTED_MODULE_1__Subject__["a" /* Subject */]));

//# sourceMappingURL=AsyncSubject.js.map


/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = concat;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_isScheduler__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__of__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__from__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__operators_concatAll__ = __webpack_require__(98);
/** PURE_IMPORTS_START _util_isScheduler,_of,_from,_operators_concatAll PURE_IMPORTS_END */




/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which sequentially emits all values from given
 * Observable and then moves on to the next.
 *
 * <span class="informal">Concatenates multiple Observables together by
 * sequentially emitting their values, one Observable after the other.</span>
 *
 * <img src="./img/concat.png" width="100%">
 *
 * `concat` joins multiple Observables together, by subscribing to them one at a time and
 * merging their results into the output Observable. You can pass either an array of
 * Observables, or put them directly as arguments. Passing an empty array will result
 * in Observable that completes immediately.
 *
 * `concat` will subscribe to first input Observable and emit all its values, without
 * changing or affecting them in any way. When that Observable completes, it will
 * subscribe to then next Observable passed and, again, emit its values. This will be
 * repeated, until the operator runs out of Observables. When last input Observable completes,
 * `concat` will complete as well. At any given moment only one Observable passed to operator
 * emits values. If you would like to emit values from passed Observables concurrently, check out
 * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,
 * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.
 *
 * Note that if some input Observable never completes, `concat` will also never complete
 * and Observables following the one that did not complete will never be subscribed. On the other
 * hand, if some Observable simply completes immediately after it is subscribed, it will be
 * invisible for `concat`, which will just move on to the next Observable.
 *
 * If any Observable in chain errors, instead of passing control to the next Observable,
 * `concat` will error immediately as well. Observables that would be subscribed after
 * the one that emitted error, never will.
 *
 * If you pass to `concat` the same Observable many times, its stream of values
 * will be "replayed" on every subscription, which means you can repeat given Observable
 * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,
 * you can always use {@link repeat}.
 *
 * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
 * var timer = Rx.Observable.interval(1000).take(4);
 * var sequence = Rx.Observable.range(1, 10);
 * var result = Rx.Observable.concat(timer, sequence);
 * result.subscribe(x => console.log(x));
 *
 * // results in:
 * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10
 *
 *
 * @example <caption>Concatenate an array of 3 Observables</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed
 * result.subscribe(x => console.log(x));
 *
 * // results in the following:
 * // (Prints to console sequentially)
 * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9
 * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5
 * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9
 *
 *
 * @example <caption>Concatenate the same Observable to repeat it</caption>
 * const timer = Rx.Observable.interval(1000).take(2);
 *
 * Rx.Observable.concat(timer, timer) // concating the same Observable!
 * .subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('...and it is done!')
 * );
 *
 * // Logs:
 * // 0 after 1s
 * // 1 after 2s
 * // 0 after 3s
 * // 1 after 4s
 * // "...and it is done!" also after 4s
 *
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 *
 * @param {ObservableInput} input1 An input Observable to concatenate with others.
 * @param {ObservableInput} input2 An input Observable to concatenate with others.
 * More than one input Observables may be given as argument.
 * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each
 * Observable subscription on.
 * @return {Observable} All values of each passed Observable merged into a
 * single Observable, in order, in serial fashion.
 * @static true
 * @name concat
 * @owner Observable
 */
function concat() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    if (observables.length === 1 || (observables.length === 2 && Object(__WEBPACK_IMPORTED_MODULE_0__util_isScheduler__["a" /* isScheduler */])(observables[1]))) {
        return Object(__WEBPACK_IMPORTED_MODULE_2__from__["a" /* from */])(observables[0]);
    }
    return Object(__WEBPACK_IMPORTED_MODULE_3__operators_concatAll__["a" /* concatAll */])()(__WEBPACK_IMPORTED_MODULE_1__of__["a" /* of */].apply(void 0, observables));
}
//# sourceMappingURL=concat.js.map


/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isNumeric;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__isArray__ = __webpack_require__(10);
/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */

function isNumeric(val) {
    // parseFloat NaNs numeric-cast false positives (null|true|false|"")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    // adding 1 corrects loss of precision from parseFloat (#15100)
    return !Object(__WEBPACK_IMPORTED_MODULE_0__isArray__["a" /* isArray */])(val) && (val - parseFloat(val) + 1) >= 0;
}
//# sourceMappingURL=isNumeric.js.map


/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return throwIfEmpty; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__tap__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_EmptyError__ = __webpack_require__(32);
/** PURE_IMPORTS_START _tap,_util_EmptyError PURE_IMPORTS_END */


/**
 * If the source observable completes without emitting a value, it will emit
 * an error. The error will be created at that time by the optional
 * `errorFactory` argument, otherwise, the error will be {@link ErrorEmpty}.
 *
 * @example
 *
 * const click$ = fromEvent(button, 'click');
 *
 * clicks$.pipe(
 *   takeUntil(timer(1000)),
 *   throwIfEmpty(
 *     () => new Error('the button was not clicked within 1 second')
 *   ),
 * )
 * .subscribe({
 *   next() { console.log('The button was clicked'); },
 *   error(err) { console.error(err); },
 * });
 * @param {Function} [errorFactory] A factory function called to produce the
 * error to be thrown when the source observable completes without emitting a
 * value.
 */
var throwIfEmpty = function (errorFactory) {
    if (errorFactory === void 0) {
        errorFactory = defaultErrorFactory;
    }
    return Object(__WEBPACK_IMPORTED_MODULE_0__tap__["a" /* tap */])({
        hasValue: false,
        next: function () { this.hasValue = true; },
        complete: function () {
            if (!this.hasValue) {
                throw errorFactory();
            }
        }
    });
};
function defaultErrorFactory() {
    return new __WEBPACK_IMPORTED_MODULE_1__util_EmptyError__["a" /* EmptyError */]();
}
//# sourceMappingURL=throwIfEmpty.js.map


/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = reduce;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__scan__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__takeLast__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__defaultIfEmpty__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_pipe__ = __webpack_require__(56);
/** PURE_IMPORTS_START _scan,_takeLast,_defaultIfEmpty,_util_pipe PURE_IMPORTS_END */




/* tslint:enable:max-line-length */
/**
 * Applies an accumulator function over the source Observable, and returns the
 * accumulated result when the source completes, given an optional seed value.
 *
 * <span class="informal">Combines together all values emitted on the source,
 * using an accumulator function that knows how to join a new source value into
 * the accumulation from the past.</span>
 *
 * <img src="./img/reduce.png" width="100%">
 *
 * Like
 * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),
 * `reduce` applies an `accumulator` function against an accumulation and each
 * value of the source Observable (from the past) to reduce it to a single
 * value, emitted on the output Observable. Note that `reduce` will only emit
 * one value, only when the source Observable completes. It is equivalent to
 * applying operator {@link scan} followed by operator {@link last}.
 *
 * Returns an Observable that applies a specified `accumulator` function to each
 * item emitted by the source Observable. If a `seed` value is specified, then
 * that value will be used as the initial value for the accumulator. If no seed
 * value is specified, the first item of the source is used as the seed.
 *
 * @example <caption>Count the number of click events that happened in 5 seconds</caption>
 * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')
 *   .takeUntil(Rx.Observable.interval(5000));
 * var ones = clicksInFiveSeconds.mapTo(1);
 * var seed = 0;
 * var count = ones.reduce((acc, one) => acc + one, seed);
 * count.subscribe(x => console.log(x));
 *
 * @see {@link count}
 * @see {@link expand}
 * @see {@link mergeScan}
 * @see {@link scan}
 *
 * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function
 * called on each source value.
 * @param {R} [seed] The initial accumulation value.
 * @return {Observable<R>} An Observable that emits a single value that is the
 * result of accumulating the values emitted by the source Observable.
 * @method reduce
 * @owner Observable
 */
function reduce(accumulator, seed) {
    // providing a seed of `undefined` *should* be valid and trigger
    // hasSeed! so don't use `seed !== undefined` checks!
    // For this reason, we have to check it here at the original call site
    // otherwise inside Operator/Subscriber we won't know if `undefined`
    // means they didn't provide anything or if they literally provided `undefined`
    if (arguments.length >= 2) {
        return function reduceOperatorFunctionWithSeed(source) {
            return Object(__WEBPACK_IMPORTED_MODULE_3__util_pipe__["a" /* pipe */])(Object(__WEBPACK_IMPORTED_MODULE_0__scan__["a" /* scan */])(accumulator, seed), Object(__WEBPACK_IMPORTED_MODULE_1__takeLast__["a" /* takeLast */])(1), Object(__WEBPACK_IMPORTED_MODULE_2__defaultIfEmpty__["a" /* defaultIfEmpty */])(seed))(source);
        };
    }
    return function reduceOperatorFunction(source) {
        return Object(__WEBPACK_IMPORTED_MODULE_3__util_pipe__["a" /* pipe */])(Object(__WEBPACK_IMPORTED_MODULE_0__scan__["a" /* scan */])(function (acc, value, index) {
            return accumulator(acc, value, index + 1);
        }), Object(__WEBPACK_IMPORTED_MODULE_1__takeLast__["a" /* takeLast */])(1))(source);
    };
}
//# sourceMappingURL=reduce.js.map


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Editing actions.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(50)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, button_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Actions model "things the user can do." These can be contextual menu items,
     * menu items, buttons, keybindings, etc. The base class is always enabled but
     * derived classes can set their own enabled state depending on whatever
     * conditions they choose.
     */
    var Action = /** @class */ (function () {
        /**
         * @param editor The editor to which this action belongs.
         *
         * @param desc A simple string description of the action.
         *
         * @param abbreviatedDesc An abbreviated description, suitable to put into a
         * button, for instance.
         *
         * @param icon HTML code that represents an icon for this action. This can be
         * a simple string or something more complex.
         *
         * @param needsInput Indicates whether this action needs input from the
         * user. For instance, an action which brings up a modal dialog to ask
         * something of the user must have this parameter set to ``true``. It is
         * important to record whether an action needs input because, to take one
         * example, the ``autoinsert`` logic will try to insert automatically any
         * element it can. However, doing this for elements that need user input will
         * just confuse the user (or could cause a crash). Therefore, it is important
         * that the insertion operations for such elements be marked with
         * ``needsInput`` set to ``true`` so that the ``autoinsert`` logic backs off
         * from trying to insert these elements.
         */
        function Action(editor, desc, abbreviatedDesc, icon, needsInput) {
            if (icon === void 0) { icon = ""; }
            if (needsInput === void 0) { needsInput = false; }
            this.editor = editor;
            this.desc = desc;
            this.abbreviatedDesc = abbreviatedDesc;
            this.icon = icon;
            this.needsInput = needsInput;
            this.needsInput = !!needsInput; // normalize value
            this.boundHandler = this.eventHandler.bind(this);
            this.boundTerminalHandler = this.terminalEventHandler.bind(this);
        }
        /**
         * An event handler. By default just calls [[execute]]. You probably want to
         * use [[boundHandler]] rather than rebind this method. This handler always
         * returns ``undefined`` and calls ``preventDefault()`` on the event passed to
         * it.
         *
         * @param ev The DOM event.
         */
        Action.prototype.eventHandler = function (ev) {
            //
            // Due to the way jQuery's typings are set, the event object passed when
            // calling this method will essentially have a ``data`` field with type
            // ``any``, and this will sastisfy the type checking done at compilation
            // time. There does not appear to be a simple way to coerce ``data`` to not
            // be null or undefined.
            //
            // We toyed with the idea of having it be an error to call this method with
            // an event that does not have a ``data`` field set to some valid value, but
            // that did not seem fruitful. Instead, we silently use an empty object if
            // the field is missing.
            //
            // tslint:disable-next-line:no-object-literal-type-assertion
            var data = ev.data != null ? ev.data : {};
            this.execute(data);
            ev.preventDefault();
        };
        /**
         * An event handler. By default just calls [[eventHandler]]. You probably want
         * to use [[boundTerminalHandler]] rather than rebind this method.  This
         * handler always returns false and calls ``preventDefault()`` and
         * ``stopPropagation`` on the event passed to it.
         *
         * @param ev The DOM event.
         *
         * @returns False.
         */
        Action.prototype.terminalEventHandler = function (ev) {
            this.eventHandler(ev);
            ev.preventDefault();
            ev.stopPropagation();
            return false;
        };
        /**
         * Gets a description for this action.
         *
         * @returns A description for the action.
         */
        Action.prototype.getDescription = function () {
            return this.desc;
        };
        /**
         * Gets a description for this action, contextualized by the data passed.
         *
         * @param data The same data that would be passed to [[execute]].
         *
         * @returns The description.
         */
        // @ts-ignore
        Action.prototype.getDescriptionFor = function (data) {
            return this.getDescription();
        };
        /**
         * Gets the abbreviated description for this action.
         *
         * @returns The abbreviated description.
         */
        Action.prototype.getAbbreviatedDescription = function () {
            return this.abbreviatedDesc;
        };
        /**
         * Gets the icon.
         *
         * @returns The icon. This is an HTML string.
         */
        Action.prototype.getIcon = function () {
            return this.icon;
        };
        /**
         * This method returns the icon together with the description for the
         * data passed as parameter.
         *
         * @param data The same data that would be passed to [[execute]].
         *
         * @returns The icon and the description, combined for presentation.
         */
        Action.prototype.getLabelFor = function (data) {
            var desc = this.getDescriptionFor(data);
            var icon = this.getIcon();
            if (icon !== "" && desc !== "") {
                return icon + " " + desc;
            }
            if (icon !== "") {
                return icon;
            }
            return desc;
        };
        /**
         * Converts this action to a string. By default calls [[getDescription]].
         */
        Action.prototype.toString = function () {
            return this.getDescription();
        };
        Action.prototype.makeButton = function (data) {
            var _this = this;
            var button = new button_1.Button(data !== undefined ? this.getDescriptionFor(data) : this.getDescription(), this.getAbbreviatedDescription(), this.getIcon());
            button.events.subscribe(function () {
                // tslint:disable-next-line:no-object-literal-type-assertion
                _this.execute(data !== undefined ? data : {});
            });
            return button;
        };
        return Action;
    }());
    exports.Action = Action;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  autoinsert Dubeau MPL Mangalam html keybindings
//# sourceMappingURL=action.js.map

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(19)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, rxjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * A simple button that can be clicked.
     */
    var Button = /** @class */ (function () {
        /**
         * @param desc The full description of what the button does. This will be used
         * in the button's tooltip.
         *
         * @param abbreviatedDesc An abbreviated description. This may be used as text
         * inside the button.
         *
         * @param icon An optional icon for the button.
         *
         * @param extraClass Extra classes to add to ``className``.
         */
        function Button(desc, abbreviatedDesc, icon, extraClass) {
            if (icon === void 0) { icon = ""; }
            if (extraClass === void 0) { extraClass = ""; }
            this.desc = desc;
            this.abbreviatedDesc = abbreviatedDesc;
            this.icon = icon;
            this.extraClass = extraClass;
            /**
             * The object on which this class and subclasses may push new events.
             */
            this._events = new rxjs_1.Subject();
            /**
             * The observable on which clients can listen for events.
             */
            this.events = this._events.asObservable();
        }
        Object.defineProperty(Button.prototype, "buttonClassName", {
            /** The class name that [[makeButton]] must use. */
            get: function () {
                var extraClass = this.extraClass;
                if (extraClass !== "") {
                    extraClass = " " + extraClass;
                }
                return "btn btn-default" + extraClass;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "buttonText", {
            /**
             * The text that goes inside a button. This is the abbreviated description, or
             * if unavailable, the long description.
             */
            get: function () {
                // If we don't have an abbreviation, we get the regular description.
                return this.abbreviatedDesc === undefined ?
                    this.desc : this.abbreviatedDesc;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Render the button.
         *
         * @param parent On first render, this parameter must contain the parent DOM
         * element of the button. On later renders, this parameter is ignored.
         *
         */
        Button.prototype.render = function (parent) {
            var position = null;
            if (this.el !== undefined) {
                position = this.el.nextSibling;
                parent = this.el.parentNode;
                var $el = $(this.el);
                $el.remove();
                $el.tooltip("destroy");
            }
            if (parent == null) {
                throw new Error("called first render without a parent");
            }
            var button = this.makeButton(parent.ownerDocument);
            this.el = button;
            parent.insertBefore(button, position);
        };
        /**
         * Create a button, fill its contents, set its tooltip and add the event
         * handlers.
         *
         * @param doc The document in which we are creating the element.
         *
         * @returns The new button.
         */
        Button.prototype.makeButton = function (doc) {
            var button = doc.createElement("button");
            button.className = this.buttonClassName;
            var $button = $(button);
            this.setButtonContent(button);
            this.setButtonTooltip($button);
            this.setButtonEventHandlers($button);
            return button;
        };
        /**
         * Fill the content of the button.
         *
         * @param button The button to fill.
         */
        Button.prototype.setButtonContent = function (button) {
            var icon = this.icon;
            if (icon !== "") {
                // tslint:disable-next-line:no-inner-html
                button.innerHTML = icon;
            }
            else {
                button.textContent = this.buttonText;
            }
        };
        /**
         * Make a tooltip for the button.
         *
         * @param $button The button for which to make a tooltip.
         */
        Button.prototype.setButtonTooltip = function ($button) {
            var desc = this.desc;
            if (this.icon !== "" || this.buttonText !== desc) {
                $button[0].setAttribute("title", desc);
                $button.tooltip({ title: desc,
                    container: "body",
                    placement: "auto",
                    trigger: "hover" });
            }
        };
        /**
         * Set event handlers on the button.
         */
        Button.prototype.setButtonEventHandlers = function ($button) {
            var _this = this;
            $button.click(function () {
                _this._events.next({ name: "Click", button: _this });
                return false;
            });
            // Prevents acquiring the focus.
            $button.mousedown(false);
        };
        return Button;
    }());
    exports.Button = Button;
    /**
     * A button that represents an on/off state.
     */
    var ToggleButton = /** @class */ (function (_super) {
        __extends(ToggleButton, _super);
        /**
         * @param initialyPressed Whether the button is initially pressed.
         *
         * @param desc See [[Button]].
         *
         * @param abbreviatedDesc See [[Button]].
         *
         * @param icon See [[Button]].
         *
         * @param extraClass See [[Button]].
         */
        function ToggleButton(initialyPressed, desc, abbreviatedDesc, icon, extraClass) {
            if (icon === void 0) { icon = ""; }
            if (extraClass === void 0) { extraClass = ""; }
            var _this = _super.call(this, desc, abbreviatedDesc, icon, extraClass) || this;
            _this.desc = desc;
            _this.abbreviatedDesc = abbreviatedDesc;
            _this.icon = icon;
            _this.extraClass = extraClass;
            _this._pressed = initialyPressed;
            _this.events.subscribe(function (event) {
                if (event.name !== "Click" || _this.el === undefined) {
                    return;
                }
                _this._pressed = !_this._pressed;
                _this.render();
            });
            return _this;
        }
        Object.defineProperty(ToggleButton.prototype, "pressed", {
            /**
             * Whether the button is in the pressed state.
             */
            get: function () {
                return this._pressed;
            },
            set: function (value) {
                if (this._pressed === value) {
                    return;
                }
                this._pressed = value;
                if (this.el !== undefined) {
                    this.render();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "buttonClassName", {
            get: function () {
                var extraClass = this.extraClass;
                if (extraClass !== "") {
                    extraClass = " " + extraClass;
                }
                return "btn btn-default" + extraClass + (this._pressed ? " active" : "");
            },
            enumerable: true,
            configurable: true
        });
        return ToggleButton;
    }(Button));
    exports.ToggleButton = ToggleButton;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//# sourceMappingURL=button.js.map

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Module implementing an class that describes keyboard keys.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(22), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, browsers) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    browsers = __importStar(browsers);
    var id = 0;
    // tslint:disable-next-line:completed-docs class-name
    var EITHER_ = /** @class */ (function () {
        function EITHER_() {
        }
        EITHER_.prototype.toString = function () {
            return "EITHER";
        };
        return EITHER_;
    }());
    exports.EITHER_ = EITHER_;
    /**
     * Value meaning "either true or false", by opposition to ``true`` and
     * ``false``.
     */
    exports.EITHER = new EITHER_();
    /**
     * One and only one instance of a Key object exists per set of parameters used
     * for its construction. So if ``a = new Key(1, 2, 3)`` and ``b = new Key(1, 2,
     * 3)`` then ``a === b`` is true. The last three parameters are normalized to
     * boolean values, so ``new Key(1, 2, 3)`` is the same as ``new Key(1, 2, 3,
     * false, false, false)``.
     *
     * Key objects should be considered immutable. Modifying them after their
     * creation is likely to cause code to execute erratically.
     *
     * A note on the handling of the shift key. For key presses, we do not care
     * whether shift was held or not when the key was pressed. It does not matter to
     * us whether the user types the letter A because "Shift-a" was pressed or
     * because the user was in caps lock mode and pressed "a". Conversely,
     * ``keydown`` and ``keyup`` events concern themselves with Shift. We do want to
     * distinguish Ctrl-A and Ctrl-Shift-A. (Yes, we use the capital A for both:
     * browsers report that the key "A" was pressed whether Shift was held or not.)
     */
    var Key = /** @class */ (function () {
        /**
         * @param hashKey The unique hash which represents this key.
         *
         * @param which The character code of the key.
         *
         * @param keypress Whether this key is meant to be used for keypress events
         * rather than keyup and keydown.
         *
         * @param keyCode The key code of the key.
         *
         * @param charCode The character code of the key.
         *
         * @param ctrlKey Whether this key requires the Ctrl key held.
         *
         * @param altKey Whether this key requires the Alt key held.
         *
         * @param metaKey Whether this key requires the meta key held.
         *
         * @param shiftKey Whether this key requires the shift key held. It is invalid
         * to use this parameter if ``keypress`` is ``true``. When ``keypress`` is
         * ``false``, an unspecified value here means ``false``.
         */
        function Key(hashKey, which, keypress, keyCode, charCode, ctrlKey, altKey, metaKey, shiftKey) {
            if (keypress === void 0) { keypress = true; }
            if (charCode === void 0) { charCode = 0; }
            if (ctrlKey === void 0) { ctrlKey = false; }
            if (altKey === void 0) { altKey = false; }
            if (metaKey === void 0) { metaKey = false; }
            if (shiftKey === void 0) { shiftKey = exports.EITHER; }
            if (keypress) {
                if (shiftKey !== exports.EITHER) {
                    throw new Error("shiftKey with key presses must be EITHER");
                }
            }
            this.which = which;
            this.keyCode = keyCode;
            this.charCode = charCode;
            this.ctrlKey = ctrlKey;
            this.altKey = altKey;
            this.metaKey = metaKey;
            this.shiftKey = shiftKey;
            this.keypress = keypress;
            this.hashKey = hashKey;
            this.id = id++;
        }
        /**
         * Client code should use the convenience functions provided by this module to
         * create keys rather than use this function directly.
         *
         * @param which The character code of the key.
         *
         * @param keypress Whether this key is meant to be used for keypress events
         * rather than keyup and keydown.
         *
         * @param keyCode The key code of the key.
         *
         * @param charCode The character code of the key.
         *
         * @param ctrlKey Whether this key requires the Ctrl key held.
         *
         * @param altKey Whether this key requires the Alt key held.
         *
         * @param metaKey Whether this key requires the meta key held.
         *
         * @param shiftKey Whether this key requires the shift key held. It is invalid
         * to use this parameter if ``keypress`` is ``true``. When ``keypress`` is
         * ``false``, an unspecified value here means ``false``.
         *
         * @returns The key corresponding to the parameters.
         */
        Key.make = function (which, keypress, keyCode, charCode, ctrlKey, altKey, metaKey, shiftKey) {
            if (keypress === void 0) { keypress = true; }
            if (charCode === void 0) { charCode = 0; }
            if (ctrlKey === void 0) { ctrlKey = false; }
            if (altKey === void 0) { altKey = false; }
            if (metaKey === void 0) { metaKey = false; }
            if (shiftKey === void 0) { shiftKey = exports.EITHER; }
            // Some separator is necessary because otherwise there would be no way to
            // distinguish (1, 23, 4, ...) from (12, 3, 4, ...) or (1, 2, 34, ...).
            var key = [which, keyCode, charCode, ctrlKey, altKey, metaKey, shiftKey,
                keypress].join(",");
            // Ensure we have only one of each key created.
            var cached = Key.__cache[key];
            if (cached === undefined) {
                Key.__cache[key] = cached = new Key(key, which, keypress, keyCode, charCode, ctrlKey, altKey, metaKey, shiftKey);
            }
            return cached;
        };
        /**
         * This method compares the key object to an event object. The event object
         * should have been generated for a keyboard event. This method does not check
         * the type of object.
         *
         * @param ev A jQuery or DOM event object.
         * @returns True if the key object matches the event, false
         * otherwise.
         */
        Key.prototype.matchesEvent = function (ev) {
            return ev.which === this.which &&
                ev.keyCode === this.keyCode &&
                ev.charCode === this.charCode &&
                ev.ctrlKey === this.ctrlKey &&
                ev.altKey === this.altKey &&
                ev.metaKey === this.metaKey &&
                // If shiftKey is undefined, we don't compare it.
                ((this.shiftKey === exports.EITHER) || (ev.shiftKey === this.shiftKey)) &&
                (this.keypress ? (ev.type === "keypress") :
                    ((ev.type === "keydown") || (ev.type === "keyup")));
        };
        /**
         * Sets an event object so that it matches this key. If this is not a keypress
         * event, the event type will be set to keydown. The caller can set it to
         * keyup as needed.
         *
         * @param ev A jQuery or DOM event object. This object is modified by the
         * method.
         */
        Key.prototype.setEventToMatch = function (ev) {
            // tslint:disable-next-line:no-any
            var asAny = ev;
            asAny.which = this.which;
            asAny.keyCode = this.keyCode;
            asAny.charCode = this.charCode;
            asAny.ctrlKey = this.ctrlKey;
            asAny.altKey = this.altKey;
            asAny.metaKey = this.metaKey;
            if (this.shiftKey !== exports.EITHER) {
                asAny.shiftKey = this.shiftKey;
            }
            if (this.keypress) {
                asAny.type = "keypress";
            }
            else {
                asAny.type = "keydown";
            }
        };
        /**
         * The uniqueness of the return value this method returns is guaranteed only
         * per module instance, which generally translates to "per JavaScript
         * execution context". For instance, if this code is loaded in two different
         * browser pages, the module will be instantiated once per page and the return
         * values for Key objects that were created with the same parameters might
         * differ. So if these two pages communicate with one another they cannot use
         * the return value of this method to identify objects.
         *
         * @returns A hash value that uniquely identifies the object. The value should
         * be considered to be opaque.
         */
        Key.prototype.hash = function () {
            return this.id;
        };
        /**
         * @returns True if any modifiers are turned on for this key. False
         * otherwise. Shift is not considered a modifier for our purposes.
         */
        Key.prototype.anyModifier = function () {
            return this.ctrlKey || this.altKey || this.metaKey;
        };
        // tslint:disable-next-line:variable-name
        Key.__cache = Object.create(null);
        return Key;
    }());
    exports.Key = Key;
    /** This is a [[Key]] that cannot match anything. */
    exports.NULL_KEY = Key.make(-1, false, -1);
    /**
     * This function creates a key object.
     *
     * @param which This parameter can be a string of length one which contains the
     * character for which we want to create a Key. If a number, it is the character
     * code of the key.
     *
     * @param keypress Whether this key is meant to be used for keypress events
     * rather than keyup and keydown.
     *
     * @param keyCode The key code of the key.
     *
     * @param charCode The character code of the key.
     *
     * @param ctrlKey Whether this key requires the Ctrl key held.
     *
     * @param altKey Whether this key requires the Alt key held.
     *
     * @param metaKey Whether this key requires the meta key held.
     *
     * @param shiftKey Whether this key requires the shift key held. It is invalid
     * to use this parameter if ``keypress`` is ``true``.
     *
     * @returns The key created.
     *
     * @throws {Error} If ``which`` is not a single character string or a number.
     */
    function makeKey(which, keypress, keyCode, charCode, ctrlKey, altKey, metaKey, shiftKey) {
        if (keypress === void 0) { keypress = true; }
        if (ctrlKey === void 0) { ctrlKey = false; }
        if (altKey === void 0) { altKey = false; }
        if (metaKey === void 0) { metaKey = false; }
        if (shiftKey === void 0) { shiftKey = exports.EITHER; }
        if (typeof (which) === "string") {
            if (which.length !== 1) {
                throw new Error("when the first parameter is a string, " +
                    "a one-character string is required");
            }
            which = which.charCodeAt(0);
        }
        else if (typeof (which) !== "number") {
            throw new Error("the first parameter must be a string or number");
        }
        if (keypress === undefined) {
            keypress = true;
        }
        else {
            keypress = !!keypress;
        }
        if (keyCode == null) {
            keyCode = (keypress && browsers.GECKO) ? 0 : which;
        }
        if (charCode == null) {
            charCode = keypress ? which : 0;
        }
        // Normalize
        ctrlKey = !!ctrlKey;
        altKey = !!altKey;
        metaKey = !!metaKey;
        if (shiftKey !== exports.EITHER) {
            shiftKey = !!shiftKey;
        }
        return Key.make(which, keypress, keyCode, charCode, ctrlKey, altKey, metaKey, shiftKey);
    }
    exports.makeKey = makeKey;
    /**
     * This function creates a key object which represents a control character (a
     * character typed while Ctrl is held).
     *
     * @param ch This parameter can be a string of length one which contains the
     * character for which we want to create a Key. If a number, it is the character
     * code of the key.
     *
     * @param shiftKey Whether this is a Ctrl-Shift sequence or not.
     *
     * @returns The key created.
     */
    function makeCtrlKey(ch, shiftKey) {
        if (shiftKey === void 0) { shiftKey = exports.EITHER; }
        return makeKey(ch, false, undefined, undefined, true, false, false, shiftKey);
    }
    exports.makeCtrlKey = makeCtrlKey;
    /**
     * This function creates a key object which represents a meta character (a
     * character typed while Meta is held).
     *
     * @param ch This parameter can be a string of length one which contains the
     * character for which we want to create a Key. If a number, it is the character
     * code of the key.
     *
     * @param shiftKey Whether this is a Meta-Shift sequence or not.
     *
     * @returns The key created.
     */
    function makeMetaKey(ch, shiftKey) {
        if (shiftKey === void 0) { shiftKey = exports.EITHER; }
        return makeKey(ch, false, undefined, undefined, false, false, true, shiftKey);
    }
    exports.makeMetaKey = makeMetaKey;
    /**
     * This function creates a key object which represents a "control equivalent"
     * character. A "control equivalent" is equivalent to a control key on all
     * platforms, except in OS X where it is equivalent to a command key. That is if
     * one makes a "control equivalent" with the character "X", then on all
     * platforms it would be equivalent to hitting Ctrl-X, except in OS X where it
     * is equivalent to hitting Command-X.
     *
     * @param ch This parameter can be a string of length one which contains the
     * character for which we want to create a Key. If a number, it is the character
     * code of the key.
     *
     * @param shiftKey Whether this is a [...]-Shift sequence or not.
     *
     * @returns The key created.
     */
    function makeCtrlEqKey(ch, shiftKey) {
        if (shiftKey === void 0) { shiftKey = exports.EITHER; }
        if (!browsers.OSX) {
            return makeCtrlKey(ch, shiftKey);
        }
        // Command === Meta
        return makeMetaKey(ch, shiftKey);
    }
    exports.makeCtrlEqKey = makeCtrlEqKey;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  jQuery keydown keypress boolean Dubeau MPL Mangalam DOM Ctrl
//  LocalWords:  keyup param keyCode charcode ctrlKey altKey metaKey shiftKey
//# sourceMappingURL=key.js.map

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Context menus.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(7), __webpack_require__(5), __webpack_require__(27)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, jquery_1, domutil) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    jquery_1 = __importDefault(jquery_1);
    domutil = __importStar(domutil);
    /**
     * A context menu GUI element.
     */
    var ContextMenu = /** @class */ (function () {
        /**
         * @param document The DOM document for which to make this
         * context menu.
         *
         * @param x Position of the menu. The context menu may ignore this position if
         * the menu would appear off-screen.
         *
         * @param y Position of the menu.
         *
         * @param items The items to show in the menu. These should be list items
         * containing links appropriately formatted for a menu.
         *
         * @param dismissCallback Function to call when the menu is dismissed.
         *
         * @param immediateDisplay If true, will call ``render`` from the constructor.
         */
        function ContextMenu(document, x, y, items, dismissCallback, immediateDisplay) {
            if (immediateDisplay === void 0) { immediateDisplay = true; }
            this.dismissCallback = dismissCallback;
            this.dismissed = false;
            var dropdown = this.dropdown = document.createElement("div");
            dropdown.className = "dropdown wed-context-menu";
            // tslint:disable-next-line:no-inner-html
            dropdown.innerHTML =
                // This fake toggle is required for bootstrap to do its work.
                "<a href='#' data-toggle='dropdown'></a>" +
                    "<ul class='dropdown-menu' role='menu'></ul>";
            // We move the top and left so that we appear under the mouse cursor.
            // Hackish, but it works. If we don't do this, then the mousedown that
            // brought the menu up also registers as a click on the body element and the
            // menu disappears right away.  (It would be nice to have a more general
            // solution some day.)
            x -= 5;
            y -= 5;
            dropdown.style.top = y + "px";
            dropdown.style.left = x + "px";
            this.x = x;
            this.y = y;
            var menu = this.menu = dropdown.lastElementChild;
            var $menu = this.$menu = jquery_1.default(menu);
            var toggle = this.toggle = dropdown.firstElementChild;
            var $toggle = this.$toggle = jquery_1.default(toggle);
            var backdrop = this.backdrop = document.createElement("div");
            backdrop.className = "wed-context-menu-backdrop";
            jquery_1.default(backdrop).click(this.backdropClickHandler.bind(this));
            $menu.on("click", this.contentsClickHandler.bind(this));
            // Bootstrap may dispatch clicks onto the toggle. We must catch them.
            $toggle.on("click", this.contentsClickHandler.bind(this));
            $menu.on("mousedown", function (ev) {
                ev.stopPropagation();
            });
            jquery_1.default(dropdown).on("contextmenu mouseup", false);
            var body = document.body;
            body.insertBefore(dropdown, body.firstChild);
            body.insertBefore(backdrop, body.firstChild);
            if (immediateDisplay) {
                this.display(items);
            }
        }
        ContextMenu.prototype.display = function (items) {
            var dropdown = this.dropdown;
            var $toggle = jquery_1.default(dropdown.firstElementChild);
            this.render(items);
            var $menu = this.$menu;
            var menu = this.menu;
            var document = dropdown.ownerDocument;
            var x = this.x;
            var y = this.y;
            // Verify if we're going to run off screen. If so, then modify our position
            // to be inside the screen.
            var width = $menu.outerWidth();
            var winWidth = jquery_1.default(document.defaultView).width();
            // The x value that would put the menu just against the side of the window
            // is width - winWidth. If x is less than it, then x is the value we want,
            // but we don't want less than 0.
            dropdown.style.left = Math.max(0, Math.min(x, winWidth - width)) + "px";
            menu.style.maxWidth = winWidth + "px";
            // Adjust height so that we can see about 5 lines.
            var fiveLines = Number($menu.css("line-height").replace("px", "")) * 5;
            var winHeight = jquery_1.default(document.defaultView).height();
            var maxHeight = winHeight - y;
            if (maxHeight < fiveLines) {
                y -= fiveLines - maxHeight;
                maxHeight = fiveLines;
            }
            dropdown.style.top = y + "px";
            menu.style.maxHeight = maxHeight + "px";
            $toggle.focus(this.handleToggleFocus.bind(this));
            $toggle.dropdown("toggle");
            //
            // What is going on here? When Bootstrap detects that touch events are
            // supported, it assumes it is on a mobile device (which is a false
            // assumption) and adds a backdrop to its dropdowns so as to be able to
            // close it if the user "clicks" outside the dropdown. This messes up our
            // own handling of the same scenario. To prevent this issue, we remove any
            // backdrop added by Bootstrap. (It may be possible to keep both backdrops
            // around but it would just complicate the code needlessly.)
            //
            // Note that we cannot rely on Bootstrap's backdrop, generally, because, as
            // mentioned already, it won't be added for non-mobile platforms. However,
            // we *always* need to detect clicks outside our menu, on all platforms.
            //
            var bootstrapBackdrop = domutil.childByClass(dropdown, "dropdown-backdrop");
            if (bootstrapBackdrop !== null) {
                dropdown.removeChild(bootstrapBackdrop);
            }
        };
        /**
         * Event handler for focus events on the toggle. Bootstrap focuses the toggle
         * when the dropdown is shown. This can cause problems on some platforms if
         * the dropdown is meant to have a descendant focused. (IE in particular
         * grants focus asynchronously.) This method can be used to focus the proper
         * element.
         */
        ContextMenu.prototype.handleToggleFocus = function () {
            // Default does nothing.
        };
        /**
         * Event handler for clicks on the contents. Dismissed the menu.
         */
        ContextMenu.prototype.contentsClickHandler = function (ev) {
            this.dismiss();
            ev.stopPropagation();
            ev.preventDefault();
            return false;
        };
        /**
         * Event handler for clicks on the backdrop. Dismisses the menu.
         * @private
         */
        ContextMenu.prototype.backdropClickHandler = function () {
            this.dismiss();
            return false;
        };
        /**
         * Subclasses can override this to customize what is shown to the user. For
         * instance, subclasses could accept a list of items which is more complex
         * than DOM ``Element`` objects. Or could include in the list shown to the
         * user some additional GUI elements.
         *
         * @param items The list of items that should make up the menu.
         */
        ContextMenu.prototype.render = function (items) {
            this.$menu.append(items);
        };
        /**
         * Dismisses the menu.
         */
        ContextMenu.prototype.dismiss = function () {
            if (this.dismissed) {
                return;
            }
            this.$menu.dropdown("toggle");
            if (this.dropdown.parentNode !== null) {
                this.dropdown.parentNode.removeChild(this.dropdown);
            }
            if (this.backdrop.parentNode !== null) {
                this.backdrop.parentNode.removeChild(this.backdrop);
            }
            if (this.dismissCallback !== undefined) {
                this.dismissCallback();
            }
            this.dismissed = true;
        };
        return ContextMenu;
    }());
    exports.ContextMenu = ContextMenu;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  contextmenu mousedown dropdown tabindex href gui MPL px
//  LocalWords:  Mangalam Dubeau ul jQuery Prepend util jquery mouseup winWidth
//  LocalWords:  dropdowns
//# sourceMappingURL=context-menu.js.map

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(19)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, rxjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Records operations that may be undone or redone. It maintains a single list
     * of [[Undo]] objects in the order by which they are passed to the
     * [[UndoList.record]] method.
     *
     * This object maintains a single history. So if operations A, B, C, D are
     * recorded, C and D are undone and then E is recorded, the list of recorded
     * operations will then be A, B, E.
     */
    var UndoList = /** @class */ (function () {
        function UndoList() {
            this.stack = [];
            this.list = [];
            this.index = -1;
            this._undoingOrRedoing = false;
            this._events = new rxjs_1.Subject();
            this.events = this._events.asObservable();
        }
        /**
         * Reset the list to its initial state **without** undoing operations. The
         * list effectively forgets old undo operations.
         */
        UndoList.prototype.reset = function () {
            if (this._undoingOrRedoing) {
                throw new Error("may not reset while undoing or redoing");
            }
            this.stack.length = 0; // Yes, this works and clears the stack.
            this.index = -1;
            // We need to cleanup the old subscriptions.
            for (var _i = 0, _a = this.list; _i < _a.length; _i++) {
                var subscription = _a[_i].subscription;
                subscription.unsubscribe();
            }
            this.list = [];
        };
        /**
         * This method makes the UndoList object record the object passed to it. Any
         * operations that had previously been undone are forgotten.
         *
         * @param obj An undo object to record.
         */
        UndoList.prototype.record = function (obj) {
            if (this.stack.length > 0) {
                this.stack[0].record(obj);
            }
            else {
                // We do things in reverse here. We save the original list. Then the call
                // to splice mutates the original list to contain elements we do *not*
                // want. The return value are those elements we do want.
                var oldList = this.list;
                this.list = this.list.splice(0, this.index + 1);
                // We need to cleanup the old subscriptions.
                for (var _i = 0, oldList_1 = oldList; _i < oldList_1.length; _i++) {
                    var subscription = oldList_1[_i].subscription;
                    subscription.unsubscribe();
                }
                // This is the only place we need to subscribe. We do not need to
                // subscribe to individual object that are in undo groups because the
                // groups forward events that happen on their inner objects. Also, a group
                // need not be subscribed to until ``record`` is called for it.
                this.list.push({
                    undo: obj,
                    subscription: obj.events.subscribe(this._events),
                });
                this.index++;
            }
        };
        /**
         * Undoes the latest [[Undo]] that was recorded. If any [[UndoGroup]] objects
         * were in effect when called, they are terminated. It is an error to call
         * this method or [[redo]] from within this method. Does nothing if there is
         * nothing to undo.
         *
         * @throws {Error} If an undo is attempted when an undo or redo is already in
         * progress.
         */
        UndoList.prototype.undo = function () {
            // If undo is invoked in the middle of a group, we must end it first.
            if (this._undoingOrRedoing) {
                throw new Error("calling undo while undoing or redoing");
            }
            this._undoingOrRedoing = true;
            while (this.stack.length > 0) {
                this.endGroup();
            }
            if (this.index >= 0) {
                this.list[this.index--].undo.undo();
            }
            this._undoingOrRedoing = false;
        };
        /**
         * Redoes the latest [[Undo]] object that was undone.  It is an error to call
         * this method or [[undo]] from within this method. Does nothing if there is
         * nothing to redo.
         *
         * @throws {Error} If an undo is attempted when an undo or redo is already in
         * progress.
         */
        UndoList.prototype.redo = function () {
            if (this._undoingOrRedoing) {
                throw new Error("calling redo while undoing or redoing");
            }
            this._undoingOrRedoing = true;
            if (this.index < this.list.length - 1) {
                this.list[++this.index].undo.redo();
            }
            this._undoingOrRedoing = false;
        };
        /**
         * @returns True if the object is in the midst of undoing or redoing, false
         * otherwise.
         */
        UndoList.prototype.undoingOrRedoing = function () {
            return this._undoingOrRedoing;
        };
        /**
         * @returns True if there is something to undo, false otherwise.
         */
        UndoList.prototype.canUndo = function () {
            // If there is a group on the stack, then we have to return true. That's
            // because when the group is ended when undo() is called, it will be added
            // at the end of this.list.
            return this.index > -1 || this.stack.length > 0;
        };
        /**
         * @returns True if there is something to redo, false otherwise.
         */
        UndoList.prototype.canRedo = function () {
            return this.index < this.list.length - 1;
        };
        /**
         * Starts recording a group of undo operations.
         *
         * @param group The undo group to start.
         */
        UndoList.prototype.startGroup = function (group) {
            this.stack.unshift(group);
        };
        /**
         * Ends recording a group of undo operations. The group currently in effect is
         * terminated, and made the last recorded operation (as if it had been passed
         * to [[UndoList.record]]).
         *
         * @throws {Error} If there is no current undo group.
         */
        UndoList.prototype.endGroup = function () {
            var group = this.stack.shift();
            if (group === undefined) {
                throw new Error("ending a non-existent group.");
            }
            group.end();
            this.record(group);
        };
        /**
         * Ends all groups currently in effect. This is the same as calling
         * [[endGroup]] repeatedly until there are no more groups to end.
         */
        UndoList.prototype.endAllGroups = function () {
            while (this.stack.length > 0) {
                this.endGroup();
            }
        };
        /**
         * @returns The group currently being recorded.
         */
        UndoList.prototype.getGroup = function () {
            return this.stack[0];
        };
        /**
         * @returns A string showing all the undo steps and undo groups stored in this
         * undo list.
         */
        UndoList.prototype.toString = function () {
            var ret = [];
            ret.push("Start of list\n");
            for (var _i = 0, _a = this.list; _i < _a.length; _i++) {
                var it_1 = _a[_i];
                ret.push(it_1.toString());
            }
            ret.push("End of list\n");
            ret.push("Unfinished groups:\n");
            for (var i = this.stack.length - 1; i >= 0; --i) {
                var it_2 = this.stack[i];
                ret.push(it_2.toString());
            }
            ret.push("End of unfinished groups\n");
            return ret.join("");
        };
        return UndoList;
    }());
    exports.UndoList = UndoList;
    /**
     * An undo operation.
     * @param {string} desc The description of this undo operation.
     */
    var Undo = /** @class */ (function () {
        function Undo(desc) {
            this.desc = desc;
            this._events = new rxjs_1.Subject();
            this.events = this._events.asObservable();
        }
        /**
         * Called when the operation must be undone.
         *
         * @throws {Error} If an undo is attempted when an undo or redo is already in
         * progress.
         */
        Undo.prototype.undo = function () {
            this.performUndo();
            this._events.next({
                name: "Undo",
                undo: this,
            });
        };
        /**
         * Called when the operation must be redone.
         *
         * @throws {Error} If an undo is attempted when an undo or redo is already in
         * progress.
         */
        Undo.prototype.redo = function () {
            this.performRedo();
            this._events.next({
                name: "Redo",
                undo: this,
            });
        };
        /**
         * @returns The description of this object.
         */
        Undo.prototype.toString = function () {
            return this.desc + "\n";
        };
        return Undo;
    }());
    exports.Undo = Undo;
    /**
     * A group of undo operations.
     */
    var UndoGroup = /** @class */ (function (_super) {
        __extends(UndoGroup, _super);
        function UndoGroup() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.list = [];
            return _this;
        }
        /**
         * Undoes this group, which means undoing all the operations that this group
         * has recorded.
         */
        UndoGroup.prototype.performUndo = function () {
            for (var i = this.list.length - 1; i >= 0; --i) {
                this.list[i].undo();
            }
        };
        /**
         * Redoes this group, which means redoing all the operations that this group
         * has recorded.
         */
        UndoGroup.prototype.performRedo = function () {
            for (var _i = 0, _a = this.list; _i < _a.length; _i++) {
                var it_3 = _a[_i];
                it_3.redo();
            }
        };
        /**
         * Records an operation as part of this group.
         *
         * @param obj The operation to record.
         */
        UndoGroup.prototype.record = function (obj) {
            this.list.push(obj);
            // We need to forward the events onto this object.
            obj.events.subscribe(this._events);
        };
        /**
         * This method is called by [[UndoList.endGroup]] when it ends a group. The
         * default implementation does nothing.
         */
        UndoGroup.prototype.end = function () {
            // by default we do nothing
        };
        UndoGroup.prototype.toString = function () {
            var ret = [];
            ret.push("Start of " + this.desc + "\n");
            for (var _i = 0, _a = this.list; _i < _a.length; _i++) {
                var it_4 = _a[_i];
                ret.push(it_4.toString().replace(/(^|\n)/g, "$1 ").slice(0, -1));
            }
            ret.push("End of " + this.desc + "\n");
            return ret.join("");
        };
        return UndoGroup;
    }(Undo));
    exports.UndoGroup = UndoGroup;
    /**
     * This is an undo object which does nothing but only serves as a marker in the
     * list of undo operations. It could be used for debugging or by modes to record
     * information they need in the undo list.
     */
    var UndoMarker = /** @class */ (function (_super) {
        __extends(UndoMarker, _super);
        /**
         * @param msg A message to identify the marker.
         */
        function UndoMarker(msg) {
            return _super.call(this, "*** MARKER *** " + msg) || this;
        }
        // tslint:disable-next-line:no-empty
        UndoMarker.prototype.performUndo = function () { };
        // tslint:disable-next-line:no-empty
        UndoMarker.prototype.performRedo = function () { };
        return UndoMarker;
    }(Undo));
    exports.UndoMarker = UndoMarker;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  boolean Dubeau MPL Mangalam UndoList desc
//# sourceMappingURL=undo.js.map

/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = hostReportError;
/**
 * Throws an error on another job so that it's picked up by the runtime's
 * uncaught error handling mechanism.
 * @param err the error to throw
 */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function hostReportError(err) {
    setTimeout(function () { throw err; });
}
//# sourceMappingURL=hostReportError.js.map


/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return rxSubscriber; });
/* unused harmony export $$rxSubscriber */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function')
    ? /*@__PURE__*/ Symbol.for('rxSubscriber')
    : '@@rxSubscriber';
/**
 * @deprecated use rxSubscriber instead
 */
var $$rxSubscriber = rxSubscriber;
//# sourceMappingURL=rxSubscriber.js.map


/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = pipe;
/* harmony export (immutable) */ __webpack_exports__["b"] = pipeFromArray;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__noop__ = __webpack_require__(41);
/** PURE_IMPORTS_START _noop PURE_IMPORTS_END */

/* tslint:enable:max-line-length */
function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return pipeFromArray(fns);
}
/* @internal */
function pipeFromArray(fns) {
    if (!fns) {
        return __WEBPACK_IMPORTED_MODULE_0__noop__["a" /* noop */];
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}
//# sourceMappingURL=pipe.js.map


/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = refCount;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function refCount() {
    return function refCountOperatorFunction(source) {
        return source.lift(new RefCountOperator(source));
    };
}
var RefCountOperator = /*@__PURE__*/ (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        ///
        // Compare the local RefCountSubscriber's connection Subscription to the
        // connection Subscription on the shared ConnectableObservable. In cases
        // where the ConnectableObservable source synchronously emits values, and
        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
        // execution continues to here before the RefCountOperator has a chance to
        // supply the RefCountSubscriber with the shared connection Subscription.
        // For example:
        // ```
        // Observable.range(0, 10)
        //   .publish()
        //   .refCount()
        //   .take(5)
        //   .subscribe();
        // ```
        // In order to account for this case, RefCountSubscriber should only dispose
        // the ConnectableObservable's shared connection Subscription if the
        // connection Subscription exists, *and* either:
        //   a. RefCountSubscriber doesn't have a reference to the shared connection
        //      Subscription yet, or,
        //   b. RefCountSubscriber's connection Subscription reference is identical
        //      to the shared connection Subscription
        ///
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=refCount.js.map


/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ReplaySubject; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subject__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__scheduler_queue__ = __webpack_require__(86);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Subscription__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__operators_observeOn__ = __webpack_require__(88);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_ObjectUnsubscribedError__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__SubjectSubscription__ = __webpack_require__(83);
/** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */







/**
 * @class ReplaySubject<T>
 */
var ReplaySubject = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ReplaySubject, _super);
    function ReplaySubject(bufferSize, windowTime, scheduler) {
        if (bufferSize === void 0) {
            bufferSize = Number.POSITIVE_INFINITY;
        }
        if (windowTime === void 0) {
            windowTime = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this) || this;
        _this.scheduler = scheduler;
        _this._events = [];
        _this._infiniteTimeWindow = false;
        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
        _this._windowTime = windowTime < 1 ? 1 : windowTime;
        if (windowTime === Number.POSITIVE_INFINITY) {
            _this._infiniteTimeWindow = true;
            _this.next = _this.nextInfiniteTimeWindow;
        }
        else {
            _this.next = _this.nextTimeWindow;
        }
        return _this;
    }
    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
        var _events = this._events;
        _events.push(value);
        // Since this method is invoked in every next() call than the buffer
        // can overgrow the max size only by one item
        if (_events.length > this._bufferSize) {
            _events.shift();
        }
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype.nextTimeWindow = function (value) {
        this._events.push(new ReplayEvent(this._getNow(), value));
        this._trimBufferThenGetEvents();
        _super.prototype.next.call(this, value);
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    ReplaySubject.prototype._subscribe = function (subscriber) {
        // When `_infiniteTimeWindow === true` then the buffer is already trimmed
        var _infiniteTimeWindow = this._infiniteTimeWindow;
        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
        var scheduler = this.scheduler;
        var len = _events.length;
        var subscription;
        if (this.closed) {
            throw new __WEBPACK_IMPORTED_MODULE_5__util_ObjectUnsubscribedError__["a" /* ObjectUnsubscribedError */]();
        }
        else if (this.isStopped || this.hasError) {
            subscription = __WEBPACK_IMPORTED_MODULE_3__Subscription__["a" /* Subscription */].EMPTY;
        }
        else {
            this.observers.push(subscriber);
            subscription = new __WEBPACK_IMPORTED_MODULE_6__SubjectSubscription__["a" /* SubjectSubscription */](this, subscriber);
        }
        if (scheduler) {
            subscriber.add(subscriber = new __WEBPACK_IMPORTED_MODULE_4__operators_observeOn__["a" /* ObserveOnSubscriber */](subscriber, scheduler));
        }
        if (_infiniteTimeWindow) {
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i]);
            }
        }
        else {
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i].value);
            }
        }
        if (this.hasError) {
            subscriber.error(this.thrownError);
        }
        else if (this.isStopped) {
            subscriber.complete();
        }
        return subscription;
    };
    ReplaySubject.prototype._getNow = function () {
        return (this.scheduler || __WEBPACK_IMPORTED_MODULE_2__scheduler_queue__["a" /* queue */]).now();
    };
    ReplaySubject.prototype._trimBufferThenGetEvents = function () {
        var now = this._getNow();
        var _bufferSize = this._bufferSize;
        var _windowTime = this._windowTime;
        var _events = this._events;
        var eventsCount = _events.length;
        var spliceCount = 0;
        // Trim events that fall out of the time window.
        // Start at the front of the list. Break early once
        // we encounter an event that falls within the window.
        while (spliceCount < eventsCount) {
            if ((now - _events[spliceCount].time) < _windowTime) {
                break;
            }
            spliceCount++;
        }
        if (eventsCount > _bufferSize) {
            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
        }
        if (spliceCount > 0) {
            _events.splice(0, spliceCount);
        }
        return _events;
    };
    return ReplaySubject;
}(__WEBPACK_IMPORTED_MODULE_1__Subject__["a" /* Subject */]));

var ReplayEvent = /*@__PURE__*/ (function () {
    function ReplayEvent(time, value) {
        this.time = time;
        this.value = value;
    }
    return ReplayEvent;
}());
//# sourceMappingURL=ReplaySubject.js.map


/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = of;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_isScheduler__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__fromArray__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__empty__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__scalar__ = __webpack_require__(60);
/** PURE_IMPORTS_START _util_isScheduler,_fromArray,_empty,_scalar PURE_IMPORTS_END */




function of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = args[args.length - 1];
    if (Object(__WEBPACK_IMPORTED_MODULE_0__util_isScheduler__["a" /* isScheduler */])(scheduler)) {
        args.pop();
    }
    else {
        scheduler = undefined;
    }
    switch (args.length) {
        case 0:
            return Object(__WEBPACK_IMPORTED_MODULE_2__empty__["b" /* empty */])(scheduler);
        case 1:
            return scheduler ? Object(__WEBPACK_IMPORTED_MODULE_1__fromArray__["a" /* fromArray */])(args, scheduler) : Object(__WEBPACK_IMPORTED_MODULE_3__scalar__["a" /* scalar */])(args[0]);
        default:
            return Object(__WEBPACK_IMPORTED_MODULE_1__fromArray__["a" /* fromArray */])(args, scheduler);
    }
}
//# sourceMappingURL=of.js.map


/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = scalar;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

function scalar(value) {
    var result = new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
        subscriber.next(value);
        subscriber.complete();
    });
    result._isScalar = true;
    result.value = value;
    return result;
}
//# sourceMappingURL=scalar.js.map


/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = throwError;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

/**
 * Creates an Observable that emits no items to the Observer and immediately
 * emits an error notification.
 *
 * <span class="informal">Just emits 'error', and nothing else.
 * </span>
 *
 * <img src="./img/throw.png" width="100%">
 *
 * This static operator is useful for creating a simple Observable that only
 * emits the error notification. It can be used for composing with other
 * Observables, such as in a {@link mergeMap}.
 *
 * @example <caption>Emit the number 7, then emit an error.</caption>
 * import { throwError, concat, of } from 'rxjs/create';
 *
 * const result = concat(of(7), throwError(new Error('oops!')));
 * result.subscribe(x => console.log(x), e => console.error(e));
 *
 * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>
 * import { throwError, interval, of } from 'rxjs/create';
 * import { mergeMap } from 'rxjs/operators';
 *
 * interval(1000).pipe(
 *   mergeMap(x => x === 13 ?
 *     throwError('Thirteens are bad') :
 *     of('a', 'b', 'c')
 *   )
 * ).subscribe(x => console.log(x), e => console.error(e));
 *
 * @see {@link create}
 * @see {@link empty}
 * @see {@link never}
 * @see {@link of}
 *
 * @param {any} error The particular Error to pass to the error notification.
 * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
 * the emission of the error notification.
 * @return {Observable} An error Observable: emits only the error notification
 * using the given error argument.
 * @static true
 * @name throw
 * @owner Observable
 */
function throwError(error, scheduler) {
    if (!scheduler) {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) { return subscriber.error(error); });
    }
    else {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });
    }
}
function dispatch(_a) {
    var error = _a.error, subscriber = _a.subscriber;
    subscriber.error(error);
}
//# sourceMappingURL=throwError.js.map


/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = combineLatest;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CombineLatestOperator; });
/* unused harmony export CombineLatestSubscriber */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_isScheduler__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isArray__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__fromArray__ = __webpack_require__(21);
/** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */






var NONE = {};
/* tslint:enable:max-line-length */
/**
 * Combines multiple Observables to create an Observable whose values are
 * calculated from the latest values of each of its input Observables.
 *
 * <span class="informal">Whenever any input Observable emits a value, it
 * computes a formula using the latest values from all the inputs, then emits
 * the output of that formula.</span>
 *
 * <img src="./img/combineLatest.png" width="100%">
 *
 * `combineLatest` combines the values from all the Observables passed as
 * arguments. This is done by subscribing to each Observable in order and,
 * whenever any Observable emits, collecting an array of the most recent
 * values from each Observable. So if you pass `n` Observables to operator,
 * returned Observable will always emit an array of `n` values, in order
 * corresponding to order of passed Observables (value from the first Observable
 * on the first place and so on).
 *
 * Static version of `combineLatest` accepts either an array of Observables
 * or each Observable can be put directly as an argument. Note that array of
 * Observables is good choice, if you don't know beforehand how many Observables
 * you will combine. Passing empty array will result in Observable that
 * completes immediately.
 *
 * To ensure output array has always the same length, `combineLatest` will
 * actually wait for all input Observables to emit at least once,
 * before it starts emitting results. This means if some Observable emits
 * values before other Observables started emitting, all that values but last
 * will be lost. On the other hand, is some Observable does not emit value but
 * completes, resulting Observable will complete at the same moment without
 * emitting anything, since it will be now impossible to include value from
 * completed Observable in resulting array. Also, if some input Observable does
 * not emit any value and never completes, `combineLatest` will also never emit
 * and never complete, since, again, it will wait for all streams to emit some
 * value.
 *
 * If at least one Observable was passed to `combineLatest` and all passed Observables
 * emitted something, resulting Observable will complete when all combined
 * streams complete. So even if some Observable completes, result of
 * `combineLatest` will still emit values when other Observables do. In case
 * of completed Observable, its value from now on will always be the last
 * emitted value. On the other hand, if any Observable errors, `combineLatest`
 * will error immediately as well, and all other Observables will be unsubscribed.
 *
 * `combineLatest` accepts as optional parameter `project` function, which takes
 * as arguments all values that would normally be emitted by resulting Observable.
 * `project` can return any kind of value, which will be then emitted by Observable
 * instead of default array. Note that `project` does not take as argument that array
 * of values, but values themselves. That means default `project` can be imagined
 * as function that takes all its arguments and puts them into an array.
 *
 *
 * @example <caption>Combine two timer Observables</caption>
 * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now
 * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now
 * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);
 * combinedTimers.subscribe(value => console.log(value));
 * // Logs
 * // [0, 0] after 0.5s
 * // [1, 0] after 1s
 * // [1, 1] after 1.5s
 * // [2, 1] after 2s
 *
 *
 * @example <caption>Combine an array of Observables</caption>
 * const observables = [1, 5, 10].map(
 *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds
 * );
 * const combined = Rx.Observable.combineLatest(observables);
 * combined.subscribe(value => console.log(value));
 * // Logs
 * // [0, 0, 0] immediately
 * // [1, 0, 0] after 1s
 * // [1, 5, 0] after 5s
 * // [1, 5, 10] after 10s
 *
 *
 * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>
 * var weight = Rx.Observable.of(70, 72, 76, 79, 75);
 * var height = Rx.Observable.of(1.76, 1.77, 1.78);
 * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));
 * bmi.subscribe(x => console.log('BMI is ' + x));
 *
 * // With output to console:
 * // BMI is 24.212293388429753
 * // BMI is 23.93948099205209
 * // BMI is 23.671253629592222
 *
 *
 * @see {@link combineAll}
 * @see {@link merge}
 * @see {@link withLatestFrom}
 *
 * @param {ObservableInput} observable1 An input Observable to combine with other Observables.
 * @param {ObservableInput} observable2 An input Observable to combine with other Observables.
 * More than one input Observables may be given as arguments
 * or an array of Observables may be given as the first argument.
 * @param {function} [project] An optional function to project the values from
 * the combined latest values into a new value on the output Observable.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to
 * each input Observable.
 * @return {Observable} An Observable of projected values from the most recent
 * values from each input Observable, or an array of the most recent values from
 * each input Observable.
 */
function combineLatest() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var resultSelector = null;
    var scheduler = null;
    if (Object(__WEBPACK_IMPORTED_MODULE_1__util_isScheduler__["a" /* isScheduler */])(observables[observables.length - 1])) {
        scheduler = observables.pop();
    }
    if (typeof observables[observables.length - 1] === 'function') {
        resultSelector = observables.pop();
    }
    // if the first and only other argument besides the resultSelector is an array
    // assume it's been called with `combineLatest([obs1, obs2, obs3], resultSelector)`
    if (observables.length === 1 && Object(__WEBPACK_IMPORTED_MODULE_2__util_isArray__["a" /* isArray */])(observables[0])) {
        observables = observables[0];
    }
    return Object(__WEBPACK_IMPORTED_MODULE_5__fromArray__["a" /* fromArray */])(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
}
var CombineLatestOperator = /*@__PURE__*/ (function () {
    function CombineLatestOperator(resultSelector) {
        this.resultSelector = resultSelector;
    }
    CombineLatestOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
    };
    return CombineLatestOperator;
}());

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](CombineLatestSubscriber, _super);
    function CombineLatestSubscriber(destination, resultSelector) {
        var _this = _super.call(this, destination) || this;
        _this.resultSelector = resultSelector;
        _this.active = 0;
        _this.values = [];
        _this.observables = [];
        return _this;
    }
    CombineLatestSubscriber.prototype._next = function (observable) {
        this.values.push(NONE);
        this.observables.push(observable);
    };
    CombineLatestSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            this.active = len;
            this.toRespond = len;
            for (var i = 0; i < len; i++) {
                var observable = observables[i];
                this.add(Object(__WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__["a" /* subscribeToResult */])(this, observable, observable, i));
            }
        }
    };
    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
        if ((this.active -= 1) === 0) {
            this.destination.complete();
        }
    };
    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var values = this.values;
        var oldVal = values[outerIndex];
        var toRespond = !this.toRespond
            ? 0
            : oldVal === NONE ? --this.toRespond : this.toRespond;
        values[outerIndex] = innerValue;
        if (toRespond === 0) {
            if (this.resultSelector) {
                this._tryResultSelector(values);
            }
            else {
                this.destination.next(values.slice());
            }
        }
    };
    CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
        var result;
        try {
            result = this.resultSelector.apply(this, values);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return CombineLatestSubscriber;
}(__WEBPACK_IMPORTED_MODULE_3__OuterSubscriber__["a" /* OuterSubscriber */]));

//# sourceMappingURL=combineLatest.js.map


/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = mergeAll;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mergeMap__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_identity__ = __webpack_require__(25);
/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */


/**
 * Converts a higher-order Observable into a first-order Observable which
 * concurrently delivers all values that are emitted on the inner Observables.
 *
 * <span class="informal">Flattens an Observable-of-Observables.</span>
 *
 * <img src="./img/mergeAll.png" width="100%">
 *
 * `mergeAll` subscribes to an Observable that emits Observables, also known as
 * a higher-order Observable. Each time it observes one of these emitted inner
 * Observables, it subscribes to that and delivers all the values from the
 * inner Observable on the output Observable. The output Observable only
 * completes once all inner Observables have completed. Any error delivered by
 * a inner Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
 * var firstOrder = higherOrder.mergeAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
 * var firstOrder = higherOrder.mergeAll(2);
 * firstOrder.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link exhaust}
 * @see {@link merge}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits values coming from all the
 * inner Observables emitted by the source Observable.
 * @method mergeAll
 * @owner Observable
 */
function mergeAll(concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    return Object(__WEBPACK_IMPORTED_MODULE_0__mergeMap__["a" /* mergeMap */])(__WEBPACK_IMPORTED_MODULE_1__util_identity__["a" /* identity */], concurrent);
}
//# sourceMappingURL=mergeAll.js.map


/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = defer;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__from__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__empty__ = __webpack_require__(11);
/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */

 // lol

/**
 * Creates an Observable that, on subscribe, calls an Observable factory to
 * make an Observable for each new Observer.
 *
 * <span class="informal">Creates the Observable lazily, that is, only when it
 * is subscribed.
 * </span>
 *
 * <img src="./img/defer.png" width="100%">
 *
 * `defer` allows you to create the Observable only when the Observer
 * subscribes, and create a fresh Observable for each Observer. It waits until
 * an Observer subscribes to it, and then it generates an Observable,
 * typically with an Observable factory function. It does this afresh for each
 * subscriber, so although each subscriber may think it is subscribing to the
 * same Observable, in fact each subscriber gets its own individual
 * Observable.
 *
 * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>
 * var clicksOrInterval = Rx.Observable.defer(function () {
 *   if (Math.random() > 0.5) {
 *     return Rx.Observable.fromEvent(document, 'click');
 *   } else {
 *     return Rx.Observable.interval(1000);
 *   }
 * });
 * clicksOrInterval.subscribe(x => console.log(x));
 *
 * // Results in the following behavior:
 * // If the result of Math.random() is greater than 0.5 it will listen
 * // for clicks anywhere on the "document"; when document is clicked it
 * // will log a MouseEvent object to the console. If the result is less
 * // than 0.5 it will emit ascending numbers, one every second(1000ms).
 *
 * @see {@link create}
 *
 * @param {function(): SubscribableOrPromise} observableFactory The Observable
 * factory function to invoke for each Observer that subscribes to the output
 * Observable. May also return a Promise, which will be converted on the fly
 * to an Observable.
 * @return {Observable} An Observable whose Observers' subscriptions trigger
 * an invocation of the given Observable factory function.
 * @static true
 * @name defer
 * @owner Observable
 */
function defer(observableFactory) {
    return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
        var input;
        try {
            input = observableFactory();
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var source = input ? Object(__WEBPACK_IMPORTED_MODULE_1__from__["a" /* from */])(input) : Object(__WEBPACK_IMPORTED_MODULE_2__empty__["b" /* empty */])();
        return source.subscribe(subscriber);
    });
}
//# sourceMappingURL=defer.js.map


/***/ }),
/* 65 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = zip;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ZipOperator; });
/* unused harmony export ZipSubscriber */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__fromArray__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isArray__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_subscribeToResult__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__internal_symbol_iterator__ = __webpack_require__(33);
/** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_OuterSubscriber,_util_subscribeToResult,_.._internal_symbol_iterator PURE_IMPORTS_END */







/* tslint:enable:max-line-length */
/**
 * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each
 * of its input Observables.
 *
 * If the latest parameter is a function, this function is used to compute the created value from the input values.
 * Otherwise, an array of the input values is returned.
 *
 * @example <caption>Combine age and name from different sources</caption>
 *
 * let age$ = Observable.of<number>(27, 25, 29);
 * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');
 * let isDev$ = Observable.of<boolean>(true, true, false);
 *
 * Observable
 *     .zip(age$,
 *          name$,
 *          isDev$,
 *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))
 *     .subscribe(x => console.log(x));
 *
 * // outputs
 * // { age: 27, name: 'Foo', isDev: true }
 * // { age: 25, name: 'Bar', isDev: true }
 * // { age: 29, name: 'Beer', isDev: false }
 *
 * @param observables
 * @return {Observable<R>}
 * @static true
 * @name zip
 * @owner Observable
 */
function zip() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var resultSelector = observables[observables.length - 1];
    if (typeof resultSelector === 'function') {
        observables.pop();
    }
    return Object(__WEBPACK_IMPORTED_MODULE_1__fromArray__["a" /* fromArray */])(observables, undefined).lift(new ZipOperator(resultSelector));
}
var ZipOperator = /*@__PURE__*/ (function () {
    function ZipOperator(resultSelector) {
        this.resultSelector = resultSelector;
    }
    ZipOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));
    };
    return ZipOperator;
}());

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ZipSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ZipSubscriber, _super);
    function ZipSubscriber(destination, resultSelector, values) {
        if (values === void 0) {
            values = Object.create(null);
        }
        var _this = _super.call(this, destination) || this;
        _this.iterators = [];
        _this.active = 0;
        _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;
        _this.values = values;
        return _this;
    }
    ZipSubscriber.prototype._next = function (value) {
        var iterators = this.iterators;
        if (Object(__WEBPACK_IMPORTED_MODULE_2__util_isArray__["a" /* isArray */])(value)) {
            iterators.push(new StaticArrayIterator(value));
        }
        else if (typeof value[__WEBPACK_IMPORTED_MODULE_6__internal_symbol_iterator__["a" /* iterator */]] === 'function') {
            iterators.push(new StaticIterator(value[__WEBPACK_IMPORTED_MODULE_6__internal_symbol_iterator__["a" /* iterator */]]()));
        }
        else {
            iterators.push(new ZipBufferIterator(this.destination, this, value));
        }
    };
    ZipSubscriber.prototype._complete = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        if (len === 0) {
            this.destination.complete();
            return;
        }
        this.active = len;
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            if (iterator.stillUnsubscribed) {
                this.add(iterator.subscribe(iterator, i));
            }
            else {
                this.active--; // not an observable
            }
        }
    };
    ZipSubscriber.prototype.notifyInactive = function () {
        this.active--;
        if (this.active === 0) {
            this.destination.complete();
        }
    };
    ZipSubscriber.prototype.checkIterators = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        var destination = this.destination;
        // abort if not all of them have values
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
                return;
            }
        }
        var shouldComplete = false;
        var args = [];
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            var result = iterator.next();
            // check to see if it's completed now that you've gotten
            // the next value.
            if (iterator.hasCompleted()) {
                shouldComplete = true;
            }
            if (result.done) {
                destination.complete();
                return;
            }
            args.push(result.value);
        }
        if (this.resultSelector) {
            this._tryresultSelector(args);
        }
        else {
            destination.next(args);
        }
        if (shouldComplete) {
            destination.complete();
        }
    };
    ZipSubscriber.prototype._tryresultSelector = function (args) {
        var result;
        try {
            result = this.resultSelector.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return ZipSubscriber;
}(__WEBPACK_IMPORTED_MODULE_3__Subscriber__["a" /* Subscriber */]));

var StaticIterator = /*@__PURE__*/ (function () {
    function StaticIterator(iterator) {
        this.iterator = iterator;
        this.nextResult = iterator.next();
    }
    StaticIterator.prototype.hasValue = function () {
        return true;
    };
    StaticIterator.prototype.next = function () {
        var result = this.nextResult;
        this.nextResult = this.iterator.next();
        return result;
    };
    StaticIterator.prototype.hasCompleted = function () {
        var nextResult = this.nextResult;
        return nextResult && nextResult.done;
    };
    return StaticIterator;
}());
var StaticArrayIterator = /*@__PURE__*/ (function () {
    function StaticArrayIterator(array) {
        this.array = array;
        this.index = 0;
        this.length = 0;
        this.length = array.length;
    }
    StaticArrayIterator.prototype[__WEBPACK_IMPORTED_MODULE_6__internal_symbol_iterator__["a" /* iterator */]] = function () {
        return this;
    };
    StaticArrayIterator.prototype.next = function (value) {
        var i = this.index++;
        var array = this.array;
        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
    };
    StaticArrayIterator.prototype.hasValue = function () {
        return this.array.length > this.index;
    };
    StaticArrayIterator.prototype.hasCompleted = function () {
        return this.array.length === this.index;
    };
    return StaticArrayIterator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ZipBufferIterator = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ZipBufferIterator, _super);
    function ZipBufferIterator(destination, parent, observable) {
        var _this = _super.call(this, destination) || this;
        _this.parent = parent;
        _this.observable = observable;
        _this.stillUnsubscribed = true;
        _this.buffer = [];
        _this.isComplete = false;
        return _this;
    }
    ZipBufferIterator.prototype[__WEBPACK_IMPORTED_MODULE_6__internal_symbol_iterator__["a" /* iterator */]] = function () {
        return this;
    };
    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next
    //    this is legit because `next()` will never be called by a subscription in this case.
    ZipBufferIterator.prototype.next = function () {
        var buffer = this.buffer;
        if (buffer.length === 0 && this.isComplete) {
            return { value: null, done: true };
        }
        else {
            return { value: buffer.shift(), done: false };
        }
    };
    ZipBufferIterator.prototype.hasValue = function () {
        return this.buffer.length > 0;
    };
    ZipBufferIterator.prototype.hasCompleted = function () {
        return this.buffer.length === 0 && this.isComplete;
    };
    ZipBufferIterator.prototype.notifyComplete = function () {
        if (this.buffer.length > 0) {
            this.isComplete = true;
            this.parent.notifyInactive();
        }
        else {
            this.destination.complete();
        }
    };
    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.buffer.push(innerValue);
        this.parent.checkIterators();
    };
    ZipBufferIterator.prototype.subscribe = function (value, index) {
        return Object(__WEBPACK_IMPORTED_MODULE_5__util_subscribeToResult__["a" /* subscribeToResult */])(this, this.observable, this, index);
    };
    return ZipBufferIterator;
}(__WEBPACK_IMPORTED_MODULE_4__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=zip.js.map


/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = take;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_ArgumentOutOfRangeError__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__observable_empty__ = __webpack_require__(11);
/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */




/**
 * Emits only the first `count` values emitted by the source Observable.
 *
 * <span class="informal">Takes the first `count` values from the source, then
 * completes.</span>
 *
 * <img src="./img/take.png" width="100%">
 *
 * `take` returns an Observable that emits only the first `count` values emitted
 * by the source Observable. If the source emits fewer than `count` values then
 * all of its values are emitted. After that, it completes, regardless if the
 * source completes.
 *
 * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>
 * var interval = Rx.Observable.interval(1000);
 * var five = interval.take(5);
 * five.subscribe(x => console.log(x));
 *
 * @see {@link takeLast}
 * @see {@link takeUntil}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
 *
 * @param {number} count The maximum number of `next` values to emit.
 * @return {Observable<T>} An Observable that emits only the first `count`
 * values emitted by the source Observable, or all of the values from the source
 * if the source emits fewer than `count` values.
 * @method take
 * @owner Observable
 */
function take(count) {
    return function (source) {
        if (count === 0) {
            return Object(__WEBPACK_IMPORTED_MODULE_3__observable_empty__["b" /* empty */])();
        }
        else {
            return source.lift(new TakeOperator(count));
        }
    };
}
var TakeOperator = /*@__PURE__*/ (function () {
    function TakeOperator(total) {
        this.total = total;
        if (this.total < 0) {
            throw new __WEBPACK_IMPORTED_MODULE_2__util_ArgumentOutOfRangeError__["a" /* ArgumentOutOfRangeError */];
        }
    }
    TakeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeSubscriber(subscriber, this.total));
    };
    return TakeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](TakeSubscriber, _super);
    function TakeSubscriber(destination, total) {
        var _this = _super.call(this, destination) || this;
        _this.total = total;
        _this.count = 0;
        return _this;
    }
    TakeSubscriber.prototype._next = function (value) {
        var total = this.total;
        var count = ++this.count;
        if (count <= total) {
            this.destination.next(value);
            if (count === total) {
                this.destination.complete();
                this.unsubscribe();
            }
        }
    };
    return TakeSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=take.js.map


/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = takeLast;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_ArgumentOutOfRangeError__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__observable_empty__ = __webpack_require__(11);
/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */




/**
 * Emits only the last `count` values emitted by the source Observable.
 *
 * <span class="informal">Remembers the latest `count` values, then emits those
 * only when the source completes.</span>
 *
 * <img src="./img/takeLast.png" width="100%">
 *
 * `takeLast` returns an Observable that emits at most the last `count` values
 * emitted by the source Observable. If the source emits fewer than `count`
 * values then all of its values are emitted. This operator must wait until the
 * `complete` notification emission from the source in order to emit the `next`
 * values on the output Observable, because otherwise it is impossible to know
 * whether or not more values will be emitted on the source. For this reason,
 * all values are emitted synchronously, followed by the complete notification.
 *
 * @example <caption>Take the last 3 values of an Observable with many values</caption>
 * var many = Rx.Observable.range(1, 100);
 * var lastThree = many.pipe(takeLast(3));
 * lastThree.subscribe(x => console.log(x));
 *
 * @see {@link take}
 * @see {@link takeUntil}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
 *
 * @param {number} count The maximum number of values to emit from the end of
 * the sequence of values emitted by the source Observable.
 * @return {Observable<T>} An Observable that emits at most the last count
 * values emitted by the source Observable.
 * @method takeLast
 * @owner Observable
 */
function takeLast(count) {
    return function takeLastOperatorFunction(source) {
        if (count === 0) {
            return Object(__WEBPACK_IMPORTED_MODULE_3__observable_empty__["b" /* empty */])();
        }
        else {
            return source.lift(new TakeLastOperator(count));
        }
    };
}
var TakeLastOperator = /*@__PURE__*/ (function () {
    function TakeLastOperator(total) {
        this.total = total;
        if (this.total < 0) {
            throw new __WEBPACK_IMPORTED_MODULE_2__util_ArgumentOutOfRangeError__["a" /* ArgumentOutOfRangeError */];
        }
    }
    TakeLastOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
    };
    return TakeLastOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeLastSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](TakeLastSubscriber, _super);
    function TakeLastSubscriber(destination, total) {
        var _this = _super.call(this, destination) || this;
        _this.total = total;
        _this.ring = new Array();
        _this.count = 0;
        return _this;
    }
    TakeLastSubscriber.prototype._next = function (value) {
        var ring = this.ring;
        var total = this.total;
        var count = this.count++;
        if (ring.length < total) {
            ring.push(value);
        }
        else {
            var index = count % total;
            ring[index] = value;
        }
    };
    TakeLastSubscriber.prototype._complete = function () {
        var destination = this.destination;
        var count = this.count;
        if (count > 0) {
            var total = this.count >= this.total ? this.total : this.count;
            var ring = this.ring;
            for (var i = 0; i < total; i++) {
                var idx = (count++) % total;
                destination.next(ring[idx]);
            }
        }
        destination.complete();
    };
    return TakeLastSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=takeLast.js.map


/***/ }),
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = scan;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/* tslint:enable:max-line-length */
/**
 * Applies an accumulator function over the source Observable, and returns each
 * intermediate result, with an optional seed value.
 *
 * <span class="informal">It's like {@link reduce}, but emits the current
 * accumulation whenever the source emits a value.</span>
 *
 * <img src="./img/scan.png" width="100%">
 *
 * Combines together all values emitted on the source, using an accumulator
 * function that knows how to join a new source value into the accumulation from
 * the past. Is similar to {@link reduce}, but emits the intermediate
 * accumulations.
 *
 * Returns an Observable that applies a specified `accumulator` function to each
 * item emitted by the source Observable. If a `seed` value is specified, then
 * that value will be used as the initial value for the accumulator. If no seed
 * value is specified, the first item of the source is used as the seed.
 *
 * @example <caption>Count the number of click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var ones = clicks.mapTo(1);
 * var seed = 0;
 * var count = ones.scan((acc, one) => acc + one, seed);
 * count.subscribe(x => console.log(x));
 *
 * @see {@link expand}
 * @see {@link mergeScan}
 * @see {@link reduce}
 *
 * @param {function(acc: R, value: T, index: number): R} accumulator
 * The accumulator function called on each source value.
 * @param {T|R} [seed] The initial accumulation value.
 * @return {Observable<R>} An observable of the accumulated values.
 * @method scan
 * @owner Observable
 */
function scan(accumulator, seed) {
    var hasSeed = false;
    // providing a seed of `undefined` *should* be valid and trigger
    // hasSeed! so don't use `seed !== undefined` checks!
    // For this reason, we have to check it here at the original call site
    // otherwise inside Operator/Subscriber we won't know if `undefined`
    // means they didn't provide anything or if they literally provided `undefined`
    if (arguments.length >= 2) {
        hasSeed = true;
    }
    return function scanOperatorFunction(source) {
        return source.lift(new ScanOperator(accumulator, seed, hasSeed));
    };
}
var ScanOperator = /*@__PURE__*/ (function () {
    function ScanOperator(accumulator, seed, hasSeed) {
        if (hasSeed === void 0) {
            hasSeed = false;
        }
        this.accumulator = accumulator;
        this.seed = seed;
        this.hasSeed = hasSeed;
    }
    ScanOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
    };
    return ScanOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ScanSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ScanSubscriber, _super);
    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
        var _this = _super.call(this, destination) || this;
        _this.accumulator = accumulator;
        _this._seed = _seed;
        _this.hasSeed = hasSeed;
        _this.index = 0;
        return _this;
    }
    Object.defineProperty(ScanSubscriber.prototype, "seed", {
        get: function () {
            return this._seed;
        },
        set: function (value) {
            this.hasSeed = true;
            this._seed = value;
        },
        enumerable: true,
        configurable: true
    });
    ScanSubscriber.prototype._next = function (value) {
        if (!this.hasSeed) {
            this.seed = value;
            this.destination.next(value);
        }
        else {
            return this._tryNext(value);
        }
    };
    ScanSubscriber.prototype._tryNext = function (value) {
        var index = this.index++;
        var result;
        try {
            result = this.accumulator(this.seed, value, index);
        }
        catch (err) {
            this.destination.error(err);
        }
        this.seed = result;
        this.destination.next(result);
    };
    return ScanSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=scan.js.map


/***/ }),
/* 69 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = switchMap;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__map__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__observable_from__ = __webpack_require__(20);
/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */





/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable, emitting values only from the most recently projected Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link switch}.</span>
 *
 * <img src="./img/switchMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. Each time it observes one of these
 * inner Observables, the output Observable begins emitting the items emitted by
 * that inner Observable. When a new inner Observable is emitted, `switchMap`
 * stops emitting items from the earlier-emitted inner Observable and begins
 * emitting items from the new one. It continues to behave like this for
 * subsequent inner Observables.
 *
 * @example <caption>Rerun an interval Observable on every click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link mergeMap}
 * @see {@link switch}
 * @see {@link switchMapTo}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and taking only the values from the most recently
 * projected inner Observable.
 * @method switchMap
 * @owner Observable
 */
function switchMap(project, resultSelector) {
    if (typeof resultSelector === 'function') {
        return function (source) { return source.pipe(switchMap(function (a, i) { return Object(__WEBPACK_IMPORTED_MODULE_4__observable_from__["a" /* from */])(project(a, i)).pipe(Object(__WEBPACK_IMPORTED_MODULE_3__map__["a" /* map */])(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };
    }
    return function (source) { return source.lift(new SwitchMapOperator(project)); };
}
var SwitchMapOperator = /*@__PURE__*/ (function () {
    function SwitchMapOperator(project) {
        this.project = project;
    }
    SwitchMapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));
    };
    return SwitchMapOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchMapSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SwitchMapSubscriber, _super);
    function SwitchMapSubscriber(destination, project) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.index = 0;
        return _this;
    }
    SwitchMapSubscriber.prototype._next = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (error) {
            this.destination.error(error);
            return;
        }
        this._innerSub(result, value, index);
    };
    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {
        var innerSubscription = this.innerSubscription;
        if (innerSubscription) {
            innerSubscription.unsubscribe();
        }
        this.add(this.innerSubscription = Object(__WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__["a" /* subscribeToResult */])(this, result, value, index));
    };
    SwitchMapSubscriber.prototype._complete = function () {
        var innerSubscription = this.innerSubscription;
        if (!innerSubscription || innerSubscription.closed) {
            _super.prototype._complete.call(this);
        }
    };
    SwitchMapSubscriber.prototype._unsubscribe = function () {
        this.innerSubscription = null;
    };
    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.innerSubscription = null;
        if (this.isStopped) {
            _super.prototype._complete.call(this);
        }
    };
    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    return SwitchMapSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=switchMap.js.map


/***/ }),
/* 70 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_70__;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Model for a GUI root.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(13), __webpack_require__(6), __webpack_require__(5), __webpack_require__(17)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, dloc_1, domtypeguards_1, domutil_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Raised if an attribute could not be found when converting a path to a node.
     */
    var AttributeNotFound = /** @class */ (function (_super) {
        __extends(AttributeNotFound, _super);
        function AttributeNotFound(message) {
            var _this = _super.call(this, message) || this;
            util_1.fixPrototype(_this, AttributeNotFound);
            return _this;
        }
        return AttributeNotFound;
    }(Error));
    exports.AttributeNotFound = AttributeNotFound;
    /**
     * Count the number of relevant nodes in the ``_phantom_wrap``.
     *
     * @param top The top _phantom_wrap to consider.
     */
    function countInPhantomWrap(top) {
        if (!domtypeguards_1.isElement(top) || !top.classList.contains("_phantom_wrap")) {
            throw new Error("the node should be a _phantom_wrap element");
        }
        var count = 0;
        var child = top.firstChild;
        while (child !== null) {
            if (domtypeguards_1.isElement(child)) {
                if (child.classList.contains("_phantom_wrap")) {
                    count += countInPhantomWrap(child);
                }
                else if (child.classList.contains("_real")) {
                    count += 1;
                }
                else if (child.classList.contains("_phantom")) {
                    // Phantoms don't count.
                }
                else {
                    throw new Error("unexpected element in _phantom_wrap");
                }
            }
            else if (child.nodeType === Node.TEXT_NODE) {
                // Text nodes also do not count.
            }
            else {
                throw new Error("unexpected node in _phantom_wrap");
            }
            child = child.nextSibling;
        }
        return count;
    }
    function findInPhantomWrap(top, index) {
        if (!domtypeguards_1.isElement(top) || !top.classList.contains("_phantom_wrap")) {
            throw new Error("the node should be a _phantom_wrap element");
        }
        var originalIndex = index;
        var found = null;
        var child = top.firstChild;
        while (found === null && child !== null) {
            if (domtypeguards_1.isElement(child)) {
                if (child.classList.contains("_phantom_wrap")) {
                    var result = findInPhantomWrap(child, index);
                    if (result.found !== null) {
                        found = result.found;
                    }
                    index -= result.count;
                }
                else if (child.classList.contains("_real")) {
                    index -= 1;
                    if (index < 0) {
                        found = child;
                    }
                }
                else if (child.classList.contains("_phantom")) {
                    // Phantoms don't count.
                }
                else {
                    throw new Error("unexpected element in _phantom_wrap");
                }
            }
            else if (child.nodeType === Node.TEXT_NODE) {
                // Text nodes do not count.
            }
            else {
                throw new Error("unexpected node in _phantom_wrap");
            }
            child = child.nextSibling;
        }
        return {
            found: found,
            count: originalIndex - index,
        };
    }
    /**
     * This is a [[DLocRoot]] class customized for use to mark the root of the GUI
     * tree.
     */
    var GUIRoot = /** @class */ (function (_super) {
        __extends(GUIRoot, _super);
        function GUIRoot() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Converts a node to a path suitable to be used by the
         * [["wed/dloc".DLocRoot.pathToNode]] method so long as the root used is the
         * one for the data tree corresponding to the GUI tree to which this object
         * belongs.
         *
         * @param node The node for which to construct a path.
         *
         * @returns The path.
         */
        GUIRoot.prototype.nodeToPath = function (node) {
            var root = this.node;
            if (domutil_1.closestByClass(node, "_placeholder", root) !== null) {
                throw new Error("cannot provide path to node because it is a placeholder node");
            }
            if (root === node) {
                return "";
            }
            if (!root.contains(node)) {
                throw new Error("node is not a descendant of root");
            }
            var ret = [];
            while (node !== root) {
                var parent_1 = void 0;
                if (domtypeguards_1.isElement(node) &&
                    !node.matches("._real, ._phantom_wrap, ._attribute_value")) {
                    throw new Error("only nodes of class ._real, ._phantom_wrap, and " +
                        "._attribute_value are supported");
                }
                var attrVal = domutil_1.closestByClass(node, "_attribute_value", root);
                if (attrVal !== null) {
                    var child = domutil_1.siblingByClass(attrVal, "_attribute_name");
                    if (child === null) {
                        throw new Error("no attribute name found");
                    }
                    ret.unshift("@" + child.textContent);
                    parent_1 = domutil_1.closestByClass(attrVal, "_real", root);
                    if (parent_1 === null) {
                        throw new Error("attribute is detached from real element");
                    }
                }
                else {
                    parent_1 = node.parentNode;
                    if (parent_1 === null) {
                        throw new Error("detached node");
                    }
                    var offset = 0;
                    var location_1 = domutil_1.indexOf(parent_1.childNodes, node);
                    for (var i = 0; i < location_1; ++i) {
                        var child = parent_1.childNodes[i];
                        if (domtypeguards_1.isText(child) ||
                            (domtypeguards_1.isElement(child) && child.classList.contains("_real"))) {
                            offset++;
                        }
                        else if (domtypeguards_1.isElement(child) &&
                            child.classList.contains("_phantom_wrap")) {
                            offset += countInPhantomWrap(child);
                        }
                    }
                    // Parent could be a document if it is not an element.
                    if (!domtypeguards_1.isElement(parent_1) || !parent_1.classList.contains("_phantom_wrap")) {
                        ret.unshift(String(offset));
                    }
                }
                node = parent_1;
            }
            return ret.join("/");
        };
        /**
         * This function recovers a DOM node on the basis of a path previously created
         * by [["wed/dloc".DLocRoot.nodeToPath]] provided that the root from which the
         * path was obtained is on the data tree which corresponds to the GUI tree
         * that this root was created for.
         *
         * @param path The path to interpret.
         *
         * @returns The node corresponding to the path, or ``null`` if no such node
         * exists.
         *
         * @throws {Error} If given a malformed ``path``.
         */
        GUIRoot.prototype.pathToNode = function (path) {
            var root = this.node;
            if (path === "") {
                return root;
            }
            var parts = path.split(/\//);
            var parent = root;
            var attribute;
            // Set aside the last part if it is an attribute.
            if (parts[parts.length - 1][0] === "@") {
                attribute = parts.pop();
            }
            var found = null;
            for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
                var part = parts_1[_i];
                var match = /^(\d+)$/.exec(part);
                if (match !== null) {
                    found = null;
                    var index = parseInt(match[1]);
                    for (var i = 0; found === null && (i < parent.childNodes.length); i++) {
                        var node = parent.childNodes[i];
                        if ((domtypeguards_1.isText(node) ||
                            (domtypeguards_1.isElement(node) && node.classList.contains("_real"))) &&
                            --index < 0) {
                            found = node;
                        }
                        else if (domtypeguards_1.isElement(node) &&
                            node.classList.contains("_phantom_wrap")) {
                            var result = findInPhantomWrap(node, index);
                            if (result.found !== null) {
                                found = result.found;
                            }
                            index -= result.count;
                        }
                    }
                    if (found === null) {
                        return null;
                    }
                    parent = found;
                }
                else {
                    throw new Error("malformed path expression");
                }
            }
            if (attribute !== undefined) {
                var name_1 = attribute.slice(1);
                if (!domtypeguards_1.isElement(parent)) {
                    throw new Error("looking for attribute on something which is not an element");
                }
                var attrs = parent.getElementsByClassName("_attribute_name");
                found = null;
                for (var aix = 0; aix < attrs.length; ++aix) {
                    var attr = attrs[aix];
                    if (attr.textContent === name_1) {
                        found = attr;
                        break;
                    }
                }
                if (found === null) {
                    throw new AttributeNotFound("could not find attribute with name: " + name_1);
                }
                parent = domutil_1.siblingByClass(found, "_attribute_value");
            }
            return parent;
        };
        return GUIRoot;
    }(dloc_1.DLocRoot));
    exports.GUIRoot = GUIRoot;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL
//# sourceMappingURL=guiroot.js.map

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Checks whether an object conforms to a template.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Checks whether a field is required.
     *
     * @param template The template to check.
     *
     * @param name The name of the field.
     *
     * @returns Whether the field is required or not.
     */
    function _required(template, name) {
        var val = template[name];
        if (typeof val === "object") {
            for (var subname in val) {
                if (_required(val, subname)) {
                    return true;
                }
            }
            return false;
        }
        return val;
    }
    function _check(template, toCheck, prefix, ret) {
        for (var name_1 in template) {
            if (_required(template, name_1)) {
                var prefixed = prefix !== undefined ? [prefix, name_1].join(".") : name_1;
                if (!(name_1 in toCheck)) {
                    ret.missing.push(prefixed);
                }
                else {
                    var val = toCheck[name_1];
                    var templateVal = template[name_1];
                    if (!(val instanceof Array) && typeof val === "object" &&
                        typeof templateVal === "object") {
                        _check(templateVal, val, prefixed, ret);
                    }
                }
            }
        }
        for (var name_2 in toCheck) {
            if (!(name_2 in template)) {
                var prefixed = prefix !== undefined ? [prefix, name_2].join(".") : name_2;
                ret.extra.push(prefixed);
            }
        }
    }
    /**
     * Checks whether an object conforms to a template. The template must be an
     * object which specifies the known fields and which among them are required. A
     * field is known if it appears in the template. A field is considered
     * *required* if:
     *
     *  + it is an object which has any field which is required, or
     *
     *  + it is not an object but evaluates to a true value.
     *
     * A required field which does not appear in the object being checked will
     * appear in the ``missing`` field in the returned value.
     *
     * A field which appears on the object being checked but which is not known will
     * appear in the ``extra`` field in the returned value.
     *
     * The fields mentioned above exist only if there is something to report. The
     * names returned in the lists are fully qualified names.
     *
     * For instance, given this template:
     *
     *     {
     *         foo: false,
     *         bar: {
     *             baz: true,
     *             bin: false,
     *         },
     *         bip: {
     *             baz: false,
     *             bin: false,
     *         }
     *     }
     *
     * The names "foo", "bar", "bar.baz", "bar.bin", "bip", "bip.baz", bip.bin" are
     * known. The names "bar" and "bar.baz" are required. The name "bar" is required
     * because "bar.baz" is required. The other names correspond to objects whose
     * fields are not required or are non-object values that evaluate to false.
     *
     * @param template The template to use for the check.
     *
     * @param toCheck The object to check
     *
     * @returns The results.
     */
    function check(template, toCheck) {
        var initial = { missing: [], extra: [] };
        _check(template, toCheck, undefined, initial);
        // clean up
        // tslint:disable-next-line:no-any
        var ret = initial;
        for (var name_3 in ret) {
            if (ret[name_3].length === 0) {
                delete ret[name_3];
            }
        }
        return ret;
    }
    exports.check = check;
    /**
     * Check whether the object fits the template, and throw at the first sign of
     * trouble. The thrown object contains information about the first error
     * encountered.
     *
     * @param template The template to use for the check.
     *
     * @param toCheck The object to check
     *
     * @throws {Error} If there is any error.
     */
    function assertSummarily(template, toCheck) {
        var result = check(template, toCheck);
        if (result.missing !== undefined) {
            throw new Error("missing option: " + result.missing[0]);
        }
        if (result.extra !== undefined) {
            throw new Error("extra option: " + result.extra[0]);
        }
    }
    exports.assertSummarily = assertSummarily;
    /**
     * Check whether the object fits the template, and throw an error that reports
     * all issues.
     *
     * @param template The template to use for the check.
     *
     * @param toCheck The object to check
     *
     * @throws {Error} If there is any error.
     */
    function assertExtensively(template, toCheck) {
        var result = check(template, toCheck);
        var errors = [];
        if (result.missing !== undefined) {
            for (var _i = 0, _a = result.missing; _i < _a.length; _i++) {
                var name_4 = _a[_i];
                errors.push("missing option: " + name_4);
            }
        }
        if (result.extra !== undefined) {
            for (var _b = 0, _c = result.extra; _b < _c.length; _b++) {
                var name_5 = _c[_b];
                errors.push("extra option: " + name_5);
            }
        }
        if (errors.length !== 0) {
            throw new Error(errors.join(", "));
        }
    }
    exports.assertExtensively = assertExtensively;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL baz bip
//# sourceMappingURL=object-check.js.map

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Exceptions for wed.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(17)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * This exception is thrown when **voluntarily** aborting a transformation, like
     * if the user is trying to do something which is not allowed in this
     * context. Only transformations can throw this.
     */
    var AbortTransformationException = /** @class */ (function (_super) {
        __extends(AbortTransformationException, _super);
        function AbortTransformationException(message) {
            var _this = _super.call(this, message) || this;
            util_1.fixPrototype(_this, AbortTransformationException);
            return _this;
        }
        return AbortTransformationException;
    }(Error));
    exports.AbortTransformationException = AbortTransformationException;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
// LocalWords:  Dubeau MPL Mangalam classdesc
//# sourceMappingURL=exceptions.js.map

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Facility for updating a DOM tree and issue synchronous events on changes.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(19), __webpack_require__(13), __webpack_require__(6), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, rxjs_1, dloc_1, domtypeguards_1, domutil) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    domutil = __importStar(domutil);
    var indexOf = domutil.indexOf;
    /**
     * A TreeUpdater is meant to serve as the sole point of modification for a DOM
     * tree. As methods are invoked on the TreeUpdater to modify the tree, events
     * are issued synchronously, which allows a listener to know what is happening
     * on the tree.
     *
     * Methods are divided into primitive and complex methods. Primitive methods
     * perform one and only one modification and issue an event of the same name as
     * their own name. Complex methods use primitive methods to perform a series of
     * modifications on the tree. Or they delegate the actual modification work to
     * the primitive methods. They may emit one or more events of a name different
     * from their own name. Events are emitted **after** their corresponding
     * operation is performed on the tree.
     *
     * For primitive methods, the list of events which they are documented to be
     * firing is exhaustive. For complex methods, the list is not exhaustive.
     *
     * Many events have a name identical to a corresponding method. Such events are
     * accompanied by event objects which have the same properties as the parameters
     * of the corresponding method, with the same meaning. Therefore, their
     * properties are not further documented.
     *
     * There is a generic [[ChangedEvent]] that is emitted with every other
     * event. This event does not carry information about what changed exactly.
     *
     * The [[TreeUpdater.deleteNode]] operation is the one major exception to the
     * basic rules given above:
     *
     * - [[BeforeDeleteNodeEvent]] is emitted **before** the deletion is
     * performed. This allows performing operations based on the node's location
     * before it is removed. For instance, calling the DOM method ``matches`` on a
     * node that has been removed from its DOM tree is generally going to fail to
     * perform the intended check.
     *
     * - [[DeleteNodeEvent]] has the additional ``formerParent`` property.
     *
     */
    var TreeUpdater = /** @class */ (function () {
        /**
         * @param tree The node which contains the tree to update.
         */
        function TreeUpdater(tree) {
            this.tree = tree;
            var root = dloc_1.findRoot(tree);
            if (root === undefined) {
                throw new Error("the tree must have a DLocRoot");
            }
            this.dlocRoot = root;
            this._events = new rxjs_1.Subject();
            this.events = this._events.asObservable();
        }
        TreeUpdater.prototype._emit = function (event) {
            this._events.next(event);
            this._events.next({ name: "Changed" });
        };
        TreeUpdater.prototype.insertAt = function (loc, offset, what) {
            var parent;
            var index;
            if (loc instanceof dloc_1.DLoc) {
                parent = loc.node;
                index = loc.offset;
                if (typeof offset === "number") {
                    throw new Error("incorrect call on insertAt: offset cannot be a number");
                }
                what = offset;
            }
            else {
                parent = loc;
                if (typeof offset !== "number") {
                    throw new Error("incorrect call on insertAt: offset must be a number");
                }
                index = offset;
            }
            if (what instanceof Array || what instanceof NodeList) {
                for (var i = 0; i < what.length; ++i, ++index) {
                    var item = what[i];
                    if (!(typeof item === "string" || domtypeguards_1.isElement(item) || domtypeguards_1.isText(item))) {
                        throw new Error("Array or NodeList element of the wrong type");
                    }
                    this.insertAt(parent, index, item);
                }
            }
            else if (typeof what === "string") {
                this.insertText(parent, index, what);
            }
            else if (domtypeguards_1.isText(what)) {
                switch (parent.nodeType) {
                    case Node.TEXT_NODE:
                        this.insertText(parent, index, what.data);
                        break;
                    case Node.ELEMENT_NODE:
                        this.insertNodeAt(parent, index, what);
                        break;
                    default:
                        throw new Error("unexpected node type: " + parent.nodeType);
                }
            }
            else if (domtypeguards_1.isElement(what)) {
                switch (parent.nodeType) {
                    case Node.TEXT_NODE:
                        this.insertIntoText(parent, index, what);
                        break;
                    case Node.DOCUMENT_NODE:
                    case Node.ELEMENT_NODE:
                        this.insertNodeAt(parent, index, what);
                        break;
                    default:
                        throw new Error("unexpected node type: " + parent.nodeType);
                }
            }
            else {
                throw new Error("unexpected value for what: " + what);
            }
        };
        TreeUpdater.prototype.splitAt = function (top, loc, index) {
            var node;
            if (loc instanceof dloc_1.DLoc) {
                node = loc.node;
                index = loc.offset;
            }
            else {
                node = loc;
            }
            if (index === undefined) {
                throw new Error("splitAt was called with undefined index");
            }
            if (node === top && node.nodeType === Node.TEXT_NODE) {
                throw new Error("splitAt called in a way that would result in " +
                    "two adjacent text nodes");
            }
            if (!top.contains(node)) {
                throw new Error("split location is not inside top");
            }
            var clonedTop = top.cloneNode(true);
            var clonedNode = domutil.correspondingNode(top, clonedTop, node);
            var pair = this._splitAt(clonedTop, clonedNode, index);
            var first = pair[0], second = pair[1];
            var parent = top.parentNode;
            if (parent === null) {
                throw new Error("called with detached top");
            }
            var at = indexOf(parent.childNodes, top);
            this.deleteNode(top);
            if (first !== null) {
                this.insertNodeAt(parent, at, first);
            }
            if (second !== null) {
                this.insertNodeAt(parent, at + 1, second);
            }
            return pair;
        };
        /**
         * Splits a DOM tree into two halves.
         *
         * @param top The node at which the splitting operation should end. This node
         * will be split but the function won't split anything above this node.
         *
         * @param node The node at which to start.
         *
         * @param index The index at which to start in the node.
         *
         * @returns An array containing in order the first and second half of the
         * split.
         */
        TreeUpdater.prototype._splitAt = function (top, node, index) {
            // We need to check this now because some operations below may remove node
            // from the DOM tree.
            var stop = (node === top);
            var parent = node.parentNode;
            var ret;
            if (domtypeguards_1.isText(node)) {
                if (index === 0) {
                    ret = [null, node];
                }
                else if (index === node.length) {
                    ret = [node, null];
                }
                else {
                    var textAfter = node.data.slice(index);
                    node.deleteData(index, node.length - index);
                    if (parent !== null) {
                        parent.insertBefore(parent.ownerDocument.createTextNode(textAfter), node.nextSibling);
                    }
                    ret = [node, node.nextSibling];
                }
            }
            else if (domtypeguards_1.isElement(node)) {
                if (index < 0) {
                    index = 0;
                }
                else if (index > node.childNodes.length) {
                    index = node.childNodes.length;
                }
                var clone = node.cloneNode(true);
                // Remove all nodes at index and after.
                while (node.childNodes[index] != null) {
                    node.removeChild(node.childNodes[index]);
                }
                // Remove all nodes before index
                while (index-- !== 0) {
                    clone.removeChild(clone.firstChild);
                }
                if (parent !== null) {
                    parent.insertBefore(clone, node.nextSibling);
                }
                ret = [node, clone];
            }
            else {
                throw new Error("unexpected node type: " + node.nodeType);
            }
            if (stop) { // We've just split the top, so end here...
                return ret;
            }
            if (parent === null) {
                throw new Error("unable to reach the top");
            }
            return this._splitAt(top, parent, indexOf(parent.childNodes, node) + 1);
        };
        /**
         * A complex method. Inserts the specified item before another one. Note that
         * the order of operands is the same as for the ``insertBefore`` DOM method.
         *
         * @param parent The node that contains the two other parameters.
         *
         * @param toInsert The node to insert.
         *
         * @param beforeThis The node in front of which to insert. A value of
         * ``null`` results in appending to the parent node.
         *
         * @throws {Error} If ``beforeThis`` is not a child of ``parent``.
         */
        TreeUpdater.prototype.insertBefore = function (parent, toInsert, beforeThis) {
            // Convert it to an insertAt operation.
            var index = beforeThis == null ? parent.childNodes.length :
                indexOf(parent.childNodes, beforeThis);
            if (index === -1) {
                throw new Error("insertBefore called with a beforeThis value " +
                    "which is not a child of parent");
            }
            this.insertAt(parent, index, toInsert);
        };
        TreeUpdater.prototype.insertText = function (loc, index, text, caretAtEnd) {
            if (text === void 0) { text = true; }
            if (caretAtEnd === void 0) { caretAtEnd = true; }
            var node;
            if (loc instanceof dloc_1.DLoc) {
                if (typeof index !== "string") {
                    throw new Error("text must be a string");
                }
                if (typeof text !== "boolean") {
                    throw new Error("caretAtEnd must be a boolean");
                }
                caretAtEnd = text;
                text = index;
                node = loc.node;
                index = loc.offset;
            }
            else {
                node = loc;
            }
            var result = domutil.genericInsertText.call(this, node, index, text, caretAtEnd);
            return __assign({}, result, { caret: dloc_1.DLoc.makeDLoc(this.dlocRoot, result.caret[0], result.caret[1]) });
        };
        TreeUpdater.prototype.deleteText = function (loc, index, length) {
            var node;
            if (loc instanceof dloc_1.DLoc) {
                length = index;
                node = loc.node;
                index = loc.offset;
            }
            else {
                node = loc;
                if (length === undefined) {
                    throw new Error("length cannot be undefined");
                }
            }
            if (!domtypeguards_1.isText(node)) {
                throw new Error("deleteText called on non-text");
            }
            this.setTextNode(node, node.data.slice(0, index) +
                node.data.slice(index + length));
        };
        TreeUpdater.prototype.insertIntoText = function (loc, index, node) {
            var parent;
            if (loc instanceof dloc_1.DLoc) {
                if (!domtypeguards_1.isNode(index)) {
                    throw new Error("must pass a node as the 2nd argument");
                }
                node = index;
                index = loc.offset;
                parent = loc.node;
            }
            else {
                parent = loc;
            }
            var ret = domutil.genericInsertIntoText.call(this, parent, index, node);
            return [dloc_1.DLoc.mustMakeDLoc(this.tree, ret[0]),
                dloc_1.DLoc.mustMakeDLoc(this.tree, ret[1])];
        };
        TreeUpdater.prototype.insertNodeAt = function (loc, index, node) {
            var parent;
            if (loc instanceof dloc_1.DLoc) {
                if (!domtypeguards_1.isNode(index)) {
                    throw new Error("the 2nd argument must be a Node");
                }
                node = index;
                index = loc.offset;
                parent = loc.node;
            }
            else {
                parent = loc;
                if (typeof index !== "number") {
                    throw new Error("index must be a number");
                }
            }
            if (node == null) {
                throw new Error("called insertNodeAt with absent node");
            }
            if (domtypeguards_1.isDocumentFragment(node)) {
                throw new Error("document fragments cannot be passed to insertNodeAt");
            }
            this._emit({ name: "BeforeInsertNodeAt", parent: parent, index: index, node: node });
            var child = parent.childNodes[index];
            parent.insertBefore(node, child != null ? child : null);
            this._emit({ name: "InsertNodeAt", parent: parent, index: index, node: node });
        };
        /**
         * A complex method. Sets a text node to a specified value.
         *
         * @param node The node to modify.
         *
         * @param value The new value of the node.
         *
         * @throws {Error} If called on a non-text Node type.
         */
        TreeUpdater.prototype.setTextNode = function (node, value) {
            if (!domtypeguards_1.isText(node)) {
                throw new Error("setTextNode called on non-text");
            }
            if (value !== "") {
                this.setTextNodeValue(node, value);
            }
            else {
                this.deleteNode(node);
            }
        };
        /**
         * A primitive method. Sets a text node to a specified value. This method must
         * not be called directly by code that performs changes of the DOM tree at a
         * high level, because it does not prevent a text node from becoming
         * empty. Call [[TreeUpdater.setTextNode]] instead. This method is meant to be
         * used by other complex methods of TreeUpdater and by some low-level
         * facilities of wed.
         *
         * @param node The node to modify. Must be a text node.
         *
         * @param value The new value of the node.
         *
         * @emits SetTextNodeValueEvent
         * @emits ChangedEvent
         * @throws {Error} If called on a non-text Node type.
         */
        TreeUpdater.prototype.setTextNodeValue = function (node, value) {
            if (!domtypeguards_1.isText(node)) {
                throw new Error("setTextNodeValue called on non-text");
            }
            var oldValue = node.data;
            node.data = value;
            this._emit({ name: "SetTextNodeValue", node: node, value: value, oldValue: oldValue });
        };
        /**
         * A complex method. Removes a node from the DOM tree. If two text nodes
         * become adjacent, they are merged.
         *
         * @param node The node to remove. This method will fail with an exception if
         * this parameter is ``undefined`` or ``null``. Use [[removeNodeNF]] if you
         * want a method that will silently do nothing if ``undefined`` or ``null``
         * are expected values.
         *
         * @returns A location between the two parts that were merged, or between the
         * two nodes that were not merged (because they were not both text).
         */
        TreeUpdater.prototype.removeNode = function (node) {
            if (node == null) {
                throw new Error("called without a node value");
            }
            var prev = node.previousSibling;
            var parent = node.parentNode;
            if (parent === null) {
                throw new Error("called with detached node");
            }
            var ix = indexOf(parent.childNodes, node);
            this.deleteNode(node);
            if (prev === null) {
                return dloc_1.DLoc.mustMakeDLoc(this.tree, parent, ix);
            }
            return this.mergeTextNodes(prev);
        };
        /**
         * A complex method. Removes a node from the DOM tree. If two text nodes
         * become adjacent, they are merged.
         *
         * @param node The node to remove. This method will do nothing if the node to
         * remove is ``undefined`` or ``null``.
         *
         * @returns A location between the two parts that were merged, or between the
         * two nodes that were not merged (because they were not both text). This will
         * be ``undefined`` if there was no node to remove.
         */
        TreeUpdater.prototype.removeNodeNF = function (node) {
            if (node == null) {
                return undefined;
            }
            return this.removeNode(node);
        };
        /**
         * A complex method. Removes a list of nodes from the DOM tree. If two text
         * nodes become adjacent, they are merged.
         *
         * @param nodes These nodes must be immediately contiguous siblings in
         * document order.
         *
         * @returns The location between the two parts that were merged, or between
         * the two nodes that were not merged (because they were not both
         * text). Undefined if the list of nodes is empty.
         *
         * @throws {Error} If nodes are not contiguous siblings.
         */
        TreeUpdater.prototype.removeNodes = function (nodes) {
            if (nodes.length === 0) {
                return undefined;
            }
            var prev = nodes[0].previousSibling;
            var parent = nodes[0].parentNode;
            if (parent === null) {
                throw new Error("called with detached node");
            }
            var ix = indexOf(parent.childNodes, nodes[0]);
            for (var i = 0; i < nodes.length; ++i) {
                if (i < nodes.length - 1 && nodes[i].nextSibling !== nodes[i + 1]) {
                    throw new Error("nodes are not immediately contiguous in " +
                        "document order");
                }
                this.deleteNode(nodes[i]);
            }
            if (prev === null) {
                return dloc_1.DLoc.makeDLoc(this.tree, parent, ix);
            }
            return this.mergeTextNodes(prev);
        };
        /**
         * A complex method. Removes the contents between the start and end carets
         * from the DOM tree. If two text nodes become adjacent, they are merged.
         *
         * @param start The start position.
         *
         * @param end The end position.
         *
         * @returns A pair of items. The first item is a ``DLoc`` object indicating
         * the position where the cut happened. The second item is a list of nodes,
         * the cut contents.
         *
         * @throws {Error} If Nodes in the range are not in the same element.
         */
        TreeUpdater.prototype.cut = function (start, end) {
            var ret = domutil.genericCutFunction.call(this, start.toArray(), end.toArray());
            ret[0] = start.make(ret[0]);
            return ret;
        };
        /**
         * A complex method. If the node is a text node and followed by a text node,
         * this method will combine them.
         *
         * @param node The node to check. This method will fail with an exception if
         * this parameter is ``undefined`` or ``null``. Use [[mergeTextNodesNF]] if
         * you want a method that will silently do nothing if ``undefined`` or
         * ``null`` are expected values.
         *
         * @returns A position between the two parts that were merged, or between the
         * two nodes that were not merged (because they were not both text).
         */
        TreeUpdater.prototype.mergeTextNodes = function (node) {
            var next = node.nextSibling;
            if (domtypeguards_1.isText(node) && next !== null && domtypeguards_1.isText(next)) {
                var offset = node.length;
                this.setTextNodeValue(node, node.data + next.data);
                this.deleteNode(next);
                return dloc_1.DLoc.mustMakeDLoc(this.tree, node, offset);
            }
            var parent = node.parentNode;
            if (parent === null) {
                throw new Error("called with detached node");
            }
            return dloc_1.DLoc.mustMakeDLoc(this.tree, parent, indexOf(parent.childNodes, node) + 1);
        };
        /**
         * A complex method. If the node is a text node and followed by a text node,
         * this method will combine them.
         *
         * @param node The node to check. This method will do nothing if the node to
         * remove is ``undefined`` or ``null``.
         *
         * @returns A position between the two parts that were merged, or between the
         * two nodes that were not merged (because they were not both text). This will
         * be ``undefined`` if there was no node to remove.
         */
        TreeUpdater.prototype.mergeTextNodesNF = function (node) {
            if (node == null) {
                return undefined;
            }
            return this.mergeTextNodes(node);
        };
        /**
         * A primitive method. Removes a node from the DOM tree. This method must not
         * be called directly by code that performs changes of the DOM tree at a high
         * level, because it does not prevent two text nodes from being contiguous
         * after deletion of the node. Call [[removeNode]] instead. This method is
         * meant to be used by other complex methods of TreeUpdater and by some
         * low-level facilities of wed.
         *
         * @param node The node to remove
         *
         * @emits DeleteNodeEvent
         * @emits BeforeDeleteNodeEvent
         * @emits ChangedEvent
         */
        TreeUpdater.prototype.deleteNode = function (node) {
            this._emit({ name: "BeforeDeleteNode", node: node });
            // The following is functionally equivalent to $(node).detach(), which is
            // what we want.
            var parent = node.parentNode;
            if (parent === null) {
                throw new Error("called with detached node");
            }
            parent.removeChild(node);
            this._emit({ name: "DeleteNode", node: node, formerParent: parent });
        };
        /**
         * A complex method. Sets an attribute to a value. Setting to the value
         * ``null`` or ``undefined`` deletes the attribute. This method sets
         * attributes outside of any namespace.
         *
         * @param node The node to modify.
         *
         * @param attribute The name of the attribute to modify.
         *
         * @param value The value to give to the attribute.
         *
         * @emits SetAttributeNSEvent
         * @emits ChangedEvent
         */
        TreeUpdater.prototype.setAttribute = function (node, attribute, value) {
            this.setAttributeNS(node, "", attribute, value);
        };
        /**
         * A primitive method. Sets an attribute to a value. Setting to the value
         * ``null`` or ``undefined`` deletes the attribute.
         *
         * @param node The node to modify.
         *
         * @param ns The URI of the namespace of the attribute.
         *
         * @param attribute The name of the attribute to modify.
         *
         * @param value The value to give to the attribute.
         *
         * @emits SetAttributeNSEvent
         * @emits ChangedEvent
         */
        TreeUpdater.prototype.setAttributeNS = function (node, ns, attribute, value) {
            // Normalize to null.
            if (value === undefined) {
                value = null;
            }
            if (!domtypeguards_1.isElement(node)) {
                throw new Error("setAttribute called on non-element");
            }
            var oldValue = node.getAttributeNS(ns, attribute);
            // Chrome 32 returns an empty string if the attribute is not present, so
            // normalize.
            if (oldValue === "" && !node.hasAttributeNS(ns, attribute)) {
                oldValue = null;
            }
            if (value != null) {
                node.setAttributeNS(ns, attribute, value);
            }
            else {
                node.removeAttributeNS(ns, attribute);
            }
            this._emit({ name: "SetAttributeNS", node: node, ns: ns, attribute: attribute, oldValue: oldValue,
                newValue: value });
        };
        /**
         * Converts a node to a path.
         *
         * @param node The node for which to return a path.
         *
         * @returns The path of the node relative to the root of the tree we are
         * updating.
         */
        TreeUpdater.prototype.nodeToPath = function (node) {
            return this.dlocRoot.nodeToPath(node);
        };
        /**
         * Converts a path to a node.
         *
         * @param path The path to convert.
         *
         * @returns The node corresponding to the path passed.
         */
        TreeUpdater.prototype.pathToNode = function (path) {
            return this.dlocRoot.pathToNode(path);
        };
        return TreeUpdater;
    }());
    exports.TreeUpdater = TreeUpdater;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  domutil splitAt insertAt insertText insertBefore deleteText cd
//  LocalWords:  removeNode setTextNodeValue param TreeUpdater insertNodeAt MPL
//  LocalWords:  abcd abfoocd setTextNode deleteNode pathToNode nodeToPath prev
//  LocalWords:  insertIntoText mergeTextNodes nextSibling previousSibling DOM
//  LocalWords:  Dubeau Mangalam BeforeInsertNodeAt BeforeDeleteNode DLocRoot
//  LocalWords:  SetAttributeNS NodeList nodeType beforeThis nd setAttribute
//  LocalWords:  caretAtEnd
//# sourceMappingURL=tree-updater.js.map

/***/ }),
/* 75 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_75__;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(77), __webpack_require__(6), __webpack_require__(5), __webpack_require__(78), __webpack_require__(73), __webpack_require__(285), __webpack_require__(51), __webpack_require__(23), __webpack_require__(287), __webpack_require__(72), __webpack_require__(124), __webpack_require__(125), __webpack_require__(39), __webpack_require__(74), __webpack_require__(17), __webpack_require__(49), __webpack_require__(288), __webpack_require__(13), __webpack_require__(114), __webpack_require__(78), __webpack_require__(289), __webpack_require__(290), __webpack_require__(53), __webpack_require__(127), __webpack_require__(50), __webpack_require__(52), __webpack_require__(121), __webpack_require__(122), __webpack_require__(119)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, convert, domtypeguards, domutil, editor_1, exceptions, inputTriggerFactory, key, keyConstants, labelman, objectCheck, runtime_1, saver, transformation, treeUpdater, util, action_1, decorator_1, dloc_1, domlistener_1, editor_2, gui_selector_1, mode_1, undo_1, validator_1, button_, contextMenu_, modal_, tooltip_, typeaheadPopup_) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    convert = __importStar(convert);
    domtypeguards = __importStar(domtypeguards);
    domutil = __importStar(domutil);
    exceptions = __importStar(exceptions);
    inputTriggerFactory = __importStar(inputTriggerFactory);
    key = __importStar(key);
    keyConstants = __importStar(keyConstants);
    labelman = __importStar(labelman);
    objectCheck = __importStar(objectCheck);
    saver = __importStar(saver);
    transformation = __importStar(transformation);
    treeUpdater = __importStar(treeUpdater);
    util = __importStar(util);
    button_ = __importStar(button_);
    contextMenu_ = __importStar(contextMenu_);
    modal_ = __importStar(modal_);
    tooltip_ = __importStar(tooltip_);
    typeaheadPopup_ = __importStar(typeaheadPopup_);
    exports.convert = convert;
    exports.domtypeguards = domtypeguards;
    exports.domutil = domutil;
    exports.exceptions = exceptions;
    exports.inputTriggerFactory = inputTriggerFactory;
    exports.key = key;
    exports.keyConstants = keyConstants;
    exports.labelman = labelman;
    exports.objectCheck = objectCheck;
    exports.Runtime = runtime_1.Runtime;
    exports.saver = saver;
    exports.transformation = transformation;
    exports.treeUpdater = treeUpdater;
    exports.util = util;
    function makeEditor(widget, options) {
        return new editor_1.Editor(widget, options);
    }
    exports.makeEditor = makeEditor;
    exports.Action = action_1.Action;
    exports.Decorator = decorator_1.Decorator;
    exports.DLoc = dloc_1.DLoc;
    exports.DLocRoot = dloc_1.DLocRoot;
    exports.DOMListener = domlistener_1.DOMListener;
    exports.version = editor_2.version;
    exports.GUISelector = gui_selector_1.GUISelector;
    exports.BaseMode = mode_1.BaseMode;
    exports.UndoMarker = undo_1.UndoMarker;
    exports.Validator = validator_1.Validator;
    var gui;
    (function (gui) {
        gui.button = button_;
        gui.contextMenu = contextMenu_;
        gui.modal = modal_;
        gui.tooltip = tooltip_;
        gui.typeaheadPopup = typeaheadPopup_;
    })(gui = exports.gui || (exports.gui = {}));
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  domutil DLocRoot runtime MPL
//# sourceMappingURL=wed.js.map

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Conversion from XML to HTML.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(6), __webpack_require__(17)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, domtypeguards_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // tslint:disable-next-line: no-http-string
    var XML1_NAMESPACE = "http://www.w3.org/XML/1998/namespace";
    // tslint:disable-next-line: no-http-string
    var XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/";
    function normalizeNS(ns) {
        if (ns === null) {
            ns = "";
        }
        return ns;
    }
    /**
     * Convert an XML tree or subtree into an HTML tree suitable to be inserted into
     * the GUI tree.
     *
     * XML Elements are converted to ``div`` elements with a ``class`` that has:
     *
     * - for first class the tag name (qualified name in XML parlance) of the
     *    element,
     *
     * - for second class the ``_local_<local name>`` where ``<local name>`` is the
     *   local name of the element,
     *
     * - for third class ``_xmlns_<namespace uri>`` where ``namespace uri`` is
     *   the URI of the namespace of the XML element,
     *
     * - for fourth class ``_real``.
     *
     * The attributes of the XML element appear on the HTML element with the name
     * ``data-wed-<attribute name>``, where ``attribute name`` is converted by
     * [[encodeAttrName]]. This attribute has for value the original
     * value in the XML. A second attribute ``data-wed--ns-<attribute name>``
     * contains the namespace URI of the attribute. If the attribute was not in a
     * namespace, then ``data-wed--ns-<attribute name>`` is omitted.
     *
     * @param doc The HTML document in which we are going to use the generated
     * tree.
     *
     * @param node The root of the XML tree to convert.
     *
     * @returns The root of the newly created HTML tree.
     */
    function toHTMLTree(doc, node) {
        var ret;
        if (domtypeguards_1.isElement(node)) {
            ret = doc.createElement("div");
            ret.className = node.tagName + " _local_" + node.localName + " _xmlns_" + normalizeNS(node.namespaceURI) + " _real";
            //
            // We encode attributes here in the following way:
            //
            // 1. A sequence of three dashes or more gains a dash. So three dashes
            // becomes 4, 4 becomes 5, etc.
            //
            // 2. A colon (which should be present only to mark the prefix) becomes a
            // sequence of three dashes.
            //
            for (var i = 0; i < node.attributes.length; ++i) {
                var attr = node.attributes[i];
                ret.setAttribute(util_1.encodeAttrName(attr.name), attr.value);
                var ns = attr.namespaceURI;
                // We do not output this attribute if the namespace is for XML v1 or
                // the xmlns namespace.
                if (ns !== null && ns !== XML1_NAMESPACE && ns !== XMLNS_NAMESPACE) {
                    ret.setAttribute(util_1.encodeAttrName(attr.name, "ns"), ns);
                }
            }
            var child = node.firstChild;
            while (child !== null) {
                ret.appendChild(toHTMLTree(doc, child));
                child = child.nextSibling;
            }
        }
        else if (domtypeguards_1.isText(node)) {
            ret = document.createTextNode(node.data);
        }
        else {
            throw new Error("unhandled node type: " + node.nodeType);
        }
        return ret;
    }
    exports.toHTMLTree = toHTMLTree;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL subtree tagName localName xmlns normalizeNS namespaceURI
//  LocalWords:  ns nodeType
//# sourceMappingURL=convert.js.map

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(103), __webpack_require__(7), __webpack_require__(104), __webpack_require__(113), __webpack_require__(70), __webpack_require__(49), __webpack_require__(242), __webpack_require__(13), __webpack_require__(114), __webpack_require__(6), __webpack_require__(5), __webpack_require__(5), __webpack_require__(246), __webpack_require__(73), __webpack_require__(247), __webpack_require__(248), __webpack_require__(253), __webpack_require__(259), __webpack_require__(38), __webpack_require__(120), __webpack_require__(260), __webpack_require__(121), __webpack_require__(261), __webpack_require__(263), __webpack_require__(129), __webpack_require__(264), __webpack_require__(122), __webpack_require__(71), __webpack_require__(51), __webpack_require__(23), __webpack_require__(123), __webpack_require__(266), __webpack_require__(270), __webpack_require__(271), __webpack_require__(272), __webpack_require__(273), __webpack_require__(124), __webpack_require__(125), __webpack_require__(278), __webpack_require__(126), __webpack_require__(39), __webpack_require__(74), __webpack_require__(53), __webpack_require__(280), __webpack_require__(17), __webpack_require__(281), __webpack_require__(127), __webpack_require__(37), __webpack_require__(284), __webpack_require__(27)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ajv_1, jquery_1, operators_1, salve, salve_dom_1, action_1, caret_manager_1, dloc_1, domlistener, domtypeguards_1, domutil, domutil_1, editorActions, exceptions_1, gui_updater_1, dialog_search_replace_1, editing_menu_manager_1, error_layer_1, icon, layer_1, minibuffer_1, modal_1, notify_1, quick_search_1, scroller_1, toolbar_1, tooltip_1, guiroot_1, key_1, keyConstants, log, mode_tree_1, onbeforeunload, onerror, optionsSchema, preferences, runtime_1, saver_1, stock_modals_1, task_runner_1, transformation_1, tree_updater_1, undo_1, undo_recorder_1, util, validation_controller_1, validator_1, wed_util_1, wundo) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ajv_1 = __importDefault(ajv_1);
    jquery_1 = __importDefault(jquery_1);
    salve = __importStar(salve);
    domlistener = __importStar(domlistener);
    domutil = __importStar(domutil);
    editorActions = __importStar(editorActions);
    icon = __importStar(icon);
    keyConstants = __importStar(keyConstants);
    log = __importStar(log);
    onbeforeunload = __importStar(onbeforeunload);
    onerror = __importStar(onerror);
    optionsSchema = __importStar(optionsSchema);
    preferences = __importStar(preferences);
    util = __importStar(util);
    wundo = __importStar(wundo);
    exports.version = "2.0.0";
    // We don't put this in keyConstants because ESCAPE_KEYPRESS should never be
    // seen elsewhere.
    var ESCAPE_KEYPRESS = key_1.makeKey(27);
    function filterSaveEvents(name, ev) {
        return ev.name === name;
    }
    /**
     * An action for bringing up the complex pattern modal.
     */
    var ComplexPatternAction = /** @class */ (function (_super) {
        __extends(ComplexPatternAction, _super);
        function ComplexPatternAction() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ComplexPatternAction.prototype, "modal", {
            get: function () {
                if (this._modal === undefined) {
                    var modal = this._modal = this.editor.makeModal();
                    modal.setTitle("Complex Name Pattern Encountered");
                    modal.setBody("<p>The schema contains here a complex name pattern modal. While wed \
has no problem validating such cases. It does not currently have facilities to \
add elements or attributes that match such patterns. You can continue editing \
your document but you will not be able to take advantage of the possibilities \
provided by the complex pattern here.</p>");
                    modal.addButton("Ok", true);
                }
                return this._modal;
            },
            enumerable: true,
            configurable: true
        });
        ComplexPatternAction.prototype.execute = function () {
            this.modal.modal();
        };
        return ComplexPatternAction;
    }(action_1.Action));
    /**
     * The possible targets for some wed operations that generate events. It is
     * currently used to determine where to type keys when calling [[Editor.type]].
     */
    var WedEventTarget;
    (function (WedEventTarget) {
        /** The default target is the main editing panel. */
        WedEventTarget[WedEventTarget["DEFAULT"] = 0] = "DEFAULT";
        /** Target the minibuffer. */
        WedEventTarget[WedEventTarget["MINIBUFFER"] = 1] = "MINIBUFFER";
    })(WedEventTarget = exports.WedEventTarget || (exports.WedEventTarget = {}));
    var FRAMEWORK_TEMPLATE = "\
<div class='row'>\
 <div class='toolbar'></div>\
 <div class='wed-frame col-sm-push-2 col-lg-10 col-md-10 col-sm-10'>\
  <div class='row'>\
   <div class='progress'>\
    <span></span>\
    <div class='wed-validation-progress progress-bar' style='width: 0%'></div>\
   </div>\
  </div>\
  <div class='row'>\
   <div class='wed-cut-buffer' contenteditable='true'></div>\
   <div class='wed-document-constrainer'>\
    <input class='wed-comp-field' type='text'></input>\
    <div class='wed-scroller'>\
     <div class='wed-caret-layer'></div>\
     <div class='wed-error-layer'></div>\
     <div class='wed-document'><span class='root-here'></span></div>\
    </div>\
   </div>\
   <div class='wed-minibuffer'></div>\
   <div class='wed-location-bar'>@&nbsp;<span>&nbsp;</span></div>\
  </div>\
 </div>\
 <div class='wed-sidebar col-sm-pull-10 col-lg-2 col-md-2 col-sm-2'>\
  <div class='wed-save-and-modification-status'>\
   <span class='wed-modification-status label label-success' \
         title='Modification status'>\
    <i class='fa fa-asterisk'></i>\
   </span>\
   <span class='wed-save-status label label-default'>\
    <i class='fa fa-cloud-upload'></i> <span></span>\
   </span>\
  </div>\
  <div id='sidebar-panel' class='panel-group wed-sidebar-panel'>\
   <div class='panel panel-info wed-navigation-panel'>\
    <div class='panel-heading'>\
     <div class='panel-title'>\
      <a class='accordion-toggle' data-toggle='collapse' \
         data-parent='#sidebar-panel' href='#sb-nav-collapse'>Navigation</a>\
     </div>\
    </div>\
   <div id='sb-nav-collapse' data-parent='#sidebar-panel' \
        class='panel-collapse collapse in'>\
     <div id='sb-nav' class='panel-body'>\
      <ul id='navlist' class='nav nav-list'>\
       <li class='inactive'>A list of navigation links will appear here</li>\
      </ul>\
     </div>\
    </div>\
   </div>\
   <div class='panel panel-danger'>\
    <div class='panel-heading'>\
     <div class='panel-title'>\
      <a class='accordion-toggle' data-toggle='collapse'\
         data-parent='#sidebar-panel' href='#sb-errors-collapse'>Errors</a>\
     </div>\
    </div>\
    <div id='sb-errors-collapse' data-parent='#sidebar-panel'\
         class='panel-collapse collapse'>\
     <div id='sb-errors' class='panel-body'>\
      <ul id='sb-errorlist' class='nav nav-list wed-errorlist'>\
       <li class='inactive'></li>\
      </ul>\
     </div>\
    </div>\
   </div>\
  </div>\
 </div>\
</div>";
    /**
     * This is the class to instantiate for editing.
     */
    var Editor = /** @class */ (function () {
        // tslint:disable-next-line:max-func-body-length
        function Editor(widget, options) {
            var _this = this;
            this._firstValidationComplete = false;
            // tslint:disable-next-line:no-any
            this.modeData = {};
            this.developmentMode = false;
            this.textUndoMaxLength = 10;
            this.taskRunners = [];
            this.taskSuspension = 0;
            // We may want to make this configurable in the future.
            this.normalizeEnteredSpaces = true;
            this.strippedSpaces = /\u200B/g;
            this.replacedSpaces = /\s+/g;
            this.destroyed = false;
            this.initialLabelLevel = 0;
            this.currentLabelLevel = 0;
            this.globalKeydownHandlers = [];
            this.updatingPlaceholder = 0;
            this.composing = false;
            this._transformations = new transformation_1.TransformationEventSubject();
            this.name = "";
            this.saveAction = new editorActions.Save(this);
            this.decreaseLabelVisibilityLevelAction = new editorActions.DecreaseLabelVisibilityLevel(this);
            this.increaseLabelVisibilityLevelAction = new editorActions.IncreaseLabelVisibilityLevel(this);
            this.undoAction = new editorActions.Undo(this);
            this.redoAction = new editorActions.Redo(this);
            this.toggleAttributeHidingAction = new editorActions.ToggleAttributeHiding(this);
            this.transformations = this._transformations.asObservable();
            this.maxLabelLevel = 0;
            // tslint:disable-next-line:promise-must-complete
            this.firstValidationComplete = new Promise(function (resolve) {
                _this.firstValidationCompleteResolve = resolve;
            });
            // tslint:disable-next-line:promise-must-complete
            this.initialized = new Promise(function (resolve) {
                _this.initializedResolve = resolve;
            });
            onerror.editors.push(this);
            this.widget = widget;
            this.$widget = jquery_1.default(this.widget);
            // We could be loaded in a frame in which case we should not alter anything
            // outside our frame.
            this.$frame = jquery_1.default(domutil_1.closest(this.widget, "html"));
            var doc = this.doc = this.$frame[0].ownerDocument;
            this.window = doc.defaultView;
            // It is possible to pass a runtime as "options" but if the user passed
            // actual options, then make a runtime from them.
            this.runtime = (options instanceof runtime_1.Runtime) ? options :
                new runtime_1.Runtime(options);
            options = this.runtime.options;
            this.modals = new stock_modals_1.StockModals(this);
            // ignore_module_config allows us to completely ignore the module config. In
            // some case, it may be difficult to just override individual values.
            // tslint:disable-next-line:no-any strict-boolean-expressions
            if (options.ignore_module_config) {
                console.warn("the option ignore_module_config is no longer useful");
            }
            var ajv = new ajv_1.default();
            var optionsValidator = ajv.compile(optionsSchema);
            if (!optionsValidator(options)) {
                // tslint:disable-next-line:prefer-template
                throw new Error("the options passed to wed are not valid: " +
                    ajv.errorsText(optionsValidator.errors, {
                        dataVar: "options",
                    }));
            }
            if (options.ajaxlog !== undefined) {
                this.appender = log.addURL(options.ajaxlog.url, options.ajaxlog.headers);
            }
            this.name = options.name !== undefined ? options.name : "";
            this.options = options;
            var docURL = this.options.docURL;
            this.docURL = docURL == null ? "./doc/index.html" : docURL;
            this.preferences = new preferences.Preferences({
                tooltips: true,
            });
            // This structure will wrap around the document to be edited.
            //
            // We duplicate data-parent on the toggles and on the collapsible
            // elements due to a bug in Bootstrap 3.0.0. See
            // https://github.com/twbs/bootstrap/issues/9933.
            //
            var framework = domutil_1.htmlToElements(FRAMEWORK_TEMPLATE, doc)[0];
            //
            // Grab all the references we need while framework does not yet contain the
            // document to be edited. (Faster!)
            //
            var guiRoot = this.guiRoot =
                framework.getElementsByClassName("wed-document")[0];
            this.$guiRoot = jquery_1.default(guiRoot);
            this.scroller =
                new scroller_1.Scroller(framework.getElementsByClassName("wed-scroller")[0]);
            this.constrainer =
                framework
                    .getElementsByClassName("wed-document-constrainer")[0];
            var toolbar = this.toolbar = new toolbar_1.Toolbar();
            var toolbarPlaceholder = framework.getElementsByClassName("toolbar")[0];
            toolbarPlaceholder.parentNode.insertBefore(toolbar.top, toolbarPlaceholder);
            toolbarPlaceholder.parentNode.removeChild(toolbarPlaceholder);
            this.inputField =
                framework.getElementsByClassName("wed-comp-field")[0];
            this.$inputField = jquery_1.default(this.inputField);
            this.cutBuffer =
                framework.getElementsByClassName("wed-cut-buffer")[0];
            this.caretLayer = new layer_1.Layer(framework.getElementsByClassName("wed-caret-layer")[0]);
            this.errorLayer = new error_layer_1.ErrorLayer(framework.getElementsByClassName("wed-error-layer")[0]);
            this.wedLocationBar =
                framework.getElementsByClassName("wed-location-bar")[0];
            this.minibuffer = new minibuffer_1.Minibuffer(framework.getElementsByClassName("wed-minibuffer")[0]);
            var sidebar = this.sidebar =
                framework.getElementsByClassName("wed-sidebar")[0];
            this.validationProgress =
                framework
                    .getElementsByClassName("wed-validation-progress")[0];
            this.validationMessage =
                this.validationProgress.previousElementSibling;
            // Insert the framework and put the document in its proper place.
            var rootPlaceholder = framework.getElementsByClassName("root-here")[0];
            if (this.widget.firstChild !== null) {
                // tslint:disable-next-line:no-any
                if (!(this.widget.firstChild instanceof this.window.Element)) {
                    throw new Error("the data is populated with DOM elements constructed " +
                        "from another window");
                }
                rootPlaceholder.parentNode.insertBefore(this.widget.firstChild, rootPlaceholder);
            }
            rootPlaceholder.parentNode.removeChild(rootPlaceholder);
            this.widget.appendChild(framework);
            this.caretOwners = guiRoot.getElementsByClassName("_owns_caret");
            this.clickedLabels = guiRoot.getElementsByClassName("_label_clicked");
            this.withCaret = guiRoot.getElementsByClassName("_with_caret");
            this.$modificationStatus =
                jquery_1.default(sidebar.getElementsByClassName("wed-modification-status")[0]);
            this.$saveStatus =
                jquery_1.default(sidebar.getElementsByClassName("wed-save-status")[0]);
            this.$navigationPanel =
                jquery_1.default(sidebar.getElementsByClassName("wed-navigation-panel")[0]);
            this.$navigationPanel.css("display", "none");
            this.$navigationList = jquery_1.default(doc.getElementById("navlist"));
            this.$errorList = jquery_1.default(doc.getElementById("sb-errorlist"));
            this.$excludedFromBlur = jquery_1.default();
            this.errorItemHandlerBound = this.errorItemHandler.bind(this);
            this._undo = new undo_1.UndoList();
            this.complexPatternAction = new ComplexPatternAction(this, "Complex name pattern", undefined, icon.makeHTML("exclamation"), true);
            this.pasteTr = new transformation_1.Transformation(this, "add", "Paste", this.paste.bind(this));
            this.cutTr = new transformation_1.Transformation(this, "delete", "Cut", this.cut.bind(this));
            this.replaceRangeTr =
                new transformation_1.Transformation(this, "transform", "Replace Range", this.replaceRange.bind(this));
            this.splitNodeTr =
                new transformation_1.Transformation(this, "split", "Split <name>", function (editor, data) {
                    transformation_1.splitNode(editor, data.node);
                });
            this.mergeWithPreviousHomogeneousSiblingTr =
                new transformation_1.Transformation(this, "merge-with-previous", "Merge <name> with previous", function (editor, data) {
                    transformation_1.mergeWithPreviousHomogeneousSibling(editor, data.node);
                });
            this.mergeWithNextHomogeneousSiblingTr =
                new transformation_1.Transformation(this, "merge-with-next", "Merge <name> with next", function (editor, data) {
                    transformation_1.mergeWithNextHomogeneousSibling(editor, data.node);
                });
            this.removeMarkupTr =
                new transformation_1.Transformation(this, "delete", "Remove mixed-content markup", "Remove mixed-content markup", "<i class='fa fa-eraser'></i>", true, transformation_1.removeMarkup);
            toolbar.addButton([this.saveAction.makeButton(),
                this.undoAction.makeButton(),
                this.redoAction.makeButton(),
                this.decreaseLabelVisibilityLevelAction.makeButton(),
                this.increaseLabelVisibilityLevelAction.makeButton(),
                this.removeMarkupTr.makeButton(),
                this.toggleAttributeHidingAction.makeButton()]);
            // Setup the cleanup code.
            jquery_1.default(this.window).on("unload.wed", { editor: this }, function (e) {
                e.data.editor.destroy();
            });
            jquery_1.default(this.window).on("popstate.wed", function () {
                if (document.location.hash === "") {
                    _this.guiRoot.scrollTop = 0;
                }
            });
        }
        Object.defineProperty(Editor.prototype, "undoEvents", {
            get: function () {
                return this._undo.events;
            },
            enumerable: true,
            configurable: true
        });
        Editor.prototype.fireTransformation = function (tr, data) {
            // This is necessary because our context menu saves/restores the selection
            // using rangy. If we move on without this call, then the transformation
            // could destroy the markers that rangy put in and rangy will complain.
            this.editingMenuManager.dismiss();
            var currentGroup = this._undo.getGroup();
            if (currentGroup instanceof wundo.TextUndoGroup) {
                this._undo.endGroup();
            }
            var newGroup = new wundo.UndoGroup("Undo " + tr.getDescriptionFor(data), this);
            this._undo.startGroup(newGroup);
            this.caretManager.mark.suspend();
            this.enterTaskSuspension();
            try {
                try {
                    // We've separated the core of the work into a another method so that it
                    // can be optimized.
                    this._fireTransformation(tr, data);
                }
                catch (ex) {
                    // We want to log it before we attempt to do anything else.
                    if (!(ex instanceof exceptions_1.AbortTransformationException)) {
                        log.handle(ex);
                    }
                    throw ex;
                }
                finally {
                    // It is possible for a transformation to create new subgroups without
                    // going through fireTransformation. So we terminate all groups until
                    // the last one we terminated is the one we created.
                    do {
                        currentGroup = this._undo.getGroup();
                        this._undo.endGroup();
                    } while (currentGroup !== newGroup);
                }
            }
            catch (ex) {
                this.undo();
                if (!(ex instanceof exceptions_1.AbortTransformationException)) {
                    throw ex;
                }
            }
            finally {
                this.caretManager.mark.resume();
                this.exitTaskSuspension();
                this.validationController.refreshErrors();
            }
        };
        Editor.prototype._fireTransformation = function (tr, data) {
            var node = data.node;
            if (node !== undefined) {
                // Convert the gui node to a data node
                if (this.guiRoot.contains(node)) {
                    var dataNode = this.toDataNode(node);
                    data.node = dataNode === null ? undefined : dataNode;
                }
                else {
                    if (!domutil.contains(this.dataRoot, node)) {
                        throw new Error("node is neither in the gui tree nor the data tree");
                    }
                }
            }
            var caret = data.moveCaretTo;
            if (caret !== undefined) {
                this.caretManager.setCaret(caret);
            }
            if (this.caretManager.caret === undefined) {
                throw new Error("transformation applied with undefined caret.");
            }
            var start = new transformation_1.TransformationEvent("StartTransformation", tr);
            this._transformations.next(start);
            start.throwIfAborted();
            tr.handler(this, data);
            var end = new transformation_1.TransformationEvent("EndTransformation", tr);
            this._transformations.next(end);
            end.throwIfAborted();
        };
        /**
         * Enter a state in which all tasks are suspended. It is possible to call this
         * method while the state is already in effect. Its sister method
         * ``exitTaskSuspension`` should be called the same number of times to resume
         * the tasks.
         */
        Editor.prototype.enterTaskSuspension = function () {
            if (this.taskSuspension === 0) {
                this.stopAllTasks();
            }
            this.taskSuspension++;
        };
        /**
         * Exit a state in which all tasks are suspended. For the state to be
         * effectively exited, this method needs to be called the same number of times
         * ``enterTaskSuspension`` was called.
         */
        Editor.prototype.exitTaskSuspension = function () {
            this.taskSuspension--;
            if (this.taskSuspension < 0) {
                throw new Error("exitTaskSuspension underflow");
            }
            if (this.taskSuspension === 0) {
                this.resumeAllTasks();
            }
        };
        /**
         * Unconditionally stop all tasks.
         */
        Editor.prototype.stopAllTasks = function () {
            for (var _i = 0, _a = this.taskRunners; _i < _a.length; _i++) {
                var runner = _a[_i];
                runner.stop();
            }
            this.validationController.stop();
        };
        /**
         * Unconditionally resume all tasks.
         */
        Editor.prototype.resumeAllTasks = function () {
            for (var _i = 0, _a = this.taskRunners; _i < _a.length; _i++) {
                var runner = _a[_i];
                runner.resume();
            }
            // The validator is a special case. And yes, ``start`` is the correct method
            // to call on it.
            this.validationController.resume();
        };
        /**
         * If we are not in the task suspended state that is entered upon calling
         * ``enterTaskSuspension``, resume the task right away. Otherwise, this is a
         * no-op.
         */
        Editor.prototype.resumeTaskWhenPossible = function (task) {
            if (this.taskSuspension === 0) {
                task.resume();
            }
        };
        /**
         * Record an undo object in the list of undoable operations.
         *
         * Note that this method also provides the implementation for the restricted
         * method of the same name that allows only [["wed/undo".UndoMarker]] objects.
         *
         * @param undo The object to record.
         */
        Editor.prototype.recordUndo = function (undo) {
            this._undo.record(undo);
        };
        Editor.prototype.undoAll = function () {
            while (this._undo.canUndo()) {
                this.undo();
            }
        };
        Editor.prototype.undo = function () {
            // We need to replicate to some extent how fireTransformation inhibits
            // functions and reinstates them.
            this.caretManager.mark.suspend();
            this.enterTaskSuspension();
            this.undoRecorder.suppressRecording(true);
            this._undo.undo();
            this.undoRecorder.suppressRecording(false);
            this.caretManager.mark.resume();
            this.exitTaskSuspension();
        };
        Editor.prototype.redo = function () {
            // We need to replicate to some extent how fireTransformation inhibits
            // functions and reinstates them.
            this.caretManager.mark.suspend();
            this.enterTaskSuspension();
            this.undoRecorder.suppressRecording(true);
            this._undo.redo();
            this.undoRecorder.suppressRecording(false);
            this.caretManager.mark.resume();
            this.exitTaskSuspension();
        };
        Editor.prototype.dumpUndo = function () {
            // tslint:disable-next-line:no-console
            console.log(this._undo.toString());
        };
        Editor.prototype.undoingOrRedoing = function () {
            return this._undo.undoingOrRedoing();
        };
        Editor.prototype.isAttrProtected = function (attr, parent) {
            var name;
            if (typeof attr === "string") {
                name = attr;
                if (parent === undefined) {
                    throw new Error("must specify a parent");
                }
            }
            else if (domtypeguards_1.isAttr(attr)) {
                name = attr.name;
            }
            else if (domtypeguards_1.isElement(attr)) {
                name = domutil.siblingByClass(attr, "_attribute_name").textContent;
            }
            else {
                throw new Error("unexpected value for attr");
            }
            return (name === "xmlns" || name.lastIndexOf("xmlns:", 0) === 0);
        };
        Editor.prototype.save = function () {
            return this.saver.save();
        };
        Editor.prototype.initiateTextUndo = function () {
            // Handle undo information
            var currentGroup = this._undo.getGroup();
            if (currentGroup === undefined ||
                !(currentGroup instanceof wundo.TextUndoGroup)) {
                currentGroup = new wundo.TextUndoGroup("text", this, this._undo, this.textUndoMaxLength);
                this._undo.startGroup(currentGroup);
            }
            return currentGroup;
        };
        Editor.prototype.terminateTextUndo = function () {
            var currentGroup = this._undo.getGroup();
            if (currentGroup instanceof wundo.TextUndoGroup) {
                this._undo.endGroup();
            }
        };
        Editor.prototype.normalizeEnteredText = function (text) {
            if (!this.normalizeEnteredSpaces) {
                return text;
            }
            return text.replace(this.strippedSpaces, "")
                .replace(this.replacedSpaces, " ");
        };
        Editor.prototype.compensateForAdjacentSpaces = function (text, caret) {
            if (!this.normalizeEnteredSpaces) {
                return text;
            }
            var arCaret = caret.toArray();
            // If there is previous text and the previous text
            // is a space, then we need to prevent a double
            // space.
            if (text[0] === " " &&
                domutil.getCharacterImmediatelyBefore(arCaret) === " ") {
                text = text.slice(1);
            }
            // Same with the text that comes after.
            if (text.length > 0 && text[text.length - 1] === " " &&
                domutil.getCharacterImmediatelyAt(arCaret) === " ") {
                text = text.slice(-1);
            }
            return text;
        };
        Editor.prototype.insertText = function (text) {
            // We remove zero-width spaces.
            this.closeAllTooltips();
            text = this.normalizeEnteredText(text);
            if (text === "") {
                return;
            }
            var caretManager = this.caretManager;
            var caret = caretManager.caret;
            if (caret === undefined) {
                return;
            }
            var el = domutil_1.closestByClass(caret.node, "_real", this.guiRoot);
            // We do not operate on elements that are readonly.
            if (el === null || el.classList.contains("_readonly")) {
                return;
            }
            this.enterTaskSuspension();
            try {
                var attrVal = domutil_1.closestByClass(caret.node, "_attribute_value", this.guiRoot);
                if (attrVal === null) {
                    caret = caretManager.getDataCaret();
                    text = this.compensateForAdjacentSpaces(text, caret);
                    if (text === "") {
                        return;
                    }
                    var textUndo = this.initiateTextUndo();
                    var newCaret = this.dataUpdater.insertText(caret, text).caret;
                    caretManager.setCaret(newCaret, { textEdit: true });
                    textUndo.recordCaretAfter();
                }
                else {
                    // Modifying an attribute...
                    this.spliceAttribute(attrVal, caret.offset, 0, text);
                }
            }
            finally {
                this.exitTaskSuspension();
                this.validationController.refreshErrors();
            }
        };
        Editor.prototype.spliceAttribute = function (attrVal, offset, count, add) {
            if (offset < 0) {
                return;
            }
            // We ignore changes to protected attributes.
            if (this.isAttrProtected(attrVal)) {
                return;
            }
            var val = this.toDataNode(attrVal).value;
            if (offset > val.length) {
                return;
            }
            if (offset === val.length && count > 0) {
                return;
            }
            if (this.normalizeEnteredSpaces) {
                if (add[0] === " " && val[offset - 1] === " ") {
                    add = add.slice(1);
                }
                if (add[add.length - 1] === " " && val[offset + count] === " ") {
                    add = add.slice(-1);
                }
            }
            var textUndo = this.initiateTextUndo();
            val = val.slice(0, offset) + add + val.slice(offset + count);
            offset += add.length;
            var dataReal = jquery_1.default.data(domutil_1.closestByClass(attrVal, "_real"), "wed_mirror_node");
            var guiPath = this.nodeToPath(attrVal);
            var name = domutil.siblingByClass(attrVal, "_attribute_name").textContent;
            var mode = this.modeTree.getMode(attrVal);
            var resolved = mode.getAbsoluteResolver().resolveName(name, true);
            if (resolved === undefined) {
                throw new Error("cannot resolve " + name);
            }
            this.dataUpdater.setAttributeNS(dataReal, resolved.ns, resolved.name, val);
            // Redecoration of the attribute's element may have destroyed our old
            // attrVal node. Refetch. And after redecoration, the attribute value
            // element may not have a child. Not only that, but the attribute may no
            // longer be shown at all.
            var moveTo;
            try {
                moveTo = this.pathToNode(guiPath);
                if (moveTo.firstChild !== null) {
                    moveTo = moveTo.firstChild;
                }
            }
            catch (ex) {
                if (!(ex instanceof guiroot_1.AttributeNotFound)) {
                    throw ex;
                }
            }
            // We don't have an attribute to go back to. Go back to the element that
            // held the attribute.
            if (moveTo == null) {
                moveTo = dataReal;
                offset = 0;
            }
            this.caretManager.setCaret(moveTo, offset, { textEdit: true });
            textUndo.recordCaretAfter();
        };
        Editor.prototype.insertTransientPlaceholderAt = function (loc) {
            var ph = 
            // tslint:disable-next-line:no-jquery-raw-elements
            jquery_1.default("<span class='_placeholder _transient' contenteditable='false'> \
</span>", loc.node.ownerDocument)[0];
            this.guiUpdater.insertNodeAt(loc, ph);
            return ph;
        };
        Editor.prototype.toDataNode = function (node) {
            if (domtypeguards_1.isElement(node)) {
                var ret = jquery_1.default.data(node, "wed_mirror_node");
                // We can bypass the whole pathToNode, nodeToPath thing.
                if (ret != null) {
                    return ret;
                }
            }
            return this.dataUpdater.pathToNode(this.nodeToPath(node));
        };
        Editor.prototype.fromDataNode = function (node) {
            if (domtypeguards_1.isElement(node)) {
                var ret = jquery_1.default.data(node, "wed_mirror_node");
                // We can bypass the whole pathToNode, nodeToPath thing.
                if (ret != null) {
                    return ret;
                }
            }
            return this.pathToNode(this.dataUpdater.nodeToPath(node));
        };
        Editor.prototype.onSaverSaved = function () {
            notify_1.notify("Saved", { type: "success" });
            this.refreshSaveStatus();
        };
        Editor.prototype.onSaverAutosaved = function () {
            notify_1.notify("Autosaved", { type: "success" });
            this.refreshSaveStatus();
        };
        Editor.prototype.onSaverChanged = function () {
            this.refreshSaveStatus();
        };
        Editor.prototype.onSaverFailed = function (event) {
            var _this = this;
            this.refreshSaveStatus();
            var error = event.error;
            if (error.type === "too_old") {
                // Reload when the modal is dismissed.
                this.modals.getModal("tooOld").modal(this.window.location.reload.bind(this.window.location));
            }
            else if (error.type === "save_disconnected") {
                this.modals.getModal("disconnect").modal(function () {
                    // tslint:disable-next-line:no-floating-promises
                    _this.save();
                });
            }
            else if (error.type === "save_edited") {
                this.modals.getModal("editedByOther").modal(function () {
                    _this.window.location.reload();
                });
            }
            else {
                notify_1.notify("Failed to save!\n" + error.msg, { type: "danger" });
            }
        };
        Editor.prototype.nodeToPath = function (node) {
            return this.guiDLocRoot.nodeToPath(node);
        };
        Editor.prototype.pathToNode = function (path) {
            return this.guiDLocRoot.pathToNode(path);
        };
        // tslint:disable-next-line:no-any
        Editor.prototype.getModeData = function (key) {
            return this.modeData[key];
        };
        // tslint:disable-next-line:no-any
        Editor.prototype.setModeData = function (key, value) {
            this.modeData[key] = value;
        };
        Editor.prototype.destroy = function () {
            if (this.destroyed) {
                return;
            }
            var myIndex = onerror.editors.indexOf(this);
            if (myIndex >= 0) {
                onerror.editors.splice(myIndex, 1);
            }
            //
            // This is imperfect, but the goal here is to do as much work as possible,
            // even if things have not been initialized fully.
            //
            // The last recorded exception will be rethrown at the end.
            //
            // Turn off autosaving.
            if (this.saver !== undefined) {
                this.saver.setAutosaveInterval(0);
            }
            if (this.saveStatusInterval !== undefined) {
                clearInterval(this.saveStatusInterval);
            }
            try {
                if (this.validationController !== undefined) {
                    this.validationController.terminate();
                }
            }
            catch (ex) {
                log.unhandled(ex);
            }
            if (this.taskRunners !== undefined) {
                for (var _i = 0, _a = this.taskRunners; _i < _a.length; _i++) {
                    var runner = _a[_i];
                    try {
                        runner.stop();
                    }
                    catch (ex) {
                        log.unhandled(ex);
                    }
                }
            }
            try {
                if (this.domlistener !== undefined) {
                    this.domlistener.stopListening();
                    this.domlistener.clearPending();
                }
            }
            catch (ex) {
                log.unhandled(ex);
            }
            if (this.editingMenuManager !== undefined) {
                this.editingMenuManager.dismiss();
            }
            // These ought to prevent jQuery leaks.
            try {
                this.$widget.empty();
                this.$frame.find("*").off(".wed");
                // This will also remove handlers on the window.
                jquery_1.default(this.window).off(".wed");
            }
            catch (ex) {
                log.unhandled(ex);
            }
            // Trash our variables: this will likely cause immediate failure if the
            // object is used again.
            for (var _b = 0, _c = Object.keys(this); _b < _c.length; _b++) {
                var key = _c[_b];
                // tslint:disable-next-line:no-any
                delete this[key];
            }
            if (this.appender !== undefined) {
                log.removeAppender(this.appender);
            }
            // ... but keep these two. Calling destroy over and over is okay.
            this.destroyed = true;
            // tslint:disable-next-line:no-empty
            this.destroy = function fakeDestroy() { };
        };
        Editor.prototype.init = function (xmlData) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                var parser, hasTooltips;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            parser = new this.window.DOMParser();
                            if (xmlData !== undefined && xmlData !== "") {
                                this.dataRoot = parser.parseFromString(xmlData, "text/xml");
                                this._dataChild = this.dataRoot.firstChild;
                            }
                            else {
                                this.dataRoot = parser.parseFromString("<div></div>", "text/xml");
                                this._dataChild = undefined;
                            }
                            this.dataRoot.removeChild(this.dataRoot.firstChild);
                            // $dataRoot is the document we are editing, $guiRoot will become decorated
                            // with all kinds of HTML elements so we keep the two separate.
                            this.$dataRoot = jquery_1.default(this.dataRoot);
                            this.guiDLocRoot = new guiroot_1.GUIRoot(this.guiRoot);
                            this.dataDLocRoot = new dloc_1.DLocRoot(this.dataRoot);
                            this.dataUpdater = new tree_updater_1.TreeUpdater(this.dataRoot);
                            this.guiUpdater = new gui_updater_1.GUIUpdater(this.guiRoot, this.dataUpdater);
                            this.undoRecorder = new undo_recorder_1.UndoRecorder(this, this.dataUpdater);
                            this.guiUpdater.events.subscribe(function (ev) {
                                switch (ev.name) {
                                    case "BeforeInsertNodeAt":
                                        if (domtypeguards_1.isElement(ev.node)) {
                                            _this.initialContentEditableHandler(ev);
                                        }
                                        break;
                                    case "InsertNodeAt":
                                        if (domtypeguards_1.isElement(ev.node)) {
                                            _this.finalContentEditableHandler(ev);
                                        }
                                        break;
                                    default:
                                }
                            });
                            hasTooltips = document.getElementsByClassName("wed-has-tooltip");
                            this.guiUpdater.events.subscribe(function (ev) {
                                if (ev.name !== "BeforeDeleteNode") {
                                    return;
                                }
                                var node = ev.node;
                                if (node.nodeType !== Node.TEXT_NODE) {
                                    for (var _i = 0, _a = Array.from(hasTooltips); _i < _a.length; _i++) {
                                        var hasTooltip = _a[_i];
                                        if (!node.contains(hasTooltip)) {
                                            continue;
                                        }
                                        var tt = jquery_1.default.data(hasTooltip, "bs.tooltip");
                                        if (tt != null) {
                                            tt.destroy();
                                        }
                                    }
                                }
                            });
                            this.domlistener = new domlistener.DOMListener(this.guiRoot, this.guiUpdater);
                            this.modeTree = new mode_tree_1.ModeTree(this, this.options.mode);
                            return [4 /*yield*/, this.modeTree.init()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, this.onModeChange(this.modeTree.getMode(this.guiRoot))];
                    }
                });
            });
        };
        Editor.prototype.onModeChange = function (mode) {
            return __awaiter(this, void 0, void 0, function () {
                var styles, $head, _i, styles_1, style, schema, schemaOption, schemaText;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // We purposely do not raise an error here so that calls to destroy can be
                            // done as early as possible. It aborts the initialization sequence without
                            // causing an error.
                            if (this.destroyed) {
                                return [2 /*return*/, this];
                            }
                            this.maxLabelLevel = this.modeTree.getMaxLabelLevel();
                            this.initialLabelLevel = this.modeTree.getInitialLabelLevel();
                            this.currentLabelLevel = this.initialLabelLevel;
                            styles = this.modeTree.getStylesheets();
                            $head = this.$frame.children("head");
                            for (_i = 0, styles_1 = styles; _i < styles_1.length; _i++) {
                                style = styles_1[_i];
                                $head.append("<link rel=\"stylesheet\" href=\"" + style + "\" type=\"text/css\" />");
                            }
                            this.guiRoot.setAttribute("tabindex", "-1");
                            this.$guiRoot.focus();
                            this.caretManager = new caret_manager_1.CaretManager(this.guiDLocRoot, this.dataDLocRoot, this.inputField, this.guiUpdater, this.caretLayer, this.scroller, this.modeTree);
                            this.editingMenuManager = new editing_menu_manager_1.EditingMenuManager(this);
                            this.caretManager.events.subscribe(this.caretChange.bind(this));
                            this.resizeHandler();
                            schemaOption = this.options.schema;
                            if (!(schemaOption instanceof salve.Grammar)) return [3 /*break*/, 1];
                            schema = schemaOption;
                            return [3 /*break*/, 4];
                        case 1:
                            if (!(typeof schemaOption === "string")) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.runtime.resolveToString(schemaOption)];
                        case 2:
                            schemaText = _a.sent();
                            schema = salve.constructTree(schemaText);
                            return [3 /*break*/, 4];
                        case 3: throw new Error("unexpected value for schema");
                        case 4:
                            this.validator = new validator_1.Validator(schema, this.dataRoot, this.modeTree.getValidators());
                            this.validator.events.addEventListener("state-update", this.onValidatorStateChange.bind(this));
                            this.validator.events.addEventListener("possible-due-to-wildcard-change", this.onPossibleDueToWildcardChange.bind(this));
                            this.validationController =
                                new validation_controller_1.ValidationController(this, this.validator, mode.getAbsoluteResolver(), this.scroller, this.guiRoot, this.validationProgress, this.validationMessage, this.errorLayer, this.$errorList[0], this.errorItemHandlerBound);
                            return [2 /*return*/, this.postInitialize()];
                    }
                });
            });
        };
        // tslint:disable-next-line:max-func-body-length
        Editor.prototype.postInitialize = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                var attributePlaceholderHandler, $guiRoot, $body, namespaceError, limitationModal, demo, demoModal, save, savePromise;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.destroyed) {
                                return [2 /*return*/, this];
                            }
                            // Make the validator revalidate the structure from the point where a change
                            // occurred.
                            this.domlistener.addHandler("children-changed", "._real, ._phantom_wrap, .wed-document", function (_root, added, removed, _prev, _next, target) {
                                for (var _i = 0, _a = added.concat(removed); _i < _a.length; _i++) {
                                    var child = _a[_i];
                                    if (domtypeguards_1.isText(child) ||
                                        (domtypeguards_1.isElement(child) &&
                                            (child.classList.contains("_real") ||
                                                child.classList.contains("_phantom_wrap")))) {
                                        _this.validator.resetTo(target);
                                        break;
                                    }
                                }
                            });
                            // Revalidate on attribute change.
                            this.domlistener.addHandler("attribute-changed", "._real", function (_root, el, namespace, name) {
                                if (namespace === "" && name.indexOf("data-wed", 0) === 0) {
                                    // Doing the restart immediately messes up the editing. So schedule it
                                    // for ASAP.
                                    setTimeout(function () {
                                        if (_this.destroyed) {
                                            return;
                                        }
                                        _this.validator.resetTo(el);
                                    }, 0);
                                }
                            });
                            this.modeTree.addDecoratorHandlers();
                            this.domlistener.addHandler("included-element", "._label", function (_root, _tree, _parent, _prev, _next, target) {
                                var cl = target.classList;
                                var found;
                                for (var i = 0; i < cl.length && found === undefined; ++i) {
                                    if (cl[i].lastIndexOf("_label_level_", 0) === 0) {
                                        found = Number(cl[i].slice(13));
                                    }
                                }
                                if (found === undefined) {
                                    throw new Error("unable to get level");
                                }
                                if (found > _this.currentLabelLevel) {
                                    cl.add("_invisible");
                                }
                            });
                            // If an element is edited and contains a placeholder, delete the
                            // placeholder
                            this.domlistener.addHandler("children-changed", "._real, ._phantom_wrap, .wed-document", 
                            // tslint:disable-next-line:cyclomatic-complexity
                            function (_root, _added, removed, _prev, _next, target) {
                                if (_this.updatingPlaceholder !== 0) {
                                    return;
                                }
                                _this.updatingPlaceholder++;
                                // We perform this check on the GUI tree because there's no way to know
                                // about ._phantom._text elements in the data tree.
                                var toConsider = [];
                                var ph;
                                var child = target.firstChild;
                                while (child !== null) {
                                    if (domtypeguards_1.isText(child) ||
                                        (domtypeguards_1.isElement(child) &&
                                            (child.classList.contains("_real") ||
                                                child.classList.contains("_phantom_wrap") ||
                                                // For ._phantom._text but ._text is used only with ._real and
                                                // ._phantom so we don't check for ._phantom.
                                                child.classList.contains("_text")))) {
                                        toConsider.push(child);
                                    }
                                    if (domtypeguards_1.isElement(child) && child.classList.contains("_placeholder")) {
                                        ph = child;
                                    }
                                    child = child.nextSibling;
                                }
                                var caretManager = _this.caretManager;
                                if (toConsider.length === 0 ||
                                    (toConsider.length === 1 &&
                                        removed.indexOf(toConsider[0]) !== -1)) {
                                    if (ph === undefined) {
                                        var mode = _this.modeTree.getMode(target);
                                        var nodes = mode.nodesAroundEditableContents(target);
                                        if (target === _this.guiRoot) {
                                            var loc = caretManager.makeCaret(_this.guiRoot, 0);
                                            ph = _this.insertTransientPlaceholderAt(loc);
                                            caretManager.setCaret(loc, { textEdit: true });
                                        }
                                        else {
                                            ph = mode.makePlaceholderFor(target);
                                            _this.guiUpdater.insertBefore(target, ph, nodes[1]);
                                        }
                                    }
                                }
                                else if (ph !== undefined && !ph.classList.contains("_transient")) {
                                    var caret = caretManager.caret !== undefined ?
                                        caretManager.caret.node : undefined;
                                    // Move the caret out of the placeholder if needed...
                                    var move = caret !== undefined && ph.contains(caret);
                                    var parent_1;
                                    var offset = void 0;
                                    if (move) {
                                        parent_1 = ph.parentNode;
                                        offset = domutil_1.indexOf(parent_1.childNodes, ph);
                                    }
                                    _this.guiUpdater.removeNode(ph);
                                    if (move) {
                                        caretManager.setCaret(parent_1, offset, { textEdit: true });
                                    }
                                }
                                _this.updatingPlaceholder--;
                            });
                            attributePlaceholderHandler = function (target) {
                                if (_this.updatingPlaceholder !== 0) {
                                    return;
                                }
                                _this.updatingPlaceholder++;
                                var dataNode = _this.toDataNode(target);
                                var ph = domutil.childByClass(target, "_placeholder");
                                if (dataNode.value !== "") {
                                    if (ph !== null) {
                                        target.removeChild(ph);
                                    }
                                }
                                else if (ph === null) {
                                    _this.guiUpdater.insertBefore(target, domutil.makePlaceholder(), null);
                                }
                                _this.updatingPlaceholder--;
                            };
                            this.domlistener.addHandler("children-changed", "._attribute_value", function (_root, _added, _removed, _prev, _next, target) {
                                attributePlaceholderHandler(target);
                            });
                            this.domlistener.addHandler("included-element", "._attribute_value", function (_root, _tree, _parent, _prev, _next, target) {
                                attributePlaceholderHandler(target);
                            });
                            this.modeTree.startListening();
                            if (this._dataChild !== undefined) {
                                this.dataUpdater.insertAt(this.dataRoot, 0, this._dataChild);
                            }
                            $guiRoot = this.$guiRoot;
                            // tslint:disable-next-line:no-any
                            $guiRoot.on("dragenter", "*", false);
                            // tslint:disable-next-line:no-any
                            $guiRoot.on("dragstart", "*", false);
                            // tslint:disable-next-line:no-any
                            $guiRoot.on("dragover", "*", false);
                            // tslint:disable-next-line:no-any
                            $guiRoot.on("drop", "*", false);
                            $guiRoot.on("wed-global-keydown", this.globalKeydownHandler.bind(this));
                            $guiRoot.on("wed-global-keypress", this.globalKeypressHandler.bind(this));
                            $guiRoot.on("keydown", this.keydownHandler.bind(this));
                            $guiRoot.on("keypress", this.keypressHandler.bind(this));
                            this.$inputField.on("keydown", this.keydownHandler.bind(this));
                            this.$inputField.on("keypress", this.keypressHandler.bind(this));
                            this.$inputField.on("compositionstart compositionupdate compositionend", this.compositionHandler.bind(this));
                            this.$inputField.on("input", this.inputHandler.bind(this));
                            // No click in the next binding because click does not distinguish left,
                            // middle, right mouse buttons.
                            $guiRoot.on("mousedown", this.mousedownHandler.bind(this));
                            $guiRoot.on("mouseover", this.mouseoverHandler.bind(this));
                            $guiRoot.on("mouseout", this.mouseoutHandler.bind(this));
                            $guiRoot.on("contextmenu", this.mouseupHandler.bind(this));
                            $guiRoot.on("paste", log.wrap(this.pasteHandler.bind(this)));
                            this.$inputField.on("paste", log.wrap(this.pasteHandler.bind(this)));
                            $guiRoot.on("cut", log.wrap(this.cutHandler.bind(this)));
                            jquery_1.default(this.window).on("resize.wed", this.resizeHandler.bind(this));
                            $guiRoot.on("click", "a", function (ev) {
                                if (ev.ctrlKey) {
                                    window.location.href = ev.currentTarget.href;
                                }
                                return false;
                            });
                            $body = jquery_1.default(this.doc.body);
                            $body.on("mouseup.wed", function () {
                                _this.$guiRoot.off("mousemove.wed mouseup");
                            });
                            $body.on("contextmenu.wed", function (ev) {
                                // It may happen that contextmenu can escape to the body even if the
                                // target is an element in guiRoot. This notably happens on IE for some
                                // reason. So trap such cases here and dispose of them.
                                return !_this.guiRoot.contains(ev.target);
                            });
                            $body.on("click.wed", function (ev) {
                                // If the click is triggered programmatically ``pageX`` and ``pageY``
                                // won't be defined. If the click is triggered due to an ENTER key
                                // converted by the browser, one or both will be negative. Or screenX,
                                // screenY will both be zero.
                                if (ev.pageX === undefined || ev.pageX < 0 ||
                                    ev.pageY === undefined || ev.pageY < 0 ||
                                    ((ev.screenX === ev.screenY) && (ev.screenX === 0))) {
                                    return;
                                }
                                // We don't want to blur for clicks that are on elements part of our GUI.
                                if (_this.widget.contains(ev.target)) {
                                    return;
                                }
                                var el = _this.doc.elementFromPoint(ev.clientX, ev.clientY);
                                if (jquery_1.default(el).closest(_this.$excludedFromBlur).length !== 0) {
                                    return;
                                }
                                var offset = _this.$guiRoot.offset();
                                var x = ev.pageX - offset.left;
                                var y = ev.pageY - offset.top;
                                if (!((x >= 0) && (y >= 0) &&
                                    (x < _this.$guiRoot.outerWidth()) &&
                                    (y < _this.$guiRoot.outerHeight()))) {
                                    _this.caretManager.onBlur();
                                }
                                // We don't need to do anything special to focus the editor.
                            });
                            // Make ourselves visible.
                            this.$widget.removeClass("loading");
                            this.$widget.css("display", "block");
                            namespaceError = this.initializeNamespaces();
                            if (namespaceError !== undefined) {
                                limitationModal = this.modals.getModal("limitation");
                                limitationModal.setBody(namespaceError);
                                limitationModal.modal();
                                this.destroy();
                                return [2 /*return*/, this];
                            }
                            this.domlistener.processImmediately();
                            // Flush whatever has happened earlier.
                            this._undo.reset();
                            $guiRoot.focus();
                            this.validator.start();
                            demo = this.options.demo;
                            if (demo !== undefined) {
                                // Provide a generic message.
                                if (typeof demo !== "string") {
                                    demo = "Some functions may not be available.";
                                }
                                demoModal = this.makeModal();
                                demoModal.setTitle("Demo");
                                demoModal.setBody("<p>This is a demo of wed. " + demo + "</p> <p>Click <a href='" + this.docURL + "' target='_blank'>this link</a> to see wed's generic help. The link by default will open in a new tab.</p>");
                                demoModal.addButton("Ok", true);
                                demoModal.modal();
                            }
                            save = this.options.save;
                            if (save !== undefined) {
                                // The editor is not initialized until the saver is also initialized,
                                // which may take a bit.
                                savePromise = this.runtime.resolveModules(save.path)
                                    .then(function (modules) {
                                    // tslint:disable-next-line:no-any variable-name
                                    var SaverClass = modules[0].Saver;
                                    var saveOptions = save.options !== undefined ? save.options : {};
                                    var saver = new SaverClass(_this.runtime, exports.version, _this.dataUpdater, _this.dataRoot, saveOptions);
                                    _this.saver = saver;
                                    saver.events
                                        .pipe(operators_1.filter(filterSaveEvents.bind(undefined, "Saved")))
                                        .subscribe(_this.onSaverSaved.bind(_this));
                                    saver.events
                                        .pipe(operators_1.filter(filterSaveEvents.bind(undefined, "Autosaved")))
                                        .subscribe(_this.onSaverAutosaved.bind(_this));
                                    saver.events
                                        .pipe(operators_1.filter(filterSaveEvents.bind(undefined, "Failed")))
                                        .subscribe(_this.onSaverFailed.bind(_this));
                                    saver.events
                                        .pipe(operators_1.filter(filterSaveEvents.bind(undefined, "Changed")))
                                        .subscribe(_this.onSaverChanged.bind(_this));
                                    _this.refreshSaveStatus();
                                    _this.saveStatusInterval =
                                        setInterval(_this.refreshSaveStatus.bind(_this), 30 * 1000);
                                    onbeforeunload.install(_this.window, function () { return !_this.destroyed && _this.saver.getModifiedWhen() !== false; }, true);
                                    return saver.init();
                                });
                            }
                            else {
                                savePromise = Promise.resolve()
                                    .then(function () {
                                    log.error("wed cannot save data due to the absence of a save option");
                                });
                            }
                            return [4 /*yield*/, savePromise];
                        case 1:
                            _a.sent();
                            this.initializedResolve(this);
                            return [2 /*return*/, this];
                    }
                });
            });
        };
        /**
         * Handler for setting ``contenteditable`` on nodes included into the
         * tree. This handler preforms an initial generic setup that does not need
         * mode-specific information. It sets ``contenteditable`` to true on any real
         * element or any attribute value.
         */
        Editor.prototype.initialContentEditableHandler = function (ev) {
            var mod = function (el) {
                // All elements that may get a selection must be focusable to
                // work around issue:
                // https://bugzilla.mozilla.org/show_bug.cgi?id=921444
                el.setAttribute("tabindex", "-1");
                el.setAttribute("contenteditable", String(el.classList.contains("_real") ||
                    el.classList.contains("_attribute_value")));
                var child = el.firstElementChild;
                while (child !== null) {
                    mod(child);
                    child = child.nextElementSibling;
                }
            };
            // We never call this function with something else than an Element for
            // ev.node.
            mod(ev.node);
        };
        /**
         * Handler for setting ``contenteditable`` on nodes included into the
         * tree. This handler adjusts whether attribute values are editable by using
         * mode-specific data.
         */
        Editor.prototype.finalContentEditableHandler = function (ev) {
            // We never call this function with something else than an Element for
            // ev.node.
            var el = ev.node;
            var attrs = el.getElementsByClassName("_attribute_value");
            for (var _i = 0, _a = Array.from(attrs); _i < _a.length; _i++) {
                var attr = _a[_i];
                if (this.modeTree.getAttributeHandling(attr) !== "edit") {
                    attr.setAttribute("contenteditable", "false");
                }
            }
        };
        Editor.prototype.initializeNamespaces = function () {
            var mode = this.modeTree.getMode(this.guiRoot);
            var resolver = mode.getAbsoluteResolver();
            var failure;
            if (this.dataRoot.firstChild === null) {
                // The document is empty: create a child node with the absolute namespace
                // mappings.
                var attrs_1 = Object.create(null);
                this.validator.getSchemaNamespaces().forEach(function (ns) {
                    if (ns === "*" || ns === "::except") {
                        return;
                    }
                    var k = resolver.prefixFromURI(ns);
                    // Don't create a mapping for the `xml`, seeing as it is defined by
                    // default.
                    if (k === "xml") {
                        return;
                    }
                    if (k === "") {
                        attrs_1.xmlns = ns;
                    }
                    else {
                        if (k === undefined) {
                            failure = "The mode does not allow determining the namespace prefix for " + ns + ". The most likely issue is that the mode is buggy or wed was started with incorrect options.";
                        }
                        attrs_1["xmlns:" + k] = ns;
                    }
                });
                if (failure !== undefined) {
                    return failure;
                }
                var evs = Array.from(this.validator.possibleAt(this.dataRoot, 0));
                if (evs.length === 1 && evs[0].params[0] === "enterStartTag") {
                    var name_1 = evs[0].params[1];
                    // If the name pattern is not simple or it allows for a number of
                    // choices, then we skip this creation.
                    var asArray = name_1.toArray();
                    if (asArray !== null && asArray.length === 1) {
                        var simple = asArray[0];
                        transformation_1.insertElement(this.dataUpdater, this.dataRoot, 0, simple.ns, resolver.unresolveName(simple.ns, simple.name), attrs_1);
                        this.caretManager.setCaret(this.dataRoot.firstElementChild, 0);
                    }
                }
                // Ok, we did not insert anything, let's put a placeholder there.
                if (this.dataRoot.firstChild === null) {
                    var ph = this.insertTransientPlaceholderAt(this.caretManager.makeCaret(this.guiRoot, 0));
                    this.caretManager.setCaret(ph, 0);
                }
            }
            else {
                var namespaces_1 = this.validator.getDocumentNamespaces();
                // Yeah, we won't stop as early as possible if there's a failure.  So
                // what?
                Object.keys(namespaces_1).forEach(function (prefix) {
                    var uri = namespaces_1[prefix];
                    if (uri.length > 1) {
                        failure = "The document you are trying to edit uses namespaces \
in a way not supported by this version of wed.";
                    }
                    resolver.definePrefix(prefix, uri[0]);
                });
            }
            return failure;
        };
        Editor.prototype.addToolbarAction = function (actionClass, options) {
            this.toolbar.addButton(new actionClass(this).makeButton(), options);
        };
        /**
         * Creates a new task runner and registers it with the editor so that it is
         * started and stopped by the methods that stop/start all tasks.
         *
         * @param task The task that the runner must run.
         *
         * @returns The new runner.
         */
        Editor.prototype.newTaskRunner = function (task) {
            var runner = new task_runner_1.TaskRunner(task);
            this.taskRunners.push(runner);
            return runner;
        };
        /**
         * Triggers the resizing algorithm.
         */
        Editor.prototype.resize = function () {
            this.resizeHandler();
        };
        Editor.prototype.resizeHandler = function () {
            var heightAfter = 0;
            function addHeight(x) {
                heightAfter += x.getBoundingClientRect().height;
            }
            var constrainerSibling = this.constrainer.nextElementSibling;
            while (constrainerSibling !== null) {
                addHeight(constrainerSibling);
                constrainerSibling = constrainerSibling.nextElementSibling;
            }
            var examine = this.widget;
            // We want to use isElement here because eventually we'll run into the
            // document element that holds everything. We still declare examine as an
            // Element or null because we never use it as a document.
            while (domtypeguards_1.isElement(examine)) {
                var sibling = examine.nextElementSibling;
                while (sibling !== null) {
                    if (sibling.tagName !== "script") {
                        addHeight(sibling);
                    }
                    sibling = sibling.nextElementSibling;
                }
                examine = examine.parentNode;
            }
            // The height is the inner height of the window:
            // a. minus what appears before it.
            // b. minus what appears after it.
            var height = this.window.innerHeight -
                // This is the space before
                (this.scroller.getBoundingClientRect().top + this.window.pageYOffset) -
                // This is the space after
                heightAfter;
            height = Math.floor(height);
            this.scroller.coerceHeight(height);
            var sidebar = this.sidebar;
            var pheight = this.window.innerHeight -
                (sidebar.getBoundingClientRect().top + this.window.pageYOffset) -
                heightAfter;
            sidebar.style.maxHeight = pheight + "px";
            sidebar.style.minHeight = pheight + "px";
            var sp = sidebar.getElementsByClassName("wed-sidebar-panel")[0];
            pheight = this.window.innerHeight -
                (sp.getBoundingClientRect().top + this.window.pageYOffset) -
                heightAfter;
            sp.style.maxHeight = pheight + "px";
            sp.style.minHeight = pheight + "px";
            var panels = sp.getElementsByClassName("panel");
            var headings = sp.getElementsByClassName("panel-heading");
            var hheight = 0;
            for (var i = 0; i < headings.length; ++i) {
                var heading = headings[i];
                var $parent = jquery_1.default(heading.parentNode);
                hheight += $parent.outerHeight(true) - $parent.innerHeight();
                hheight += jquery_1.default(heading).outerHeight(true);
            }
            var maxPanelHeight = pheight - hheight;
            var panel;
            for (var i = 0; i < panels.length; ++i) {
                panel = panels[i];
                panel.style.maxHeight = maxPanelHeight +
                    jquery_1.default(domutil.childByClass(panel, "panel-heading")).outerHeight(true) + "px";
                var body = panel.getElementsByClassName("panel-body")[0];
                body.style.height = maxPanelHeight + "px";
            }
            if (this.validationController !== undefined) {
                // We must refresh these because resizing the editor pane may cause text
                // to move up or down due to line wrap.
                this.validationController.refreshErrors();
            }
            this.caretManager.mark.refresh();
        };
        /**
         * Opens a documentation link.
         *
         * @param url The URL to open.
         */
        Editor.prototype.openDocumentationLink = function (url) {
            window.open(url);
        };
        /**
         * Returns the list of element transformations for the location pointed to by
         * the caret.
         *
         * @param treeCaret The location in the document. This must be a data
         * location, not a GUI location.
         *
         * @param types The types of transformations to get.
         *
         * @return An array of objects having the fields ``tr`` which contain the
         * actual transformation and ``name`` which is the unresolved element name for
         * this transformation. It is exceptionally possible to have an item of the
         * list contain ``undefined`` for ``name``.
         */
        Editor.prototype.getElementTransformationsAt = function (treeCaret, types) {
            var _this = this;
            var mode = this.modeTree.getMode(treeCaret.node);
            var resolver = mode.getAbsoluteResolver();
            var ret = [];
            this.validator.possibleAt(treeCaret).forEach(function (ev) {
                if (ev.params[0] !== "enterStartTag") {
                    return;
                }
                var pattern = ev.params[1];
                var asArray = pattern.toArray();
                if (asArray !== null) {
                    for (var _i = 0, asArray_1 = asArray; _i < asArray_1.length; _i++) {
                        var name_2 = asArray_1[_i];
                        var unresolved = resolver.unresolveName(name_2.ns, name_2.name);
                        var trs = mode.getContextualActions(types, unresolved, treeCaret.node, treeCaret.offset);
                        if (trs === undefined) {
                            return;
                        }
                        for (var _a = 0, trs_1 = trs; _a < trs_1.length; _a++) {
                            var tr = trs_1[_a];
                            ret.push({ tr: tr, name: unresolved });
                        }
                    }
                }
                else {
                    // We push an action rather than a transformation.
                    ret.push({ tr: _this.complexPatternAction, name: undefined });
                }
            });
            return ret;
        };
        Editor.prototype.cutHandler = function (e) {
            if (this.caretManager.getDataCaret() === undefined) {
                // XXX alert the user?
                return false;
            }
            var sel = this.caretManager.sel;
            if (sel.wellFormed) {
                var el = domutil_1.closestByClass(sel.anchor.node, "_real", this.guiRoot);
                // We do not operate on elements that are readonly.
                if (el === null || el.classList.contains("_readonly")) {
                    return false;
                }
                // The only thing we need to pass is the event that triggered the
                // cut.
                this.fireTransformation(this.cutTr, { e: e });
                return true;
            }
            this.modals.getModal("straddling").modal();
            return false;
        };
        Editor.prototype.pasteHandler = function (e) {
            var _this = this;
            var caret = this.caretManager.getDataCaret();
            if (caret === undefined) {
                // XXX alert the user?
                return false;
            }
            var el = domutil_1.closestByClass(this.caretManager.anchor.node, "_real", this.guiRoot);
            // We do not operate on elements that are readonly.
            if (el === null || el.classList.contains("_readonly")) {
                return false;
            }
            // IE puts the clipboardData as a object on the window.
            // tslint:disable
            var cd = e.originalEvent.clipboardData ||
                this.window.clipboardData;
            // tslint:enable
            var text = cd.getData("text");
            if (text == null || text === "") {
                return false;
            }
            // This could result in an empty string.
            text = this.normalizeEnteredText(text);
            if (text === "") {
                return false;
            }
            var parser = new this.window.DOMParser();
            var doc = parser.parseFromString("<div>" + text + "</div>", "text/xml");
            var asXML = true;
            if (domtypeguards_1.isElement(doc.firstChild) &&
                doc.firstChild.tagName === "parsererror" &&
                doc.firstChild.namespaceURI ===
                    // tslint:disable-next-line:no-http-string
                    "http://www.mozilla.org/newlayout/xml/parsererror.xml") {
                asXML = false;
            }
            var data;
            if (asXML) {
                data = doc.firstChild;
                // Otherwise, check whether it is valid.
                var errors = this.validator.speculativelyValidate(caret, Array.prototype.slice.call(data.childNodes));
                if (errors) {
                    // We need to save this before we bring up the modal because clicking to
                    // dismiss the modal will mangle ``cd``.
                    var modal_2 = this.modals.getModal("paste");
                    modal_2.modal(function () {
                        if (modal_2.getClickedAsText() === "Yes") {
                            data = _this.doc.createElement("div");
                            data.textContent = text;
                            // At this point data is a single top level fake <div> element which
                            // contains the contents we actually want to paste.
                            _this.fireTransformation(_this.pasteTr, { node: caret.node, to_paste: data, e: e });
                        }
                    });
                    return false;
                }
            }
            else {
                data = this.doc.createElement("div");
                data.textContent = text;
            }
            // At this point data is a single top level fake <div> element
            // which contains the contents we actually want to paste.
            this.fireTransformation(this.pasteTr, { node: caret.node, to_paste: data, e: e });
            return false;
        };
        Editor.prototype.keydownHandler = function (e) {
            var caret = this.caretManager.getNormalizedCaret();
            // Don't call it on undefined caret.
            if (caret !== undefined) {
                this.$guiRoot.trigger("wed-input-trigger-keydown", [e]);
            }
            if (e.isImmediatePropagationStopped() || e.isPropagationStopped()) {
                return;
            }
            this.$guiRoot.trigger("wed-global-keydown", [e]);
        };
        Editor.prototype.pushGlobalKeydownHandler = function (handler) {
            this.globalKeydownHandlers.push(handler);
        };
        Editor.prototype.popGlobalKeydownHandler = function (handler) {
            var popped = this.globalKeydownHandlers.pop();
            if (popped !== handler) {
                throw new Error("did not pop the expected handler");
            }
        };
        // tslint:disable-next-line:cyclomatic-complexity max-func-body-length
        Editor.prototype.globalKeydownHandler = function (wedEvent, e) {
            var caret; // damn hoisting
            // These are things like the user hitting Ctrl, Alt, Shift, or
            // CapsLock, etc. Return immediately.
            if (e.which === 17 || e.which === 16 || e.which === 18 || e.which === 0) {
                return true;
            }
            // We don't process any input if the minibuffer is enabled.
            if (this.minibuffer.enabled) {
                return true;
            }
            function terminate() {
                e.stopPropagation();
                e.preventDefault();
                return false;
            }
            for (var _i = 0, _a = this.globalKeydownHandlers; _i < _a.length; _i++) {
                var handler = _a[_i];
                var ret = handler(wedEvent, e);
                if (ret === false) {
                    return terminate();
                }
            }
            // F1
            if (e.which === 112) {
                this.modals.getModal("help").modal();
                return terminate();
            }
            // Diagnosis stuff
            if (this.developmentMode) {
                // F2
                if (e.which === 113) {
                    this.caretManager.dumpCaretInfo();
                    return terminate();
                }
                // F3
                if (e.which === 114) {
                    this.dumpUndo();
                    return terminate();
                }
                // F4
                if (e.which === 115) {
                    // tslint:disable:no-console
                    console.log("manual focus");
                    console.log("document.activeElement before", document.activeElement);
                    console.log("document.querySelector(\":focus\") before", document.querySelector(":focus"));
                    this.caretManager.focusInputField();
                    console.log("document.activeElement after", document.activeElement);
                    console.log("document.querySelector(\":focus\") after", document.querySelector(":focus"));
                    // tslint:enable:no-console
                    return terminate();
                }
            }
            var selFocus = this.caretManager.caret;
            // Cursor movement keys: handle them.
            if (e.which >= 33 /* page up */ && e.which <= 40 /* down arrow */) {
                var direction = void 0;
                if (keyConstants.RIGHT_ARROW.matchesEvent(e)) {
                    direction = "right";
                }
                else if (keyConstants.LEFT_ARROW.matchesEvent(e)) {
                    direction = "left";
                }
                else if (keyConstants.DOWN_ARROW.matchesEvent(e)) {
                    direction = "down";
                }
                else if (keyConstants.UP_ARROW.matchesEvent(e)) {
                    direction = "up";
                }
                if (direction !== undefined) {
                    this.caretManager.move(direction, e.shiftKey);
                    return terminate();
                }
                return true;
            }
            else if (keyConstants.ESCAPE.matchesEvent(e)) {
                if (this.closeAllTooltips()) {
                    return terminate();
                }
                return true;
            }
            else if (keyConstants.SAVE.matchesEvent(e)) {
                // tslint:disable-next-line:no-floating-promises
                this.save();
                return terminate();
            }
            else if (keyConstants.UNDO.matchesEvent(e)) {
                this.undo();
                return terminate();
            }
            else if (keyConstants.REDO.matchesEvent(e)) {
                this.redo();
                return terminate();
            }
            else if (keyConstants.COPY.matchesEvent(e) ||
                keyConstants.CUT.matchesEvent(e) ||
                keyConstants.PASTE.matchesEvent(e)) {
                return true;
            }
            else if (keyConstants.DEVELOPMENT.matchesEvent(e)) {
                this.developmentMode = !this.developmentMode;
                notify_1.notify(this.developmentMode ? "Development mode on." :
                    "Development mode off.");
                if (this.developmentMode) {
                    log.showPopup();
                }
                return terminate();
            }
            else if (keyConstants.LOWER_LABEL_VISIBILITY.matchesEvent(e)) {
                return this.decreaseLabelVisibilityLevelAction.terminalEventHandler(e);
            }
            else if (keyConstants.INCREASE_LABEL_VISIBILITY.matchesEvent(e)) {
                return this.increaseLabelVisibilityLevelAction.terminalEventHandler(e);
            }
            else if (keyConstants.CONTEXTUAL_MENU.matchesEvent(e)) {
                if (selFocus !== undefined) {
                    var selFocusNode = selFocus.node;
                    var gui = domutil_1.closestByClass(selFocusNode, "_gui", selFocus.root);
                    if (gui !== null && gui.classList.contains("_label_clicked")) {
                        if (domtypeguards_1.isText(selFocusNode)) {
                            selFocusNode = selFocusNode.parentNode;
                        }
                        jquery_1.default(selFocusNode).trigger("wed-context-menu", [e]);
                        return terminate();
                    }
                }
                if (this.editingMenuManager.contextMenuHandler(e) === false) {
                    return terminate();
                }
            }
            else if (keyConstants.REPLACEMENT_MENU.matchesEvent(e)) {
                this.editingMenuManager.setupReplacementMenu();
                return terminate();
            }
            else if (keyConstants.QUICKSEARCH_FORWARD.matchesEvent(e)) {
                if (this.caretManager.caret !== undefined) {
                    // tslint:disable-next-line:no-unused-expression
                    new quick_search_1.QuickSearch(this, this.scroller, quick_search_1.Direction.FORWARD);
                }
                return terminate();
            }
            else if (keyConstants.QUICKSEARCH_BACKWARDS.matchesEvent(e)) {
                if (this.caretManager.caret !== undefined) {
                    // tslint:disable-next-line:no-unused-expression
                    new quick_search_1.QuickSearch(this, this.scroller, quick_search_1.Direction.BACKWARDS);
                }
                return terminate();
            }
            else if (keyConstants.SEARCH_FORWARD.matchesEvent(e)) {
                if (this.caretManager.caret !== undefined) {
                    // tslint:disable-next-line:no-unused-expression
                    new dialog_search_replace_1.DialogSearchReplace(this, this.scroller, quick_search_1.Direction.FORWARD);
                }
                return terminate();
            }
            else if (keyConstants.SEARCH_BACKWARDS.matchesEvent(e)) {
                if (this.caretManager.caret !== undefined) {
                    // tslint:disable-next-line:no-unused-expression
                    new dialog_search_replace_1.DialogSearchReplace(this, this.scroller, quick_search_1.Direction.BACKWARDS);
                }
                return terminate();
            }
            if (selFocus === undefined) {
                return true;
            }
            var placeholder = domutil_1.closestByClass(selFocus.node, "_placeholder", selFocus.root);
            if (placeholder !== null) {
                // We're in a placeholder, so...
                // Reminder: if the caret is currently inside a placeholder getCaret will
                // return a caret value just in front of the placeholder.
                caret = this.caretManager.getDataCaret();
                // A place holder could be in a place that does not allow text. If so,
                // then do not allow entering regular text in this location.
                if (!util.anySpecialKeyHeld(e)) {
                    var textPossible_1 = false;
                    if (placeholder.parentNode
                        .classList.contains("_attribute_value")) {
                        textPossible_1 = true;
                    }
                    else {
                        // Maybe throwing an exception could stop this loop early but that
                        // would have to be tested.
                        this.validator.possibleAt(caret).forEach(function (ev) {
                            if (ev.params[0] === "text") {
                                textPossible_1 = true;
                            }
                        });
                    }
                    if (!textPossible_1) {
                        return terminate();
                    }
                }
                // Swallow these events when they happen in a placeholder.
                if (keyConstants.BACKSPACE.matchesEvent(e) ||
                    keyConstants.DELETE.matchesEvent(e)) {
                    return terminate();
                }
            }
            var attrVal = domutil_1.closestByClass(selFocus.node, "_attribute_value", selFocus.root);
            var label = this.guiRoot.querySelector(".__start_label._label_clicked, .__end_label._label_clicked");
            if (attrVal === null && label !== null &&
                keyConstants.DELETE.matchesEvent(e)) {
                // The caret is currently in an element label, and not in an attribute
                // value. Delete the element!
                var el = domutil_1.closestByClass(label, "_real", this.guiRoot);
                var dataNode = this.dataUpdater.pathToNode(this.nodeToPath(el));
                var mode = this.modeTree.getMode(el);
                // Yes, delete-parent is correct because we take position 0 *inside*
                // dataNode.
                var trs = mode.getContextualActions("delete-parent", dataNode.tagName, dataNode, 0);
                trs[0].execute({ node: dataNode, name: dataNode.tagName });
                return terminate();
            }
            else if (domtypeguards_1.isElement(selFocus.node) &&
                (selFocus.node.classList.contains("_phantom") ||
                    selFocus.node.classList.contains("_phantom_wrap"))) {
                return terminate();
            }
            var textUndo;
            var parent;
            var offset;
            if (keyConstants.SPACE.matchesEvent(e)) {
                caret = this.caretManager.getNormalizedCaret();
                if (caret === undefined) {
                    return terminate();
                }
                if (attrVal !== null ||
                    domutil_1.closestByClass(caret.node, "_phantom", caret.root) === null) {
                    this.handleKeyInsertingText(e);
                }
                return terminate();
            }
            else if (keyConstants.DELETE.matchesEvent(e)) {
                if (attrVal !== null) { // In attribute.
                    if (attrVal.textContent === "") { // empty === noop
                        return terminate();
                    }
                    this.spliceAttribute(attrVal, this.caretManager.getNormalizedCaret().offset, 1, "");
                }
                else {
                    // Prevent deleting phantom stuff
                    var next = domutil.nextCaretPosition(selFocus.toArray(), this.guiRoot, true)[0];
                    if (!domtypeguards_1.isElement(next) ||
                        !(next.classList.contains("_phantom") ||
                            next.classList.contains("_phantom_wrap"))) {
                        // When a range is selected, we delete the whole range.
                        if (this.cutSelection()) {
                            this.validationController.refreshErrors();
                            return terminate();
                        }
                        // We need to handle the delete
                        caret = this.caretManager.getDataCaret();
                        // If the container is not a text node, we may still be just AT a text
                        // node from which we can delete. Handle this.
                        if (!domtypeguards_1.isText(caret.node)) {
                            caret = caret.make(caret.node.childNodes[caret.offset], 0);
                        }
                        if (domtypeguards_1.isText(caret.node)) {
                            parent = caret.node.parentNode;
                            offset = domutil_1.indexOf(parent.childNodes, caret.node);
                            textUndo = this.initiateTextUndo();
                            this.dataUpdater.deleteText(caret, 1);
                            // Don't set the caret inside a node that has been deleted.
                            if (caret.node.parentNode !== null) {
                                this.caretManager.setCaret(caret, { textEdit: true });
                            }
                            else {
                                this.caretManager.setCaret(parent, offset, { textEdit: true });
                            }
                            textUndo.recordCaretAfter();
                        }
                    }
                }
                this.validationController.refreshErrors();
                return terminate();
            }
            else if (keyConstants.BACKSPACE.matchesEvent(e)) {
                if (attrVal !== null) { // In attribute.
                    if (attrVal.textContent === "") { // empty === noop
                        return terminate();
                    }
                    this.spliceAttribute(attrVal, this.caretManager.getNormalizedCaret().offset - 1, 1, "");
                }
                else {
                    // Prevent backspacing over phantom stuff
                    var prev = domutil.prevCaretPosition(selFocus.toArray(), this.guiRoot, true)[0];
                    if (!domtypeguards_1.isElement(prev) ||
                        !(prev.classList.contains("_phantom") ||
                            prev.classList.contains("_phantom_wrap"))) {
                        // When a range is selected, we delete the whole range.
                        if (this.cutSelection()) {
                            this.validationController.refreshErrors();
                            return terminate();
                        }
                        // We need to handle the backspace
                        caret = this.caretManager.getDataCaret();
                        // If the container is not a text node, we may still be just behind a
                        // text node from which we can delete. Handle this.
                        if (!domtypeguards_1.isText(caret.node)) {
                            var last = caret.node.childNodes[caret.offset - 1];
                            // tslint:disable-next-line:no-any
                            var length_1 = last.length;
                            caret = caret.make(last, length_1);
                        }
                        if (domtypeguards_1.isText(caret.node)) {
                            parent = caret.node.parentNode;
                            offset = domutil_1.indexOf(parent.childNodes, caret.node);
                            // At start of text, nothing to delete.
                            if (caret.offset === 0) {
                                return terminate();
                            }
                            textUndo = this.initiateTextUndo();
                            this.dataUpdater.deleteText(caret.node, caret.offset - 1, 1);
                            // Don't set the caret inside a node that has been deleted.
                            if (caret.node.parentNode !== null) {
                                this.caretManager.setCaret(caret.node, caret.offset - 1, { textEdit: true });
                            }
                            else {
                                this.caretManager.setCaret(parent, offset, { textEdit: true });
                            }
                            textUndo.recordCaretAfter();
                        }
                    }
                }
                this.validationController.refreshErrors();
                return terminate();
            }
            return true;
        };
        Editor.prototype.keypressHandler = function (e) {
            // IE is the odd browser that allows ESCAPE to show up as a keypress so
            // we have to prevent it from going any further.
            if (ESCAPE_KEYPRESS.matchesEvent(e)) {
                return true;
            }
            this.$guiRoot.trigger("wed-input-trigger-keypress", [e]);
            if (e.isImmediatePropagationStopped() || e.isPropagationStopped()) {
                return true;
            }
            this.$guiRoot.trigger("wed-global-keypress", [e]);
            return undefined;
        };
        /**
         * Simulates typing text in the editor.
         *
         * **NOTE**: this function is limited in what it can simulate. The main
         * editing pane is where you get the most support. Other locations offer less
         * support. One good example is the minibuffer. Typing a string into it works
         * fine. Trying to use directional arrows and backspace/delete currently does
         * not work. We'd have to write custom code to handle these cases because it
         * is not possible, as we speak, to write JavaScript code that **entirely**
         * simulates pressing keyboard keys. (JavaScript easily supports sending the
         * events *generated* by hitting the keyboard, but this is not enough.)
         *
         * @param text The text to type in. An array of keys, a string or a single
         * key.
         */
        // tslint:disable-next-line:no-reserved-keywords
        Editor.prototype.type = function (text, where) {
            if (where === void 0) { where = WedEventTarget.DEFAULT; }
            if (text instanceof key_1.Key) {
                text = [text];
            }
            for (var _i = 0, text_1 = text; _i < text_1.length; _i++) {
                var k = text_1[_i];
                if (typeof k === "string") {
                    k = (k === " ") ? keyConstants.SPACE : key_1.makeKey(k);
                }
                var event_1 = new jquery_1.default.Event("keydown");
                k.setEventToMatch(event_1);
                switch (where) {
                    case WedEventTarget.MINIBUFFER:
                        this.minibuffer.forwardEvent(event_1);
                        break;
                    case WedEventTarget.DEFAULT:
                        this.$inputField.trigger(event_1);
                        break;
                    default:
                        var t = where;
                        throw new Error("unhandled target: " + t);
                }
            }
        };
        Editor.prototype.globalKeypressHandler = function (_wedEvent, e) {
            if (this.caretManager.caret === undefined) {
                return true;
            }
            function terminate() {
                e.preventDefault();
                e.stopPropagation();
                return false;
            }
            // On Firefox keypress events are generated for things like hitting the left
            // or right arrow. The which value is 0 in these cases. On Chrome, hitting
            // the left or right arrow will generate keyup, keydown events but not
            // keypress. Yay for inconsistencies!
            if (e.which === 0) {
                return true;
            }
            // Backspace, which for some reason gets here on Firefox...
            if (e.which === 8) {
                return terminate();
            }
            // On Firefox the modifier keys will generate a keypress event, etc. Not so
            // on Chrome. Yay for inconsistencies!
            if (e.ctrlKey || e.altKey || e.metaKey) {
                return true;
            }
            this.cutSelection();
            this.handleKeyInsertingText(e);
            return terminate();
        };
        Editor.prototype.cutSelection = function () {
            var sel = this.caretManager.sel;
            if (sel !== undefined && !sel.collapsed) {
                if (!sel.wellFormed) {
                    return true;
                }
                var textUndo = this.initiateTextUndo();
                var _a = sel.mustAsDataCarets(), start = _a[0], end = _a[1];
                var cutRet = this.dataUpdater.cut(start, end)[0];
                this.caretManager.setCaret(cutRet, { textEdit: true });
                textUndo.recordCaretAfter();
                return true;
            }
            return false;
        };
        Editor.prototype.handleKeyInsertingText = function (e) {
            var text = String.fromCharCode(e.which);
            if (text === "") {
                // Nothing needed
                return false;
            }
            this.insertText(text);
            e.preventDefault();
            e.stopPropagation();
            return undefined;
        };
        Editor.prototype.compositionHandler = function (ev) {
            if (ev.type === "compositionstart") {
                this.composing = true;
                this.compositionData = {
                    // tslint:disable-next-line:no-any
                    data: ev.originalEvent.data,
                    startCaret: this.caretManager.caret,
                };
                this.inputField.style.zIndex = "10";
                this.caretManager.mark.refresh();
            }
            else if (ev.type === "compositionupdate") {
                // tslint:disable-next-line:no-any
                this.compositionData.data = ev.originalEvent.data;
            }
            else if (ev.type === "compositionend") {
                this.composing = false;
                this.inputField.style.zIndex = "";
                this.inputField.style.top = "";
                this.inputField.style.left = "";
            }
            else {
                throw new Error("unexpected event type: " + ev.type);
            }
        };
        Editor.prototype.inputHandler = function () {
            if (this.composing) {
                return;
            }
            if (this.$inputField.val() === "") {
                return;
            }
            this.insertText(this.$inputField.val());
            this.$inputField.val("");
            this.caretManager.focusInputField();
        };
        Editor.prototype.mousemoveHandler = function (e) {
            var _this = this;
            var elementAtMouse = this.doc.elementFromPoint(e.clientX, e.clientY);
            if (!this.guiRoot.contains(elementAtMouse)) {
                // Not in GUI tree.
                return;
            }
            var editable = function (el) {
                var cl = el.classList;
                return cl.contains("_real") ||
                    (cl.contains("_attribute_value") &&
                        _this.modeTree.getAttributeHandling(el) === "edit");
            };
            var boundary;
            if (editable(elementAtMouse)) {
                boundary = this.pointToCharBoundary(e.clientX, e.clientY);
                if (boundary === undefined) {
                    return;
                }
            }
            else {
                var child = elementAtMouse;
                while (!editable(elementAtMouse)) {
                    child = elementAtMouse;
                    elementAtMouse = child.parentNode;
                    if (!this.guiRoot.contains(elementAtMouse)) {
                        // The mouse was in a bunch of non-editable elements.
                        return;
                    }
                }
                var offset = domutil_1.indexOf(elementAtMouse.childNodes, child);
                var range = this.doc.createRange();
                range.setStart(elementAtMouse, offset);
                range.setEnd(elementAtMouse, offset + 1);
                var rect = range.getBoundingClientRect();
                if (Math.abs(rect.left - e.clientX) >= Math.abs(rect.right - e.clientX)) {
                    offset++;
                }
                boundary = this.caretManager.makeCaret(elementAtMouse, offset);
            }
            this.caretManager.setRange(this.caretManager.anchor, boundary);
        };
        Editor.prototype.mousedownHandler = function (ev) {
            // Make sure the mouse is not on a scroll bar.
            if (!this.scroller.isPointInside(ev.pageX, ev.pageY)) {
                return false;
            }
            var boundary = this.pointToCharBoundary(ev.clientX, ev.clientY);
            if (boundary === undefined) {
                return true;
            }
            this.$guiRoot.one("mouseup", this.mouseupHandler.bind(this));
            this.errorLayer.unselectAll();
            this.$errorList.find(".selected").removeClass("selected");
            var root = this.guiRoot;
            var target = ev.target;
            var placeholder = domutil_1.closestByClass(target, "_placeholder", root);
            var label = domutil_1.closestByClass(target, "_label", root);
            var caretManager = this.caretManager;
            switch (ev.which) {
                case 1:
                    // Don't track selections in gui elements, except if they are inside an
                    // attribute value.
                    if (domutil_1.closest(target, "._gui, ._phantom", root) === null ||
                        domutil_1.closestByClass(target, "_attribute_value", root) !== null) {
                        this.$guiRoot.on("mousemove.wed", this.mousemoveHandler.bind(this));
                    }
                    // If the caret is changing due to a click on a placeholder, then put it
                    // inside the placeholder.
                    if (placeholder !== null) {
                        caretManager.setCaret(placeholder, 0);
                    }
                    else if (label !== null) {
                        // If the caret is changing due to a click on a label, then normalize it
                        // to a valid position.
                        caretManager.setCaretToLabelPosition(target, label, boundary);
                    }
                    else {
                        caretManager.setCaret(boundary);
                    }
                    if (ev.target.classList.contains("wed-validation-error")) {
                        return true;
                    }
                    break;
                case 3:
                    var range = this.caretManager.range;
                    if (!(range !== undefined && !range.collapsed)) {
                        // If the caret is changing due to a click on a placeholder, then put it
                        // inside the placeholder.
                        if (placeholder !== null) {
                            caretManager.setCaret(placeholder, 0);
                        }
                        else if (label !== null) {
                            // If the caret is changing due to a click on a label, then normalize
                            // it to a valid position.
                            caretManager.setCaretToLabelPosition(target, label, boundary);
                        }
                        else {
                            caretManager.setCaret(boundary);
                        }
                    }
                    break;
                default:
            }
            return false;
        };
        // In previous versions of wed all mouse button processing was done in
        // _mousedownHandler. However, this caused problems when processing context
        // menus events. On IE in particular the mouseup that would occur when a
        // context menu is brought up would happen on the newly brought up menu and
        // would cause focus problems.
        Editor.prototype.mouseupHandler = function (ev) {
            // Make sure the mouse is not on a scroll bar.
            if (!this.scroller.isPointInside(ev.pageX, ev.pageY)) {
                return false;
            }
            var boundary = this.pointToCharBoundary(ev.clientX, ev.clientY);
            if (boundary === undefined) {
                return true;
            }
            // Normalize.
            if (ev.type === "contextmenu") {
                ev.which = 3;
            }
            var root = this.guiRoot;
            var target = ev.target;
            var placeholder = domutil_1.closestByClass(target, "_placeholder", root);
            var label = domutil_1.closestByClass(target, "_label", root);
            var caretManager = this.caretManager;
            switch (ev.which) {
                case 3:
                    // If the caret is changing due to a click on a placeholder, then put it
                    // inside the placeholder.
                    if (placeholder !== null) {
                        caretManager.setCaret(target, 0);
                    }
                    if (label !== null) {
                        caretManager.setCaretToLabelPosition(target, label, boundary);
                        jquery_1.default(target).trigger("wed-context-menu", [ev]);
                    }
                    else {
                        // If the editor is just gaining focus with *this* click, then
                        // this.caretManager.caret will not be set. It also means the range is
                        // collapsed.
                        if (caretManager.caret === undefined) {
                            caretManager.setCaret(boundary);
                        }
                        if (domutil_1.closest(target, "*[data-wed--custom-context-menu]", root) !== null) {
                            jquery_1.default(target).trigger("wed-context-menu", [ev]);
                        }
                        else {
                            this.editingMenuManager.contextMenuHandler(ev);
                        }
                    }
                    break;
                default:
            }
            this.$guiRoot.off("mousemove");
            ev.preventDefault();
            return false;
        };
        Editor.prototype.mouseoverHandler = function (ev) {
            var _this = this;
            var root = this.guiRoot;
            var label = domutil_1.closestByClass(ev.target, "_label", root);
            if (label !== null) {
                // Get tooltips from the current mode
                var real = domutil_1.closestByClass(label, "_real", root);
                var origName_1 = util.getOriginalName(real);
                var options = {
                    title: function () {
                        var mode = _this.modeTree.getMode(label);
                        return mode.shortDescriptionFor(origName_1);
                    },
                    container: "body",
                    delay: { show: 1000 },
                    placement: "auto top",
                    trigger: "hover",
                };
                this.makeGUITreeTooltip(jquery_1.default(label), options);
                var tt = jquery_1.default.data(label, "bs.tooltip");
                tt.enter(tt);
            }
        };
        Editor.prototype.mouseoutHandler = function (ev) {
            var root = this.guiRoot;
            var label = domutil_1.closestByClass(ev.target, "_label", root);
            if (label !== null) {
                jquery_1.default(label).tooltip("destroy");
                // See _mouseoutHandler. We return false here for symmetry.
                return false;
            }
            return undefined;
        };
        Editor.prototype.refreshSaveStatus = function () {
            if (this.saver !== undefined) {
                var saveStatus = this.saver.getSavedWhen();
                this.$saveStatus.children("span").first()
                    .text(saveStatus !== undefined ? saveStatus : "");
                if (saveStatus === undefined) {
                    this.$saveStatus.removeClass("label-success label-info")
                        .addClass("label-default");
                }
                else {
                    var kind = this.saver.getLastSaveKind();
                    var toAdd = void 0;
                    var tip = void 0;
                    switch (kind) {
                        case saver_1.SaveKind.AUTO:
                            toAdd = "label-info";
                            tip = "The last save was an autosave.";
                            break;
                        case saver_1.SaveKind.MANUAL:
                            toAdd = "label-success";
                            tip = "The last save was a manual save.";
                            break;
                        default:
                            throw new Error("unexpected kind of save: " + kind);
                    }
                    this.$saveStatus.removeClass("label-default label-info label-success")
                        .addClass(toAdd);
                    this.$saveStatus.tooltip("destroy");
                    this.$saveStatus.tooltip({
                        title: tip,
                        container: "body",
                        placement: "auto top",
                        trigger: "hover",
                    });
                }
                var modified = this.saver.getModifiedWhen();
                if (modified !== false) {
                    this.$modificationStatus.removeClass("label-success");
                    this.$modificationStatus.addClass("label-warning");
                    this.$modificationStatus.children("i").css("visibility", "");
                }
                else {
                    this.$modificationStatus.removeClass("label-warning");
                    this.$modificationStatus.addClass("label-success");
                    this.$modificationStatus.children("i").css("visibility", "hidden");
                }
            }
        };
        Editor.prototype.onValidatorStateChange = function (workingState) {
            var state = workingState.state;
            if (state === salve_dom_1.WorkingState.VALID || state === salve_dom_1.WorkingState.INVALID) {
                if (!this._firstValidationComplete) {
                    this._firstValidationComplete = true;
                    this.firstValidationCompleteResolve(this);
                }
            }
        };
        Editor.prototype.onPossibleDueToWildcardChange = function (node) {
            //
            // This function is designed to execute fairly quickly. **IT IS IMPORTANT
            // NOT TO BURDEN THIS FUNCTION.** It will be called for every element and
            // attribute in the data tree and thus making this function slower will have
            // a significant impact on validation speed and the speed of wed generally.
            //
            var guiNode = wed_util_1.getGUINodeIfExists(this, node);
            // This may happen if we are dealing with an attribute node.
            if (domtypeguards_1.isText(guiNode)) {
                guiNode = domutil_1.closestByClass(guiNode, "_attribute", this.guiRoot);
            }
            if (guiNode != null) {
                var decorator = this.modeTree.getDecorator(node);
                // guiNode is necessarily an Element if we get here.
                // And the property is necessarily set.
                decorator.setReadOnly(guiNode, this.validator.getNodeProperty(node, "PossibleDueToWildcard"));
            }
            // If the GUI node does not exist yet, then the decorator will take care of
            // adding or removing _readonly when decorating the node.
        };
        /**
         * Expand the error panel if there is no navigation.
         */
        Editor.prototype.expandErrorPanelWhenNoNavigation = function () {
            if (this.$navigationPanel[0].style.display === "none") {
                this.$errorList.parents(".panel-collapse").collapse("show");
            }
        };
        Editor.prototype.errorItemHandler = function (ev) {
            var err = ev.data;
            var marker = document.querySelector(ev.target.getAttribute("href"));
            this.errorLayer.select(marker);
            var $parent = jquery_1.default(ev.target.parentNode);
            $parent.siblings().removeClass("selected");
            $parent.addClass("selected");
            // We move the caret to the location of the error.
            this.caretManager.setCaret(err.ev.node, err.ev.index);
            // We don't want href to cause further movement.
            return false;
        };
        Editor.prototype.setNavigationList = function (items) {
            this.$navigationList.empty();
            // tslint:disable-next-line:no-any
            this.$navigationList.append(items);
            // Show the navigation panel.
            this.$navigationPanel.css("display", "");
        };
        Editor.prototype.makeModal = function (options) {
            var _this = this;
            var ret = new modal_1.Modal(options);
            var $top = ret.getTopLevel();
            // Ensure that we don't lose the caret when a modal is displayed.
            $top.on("show.bs.modal.modal", function () {
                _this.caretManager.pushSelection();
            });
            $top.on("hidden.bs.modal.modal", function () {
                _this.caretManager.popSelection();
            });
            this.$widget.prepend($top);
            return ret;
        };
        Editor.prototype.makeGUITreeTooltip = function ($for, options) {
            var _this = this;
            var title = options.title;
            if (title !== undefined) {
                options = __assign({}, options);
                options.title = function () {
                    // The check is here so that we can turn tooltips on and off
                    // dynamically.
                    if (_this.destroyed || !_this.preferences.get("tooltips")) {
                        return undefined;
                    }
                    return (typeof title === "function") ? title() : title;
                };
            }
            tooltip_1.tooltip($for, options);
        };
        /**
         * Reset the label visibility level to what it was when the editor was first
         * initialized.
         */
        Editor.prototype.resetLabelVisibilityLevel = function () {
            this.setLabelVisibilityLevel(this.initialLabelLevel);
        };
        /**
         * Set the visibility level to a specific value. It is a no-op if it is called
         * with a value that is less than 0 or greater than the maximum level
         * supported, or if the new level is the same as the current level.
         *
         * @param level The new level.
         */
        Editor.prototype.setLabelVisibilityLevel = function (level) {
            if (level < 0 || level > this.maxLabelLevel) {
                return;
            }
            while (this.currentLabelLevel > level) {
                this.decreaseLabelVisiblityLevel();
            }
            while (this.currentLabelLevel < level) {
                this.increaseLabelVisibilityLevel();
            }
        };
        Editor.prototype.increaseLabelVisibilityLevel = function () {
            if (this.currentLabelLevel >= this.maxLabelLevel) {
                return;
            }
            this.currentLabelLevel++;
            var labels = this.guiRoot.getElementsByClassName("_label_level_" + this.currentLabelLevel);
            // tslint:disable-next-line:one-variable-per-declaration
            for (var i = 0, limit = labels.length; i < limit; i++) {
                labels[i].classList.remove("_invisible");
            }
            // We cannot just refresh the errors because some errors may appear or
            // disappear due to the visibility change.
            this.validationController.recreateErrors();
            this.caretManager.mark.refresh();
        };
        Editor.prototype.decreaseLabelVisiblityLevel = function () {
            if (this.currentLabelLevel === 0) {
                return;
            }
            var prev = this.currentLabelLevel;
            this.currentLabelLevel--;
            var labels = this.guiRoot.getElementsByClassName("_label_level_" + prev);
            // tslint:disable-next-line:one-variable-per-declaration
            for (var i = 0, limit = labels.length; i < limit; i++) {
                labels[i].classList.add("_invisible");
            }
            // We cannot just refresh the errors because some errors may appear or
            // disappear due to the visibility change.
            this.validationController.recreateErrors();
            this.caretManager.mark.refresh();
        };
        Editor.prototype.toggleAttributeHiding = function () {
            this.guiRoot.classList.toggle("inhibit_attribute_hiding");
        };
        Editor.prototype.closeAllTooltips = function () {
            var tts = this.doc.querySelectorAll("div.tooltip");
            var closed = false;
            for (var i = 0; i < tts.length; ++i) {
                var forEl = jquery_1.default.data(tts[i], "wed-tooltip-for");
                var data = jquery_1.default(forEl).data("bs.tooltip");
                if (data != null) {
                    data.leave(data);
                    closed = true;
                }
            }
            return closed;
        };
        Editor.prototype.excludeFromBlur = function (elements) {
            // tslint:disable-next-line:no-any
            this.$excludedFromBlur.add(elements);
        };
        /**
         * Finds the location of the character closest to the ``x, y``
         * coordinates. Very often this will be the character whose bounding client
         * rect encloses the coordinates. However, if no such character exists the
         * algorithm will return the closest character. If multiple characters are at
         * the same distance, then the first one found will be returned.
         *
         * @param x The x coordinate in client coordinates.
         *
         * @param y The y coordinate in client coordinates.
         *
         * @returns The location of the boundary character. The value return is
         * ``undefined`` if the coordinates are outside the client or if the element
         * in which the click occurred is not inside the editor pane (a descendant of
         * ``this.guiRoot``).
         */
        Editor.prototype.findLocationAt = function (x, y) {
            var elementAtMouse = this.doc.elementFromPoint(x, y);
            // This could happen if x, y is outside our screen.
            if (elementAtMouse === null) {
                return undefined;
            }
            // The elementAtMouse is not in the editing pane.
            if (!this.guiRoot.contains(elementAtMouse)) {
                return undefined;
            }
            return this.findLocationInElementAt(elementAtMouse, x, y);
        };
        Editor.prototype.findLocationInElementAt = function (node, x, y, textOk) {
            if (textOk === void 0) { textOk = true; }
            var range = this.doc.createRange();
            var min;
            //
            // This function works only in cases where a space that is effectively
            // rendered as a line break on the screen has a height and width of
            // zero. (Logically this makes sense, there is no part of the screen which
            // really belongs to the space.)
            //
            function checkRange(checkNode, start) {
                var rects;
                if (domtypeguards_1.isText(checkNode)) {
                    range.setStart(checkNode, start);
                    range.setEnd(checkNode, start + 1);
                    rects = range.getClientRects();
                }
                else {
                    rects = checkNode.childNodes[start].getClientRects();
                }
                for (var rectIx = 0; rectIx < rects.length; ++rectIx) {
                    var rect = rects[rectIx];
                    // Not a contender...
                    if (rect.height === 0 || rect.width === 0) {
                        continue;
                    }
                    var dist = util.distsFromRect(x, y, rect.left, rect.top, rect.right, rect.bottom);
                    if (min === undefined || min.dist.y > dist.y ||
                        (min.dist.y === dist.y && min.dist.x > dist.x)) {
                        min = {
                            dist: dist,
                            node: checkNode,
                            start: start,
                        };
                        // Returning true means the search can end.
                        return (dist.y === 0 && dist.x === 0);
                    }
                }
                return false;
            }
            var child = node.firstChild;
            var childIx = 0;
            main_loop: while (child !== null) {
                if (textOk && domtypeguards_1.isText(child)) {
                    for (var i = 0; i < child.length; ++i) {
                        if (checkRange(child, i)) {
                            // Can't get any better than this.
                            break main_loop;
                        }
                    }
                }
                else if (checkRange(node, childIx)) {
                    // Can't get any better than this.
                    break;
                }
                child = child.nextSibling;
                childIx++;
            }
            if (min === undefined) {
                return this.caretManager.makeCaret(node, 0);
            }
            return this.caretManager.makeCaret(min.node, min.start);
        };
        // tslint:disable-next-line:cyclomatic-complexity
        Editor.prototype.pointToCharBoundary = function (x, y) {
            // This obviously won't work for top to bottom scripts.  Probably does not
            // work with RTL scripts either.
            var boundary = this.findLocationAt(x, y);
            if (boundary !== undefined) {
                var node = boundary.node, offset = boundary.offset;
                var nodeType = node.nodeType;
                if ((domtypeguards_1.isElement(node) && (offset < node.childNodes.length)) ||
                    (domtypeguards_1.isText(node) && (offset < node.length))) {
                    // Adjust the value we return so that the location returned is the one
                    // closest to the x, y coordinates.
                    var range = this.doc.createRange();
                    range.setStart(node, offset);
                    range.setEnd(node, offset + 1);
                    var rect = range.getBoundingClientRect();
                    switch (nodeType) {
                        case Node.TEXT_NODE:
                            // We use newPosition to adjust the position so that the caret ends up
                            // in a location that makes sense from an editing standpoint.
                            var right = this.caretManager.newPosition(boundary, "right");
                            var left = this.caretManager.newPosition(boundary.make(node, offset + 1), "left");
                            if (right !== undefined && left === undefined) {
                                boundary = right;
                            }
                            else if (left !== undefined && right === undefined) {
                                boundary = left;
                            }
                            else if (right !== undefined && left !== undefined) {
                                boundary = (Math.abs(wed_util_1.boundaryXY(right).left - x) >=
                                    Math.abs(wed_util_1.boundaryXY(left).left - x) ?
                                    left : right);
                            }
                            break;
                        case Node.ELEMENT_NODE:
                            // We don't use newPosition here because we want to skip over the
                            // *whole* element.
                            var before_1;
                            var pointedNode = node.childNodes[offset];
                            if (domtypeguards_1.isElement(pointedNode)) {
                                var closestPos = this.findLocationInElementAt(pointedNode, x, y);
                                var limit = domtypeguards_1.isElement(closestPos.node) ?
                                    closestPos.node.childNodes.length - 1 : -1;
                                switch (closestPos.offset) {
                                    case 0:
                                        before_1 = true;
                                        break;
                                    case limit:
                                        before_1 = false;
                                        break;
                                    default:
                                }
                            }
                            if (before_1 === undefined) {
                                before_1 = Math.abs(rect.left - x) < Math.abs(rect.right - x);
                            }
                            if (!before_1) {
                                boundary = boundary.make(node, offset + 1);
                            }
                            break;
                        default:
                            throw new Error("unexpected node type: " + nodeType);
                    }
                }
            }
            return boundary;
        };
        // tslint:disable-next-line:max-func-body-length cyclomatic-complexity
        Editor.prototype.caretChange = function (ev) {
            var options = ev.options, caret = ev.caret, prevCaret = ev.prevCaret, mode = ev.mode, prevMode = ev.prevMode, manager = ev.manager;
            if (caret === undefined) {
                return;
            }
            var textEdit = options.textEdit === true;
            var gainingFocus = options.gainingFocus === true;
            // We don't want to do this on regaining focus.
            if (!gainingFocus) {
                this.editingMenuManager.setupCompletionMenu();
            }
            // Caret movement terminates a text undo, unless the caret is moved by a
            // text edit.
            if (!textEdit) {
                this.terminateTextUndo();
            }
            // The class owns_caret can be on more than one element. The classic case is
            // if the caret is at an element label.
            while (this.caretOwners[0] !== undefined) {
                this.caretOwners[0].classList.remove("_owns_caret");
            }
            // _label_clicked can also be on more than one element.
            while (this.clickedLabels[0] !== undefined) {
                this.clickedLabels[0].classList.remove("_label_clicked");
            }
            // _with_caret should not be on more than one element, but if a momentary
            // issue happens, we fix it here.
            var hadCaret;
            while (this.withCaret[0] !== undefined) {
                // We record the element with the caret. If there is more than one, which
                // should not happen except in transient cases, it does not matter as it
                // only means that we'll have an unnecessary error recreation.
                hadCaret = this.withCaret[0];
                hadCaret.classList.remove("_with_caret");
            }
            if (prevCaret !== undefined) {
                var oldTp = domutil_1.closest(prevCaret.node, "._placeholder._transient", prevCaret.root);
                if (oldTp !== null && caret.root.contains(oldTp)) {
                    this.guiUpdater.removeNode(oldTp);
                }
            }
            var node = domtypeguards_1.isElement(caret.node) ?
                caret.node : caret.node.parentNode;
            var root = caret.root;
            // This caret is no longer in the gui tree. It is probably an intermediary
            // state so don't do anything with it.
            if (!this.guiRoot.contains(node)) {
                return;
            }
            if (mode !== prevMode) {
                this.toolbar.setModeButtons(mode !== undefined ? mode.getToolbarButtons() : []);
            }
            var real = domutil_1.closestByClass(node, "_real", root);
            if (real !== null) {
                real.classList.add("_owns_caret");
            }
            var hasCaret;
            var gui = domutil_1.closestByClass(node, "_gui", root);
            // Make sure that the caret is in view.
            if (gui !== null) {
                if (manager.anchor === undefined ||
                    domutil_1.closestByClass(manager.anchor.node, "_gui", root) === gui) {
                    for (var _i = 0, _a = domutil.childrenByClass(gui.parentNode, "_gui"); _i < _a.length; _i++) {
                        var child = _a[_i];
                        child.classList.add("_label_clicked");
                    }
                    gui.classList.add("_with_caret");
                    hasCaret = gui;
                }
            }
            else {
                node.classList.add("_owns_caret");
            }
            // When the caret moves, it may move outside of, or into, a start label
            // that has autohidden attributes. In such case, we must recreate the
            // errors, so that any error associated with an attribute that may be
            // shown or hidden is recreated to fix hyperlinking.
            if ((hadCaret !== hasCaret) &&
                ((hasCaret !== undefined &&
                    hasCaret.getElementsByClassName("_shown_when_caret_in_label")
                        .length !== 0) ||
                    (hadCaret !== undefined &&
                        hadCaret.getElementsByClassName("_shown_when_caret_in_label")
                            .length !== 0))) {
                this.validationController.recreateErrors();
            }
            if (!gainingFocus) {
                manager.mark.scrollIntoView();
            }
            // We need to refresh the mark here because the modifications we made above
            // to the CSS may have caused GUI items to appear or disappear and may have
            // mucked up the caret mark.
            this.caretManager.mark.refresh();
            this.setLocationTo(node);
        };
        /**
         * Set the location bar to a new location.
         *
         * @param el The element at which the location should point.
         */
        Editor.prototype.setLocationTo = function (el) {
            var steps = [];
            while (el !== this.guiRoot) {
                if (el.nodeType !== Node.ELEMENT_NODE) {
                    throw new Error("unexpected node type: " + el.nodeType);
                }
                if (!el.classList.contains("_placeholder") &&
                    domutil_1.closestByClass(el, "_phantom", this.guiRoot) === null) {
                    steps.unshift("<span class='_gui _label'><span>&nbsp;" + util.getOriginalName(el) + "&nbsp;</span></span>");
                }
                el = el.parentNode;
            }
            var span = this.wedLocationBar.getElementsByTagName("span")[0];
            // tslint:disable-next-line:no-inner-html
            span.innerHTML =
                steps.length !== 0 ? steps.join("/") : "<span>&nbsp;</span>";
        };
        Editor.prototype.cut = function () {
            var caretManager = this.caretManager;
            var sel = caretManager.sel;
            if (sel === undefined) {
                throw new Error("no selection");
            }
            if (!sel.wellFormed) {
                throw new Error("malformed range");
            }
            var _a = sel.mustAsDataCarets(), startCaret = _a[0], endCaret = _a[1];
            var cutBuffer = this.cutBuffer;
            while (cutBuffer.firstChild !== null) {
                cutBuffer.removeChild(cutBuffer.firstChild);
            }
            if (domtypeguards_1.isAttr(startCaret.node)) {
                var attr = startCaret.node;
                if (attr !== endCaret.node) {
                    throw new Error("attribute selection that does not start " +
                        "and end in the same attribute");
                }
                var removedText = attr.value.slice(startCaret.offset, endCaret.offset);
                this.spliceAttribute(domutil_1.closestByClass(caretManager.mustFromDataLocation(startCaret).node, "_attribute_value"), startCaret.offset, endCaret.offset - startCaret.offset, "");
                cutBuffer.textContent = removedText;
            }
            else {
                var cutRet = this.dataUpdater.cut(startCaret, endCaret);
                var nodes = cutRet[1];
                var parser = new this.window.DOMParser();
                var doc = parser.parseFromString("<div></div>", "text/xml");
                for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
                    var node = nodes_1[_i];
                    doc.firstChild.appendChild(doc.adoptNode(node));
                }
                cutBuffer.textContent = doc.firstChild.innerHTML;
                caretManager.setCaret(cutRet[0]);
            }
            var range = this.doc.createRange();
            var container = cutBuffer;
            range.setStart(container, 0);
            range.setEnd(container, container.childNodes.length);
            var domSel = this.window.getSelection();
            domSel.removeAllRanges();
            domSel.addRange(range);
            // We've set the range to the cut buffer, which is what we want for the cut
            // operation to work. However, the focus is also set to the cut buffer but
            // once the cut is done we want the focus to be back to our caret, so...
            setTimeout(function () {
                caretManager.focusInputField();
            }, 0);
        };
        Editor.prototype.paste = function (_editor, data) {
            var toPaste = data.to_paste;
            var dataClone = toPaste.cloneNode(true);
            var caret = this.caretManager.getDataCaret();
            if (caret === undefined) {
                throw new Error("trying to paste without a caret");
            }
            var newCaret;
            // Handle the case where we are pasting only text.
            if (toPaste.childNodes.length === 1 && domtypeguards_1.isText(toPaste.firstChild)) {
                if (domtypeguards_1.isAttr(caret.node)) {
                    var guiCaret = this.caretManager.mustGetNormalizedCaret();
                    this.spliceAttribute(domutil_1.closestByClass(guiCaret.node, "_attribute_value", guiCaret.node), guiCaret.offset, 0, toPaste.firstChild.data);
                }
                else {
                    (newCaret = this.dataUpdater.insertText(caret, toPaste.firstChild.data).caret);
                }
            }
            else {
                var frag = document.createDocumentFragment();
                while (toPaste.firstChild !== null) {
                    frag.appendChild(toPaste.firstChild);
                }
                switch (caret.node.nodeType) {
                    case Node.TEXT_NODE:
                        newCaret = this.dataUpdater.insertIntoText(caret, frag)[1];
                        break;
                    case Node.ELEMENT_NODE:
                        var child = caret.node.childNodes[caret.offset];
                        var after_1 = child != null ? child.nextSibling : null;
                        // tslint:disable-next-line:no-any
                        this.dataUpdater.insertBefore(caret.node, frag, child);
                        newCaret = caret.makeWithOffset(after_1 !== null ?
                            domutil_1.indexOf(caret.node.childNodes, after_1) :
                            caret.node.childNodes.length);
                        break;
                    default:
                        throw new Error("unexpected node type: " + caret.node.nodeType);
                }
            }
            if (newCaret != null) {
                this.caretManager.setCaret(newCaret);
                caret = newCaret;
            }
            this.$guiRoot.trigger("wed-post-paste", [data.e, caret, dataClone]);
        };
        Editor.prototype.replaceRange = function (editor, data) {
            var caretManager = editor.caretManager;
            var range = data.range, newText = data.newText, caretAtEnd = data.caretAtEnd;
            var start = range.start, end = range.end;
            var dataStart = caretManager.toDataLocation(start);
            var dataEnd = caretManager.toDataLocation(end);
            var caret;
            if (domtypeguards_1.isAttr(dataStart.node)) {
                var attr = dataStart.node;
                var value = attr.value;
                value = value.slice(0, dataStart.offset) + newText +
                    value.slice(dataEnd.offset);
                editor.dataUpdater.setAttributeNS(attr.ownerElement, attr.namespaceURI === null ? "" : attr.namespaceURI, attr.name, value);
                if (caretAtEnd) {
                    caret = dataStart.makeWithOffset(dataStart.offset + newText.length);
                }
                else {
                    caret = dataStart;
                }
            }
            else {
                var cutRet = editor.dataUpdater.cut(dataStart, dataEnd)[0];
                (caret = editor.dataUpdater.insertText(cutRet, newText, caretAtEnd).caret);
            }
            caretManager.setCaret(caret, { textEdit: true });
        };
        return Editor;
    }());
    exports.Editor = Editor;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL keyConstants KEYPRESS sm md contenteditable constrainer sb
//  LocalWords:  scroller nbsp href nav ul li errorlist HTMLElement jQuery lt
//  LocalWords:  html runtime DLocRoot config navlist popstate attr xmlns xml
//  LocalWords:  getDescriptionFor fireTransformation exitTaskSuspension tooOld
//  LocalWords:  readonly attrVal Refetch pathToNode nodeToPath Autosaved bs ev
//  LocalWords:  editedByOther autosaving guiRoot BeforeInsertNodeAt tooltip ns
//  LocalWords:  InsertNodeAt tooltips BeforeDeleteNode stylesheet css tabindex
//  LocalWords:  revalidate dragenter dragstart dragover keydown keypress pageX
//  LocalWords:  compositionstart compositionupdate compositionend mousedown px
//  LocalWords:  mouseover mouseout contextmenu mousemove mouseup pageY screenX
//  LocalWords:  screenY docUrl wed's enterStartTag pheight maxPanelHeight cd
//  LocalWords:  domutil childByClass outerHeight clipboardData parsererror Yay
//  LocalWords:  Ctrl CapsLock activeElement querySelector getCaret dataNode nd
//  LocalWords:  noop keyup mousedownHandler caretManager mouseoutHandler rect
//  LocalWords:  typeahead autosave guiNode PossibleDueToWildcard RTL nodeType
//  LocalWords:  currentLabelLevel elementAtMouse newPosition
//# sourceMappingURL=editor.js.map

/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return empty; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__config__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_hostReportError__ = __webpack_require__(54);
/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */


var empty = {
    closed: true,
    next: function (value) { },
    error: function (err) {
        if (__WEBPACK_IMPORTED_MODULE_0__config__["a" /* config */].useDeprecatedSynchronousErrorHandling) {
            throw err;
        }
        else {
            Object(__WEBPACK_IMPORTED_MODULE_1__util_hostReportError__["a" /* hostReportError */])(err);
        }
    },
    complete: function () { }
};
//# sourceMappingURL=Observer.js.map


/***/ }),
/* 80 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isObject;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isObject(x) {
    return x != null && typeof x === 'object';
}
//# sourceMappingURL=isObject.js.map


/***/ }),
/* 81 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return UnsubscriptionError; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */

/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a {@link Subscription}.
 */
var UnsubscriptionError = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](UnsubscriptionError, _super);
    function UnsubscriptionError(errors) {
        var _this = _super.call(this, errors ?
            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '') || this;
        _this.errors = errors;
        _this.name = 'UnsubscriptionError';
        Object.setPrototypeOf(_this, UnsubscriptionError.prototype);
        return _this;
    }
    return UnsubscriptionError;
}(Error));

//# sourceMappingURL=UnsubscriptionError.js.map


/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ConnectableObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return connectableObservableDescriptor; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subject__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Subscription__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__operators_refCount__ = __webpack_require__(57);
/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */






/**
 * @class ConnectableObservable<T>
 */
var ConnectableObservable = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subjectFactory = subjectFactory;
        _this._refCount = 0;
        /** @internal */
        _this._isComplete = false;
        return _this;
    }
    /** @deprecated This is an internal implementation detail, do not use. */
    ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype.connect = function () {
        var connection = this._connection;
        if (!connection) {
            this._isComplete = false;
            connection = this._connection = new __WEBPACK_IMPORTED_MODULE_4__Subscription__["a" /* Subscription */]();
            connection.add(this.source
                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) {
                this._connection = null;
                connection = __WEBPACK_IMPORTED_MODULE_4__Subscription__["a" /* Subscription */].EMPTY;
            }
            else {
                this._connection = connection;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return Object(__WEBPACK_IMPORTED_MODULE_5__operators_refCount__["a" /* refCount */])()(this);
    };
    return ConnectableObservable;
}(__WEBPACK_IMPORTED_MODULE_2__Observable__["a" /* Observable */]));

var connectableProto = ConnectableObservable.prototype;
var connectableObservableDescriptor = {
    operator: { value: null },
    _refCount: { value: 0, writable: true },
    _subject: { value: null, writable: true },
    _connection: { value: null, writable: true },
    _subscribe: { value: connectableProto._subscribe },
    _isComplete: { value: connectableProto._isComplete, writable: true },
    getSubject: { value: connectableProto.getSubject },
    connect: { value: connectableProto.connect },
    refCount: { value: connectableProto.refCount }
};
var ConnectableSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ConnectableSubscriber, _super);
    function ConnectableSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    ConnectableSubscriber.prototype._error = function (err) {
        this._unsubscribe();
        _super.prototype._error.call(this, err);
    };
    ConnectableSubscriber.prototype._complete = function () {
        this.connectable._isComplete = true;
        this._unsubscribe();
        _super.prototype._complete.call(this);
    };
    ConnectableSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (connectable) {
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) {
                connection.unsubscribe();
            }
        }
    };
    return ConnectableSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subject__["b" /* SubjectSubscriber */]));
var RefCountOperator = /*@__PURE__*/ (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        ///
        // Compare the local RefCountSubscriber's connection Subscription to the
        // connection Subscription on the shared ConnectableObservable. In cases
        // where the ConnectableObservable source synchronously emits values, and
        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
        // execution continues to here before the RefCountOperator has a chance to
        // supply the RefCountSubscriber with the shared connection Subscription.
        // For example:
        // ```
        // Observable.range(0, 10)
        //   .publish()
        //   .refCount()
        //   .take(5)
        //   .subscribe();
        // ```
        // In order to account for this case, RefCountSubscriber should only dispose
        // the ConnectableObservable's shared connection Subscription if the
        // connection Subscription exists, *and* either:
        //   a. RefCountSubscriber doesn't have a reference to the shared connection
        //      Subscription yet, or,
        //   b. RefCountSubscriber's connection Subscription reference is identical
        //      to the shared connection Subscription
        ///
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(__WEBPACK_IMPORTED_MODULE_3__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=ConnectableObservable.js.map


/***/ }),
/* 83 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SubjectSubscription; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscription__ = __webpack_require__(8);
/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */


/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubjectSubscription = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        var _this = _super.call(this) || this;
        _this.subject = subject;
        _this.subscriber = subscriber;
        _this.closed = false;
        return _this;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(__WEBPACK_IMPORTED_MODULE_1__Subscription__["a" /* Subscription */]));

//# sourceMappingURL=SubjectSubscription.js.map


/***/ }),
/* 84 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = groupBy;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GroupedObservable; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Subscription__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Subject__ = __webpack_require__(9);
/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */





/* tslint:enable:max-line-length */
/**
 * Groups the items emitted by an Observable according to a specified criterion,
 * and emits these grouped items as `GroupedObservables`, one
 * {@link GroupedObservable} per group.
 *
 * <img src="./img/groupBy.png" width="100%">
 *
 * @example <caption>Group objects by id and return as array</caption>
 * Observable.of<Obj>({id: 1, name: 'aze1'},
 *                    {id: 2, name: 'sf2'},
 *                    {id: 2, name: 'dg2'},
 *                    {id: 1, name: 'erg1'},
 *                    {id: 1, name: 'df1'},
 *                    {id: 2, name: 'sfqfb2'},
 *                    {id: 3, name: 'qfs3'},
 *                    {id: 2, name: 'qsgqsfg2'}
 *     )
 *     .groupBy(p => p.id)
 *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))
 *     .subscribe(p => console.log(p));
 *
 * // displays:
 * // [ { id: 1, name: 'aze1' },
 * //   { id: 1, name: 'erg1' },
 * //   { id: 1, name: 'df1' } ]
 * //
 * // [ { id: 2, name: 'sf2' },
 * //   { id: 2, name: 'dg2' },
 * //   { id: 2, name: 'sfqfb2' },
 * //   { id: 2, name: 'qsgqsfg2' } ]
 * //
 * // [ { id: 3, name: 'qfs3' } ]
 *
 * @example <caption>Pivot data on the id field</caption>
 * Observable.of<Obj>({id: 1, name: 'aze1'},
 *                    {id: 2, name: 'sf2'},
 *                    {id: 2, name: 'dg2'},
 *                    {id: 1, name: 'erg1'},
 *                    {id: 1, name: 'df1'},
 *                    {id: 2, name: 'sfqfb2'},
 *                    {id: 3, name: 'qfs1'},
 *                    {id: 2, name: 'qsgqsfg2'}
 *                   )
 *     .groupBy(p => p.id, p => p.name)
 *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], ["" + group$.key]))
 *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))
 *     .subscribe(p => console.log(p));
 *
 * // displays:
 * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }
 * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }
 * // { id: 3, values: [ 'qfs1' ] }
 *
 * @param {function(value: T): K} keySelector A function that extracts the key
 * for each item.
 * @param {function(value: T): R} [elementSelector] A function that extracts the
 * return element for each item.
 * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]
 * A function that returns an Observable to determine how long each group should
 * exist.
 * @return {Observable<GroupedObservable<K,R>>} An Observable that emits
 * GroupedObservables, each of which corresponds to a unique key value and each
 * of which emits those items from the source Observable that share that key
 * value.
 * @method groupBy
 * @owner Observable
 */
function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
    return function (source) {
        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
    };
}
var GroupByOperator = /*@__PURE__*/ (function () {
    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
        this.keySelector = keySelector;
        this.elementSelector = elementSelector;
        this.durationSelector = durationSelector;
        this.subjectSelector = subjectSelector;
    }
    GroupByOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
    };
    return GroupByOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var GroupBySubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](GroupBySubscriber, _super);
    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.elementSelector = elementSelector;
        _this.durationSelector = durationSelector;
        _this.subjectSelector = subjectSelector;
        _this.groups = null;
        _this.attemptedToUnsubscribe = false;
        _this.count = 0;
        return _this;
    }
    GroupBySubscriber.prototype._next = function (value) {
        var key;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            this.error(err);
            return;
        }
        this._group(value, key);
    };
    GroupBySubscriber.prototype._group = function (value, key) {
        var groups = this.groups;
        if (!groups) {
            groups = this.groups = new Map();
        }
        var group = groups.get(key);
        var element;
        if (this.elementSelector) {
            try {
                element = this.elementSelector(value);
            }
            catch (err) {
                this.error(err);
            }
        }
        else {
            element = value;
        }
        if (!group) {
            group = (this.subjectSelector ? this.subjectSelector() : new __WEBPACK_IMPORTED_MODULE_4__Subject__["a" /* Subject */]());
            groups.set(key, group);
            var groupedObservable = new GroupedObservable(key, group, this);
            this.destination.next(groupedObservable);
            if (this.durationSelector) {
                var duration = void 0;
                try {
                    duration = this.durationSelector(new GroupedObservable(key, group));
                }
                catch (err) {
                    this.error(err);
                    return;
                }
                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
            }
        }
        if (!group.closed) {
            group.next(element);
        }
    };
    GroupBySubscriber.prototype._error = function (err) {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.error(err);
            });
            groups.clear();
        }
        this.destination.error(err);
    };
    GroupBySubscriber.prototype._complete = function () {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.complete();
            });
            groups.clear();
        }
        this.destination.complete();
    };
    GroupBySubscriber.prototype.removeGroup = function (key) {
        this.groups.delete(key);
    };
    GroupBySubscriber.prototype.unsubscribe = function () {
        if (!this.closed) {
            this.attemptedToUnsubscribe = true;
            if (this.count === 0) {
                _super.prototype.unsubscribe.call(this);
            }
        }
    };
    return GroupBySubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](GroupDurationSubscriber, _super);
    function GroupDurationSubscriber(key, group, parent) {
        var _this = _super.call(this, group) || this;
        _this.key = key;
        _this.group = group;
        _this.parent = parent;
        return _this;
    }
    GroupDurationSubscriber.prototype._next = function (value) {
        this.complete();
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    GroupDurationSubscriber.prototype._unsubscribe = function () {
        var _a = this, parent = _a.parent, key = _a.key;
        this.key = this.parent = null;
        if (parent) {
            parent.removeGroup(key);
        }
    };
    return GroupDurationSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
/**
 * An Observable representing values belonging to the same group represented by
 * a common key. The values emitted by a GroupedObservable come from the source
 * Observable. The common key is available as the field `key` on a
 * GroupedObservable instance.
 *
 * @class GroupedObservable<K, T>
 */
var GroupedObservable = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](GroupedObservable, _super);
    /** @deprecated Do not construct this type. Internal use only */
    function GroupedObservable(key, groupSubject, refCountSubscription) {
        var _this = _super.call(this) || this;
        _this.key = key;
        _this.groupSubject = groupSubject;
        _this.refCountSubscription = refCountSubscription;
        return _this;
    }
    /** @deprecated This is an internal implementation detail, do not use. */
    GroupedObservable.prototype._subscribe = function (subscriber) {
        var subscription = new __WEBPACK_IMPORTED_MODULE_2__Subscription__["a" /* Subscription */]();
        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
        if (refCountSubscription && !refCountSubscription.closed) {
            subscription.add(new InnerRefCountSubscription(refCountSubscription));
        }
        subscription.add(groupSubject.subscribe(subscriber));
        return subscription;
    };
    return GroupedObservable;
}(__WEBPACK_IMPORTED_MODULE_3__Observable__["a" /* Observable */]));

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](InnerRefCountSubscription, _super);
    function InnerRefCountSubscription(parent) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        parent.count++;
        return _this;
    }
    InnerRefCountSubscription.prototype.unsubscribe = function () {
        var parent = this.parent;
        if (!parent.closed && !this.closed) {
            _super.prototype.unsubscribe.call(this);
            parent.count -= 1;
            if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                parent.unsubscribe();
            }
        }
    };
    return InnerRefCountSubscription;
}(__WEBPACK_IMPORTED_MODULE_2__Subscription__["a" /* Subscription */]));
//# sourceMappingURL=groupBy.js.map


/***/ }),
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BehaviorSubject; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subject__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_ObjectUnsubscribedError__ = __webpack_require__(42);
/** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */



/**
 * @class BehaviorSubject<T>
 */
var BehaviorSubject = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: true,
        configurable: true
    });
    /** @deprecated This is an internal implementation detail, do not use. */
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        if (subscription && !subscription.closed) {
            subscriber.next(this._value);
        }
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        if (this.hasError) {
            throw this.thrownError;
        }
        else if (this.closed) {
            throw new __WEBPACK_IMPORTED_MODULE_2__util_ObjectUnsubscribedError__["a" /* ObjectUnsubscribedError */]();
        }
        else {
            return this._value;
        }
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, this._value = value);
    };
    return BehaviorSubject;
}(__WEBPACK_IMPORTED_MODULE_1__Subject__["a" /* Subject */]));

//# sourceMappingURL=BehaviorSubject.js.map


/***/ }),
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return queue; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__QueueAction__ = __webpack_require__(131);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__QueueScheduler__ = __webpack_require__(133);
/** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */


/**
 *
 * Queue Scheduler
 *
 * <span class="informal">Put every next task on a queue, instead of executing it immediately</span>
 *
 * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.
 *
 * When used without delay, it schedules given task synchronously - executes it right when
 * it is scheduled. However when called recursively, that is when inside the scheduled task,
 * another task is scheduled with queue scheduler, instead of executing immediately as well,
 * that task will be put on a queue and wait for current one to finish.
 *
 * This means that when you execute task with `queue` scheduler, you are sure it will end
 * before any other task scheduled with that scheduler will start.
 *
 * @examples <caption>Schedule recursively first, then do something</caption>
 *
 * Rx.Scheduler.queue.schedule(() => {
 *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue
 *
 *   console.log('first');
 * });
 *
 * // Logs:
 * // "first"
 * // "second"
 *
 *
 * @example <caption>Reschedule itself recursively</caption>
 *
 * Rx.Scheduler.queue.schedule(function(state) {
 *   if (state !== 0) {
 *     console.log('before', state);
 *     this.schedule(state - 1); // `this` references currently executing Action,
 *                               // which we reschedule with new state
 *     console.log('after', state);
 *   }
 * }, 0, 3);
 *
 * // In scheduler that runs recursively, you would expect:
 * // "before", 3
 * // "before", 2
 * // "before", 1
 * // "after", 1
 * // "after", 2
 * // "after", 3
 *
 * // But with queue it logs:
 * // "before", 3
 * // "after", 3
 * // "before", 2
 * // "after", 2
 * // "before", 1
 * // "after", 1
 *
 *
 * @static true
 * @name queue
 * @owner Scheduler
 */
var queue = /*@__PURE__*/ new __WEBPACK_IMPORTED_MODULE_1__QueueScheduler__["a" /* QueueScheduler */](__WEBPACK_IMPORTED_MODULE_0__QueueAction__["a" /* QueueAction */]);
//# sourceMappingURL=queue.js.map


/***/ }),
/* 87 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Scheduler; });
/**
 * An execution context and a data structure to order tasks and schedule their
 * execution. Provides a notion of (potentially virtual) time, through the
 * `now()` getter method.
 *
 * Each unit of work in a Scheduler is called an {@link Action}.
 *
 * ```ts
 * class Scheduler {
 *   now(): number;
 *   schedule(work, delay?, state?): Subscription;
 * }
 * ```
 *
 * @class Scheduler
 * @deprecated Scheduler is an internal implementation detail of RxJS, and
 * should not be used directly. Rather, create your own class and implement
 * {@link SchedulerLike}
 */
var Scheduler = /*@__PURE__*/ (function () {
    function Scheduler(SchedulerAction, now) {
        if (now === void 0) {
            now = Scheduler.now;
        }
        this.SchedulerAction = SchedulerAction;
        this.now = now;
    }
    /**
     * Schedules a function, `work`, for execution. May happen at some point in
     * the future, according to the `delay` parameter, if specified. May be passed
     * some context object, `state`, which will be passed to the `work` function.
     *
     * The given arguments will be processed an stored as an Action object in a
     * queue of actions.
     *
     * @param {function(state: ?T): ?Subscription} work A function representing a
     * task, or some unit of work to be executed by the Scheduler.
     * @param {number} [delay] Time to wait before executing the work, where the
     * time unit is implicit and defined by the Scheduler itself.
     * @param {T} [state] Some contextual data that the `work` function uses when
     * called by the Scheduler.
     * @return {Subscription} A subscription in order to be able to unsubscribe
     * the scheduled work.
     */
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) {
            delay = 0;
        }
        return new this.SchedulerAction(this, work).schedule(state, delay);
    };
    /** @nocollapse */
    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };
    return Scheduler;
}());

//# sourceMappingURL=Scheduler.js.map


/***/ }),
/* 88 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = observeOn;
/* unused harmony export ObserveOnOperator */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ObserveOnSubscriber; });
/* unused harmony export ObserveOnMessage */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Notification__ = __webpack_require__(43);
/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */



/**
 *
 * Re-emits all notifications from source Observable with specified scheduler.
 *
 * <span class="informal">Ensure a specific scheduler is used, from outside of an Observable.</span>
 *
 * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule
 * notifications emitted by the source Observable. It might be useful, if you do not have control over
 * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.
 *
 * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,
 * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal
 * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits
 * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.
 * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split
 * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source
 * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a
 * little bit more, to ensure that they are emitted at expected moments.
 *
 * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications
 * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`
 * will delay all notifications - including error notifications - while `delay` will pass through error
 * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator
 * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used
 * for notification emissions in general.
 *
 * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>
 * const intervals = Rx.Observable.interval(10); // Intervals are scheduled
 *                                               // with async scheduler by default...
 *
 * intervals
 * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame
 * .subscribe(val => {                           // scheduler to ensure smooth animation.
 *   someDiv.style.height = val + 'px';
 * });
 *
 * @see {@link delay}
 *
 * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.
 * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.
 * @return {Observable<T>} Observable that emits the same notifications as the source Observable,
 * but with provided scheduler.
 *
 * @method observeOn
 * @owner Observable
 */
function observeOn(scheduler, delay) {
    if (delay === void 0) {
        delay = 0;
    }
    return function observeOnOperatorFunction(source) {
        return source.lift(new ObserveOnOperator(scheduler, delay));
    };
}
var ObserveOnOperator = /*@__PURE__*/ (function () {
    function ObserveOnOperator(scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    };
    return ObserveOnOperator;
}());

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ObserveOnSubscriber, _super);
    function ObserveOnSubscriber(destination, scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        var _this = _super.call(this, destination) || this;
        _this.scheduler = scheduler;
        _this.delay = delay;
        return _this;
    }
    /** @nocollapse */
    ObserveOnSubscriber.dispatch = function (arg) {
        var notification = arg.notification, destination = arg.destination;
        notification.observe(destination);
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    };
    ObserveOnSubscriber.prototype._next = function (value) {
        this.scheduleMessage(__WEBPACK_IMPORTED_MODULE_2__Notification__["a" /* Notification */].createNext(value));
    };
    ObserveOnSubscriber.prototype._error = function (err) {
        this.scheduleMessage(__WEBPACK_IMPORTED_MODULE_2__Notification__["a" /* Notification */].createError(err));
    };
    ObserveOnSubscriber.prototype._complete = function () {
        this.scheduleMessage(__WEBPACK_IMPORTED_MODULE_2__Notification__["a" /* Notification */].createComplete());
    };
    return ObserveOnSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));

var ObserveOnMessage = /*@__PURE__*/ (function () {
    function ObserveOnMessage(notification, destination) {
        this.notification = notification;
        this.destination = destination;
    }
    return ObserveOnMessage;
}());

//# sourceMappingURL=observeOn.js.map


/***/ }),
/* 89 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return subscribeToArray; });
/**
 * Subscribes to an ArrayLike with a subscriber
 * @param array The array or array-like to subscribe to
 */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var subscribeToArray = function (array) {
    return function (subscriber) {
        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
            subscriber.next(array[i]);
        }
        if (!subscriber.closed) {
            subscriber.complete();
        }
    };
};
//# sourceMappingURL=subscribeToArray.js.map


/***/ }),
/* 90 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return asap; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AsapAction__ = __webpack_require__(134);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsapScheduler__ = __webpack_require__(136);
/** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */


/**
 *
 * Asap Scheduler
 *
 * <span class="informal">Perform task as fast as it can be performed asynchronously</span>
 *
 * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task
 * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing
 * code to end and then it will try to execute given task as fast as possible.
 *
 * `asap` scheduler will do its best to minimize time between end of currently executing code
 * and start of scheduled task. This makes it best candidate for performing so called "deferring".
 * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves
 * some (although minimal) unwanted delay.
 *
 * Note that using `asap` scheduler does not necessarily mean that your task will be first to process
 * after currently executing code. In particular, if some task was also scheduled with `asap` before,
 * that task will execute first. That being said, if you need to schedule task asynchronously, but
 * as soon as possible, `asap` scheduler is your best bet.
 *
 * @example <caption>Compare async and asap scheduler</caption>
 *
 * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...
 * Rx.Scheduler.asap.schedule(() => console.log('asap'));
 *
 * // Logs:
 * // "asap"
 * // "async"
 * // ... but 'asap' goes first!
 *
 * @static true
 * @name asap
 * @owner Scheduler
 */
var asap = /*@__PURE__*/ new __WEBPACK_IMPORTED_MODULE_1__AsapScheduler__["a" /* AsapScheduler */](__WEBPACK_IMPORTED_MODULE_0__AsapAction__["a" /* AsapAction */]);
//# sourceMappingURL=asap.js.map


/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TimeoutError; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */

/**
 * An error thrown when duetime elapses.
 *
 * @see {@link timeout}
 *
 * @class TimeoutError
 */
var TimeoutError = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](TimeoutError, _super);
    function TimeoutError() {
        var _this = _super.call(this, 'Timeout has occurred') || this;
        _this.name = 'TimeoutError';
        Object.setPrototypeOf(_this, TimeoutError.prototype);
        return _this;
    }
    return TimeoutError;
}(Error));

//# sourceMappingURL=TimeoutError.js.map


/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return subscribeTo; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__subscribeToArray__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__subscribeToPromise__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__subscribeToIterable__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__subscribeToObservable__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__isArrayLike__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__isPromise__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__isObject__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__symbol_iterator__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__symbol_observable__ = __webpack_require__(24);
/** PURE_IMPORTS_START _Observable,_subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */










var subscribeTo = function (result) {
    if (result instanceof __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */]) {
        return function (subscriber) {
            if (result._isScalar) {
                subscriber.next(result.value);
                subscriber.complete();
                return undefined;
            }
            else {
                return result.subscribe(subscriber);
            }
        };
    }
    else if (Object(__WEBPACK_IMPORTED_MODULE_5__isArrayLike__["a" /* isArrayLike */])(result)) {
        return Object(__WEBPACK_IMPORTED_MODULE_1__subscribeToArray__["a" /* subscribeToArray */])(result);
    }
    else if (Object(__WEBPACK_IMPORTED_MODULE_6__isPromise__["a" /* isPromise */])(result)) {
        return Object(__WEBPACK_IMPORTED_MODULE_2__subscribeToPromise__["a" /* subscribeToPromise */])(result);
    }
    else if (result && typeof result[__WEBPACK_IMPORTED_MODULE_8__symbol_iterator__["a" /* iterator */]] === 'function') {
        return Object(__WEBPACK_IMPORTED_MODULE_3__subscribeToIterable__["a" /* subscribeToIterable */])(result);
    }
    else if (result && typeof result[__WEBPACK_IMPORTED_MODULE_9__symbol_observable__["a" /* observable */]] === 'function') {
        return Object(__WEBPACK_IMPORTED_MODULE_4__subscribeToObservable__["a" /* subscribeToObservable */])(result);
    }
    else {
        var value = Object(__WEBPACK_IMPORTED_MODULE_7__isObject__["a" /* isObject */])(result) ? 'an invalid object' : "'" + result + "'";
        var msg = "You provided " + value + " where a stream was expected."
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        throw new TypeError(msg);
    }
};
//# sourceMappingURL=subscribeTo.js.map


/***/ }),
/* 93 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return subscribeToPromise; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__hostReportError__ = __webpack_require__(54);
/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */

var subscribeToPromise = function (promise) {
    return function (subscriber) {
        promise.then(function (value) {
            if (!subscriber.closed) {
                subscriber.next(value);
                subscriber.complete();
            }
        }, function (err) { return subscriber.error(err); })
            .then(null, __WEBPACK_IMPORTED_MODULE_0__hostReportError__["a" /* hostReportError */]);
        return subscriber;
    };
};
//# sourceMappingURL=subscribeToPromise.js.map


/***/ }),
/* 94 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return subscribeToIterable; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__symbol_iterator__ = __webpack_require__(33);
/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */

var subscribeToIterable = function (iterable) {
    return function (subscriber) {
        var iterator = iterable[__WEBPACK_IMPORTED_MODULE_0__symbol_iterator__["a" /* iterator */]]();
        do {
            var item = iterator.next();
            if (item.done) {
                subscriber.complete();
                break;
            }
            subscriber.next(item.value);
            if (subscriber.closed) {
                break;
            }
        } while (true);
        // Finalize the iterator if it happens to be a Generator
        if (typeof iterator.return === 'function') {
            subscriber.add(function () {
                if (iterator.return) {
                    iterator.return();
                }
            });
        }
        return subscriber;
    };
};
//# sourceMappingURL=subscribeToIterable.js.map


/***/ }),
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return subscribeToObservable; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__symbol_observable__ = __webpack_require__(24);
/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */

/**
 * Subscribes to an object that implements Symbol.observable with the given
 * Subscriber.
 * @param obj An object that implements Symbol.observable
 */
var subscribeToObservable = function (obj) {
    return function (subscriber) {
        var obs = obj[__WEBPACK_IMPORTED_MODULE_0__symbol_observable__["a" /* observable */]]();
        if (typeof obs.subscribe !== 'function') {
            // Should be caught by observable subscribe function error handling.
            throw new TypeError('Provided object does not correctly implement Symbol.observable');
        }
        else {
            return obs.subscribe(subscriber);
        }
    };
};
//# sourceMappingURL=subscribeToObservable.js.map


/***/ }),
/* 96 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isArrayLike; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });
//# sourceMappingURL=isArrayLike.js.map


/***/ }),
/* 97 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isPromise;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isPromise(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
//# sourceMappingURL=isPromise.js.map


/***/ }),
/* 98 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = concatAll;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mergeAll__ = __webpack_require__(63);
/** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */

/**
 * Converts a higher-order Observable into a first-order Observable by
 * concatenating the inner Observables in order.
 *
 * <span class="informal">Flattens an Observable-of-Observables by putting one
 * inner Observable after the other.</span>
 *
 * <img src="./img/concatAll.png" width="100%">
 *
 * Joins every Observable emitted by the source (a higher-order Observable), in
 * a serial fashion. It subscribes to each inner Observable only after the
 * previous inner Observable has completed, and merges all of their values into
 * the returned observable.
 *
 * __Warning:__ If the source Observable emits Observables quickly and
 * endlessly, and the inner Observables it emits generally complete slower than
 * the source emits, you can run into memory issues as the incoming Observables
 * collect in an unbounded buffer.
 *
 * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
 * var firstOrder = higherOrder.concatAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link combineAll}
 * @see {@link concat}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 * @see {@link exhaust}
 * @see {@link mergeAll}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @return {Observable} An Observable emitting values from all the inner
 * Observables concatenated.
 * @method concatAll
 * @owner Observable
 */
function concatAll() {
    return Object(__WEBPACK_IMPORTED_MODULE_0__mergeAll__["a" /* mergeAll */])(1);
}
//# sourceMappingURL=concatAll.js.map


/***/ }),
/* 99 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = merge;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_isScheduler__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__operators_mergeAll__ = __webpack_require__(63);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__fromArray__ = __webpack_require__(21);
/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */




/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which concurrently emits all values from every
 * given input Observable.
 *
 * <span class="informal">Flattens multiple Observables together by blending
 * their values into one Observable.</span>
 *
 * <img src="./img/merge.png" width="100%">
 *
 * `merge` subscribes to each given input Observable (as arguments), and simply
 * forwards (without doing any transformation) all the values from all the input
 * Observables to the output Observable. The output Observable only completes
 * once all input Observables have completed. Any error delivered by an input
 * Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var clicksOrTimer = Rx.Observable.merge(clicks, timer);
 * clicksOrTimer.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // timer will emit ascending values, one every second(1000ms) to console
 * // clicks logs MouseEvents to console everytime the "document" is clicked
 * // Since the two streams are merged you see these happening
 * // as they occur.
 *
 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var concurrent = 2; // the argument
 * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);
 * merged.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // - First timer1 and timer2 will run concurrently
 * // - timer1 will emit a value every 1000ms for 10 iterations
 * // - timer2 will emit a value every 2000ms for 6 iterations
 * // - after timer1 hits it's max iteration, timer2 will
 * //   continue, and timer3 will start to run concurrently with timer2
 * // - when timer2 hits it's max iteration it terminates, and
 * //   timer3 will continue to emit a value every 500ms until it is complete
 *
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 *
 * @param {...ObservableInput} observables Input Observables to merge together.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
 * concurrency of input Observables.
 * @return {Observable} an Observable that emits items that are the result of
 * every input Observable.
 * @static true
 * @name merge
 * @owner Observable
 */
function merge() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var concurrent = Number.POSITIVE_INFINITY;
    var scheduler = null;
    var last = observables[observables.length - 1];
    if (Object(__WEBPACK_IMPORTED_MODULE_1__util_isScheduler__["a" /* isScheduler */])(last)) {
        scheduler = observables.pop();
        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
            concurrent = observables.pop();
        }
    }
    else if (typeof last === 'number') {
        concurrent = observables.pop();
    }
    if (scheduler === null && observables.length === 1 && observables[0] instanceof __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */]) {
        return observables[0];
    }
    return Object(__WEBPACK_IMPORTED_MODULE_2__operators_mergeAll__["a" /* mergeAll */])(concurrent)(Object(__WEBPACK_IMPORTED_MODULE_3__fromArray__["a" /* fromArray */])(observables, scheduler));
}
//# sourceMappingURL=merge.js.map


/***/ }),
/* 100 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NEVER; });
/* harmony export (immutable) */ __webpack_exports__["b"] = never;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_noop__ = __webpack_require__(41);
/** PURE_IMPORTS_START _Observable,_util_noop PURE_IMPORTS_END */


/**
 * An Observable that emits no items to the Observer and never completes.
 *
 * <img src="./img/never.png" width="100%">
 *
 * A simple Observable that emits neither values nor errors nor the completion
 * notification. It can be used for testing purposes or for composing with other
 * Observables. Please note that by never emitting a complete notification, this
 * Observable keeps the subscription from being disposed automatically.
 * Subscriptions need to be manually disposed.
 *
 * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>
 * function info() {
 *   console.log('Will not be called');
 * }
 * var result = NEVER.startWith(7);
 * result.subscribe(x => console.log(x), info, info);
 *
 * @see {@link create}
 * @see {@link EMPTY}
 * @see {@link of}
 * @see {@link throwError}
 */
var NEVER = /*@__PURE__*/ new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](__WEBPACK_IMPORTED_MODULE_1__util_noop__["a" /* noop */]);
/**
 * @deprecated Deprecated in favor of using NEVER constant.
 */
function never() {
    return NEVER;
}
//# sourceMappingURL=never.js.map


/***/ }),
/* 101 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = race;
/* unused harmony export RaceOperator */
/* unused harmony export RaceSubscriber */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_isArray__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__fromArray__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */





function race() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    // if the only argument is an array, it was most likely called with
    // `race([obs1, obs2, ...])`
    if (observables.length === 1) {
        if (Object(__WEBPACK_IMPORTED_MODULE_1__util_isArray__["a" /* isArray */])(observables[0])) {
            observables = observables[0];
        }
        else {
            return observables[0];
        }
    }
    return Object(__WEBPACK_IMPORTED_MODULE_2__fromArray__["a" /* fromArray */])(observables, undefined).lift(new RaceOperator());
}
var RaceOperator = /*@__PURE__*/ (function () {
    function RaceOperator() {
    }
    RaceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RaceSubscriber(subscriber));
    };
    return RaceOperator;
}());

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RaceSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](RaceSubscriber, _super);
    function RaceSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasFirst = false;
        _this.observables = [];
        _this.subscriptions = [];
        return _this;
    }
    RaceSubscriber.prototype._next = function (observable) {
        this.observables.push(observable);
    };
    RaceSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            for (var i = 0; i < len && !this.hasFirst; i++) {
                var observable = observables[i];
                var subscription = Object(__WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__["a" /* subscribeToResult */])(this, observable, observable, i);
                if (this.subscriptions) {
                    this.subscriptions.push(subscription);
                }
                this.add(subscription);
            }
            this.observables = null;
        }
    };
    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (!this.hasFirst) {
            this.hasFirst = true;
            for (var i = 0; i < this.subscriptions.length; i++) {
                if (i !== outerIndex) {
                    var subscription = this.subscriptions[i];
                    subscription.unsubscribe();
                    this.remove(subscription);
                }
            }
            this.subscriptions = null;
        }
        this.destination.next(innerValue);
    };
    return RaceSubscriber;
}(__WEBPACK_IMPORTED_MODULE_3__OuterSubscriber__["a" /* OuterSubscriber */]));

//# sourceMappingURL=race.js.map


/***/ }),
/* 102 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = timer;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__scheduler_async__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isNumeric__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_isScheduler__ = __webpack_require__(15);
/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */




/**
 * Creates an Observable that starts emitting after an `initialDelay` and
 * emits ever increasing numbers after each `period` of time thereafter.
 *
 * <span class="informal">Its like {@link interval}, but you can specify when
 * should the emissions start.</span>
 *
 * <img src="./img/timer.png" width="100%">
 *
 * `timer` returns an Observable that emits an infinite sequence of ascending
 * integers, with a constant interval of time, `period` of your choosing
 * between those emissions. The first emission happens after the specified
 * `initialDelay`. The initial delay may be a {@link Date}. By default, this
 * operator uses the `async` IScheduler to provide a notion of time, but you
 * may pass any IScheduler to it. If `period` is not specified, the output
 * Observable emits only one value, `0`. Otherwise, it emits an infinite
 * sequence.
 *
 * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>
 * var numbers = Rx.Observable.timer(3000, 1000);
 * numbers.subscribe(x => console.log(x));
 *
 * @example <caption>Emits one number after five seconds</caption>
 * var numbers = Rx.Observable.timer(5000);
 * numbers.subscribe(x => console.log(x));
 *
 * @see {@link interval}
 * @see {@link delay}
 *
 * @param {number|Date} [dueTime] The initial delay time to wait before
 * emitting the first value of `0`.
 * @param {number|SchedulerLike} [periodOrScheduler] The period of time between emissions of the
 * subsequent numbers.
 * @param {SchedulerLike} [scheduler=async] The IScheduler to use for scheduling
 * the emission of values, and providing a notion of "time".
 * @return {Observable} An Observable that emits a `0` after the
 * `initialDelay` and ever increasing numbers after each `period` of time
 * thereafter.
 * @static true
 * @name timer
 * @owner Observable
 */
function timer(dueTime, periodOrScheduler, scheduler) {
    if (dueTime === void 0) {
        dueTime = 0;
    }
    var period = -1;
    if (Object(__WEBPACK_IMPORTED_MODULE_2__util_isNumeric__["a" /* isNumeric */])(periodOrScheduler)) {
        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
    }
    else if (Object(__WEBPACK_IMPORTED_MODULE_3__util_isScheduler__["a" /* isScheduler */])(periodOrScheduler)) {
        scheduler = periodOrScheduler;
    }
    if (!Object(__WEBPACK_IMPORTED_MODULE_3__util_isScheduler__["a" /* isScheduler */])(scheduler)) {
        scheduler = __WEBPACK_IMPORTED_MODULE_1__scheduler_async__["a" /* async */];
    }
    return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
        var due = Object(__WEBPACK_IMPORTED_MODULE_2__util_isNumeric__["a" /* isNumeric */])(dueTime)
            ? dueTime
            : (+dueTime - scheduler.now());
        return scheduler.schedule(dispatch, due, {
            index: 0, period: period, subscriber: subscriber
        });
    });
}
function dispatch(state) {
    var index = state.index, period = state.period, subscriber = state.subscriber;
    subscriber.next(index);
    if (subscriber.closed) {
        return;
    }
    else if (period === -1) {
        return subscriber.complete();
    }
    state.index = index + 1;
    this.schedule(state, period);
}
//# sourceMappingURL=timer.js.map


/***/ }),
/* 103 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_103__;

/***/ }),
/* 104 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_operators_audit__ = __webpack_require__(105);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "audit", function() { return __WEBPACK_IMPORTED_MODULE_0__internal_operators_audit__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_operators_auditTime__ = __webpack_require__(160);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "auditTime", function() { return __WEBPACK_IMPORTED_MODULE_1__internal_operators_auditTime__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_operators_buffer__ = __webpack_require__(161);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "buffer", function() { return __WEBPACK_IMPORTED_MODULE_2__internal_operators_buffer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_operators_bufferCount__ = __webpack_require__(162);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "bufferCount", function() { return __WEBPACK_IMPORTED_MODULE_3__internal_operators_bufferCount__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__internal_operators_bufferTime__ = __webpack_require__(163);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "bufferTime", function() { return __WEBPACK_IMPORTED_MODULE_4__internal_operators_bufferTime__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__internal_operators_bufferToggle__ = __webpack_require__(164);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "bufferToggle", function() { return __WEBPACK_IMPORTED_MODULE_5__internal_operators_bufferToggle__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__internal_operators_bufferWhen__ = __webpack_require__(165);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "bufferWhen", function() { return __WEBPACK_IMPORTED_MODULE_6__internal_operators_bufferWhen__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__internal_operators_catchError__ = __webpack_require__(166);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "catchError", function() { return __WEBPACK_IMPORTED_MODULE_7__internal_operators_catchError__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__internal_operators_combineAll__ = __webpack_require__(167);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "combineAll", function() { return __WEBPACK_IMPORTED_MODULE_8__internal_operators_combineAll__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__internal_operators_combineLatest__ = __webpack_require__(168);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "combineLatest", function() { return __WEBPACK_IMPORTED_MODULE_9__internal_operators_combineLatest__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__internal_operators_concat__ = __webpack_require__(169);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "concat", function() { return __WEBPACK_IMPORTED_MODULE_10__internal_operators_concat__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__internal_operators_concatAll__ = __webpack_require__(98);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "concatAll", function() { return __WEBPACK_IMPORTED_MODULE_11__internal_operators_concatAll__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__internal_operators_concatMap__ = __webpack_require__(106);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "concatMap", function() { return __WEBPACK_IMPORTED_MODULE_12__internal_operators_concatMap__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__internal_operators_concatMapTo__ = __webpack_require__(170);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "concatMapTo", function() { return __WEBPACK_IMPORTED_MODULE_13__internal_operators_concatMapTo__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__internal_operators_count__ = __webpack_require__(171);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "count", function() { return __WEBPACK_IMPORTED_MODULE_14__internal_operators_count__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__internal_operators_debounce__ = __webpack_require__(172);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "debounce", function() { return __WEBPACK_IMPORTED_MODULE_15__internal_operators_debounce__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__internal_operators_debounceTime__ = __webpack_require__(173);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "debounceTime", function() { return __WEBPACK_IMPORTED_MODULE_16__internal_operators_debounceTime__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__internal_operators_defaultIfEmpty__ = __webpack_require__(35);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "defaultIfEmpty", function() { return __WEBPACK_IMPORTED_MODULE_17__internal_operators_defaultIfEmpty__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__internal_operators_delay__ = __webpack_require__(174);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "delay", function() { return __WEBPACK_IMPORTED_MODULE_18__internal_operators_delay__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__internal_operators_delayWhen__ = __webpack_require__(175);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "delayWhen", function() { return __WEBPACK_IMPORTED_MODULE_19__internal_operators_delayWhen__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__internal_operators_dematerialize__ = __webpack_require__(176);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "dematerialize", function() { return __WEBPACK_IMPORTED_MODULE_20__internal_operators_dematerialize__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__internal_operators_distinct__ = __webpack_require__(177);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "distinct", function() { return __WEBPACK_IMPORTED_MODULE_21__internal_operators_distinct__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__internal_operators_distinctUntilChanged__ = __webpack_require__(108);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "distinctUntilChanged", function() { return __WEBPACK_IMPORTED_MODULE_22__internal_operators_distinctUntilChanged__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__internal_operators_distinctUntilKeyChanged__ = __webpack_require__(178);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "distinctUntilKeyChanged", function() { return __WEBPACK_IMPORTED_MODULE_23__internal_operators_distinctUntilKeyChanged__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__internal_operators_elementAt__ = __webpack_require__(179);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "elementAt", function() { return __WEBPACK_IMPORTED_MODULE_24__internal_operators_elementAt__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__internal_operators_endWith__ = __webpack_require__(180);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "endWith", function() { return __WEBPACK_IMPORTED_MODULE_25__internal_operators_endWith__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__internal_operators_every__ = __webpack_require__(181);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "every", function() { return __WEBPACK_IMPORTED_MODULE_26__internal_operators_every__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__internal_operators_exhaust__ = __webpack_require__(182);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "exhaust", function() { return __WEBPACK_IMPORTED_MODULE_27__internal_operators_exhaust__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__internal_operators_exhaustMap__ = __webpack_require__(183);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "exhaustMap", function() { return __WEBPACK_IMPORTED_MODULE_28__internal_operators_exhaustMap__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__internal_operators_expand__ = __webpack_require__(184);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "expand", function() { return __WEBPACK_IMPORTED_MODULE_29__internal_operators_expand__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__internal_operators_filter__ = __webpack_require__(36);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "filter", function() { return __WEBPACK_IMPORTED_MODULE_30__internal_operators_filter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__internal_operators_finalize__ = __webpack_require__(185);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "finalize", function() { return __WEBPACK_IMPORTED_MODULE_31__internal_operators_finalize__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__internal_operators_find__ = __webpack_require__(110);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "find", function() { return __WEBPACK_IMPORTED_MODULE_32__internal_operators_find__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__internal_operators_findIndex__ = __webpack_require__(186);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "findIndex", function() { return __WEBPACK_IMPORTED_MODULE_33__internal_operators_findIndex__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__internal_operators_first__ = __webpack_require__(187);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "first", function() { return __WEBPACK_IMPORTED_MODULE_34__internal_operators_first__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__internal_operators_groupBy__ = __webpack_require__(84);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "groupBy", function() { return __WEBPACK_IMPORTED_MODULE_35__internal_operators_groupBy__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__internal_operators_ignoreElements__ = __webpack_require__(188);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ignoreElements", function() { return __WEBPACK_IMPORTED_MODULE_36__internal_operators_ignoreElements__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__internal_operators_isEmpty__ = __webpack_require__(189);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isEmpty", function() { return __WEBPACK_IMPORTED_MODULE_37__internal_operators_isEmpty__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__internal_operators_last__ = __webpack_require__(190);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "last", function() { return __WEBPACK_IMPORTED_MODULE_38__internal_operators_last__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__internal_operators_map__ = __webpack_require__(16);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "map", function() { return __WEBPACK_IMPORTED_MODULE_39__internal_operators_map__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__internal_operators_mapTo__ = __webpack_require__(191);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "mapTo", function() { return __WEBPACK_IMPORTED_MODULE_40__internal_operators_mapTo__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__internal_operators_materialize__ = __webpack_require__(192);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "materialize", function() { return __WEBPACK_IMPORTED_MODULE_41__internal_operators_materialize__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__internal_operators_max__ = __webpack_require__(193);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "max", function() { return __WEBPACK_IMPORTED_MODULE_42__internal_operators_max__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__internal_operators_merge__ = __webpack_require__(194);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "merge", function() { return __WEBPACK_IMPORTED_MODULE_43__internal_operators_merge__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__internal_operators_mergeAll__ = __webpack_require__(63);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "mergeAll", function() { return __WEBPACK_IMPORTED_MODULE_44__internal_operators_mergeAll__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_45__internal_operators_mergeMap__ = __webpack_require__(34);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "mergeMap", function() { return __WEBPACK_IMPORTED_MODULE_45__internal_operators_mergeMap__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "flatMap", function() { return __WEBPACK_IMPORTED_MODULE_45__internal_operators_mergeMap__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_46__internal_operators_mergeMapTo__ = __webpack_require__(195);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "mergeMapTo", function() { return __WEBPACK_IMPORTED_MODULE_46__internal_operators_mergeMapTo__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_47__internal_operators_mergeScan__ = __webpack_require__(196);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "mergeScan", function() { return __WEBPACK_IMPORTED_MODULE_47__internal_operators_mergeScan__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_48__internal_operators_min__ = __webpack_require__(197);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "min", function() { return __WEBPACK_IMPORTED_MODULE_48__internal_operators_min__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_49__internal_operators_multicast__ = __webpack_require__(26);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "multicast", function() { return __WEBPACK_IMPORTED_MODULE_49__internal_operators_multicast__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_50__internal_operators_observeOn__ = __webpack_require__(88);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "observeOn", function() { return __WEBPACK_IMPORTED_MODULE_50__internal_operators_observeOn__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_51__internal_operators_onErrorResumeNext__ = __webpack_require__(198);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "onErrorResumeNext", function() { return __WEBPACK_IMPORTED_MODULE_51__internal_operators_onErrorResumeNext__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_52__internal_operators_pairwise__ = __webpack_require__(199);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "pairwise", function() { return __WEBPACK_IMPORTED_MODULE_52__internal_operators_pairwise__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_53__internal_operators_partition__ = __webpack_require__(200);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "partition", function() { return __WEBPACK_IMPORTED_MODULE_53__internal_operators_partition__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_54__internal_operators_pluck__ = __webpack_require__(202);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "pluck", function() { return __WEBPACK_IMPORTED_MODULE_54__internal_operators_pluck__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_55__internal_operators_publish__ = __webpack_require__(203);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "publish", function() { return __WEBPACK_IMPORTED_MODULE_55__internal_operators_publish__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_56__internal_operators_publishBehavior__ = __webpack_require__(204);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "publishBehavior", function() { return __WEBPACK_IMPORTED_MODULE_56__internal_operators_publishBehavior__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_57__internal_operators_publishLast__ = __webpack_require__(205);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "publishLast", function() { return __WEBPACK_IMPORTED_MODULE_57__internal_operators_publishLast__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_58__internal_operators_publishReplay__ = __webpack_require__(206);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "publishReplay", function() { return __WEBPACK_IMPORTED_MODULE_58__internal_operators_publishReplay__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_59__internal_operators_race__ = __webpack_require__(207);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "race", function() { return __WEBPACK_IMPORTED_MODULE_59__internal_operators_race__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_60__internal_operators_reduce__ = __webpack_require__(48);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "reduce", function() { return __WEBPACK_IMPORTED_MODULE_60__internal_operators_reduce__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_61__internal_operators_repeat__ = __webpack_require__(208);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "repeat", function() { return __WEBPACK_IMPORTED_MODULE_61__internal_operators_repeat__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_62__internal_operators_repeatWhen__ = __webpack_require__(209);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "repeatWhen", function() { return __WEBPACK_IMPORTED_MODULE_62__internal_operators_repeatWhen__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_63__internal_operators_retry__ = __webpack_require__(210);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "retry", function() { return __WEBPACK_IMPORTED_MODULE_63__internal_operators_retry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_64__internal_operators_retryWhen__ = __webpack_require__(211);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "retryWhen", function() { return __WEBPACK_IMPORTED_MODULE_64__internal_operators_retryWhen__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_65__internal_operators_refCount__ = __webpack_require__(57);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "refCount", function() { return __WEBPACK_IMPORTED_MODULE_65__internal_operators_refCount__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_66__internal_operators_sample__ = __webpack_require__(212);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "sample", function() { return __WEBPACK_IMPORTED_MODULE_66__internal_operators_sample__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_67__internal_operators_sampleTime__ = __webpack_require__(213);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "sampleTime", function() { return __WEBPACK_IMPORTED_MODULE_67__internal_operators_sampleTime__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_68__internal_operators_scan__ = __webpack_require__(68);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "scan", function() { return __WEBPACK_IMPORTED_MODULE_68__internal_operators_scan__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_69__internal_operators_sequenceEqual__ = __webpack_require__(214);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "sequenceEqual", function() { return __WEBPACK_IMPORTED_MODULE_69__internal_operators_sequenceEqual__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_70__internal_operators_share__ = __webpack_require__(215);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "share", function() { return __WEBPACK_IMPORTED_MODULE_70__internal_operators_share__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_71__internal_operators_shareReplay__ = __webpack_require__(216);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "shareReplay", function() { return __WEBPACK_IMPORTED_MODULE_71__internal_operators_shareReplay__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_72__internal_operators_single__ = __webpack_require__(217);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "single", function() { return __WEBPACK_IMPORTED_MODULE_72__internal_operators_single__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_73__internal_operators_skip__ = __webpack_require__(218);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "skip", function() { return __WEBPACK_IMPORTED_MODULE_73__internal_operators_skip__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_74__internal_operators_skipLast__ = __webpack_require__(219);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "skipLast", function() { return __WEBPACK_IMPORTED_MODULE_74__internal_operators_skipLast__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_75__internal_operators_skipUntil__ = __webpack_require__(220);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "skipUntil", function() { return __WEBPACK_IMPORTED_MODULE_75__internal_operators_skipUntil__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_76__internal_operators_skipWhile__ = __webpack_require__(221);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "skipWhile", function() { return __WEBPACK_IMPORTED_MODULE_76__internal_operators_skipWhile__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_77__internal_operators_startWith__ = __webpack_require__(222);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "startWith", function() { return __WEBPACK_IMPORTED_MODULE_77__internal_operators_startWith__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_78__internal_operators_subscribeOn__ = __webpack_require__(223);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "subscribeOn", function() { return __WEBPACK_IMPORTED_MODULE_78__internal_operators_subscribeOn__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_79__internal_operators_switchAll__ = __webpack_require__(225);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "switchAll", function() { return __WEBPACK_IMPORTED_MODULE_79__internal_operators_switchAll__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_80__internal_operators_switchMap__ = __webpack_require__(69);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "switchMap", function() { return __WEBPACK_IMPORTED_MODULE_80__internal_operators_switchMap__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_81__internal_operators_switchMapTo__ = __webpack_require__(226);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "switchMapTo", function() { return __WEBPACK_IMPORTED_MODULE_81__internal_operators_switchMapTo__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_82__internal_operators_take__ = __webpack_require__(66);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "take", function() { return __WEBPACK_IMPORTED_MODULE_82__internal_operators_take__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_83__internal_operators_takeLast__ = __webpack_require__(67);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "takeLast", function() { return __WEBPACK_IMPORTED_MODULE_83__internal_operators_takeLast__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_84__internal_operators_takeUntil__ = __webpack_require__(227);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "takeUntil", function() { return __WEBPACK_IMPORTED_MODULE_84__internal_operators_takeUntil__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_85__internal_operators_takeWhile__ = __webpack_require__(228);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "takeWhile", function() { return __WEBPACK_IMPORTED_MODULE_85__internal_operators_takeWhile__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_86__internal_operators_tap__ = __webpack_require__(109);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "tap", function() { return __WEBPACK_IMPORTED_MODULE_86__internal_operators_tap__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_87__internal_operators_throttle__ = __webpack_require__(111);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "throttle", function() { return __WEBPACK_IMPORTED_MODULE_87__internal_operators_throttle__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_88__internal_operators_throttleTime__ = __webpack_require__(229);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "throttleTime", function() { return __WEBPACK_IMPORTED_MODULE_88__internal_operators_throttleTime__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_89__internal_operators_throwIfEmpty__ = __webpack_require__(47);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "throwIfEmpty", function() { return __WEBPACK_IMPORTED_MODULE_89__internal_operators_throwIfEmpty__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_90__internal_operators_timeInterval__ = __webpack_require__(230);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "timeInterval", function() { return __WEBPACK_IMPORTED_MODULE_90__internal_operators_timeInterval__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_91__internal_operators_timeout__ = __webpack_require__(231);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "timeout", function() { return __WEBPACK_IMPORTED_MODULE_91__internal_operators_timeout__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_92__internal_operators_timeoutWith__ = __webpack_require__(112);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "timeoutWith", function() { return __WEBPACK_IMPORTED_MODULE_92__internal_operators_timeoutWith__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_93__internal_operators_timestamp__ = __webpack_require__(232);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "timestamp", function() { return __WEBPACK_IMPORTED_MODULE_93__internal_operators_timestamp__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_94__internal_operators_toArray__ = __webpack_require__(233);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "toArray", function() { return __WEBPACK_IMPORTED_MODULE_94__internal_operators_toArray__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_95__internal_operators_window__ = __webpack_require__(234);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "window", function() { return __WEBPACK_IMPORTED_MODULE_95__internal_operators_window__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_96__internal_operators_windowCount__ = __webpack_require__(235);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "windowCount", function() { return __WEBPACK_IMPORTED_MODULE_96__internal_operators_windowCount__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_97__internal_operators_windowTime__ = __webpack_require__(236);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "windowTime", function() { return __WEBPACK_IMPORTED_MODULE_97__internal_operators_windowTime__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_98__internal_operators_windowToggle__ = __webpack_require__(237);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "windowToggle", function() { return __WEBPACK_IMPORTED_MODULE_98__internal_operators_windowToggle__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_99__internal_operators_windowWhen__ = __webpack_require__(238);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "windowWhen", function() { return __WEBPACK_IMPORTED_MODULE_99__internal_operators_windowWhen__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_100__internal_operators_withLatestFrom__ = __webpack_require__(239);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "withLatestFrom", function() { return __WEBPACK_IMPORTED_MODULE_100__internal_operators_withLatestFrom__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_101__internal_operators_zip__ = __webpack_require__(240);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "zip", function() { return __WEBPACK_IMPORTED_MODULE_101__internal_operators_zip__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_102__internal_operators_zipAll__ = __webpack_require__(241);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "zipAll", function() { return __WEBPACK_IMPORTED_MODULE_102__internal_operators_zipAll__["a"]; });
/* Operator exports */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */








































































































//# sourceMappingURL=index.js.map


/***/ }),
/* 105 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = audit;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_tryCatch__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_errorObject__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */





/**
 * Ignores source values for a duration determined by another Observable, then
 * emits the most recent value from the source Observable, then repeats this
 * process.
 *
 * <span class="informal">It's like {@link auditTime}, but the silencing
 * duration is determined by a second Observable.</span>
 *
 * <img src="./img/audit.png" width="100%">
 *
 * `audit` is similar to `throttle`, but emits the last value from the silenced
 * time window, instead of the first value. `audit` emits the most recent value
 * from the source Observable on the output Observable as soon as its internal
 * timer becomes disabled, and ignores source values while the timer is enabled.
 * Initially, the timer is disabled. As soon as the first source value arrives,
 * the timer is enabled by calling the `durationSelector` function with the
 * source value, which returns the "duration" Observable. When the duration
 * Observable emits a value or completes, the timer is disabled, then the most
 * recent source value is emitted on the output Observable, and this process
 * repeats for the next source value.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.audit(ev => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounce}
 * @see {@link delayWhen}
 * @see {@link sample}
 * @see {@link throttle}
 *
 * @param {function(value: T): SubscribableOrPromise} durationSelector A function
 * that receives a value from the source Observable, for computing the silencing
 * duration, returned as an Observable or a Promise.
 * @return {Observable<T>} An Observable that performs rate-limiting of
 * emissions from the source Observable.
 * @method audit
 * @owner Observable
 */
function audit(durationSelector) {
    return function auditOperatorFunction(source) {
        return source.lift(new AuditOperator(durationSelector));
    };
}
var AuditOperator = /*@__PURE__*/ (function () {
    function AuditOperator(durationSelector) {
        this.durationSelector = durationSelector;
    }
    AuditOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
    };
    return AuditOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AuditSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](AuditSubscriber, _super);
    function AuditSubscriber(destination, durationSelector) {
        var _this = _super.call(this, destination) || this;
        _this.durationSelector = durationSelector;
        _this.hasValue = false;
        return _this;
    }
    AuditSubscriber.prototype._next = function (value) {
        this.value = value;
        this.hasValue = true;
        if (!this.throttled) {
            var duration = Object(__WEBPACK_IMPORTED_MODULE_1__util_tryCatch__["a" /* tryCatch */])(this.durationSelector)(value);
            if (duration === __WEBPACK_IMPORTED_MODULE_2__util_errorObject__["a" /* errorObject */]) {
                this.destination.error(__WEBPACK_IMPORTED_MODULE_2__util_errorObject__["a" /* errorObject */].e);
            }
            else {
                var innerSubscription = Object(__WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__["a" /* subscribeToResult */])(this, duration);
                if (!innerSubscription || innerSubscription.closed) {
                    this.clearThrottle();
                }
                else {
                    this.add(this.throttled = innerSubscription);
                }
            }
        }
    };
    AuditSubscriber.prototype.clearThrottle = function () {
        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
        if (throttled) {
            this.remove(throttled);
            this.throttled = null;
            throttled.unsubscribe();
        }
        if (hasValue) {
            this.value = null;
            this.hasValue = false;
            this.destination.next(value);
        }
    };
    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
        this.clearThrottle();
    };
    AuditSubscriber.prototype.notifyComplete = function () {
        this.clearThrottle();
    };
    return AuditSubscriber;
}(__WEBPACK_IMPORTED_MODULE_3__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=audit.js.map


/***/ }),
/* 106 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = concatMap;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mergeMap__ = __webpack_require__(34);
/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */

/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable, in a serialized fashion waiting for each one to complete before
 * merging the next.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link concatAll}.</span>
 *
 * <img src="./img/concatMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. Each new inner Observable is
 * concatenated with the previous inner Observable.
 *
 * __Warning:__ if source values arrive endlessly and faster than their
 * corresponding inner Observables can complete, it will result in memory issues
 * as inner Observables amass in an unbounded buffer waiting for their turn to
 * be subscribed to.
 *
 * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link concat}
 * @see {@link concatAll}
 * @see {@link concatMapTo}
 * @see {@link exhaustMap}
 * @see {@link mergeMap}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and taking values from each projected inner
 * Observable sequentially.
 * @method concatMap
 * @owner Observable
 */
function concatMap(project, resultSelector) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__mergeMap__["a" /* mergeMap */])(project, resultSelector, 1);
}
//# sourceMappingURL=concatMap.js.map


/***/ }),
/* 107 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isDate;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isDate(value) {
    return value instanceof Date && !isNaN(+value);
}
//# sourceMappingURL=isDate.js.map


/***/ }),
/* 108 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = distinctUntilChanged;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_tryCatch__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_errorObject__ = __webpack_require__(14);
/** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */




/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.
 *
 * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
 *
 * If a comparator function is not provided, an equality check is used by default.
 *
 * @example <caption>A simple example with numbers</caption>
 * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)
 *   .distinctUntilChanged()
 *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4
 *
 * @example <caption>An example using a compare function</caption>
 * interface Person {
 *    age: number,
 *    name: string
 * }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'})
 *     { age: 6, name: 'Foo'})
 *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo' }
 *
 * @see {@link distinct}
 * @see {@link distinctUntilKeyChanged}
 *
 * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values.
 * @method distinctUntilChanged
 * @owner Observable
 */
function distinctUntilChanged(compare, keySelector) {
    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };
}
var DistinctUntilChangedOperator = /*@__PURE__*/ (function () {
    function DistinctUntilChangedOperator(compare, keySelector) {
        this.compare = compare;
        this.keySelector = keySelector;
    }
    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
    };
    return DistinctUntilChangedOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](DistinctUntilChangedSubscriber, _super);
    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.hasKey = false;
        if (typeof compare === 'function') {
            _this.compare = compare;
        }
        return _this;
    }
    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
        return x === y;
    };
    DistinctUntilChangedSubscriber.prototype._next = function (value) {
        var keySelector = this.keySelector;
        var key = value;
        if (keySelector) {
            key = Object(__WEBPACK_IMPORTED_MODULE_2__util_tryCatch__["a" /* tryCatch */])(this.keySelector)(value);
            if (key === __WEBPACK_IMPORTED_MODULE_3__util_errorObject__["a" /* errorObject */]) {
                return this.destination.error(__WEBPACK_IMPORTED_MODULE_3__util_errorObject__["a" /* errorObject */].e);
            }
        }
        var result = false;
        if (this.hasKey) {
            result = Object(__WEBPACK_IMPORTED_MODULE_2__util_tryCatch__["a" /* tryCatch */])(this.compare)(this.key, key);
            if (result === __WEBPACK_IMPORTED_MODULE_3__util_errorObject__["a" /* errorObject */]) {
                return this.destination.error(__WEBPACK_IMPORTED_MODULE_3__util_errorObject__["a" /* errorObject */].e);
            }
        }
        else {
            this.hasKey = true;
        }
        if (Boolean(result) === false) {
            this.key = key;
            this.destination.next(value);
        }
    };
    return DistinctUntilChangedSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=distinctUntilChanged.js.map


/***/ }),
/* 109 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = tap;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_noop__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_isFunction__ = __webpack_require__(28);
/** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */




/* tslint:enable:max-line-length */
/**
 * Perform a side effect for every emission on the source Observable, but return
 * an Observable that is identical to the source.
 *
 * <span class="informal">Intercepts each emission on the source and runs a
 * function, but returns an output which is identical to the source as long as errors don't occur.</span>
 *
 * <img src="./img/do.png" width="100%">
 *
 * Returns a mirrored Observable of the source Observable, but modified so that
 * the provided Observer is called to perform a side effect for every value,
 * error, and completion emitted by the source. Any errors that are thrown in
 * the aforementioned Observer or handlers are safely sent down the error path
 * of the output Observable.
 *
 * This operator is useful for debugging your Observables for the correct values
 * or performing other side effects.
 *
 * Note: this is different to a `subscribe` on the Observable. If the Observable
 * returned by `do` is not subscribed, the side effects specified by the
 * Observer will never happen. `do` therefore simply spies on existing
 * execution, it does not trigger an execution to happen like `subscribe` does.
 *
 * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks
 *   .do(ev => console.log(ev))
 *   .map(ev => ev.clientX);
 * positions.subscribe(x => console.log(x));
 *
 * @see {@link map}
 * @see {@link subscribe}
 *
 * @param {Observer|function} [nextOrObserver] A normal Observer object or a
 * callback for `next`.
 * @param {function} [error] Callback for errors in the source.
 * @param {function} [complete] Callback for the completion of the source.
 * @return {Observable} An Observable identical to the source, but runs the
 * specified Observer or callback(s) for each item.
 * @name tap
 */
function tap(nextOrObserver, error, complete) {
    return function tapOperatorFunction(source) {
        return source.lift(new DoOperator(nextOrObserver, error, complete));
    };
}
var DoOperator = /*@__PURE__*/ (function () {
    function DoOperator(nextOrObserver, error, complete) {
        this.nextOrObserver = nextOrObserver;
        this.error = error;
        this.complete = complete;
    }
    DoOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
    };
    return DoOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TapSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](TapSubscriber, _super);
    function TapSubscriber(destination, observerOrNext, error, complete) {
        var _this = _super.call(this, destination) || this;
        _this._tapNext = __WEBPACK_IMPORTED_MODULE_2__util_noop__["a" /* noop */];
        _this._tapError = __WEBPACK_IMPORTED_MODULE_2__util_noop__["a" /* noop */];
        _this._tapComplete = __WEBPACK_IMPORTED_MODULE_2__util_noop__["a" /* noop */];
        _this._tapError = error || __WEBPACK_IMPORTED_MODULE_2__util_noop__["a" /* noop */];
        _this._tapComplete = complete || __WEBPACK_IMPORTED_MODULE_2__util_noop__["a" /* noop */];
        if (Object(__WEBPACK_IMPORTED_MODULE_3__util_isFunction__["a" /* isFunction */])(observerOrNext)) {
            _this._context = _this;
            _this._tapNext = observerOrNext;
        }
        else if (observerOrNext) {
            _this._context = observerOrNext;
            _this._tapNext = observerOrNext.next || __WEBPACK_IMPORTED_MODULE_2__util_noop__["a" /* noop */];
            _this._tapError = observerOrNext.error || __WEBPACK_IMPORTED_MODULE_2__util_noop__["a" /* noop */];
            _this._tapComplete = observerOrNext.complete || __WEBPACK_IMPORTED_MODULE_2__util_noop__["a" /* noop */];
        }
        return _this;
    }
    TapSubscriber.prototype._next = function (value) {
        try {
            this._tapNext.call(this._context, value);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(value);
    };
    TapSubscriber.prototype._error = function (err) {
        try {
            this._tapError.call(this._context, err);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.error(err);
    };
    TapSubscriber.prototype._complete = function () {
        try {
            this._tapComplete.call(this._context);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        return this.destination.complete();
    };
    return TapSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=tap.js.map


/***/ }),
/* 110 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = find;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FindValueOperator; });
/* unused harmony export FindValueSubscriber */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/**
 * Emits only the first value emitted by the source Observable that meets some
 * condition.
 *
 * <span class="informal">Finds the first value that passes some test and emits
 * that.</span>
 *
 * <img src="./img/find.png" width="100%">
 *
 * `find` searches for the first item in the source Observable that matches the
 * specified condition embodied by the `predicate`, and returns the first
 * occurrence in the source. Unlike {@link first}, the `predicate` is required
 * in `find`, and does not emit an error if a valid value is not found.
 *
 * @example <caption>Find and emit the first click that happens on a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.find(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link first}
 * @see {@link findIndex}
 * @see {@link take}
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate
 * A function called with each item to test for condition matching.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable<T>} An Observable of the first item that matches the
 * condition.
 * @method find
 * @owner Observable
 */
function find(predicate, thisArg) {
    if (typeof predicate !== 'function') {
        throw new TypeError('predicate is not a function');
    }
    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };
}
var FindValueOperator = /*@__PURE__*/ (function () {
    function FindValueOperator(predicate, source, yieldIndex, thisArg) {
        this.predicate = predicate;
        this.source = source;
        this.yieldIndex = yieldIndex;
        this.thisArg = thisArg;
    }
    FindValueOperator.prototype.call = function (observer, source) {
        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
    };
    return FindValueOperator;
}());

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FindValueSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](FindValueSubscriber, _super);
    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.source = source;
        _this.yieldIndex = yieldIndex;
        _this.thisArg = thisArg;
        _this.index = 0;
        return _this;
    }
    FindValueSubscriber.prototype.notifyComplete = function (value) {
        var destination = this.destination;
        destination.next(value);
        destination.complete();
    };
    FindValueSubscriber.prototype._next = function (value) {
        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;
        var index = this.index++;
        try {
            var result = predicate.call(thisArg || this, value, index, this.source);
            if (result) {
                this.notifyComplete(this.yieldIndex ? index : value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    FindValueSubscriber.prototype._complete = function () {
        this.notifyComplete(this.yieldIndex ? -1 : undefined);
    };
    return FindValueSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));

//# sourceMappingURL=find.js.map


/***/ }),
/* 111 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return defaultThrottleConfig; });
/* harmony export (immutable) */ __webpack_exports__["b"] = throttle;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */



var defaultThrottleConfig = {
    leading: true,
    trailing: false
};
/**
 * Emits a value from the source Observable, then ignores subsequent source
 * values for a duration determined by another Observable, then repeats this
 * process.
 *
 * <span class="informal">It's like {@link throttleTime}, but the silencing
 * duration is determined by a second Observable.</span>
 *
 * <img src="./img/throttle.png" width="100%">
 *
 * `throttle` emits the source Observable values on the output Observable
 * when its internal timer is disabled, and ignores source values when the timer
 * is enabled. Initially, the timer is disabled. As soon as the first source
 * value arrives, it is forwarded to the output Observable, and then the timer
 * is enabled by calling the `durationSelector` function with the source value,
 * which returns the "duration" Observable. When the duration Observable emits a
 * value or completes, the timer is disabled, and this process repeats for the
 * next source value.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.throttle(ev => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounce}
 * @see {@link delayWhen}
 * @see {@link sample}
 * @see {@link throttleTime}
 *
 * @param {function(value: T): SubscribableOrPromise} durationSelector A function
 * that receives a value from the source Observable, for computing the silencing
 * duration for each source value, returned as an Observable or a Promise.
 * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults
 * to `{ leading: true, trailing: false }`.
 * @return {Observable<T>} An Observable that performs the throttle operation to
 * limit the rate of emissions from the source.
 * @method throttle
 * @owner Observable
 */
function throttle(durationSelector, config) {
    if (config === void 0) {
        config = defaultThrottleConfig;
    }
    return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };
}
var ThrottleOperator = /*@__PURE__*/ (function () {
    function ThrottleOperator(durationSelector, leading, trailing) {
        this.durationSelector = durationSelector;
        this.leading = leading;
        this.trailing = trailing;
    }
    ThrottleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));
    };
    return ThrottleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc
 * @ignore
 * @extends {Ignored}
 */
var ThrottleSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ThrottleSubscriber, _super);
    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.durationSelector = durationSelector;
        _this._leading = _leading;
        _this._trailing = _trailing;
        _this._hasValue = false;
        return _this;
    }
    ThrottleSubscriber.prototype._next = function (value) {
        this._hasValue = true;
        this._sendValue = value;
        if (!this._throttled) {
            if (this._leading) {
                this.send();
            }
            else {
                this.throttle(value);
            }
        }
    };
    ThrottleSubscriber.prototype.send = function () {
        var _a = this, _hasValue = _a._hasValue, _sendValue = _a._sendValue;
        if (_hasValue) {
            this.destination.next(_sendValue);
            this.throttle(_sendValue);
        }
        this._hasValue = false;
        this._sendValue = null;
    };
    ThrottleSubscriber.prototype.throttle = function (value) {
        var duration = this.tryDurationSelector(value);
        if (duration) {
            this.add(this._throttled = Object(__WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__["a" /* subscribeToResult */])(this, duration));
        }
    };
    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
        try {
            return this.durationSelector(value);
        }
        catch (err) {
            this.destination.error(err);
            return null;
        }
    };
    ThrottleSubscriber.prototype.throttlingDone = function () {
        var _a = this, _throttled = _a._throttled, _trailing = _a._trailing;
        if (_throttled) {
            _throttled.unsubscribe();
        }
        this._throttled = null;
        if (_trailing) {
            this.send();
        }
    };
    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.throttlingDone();
    };
    ThrottleSubscriber.prototype.notifyComplete = function () {
        this.throttlingDone();
    };
    return ThrottleSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=throttle.js.map


/***/ }),
/* 112 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = timeoutWith;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__scheduler_async__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isDate__ = __webpack_require__(107);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */





/* tslint:enable:max-line-length */
/**
 *
 * Errors if Observable does not emit a value in given time span, in case of which
 * subscribes to the second Observable.
 *
 * <span class="informal">It's a version of `timeout` operator that let's you specify fallback Observable.</span>
 *
 * <img src="./img/timeoutWith.png" width="100%">
 *
 * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,
 * still accepting as a first argument either a number or a Date, which control - respectively -
 * when values of source Observable should be emitted or when it should complete.
 *
 * The only difference is that it accepts a second, required parameter. This parameter
 * should be an Observable which will be subscribed when source Observable fails any timeout check.
 * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting
 * values from second Observable. Note that this fallback Observable is not checked for timeouts
 * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second
 * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that
 * stream completes, it completes as well.
 *
 * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided
 * here - as a third, optional parameter. It still is used to schedule timeout checks and -
 * as a consequence - when second Observable will be subscribed, since subscription happens
 * immediately after failing check.
 *
 * @example <caption>Add fallback observable</caption>
 * const seconds = Rx.Observable.interval(1000);
 * const minutes = Rx.Observable.interval(60 * 1000);
 *
 * seconds.timeoutWith(900, minutes)
 *     .subscribe(
 *         value => console.log(value), // After 900ms, will start emitting `minutes`,
 *                                      // since first value of `seconds` will not arrive fast enough.
 *         err => console.log(err) // Would be called after 900ms in case of `timeout`,
 *                                 // but here will never be called.
 *     );
 *
 * @param {number|Date} due Number specifying period within which Observable must emit values
 *                          or Date specifying before when Observable should complete
 * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.
 * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.
 * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable
 *                          passed as a second parameter.
 * @method timeoutWith
 * @owner Observable
 */
function timeoutWith(due, withObservable, scheduler) {
    if (scheduler === void 0) {
        scheduler = __WEBPACK_IMPORTED_MODULE_1__scheduler_async__["a" /* async */];
    }
    return function (source) {
        var absoluteTimeout = Object(__WEBPACK_IMPORTED_MODULE_2__util_isDate__["a" /* isDate */])(due);
        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);
        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
    };
}
var TimeoutWithOperator = /*@__PURE__*/ (function () {
    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
        this.waitFor = waitFor;
        this.absoluteTimeout = absoluteTimeout;
        this.withObservable = withObservable;
        this.scheduler = scheduler;
    }
    TimeoutWithOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
    };
    return TimeoutWithOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TimeoutWithSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](TimeoutWithSubscriber, _super);
    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.absoluteTimeout = absoluteTimeout;
        _this.waitFor = waitFor;
        _this.withObservable = withObservable;
        _this.scheduler = scheduler;
        _this.action = null;
        _this.scheduleTimeout();
        return _this;
    }
    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {
        var withObservable = subscriber.withObservable;
        subscriber._unsubscribeAndRecycle();
        subscriber.add(Object(__WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__["a" /* subscribeToResult */])(subscriber, withObservable));
    };
    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
        var action = this.action;
        if (action) {
            // Recycle the action if we've already scheduled one. All the production
            // Scheduler Actions mutate their state/delay time and return themeselves.
            // VirtualActions are immutable, so they create and return a clone. In this
            // case, we need to set the action reference to the most recent VirtualAction,
            // to ensure that's the one we clone from next time.
            this.action = action.schedule(this, this.waitFor);
        }
        else {
            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
        }
    };
    TimeoutWithSubscriber.prototype._next = function (value) {
        if (!this.absoluteTimeout) {
            this.scheduleTimeout();
        }
        _super.prototype._next.call(this, value);
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    TimeoutWithSubscriber.prototype._unsubscribe = function () {
        this.action = null;
        this.scheduler = null;
        this.withObservable = null;
    };
    return TimeoutWithSubscriber;
}(__WEBPACK_IMPORTED_MODULE_3__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=timeoutWith.js.map


/***/ }),
/* 113 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_113__;

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Listener for DOM tree changes.
 *
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, domtypeguards_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * This class models a listener designed to listen to changes to a DOM tree and
     * fire events on the basis of the changes that it detects.
     *
     * An  ``included-element``  event is  fired  when  an  element appears  in  the
     * observed tree  whether it is directly  added or added because  its parent was
     * added.     The    opposite     events    are     ``excluding-element``    and
     * ``excluded-element``.  The event  ``excluding-element`` is  generated *before
     * the tree fragment is removed, and ``excluded-element`` *after*.
     *
     * An ``added-element`` event is fired when an element is directly added to the
     * observed tree. The opposite events are ``excluding-element`` and
     * ``removed-element``.
     *
     * A ``children-changing`` and ``children-changed`` event are fired when an
     * element's children are being changed.
     *
     * A ``text-changed`` event is fired when a text node has changed.
     *
     * An ``attribute-changed`` is fired when an attribute has changed.
     *
     * A ``trigger`` event with name ``[name]`` is fired when ``trigger([name])`` is
     * called. Trigger events are meant to be triggered by event handlers called by
     * the listener, not by other code.
     *
     * <h2>Example</h2>
     *
     * Consider the following HTML fragment:
     *
     *     <ul>
     *      <li>foo</li>
     *     </ul>
     *
     * If the fragment is added to a ``<div>`` element, an ``included-element``
     * event will be generated for ``<ul>`` and ``<li>`` but an ``added-element``
     * event will be generated only for ``<ul>``. A ``changed-children`` event will
     * be generated for the parent of ``<ul>``.
     *
     * If the fragment is removed, an ``excluding-element`` and ``excluded-element``
     * event will be generated for ``<ul>`` and ``<li>`` but a ``removing-element``
     * and ``remove-element`` event will be generated only for ``<ul>``. A
     * ``children-changing`` and ``children-changed`` event will be generated for
     * the parent of ``<ul>``.
     *
     * The order in which handlers are added matters. The listener provides the
     * following guarantee: for any given type of event, the handlers will be called
     * in the order that they were added to the listener.
     *
     * <h2>Warnings:</h2>
     *
     * - Keep in mind that the ``children-changed``, ``excluded-element`` and
     *   ``removed-element`` events are generated **after** the DOM operation that
     *   triggers them. This has some consequences. In particular, a selector that
     *   will work perfectly with ``removing-element`` or ``excluding-element`` may
     *   not work with ``removed-element`` and ``excluded-element``. This would
     *   happen if the selector tests for ancestors of the element removed or
     *   excluded. By the time the ``-ed`` events are generated, the element is gone
     *   from the DOM tree and such selectors will fail.
     *
     *   The ``-ed`` version of these events are still useful. For instance, a wed
     *   mode in use for editing scholarly articles listens for ``excluded-element``
     *   with a selector that is a tag name so that it can remove references to
     *   these elements when they are removed. Since it does not need anything more
     *   complex then ``excluded-element`` works perfectly.
     *
     * - A listener does not verify whether the parameters passed to handlers are
     *   part of the DOM tree. For instance, handler A could operate on element X so
     *   that it is removed from the DOM tree. If there is already another mutation
     *   on X in the pipeline by the time A is called and handler B is called to
     *   deal with it, then by the time B is run X will no longer be part of the
     *   tree.
     *
     *   To put it differently, even if when an event is generated element X was
     *   part of the DOM tree, it is possible that by the time the handlers that
     *   must be run for that mutation are run, X is no longer part of the DOM tree.
     *
     *   Handlers that care about whether they are operating on elements that are in
     *   the DOM tree should perform a test themselves to check whether what is
     *   passed to them is still in the tree.
     *
     *   The handlers fired on removed-elements events work on nodes that have been
     *   removed from the DOM tree. To know what was before and after these nodes
     *   **before** they were removed use events that have ``previous_sibling`` and
     *   ``next_sibling`` parameters, because it is likely that the nodes themselves
     *   will have both their ``previousSibling`` and ``nextSibling`` set to
     *   ``null``.
     *
     * - Handlers that are fired on children-changed events, **and** which modify
     *   the DOM tree can easily result in infinite loops. Care should be taken
     *   early in any such handler to verify that the kind of elements added or
     *   removed **should** result in a change to the DOM tree, and ignore those
     *   changes that are not relevant.
     */
    var DOMListener = /** @class */ (function () {
        /**
         * @param root The root of the DOM tree about which the listener should listen
         * to changes.
         */
        function DOMListener(root, updater) {
            var _this = this;
            this.root = root;
            this.updater = updater;
            this.eventHandlers = {
                "included-element": [],
                "added-element": [],
                "excluded-element": [],
                "excluding-element": [],
                "removed-element": [],
                "removing-element": [],
                "children-changed": [],
                "children-changing": [],
                "text-changed": [],
                "attribute-changed": [],
            };
            this.triggerHandlers = Object.create(null);
            this.triggersToFire = Object.create(null);
            this.stopped = true;
            this.updater.events.subscribe(function (ev) {
                switch (ev.name) {
                    case "InsertNodeAt":
                        _this._insertNodeAtHandler(ev);
                        break;
                    case "SetTextNodeValue":
                        _this._setTextNodeValueHandler(ev);
                        break;
                    case "BeforeDeleteNode":
                        _this._beforeDeleteNodeHandler(ev);
                        break;
                    case "DeleteNode":
                        _this._deleteNodeHandler(ev);
                        break;
                    case "SetAttributeNS":
                        _this._setAttributeNSHandler(ev);
                        break;
                    default:
                    // Do nothing...
                }
            });
        }
        /**
         * Start listening to changes on the root passed when the object was
         * constructed.
         */
        DOMListener.prototype.startListening = function () {
            this.stopped = false;
        };
        /**
         * Stops listening to DOM changes.
         */
        DOMListener.prototype.stopListening = function () {
            this.stopped = true;
        };
        /**
         * Process all changes immediately.
         */
        DOMListener.prototype.processImmediately = function () {
            if (this.scheduledProcessTriggers !== undefined) {
                this.clearPending();
                this._processTriggers();
            }
        };
        /**
         * Clear anything that is pending. Some implementations may have triggers
         * delivered asynchronously.
         */
        DOMListener.prototype.clearPending = function () {
            if (this.scheduledProcessTriggers !== undefined) {
                window.clearTimeout(this.scheduledProcessTriggers);
                this.scheduledProcessTriggers = undefined;
            }
        };
        DOMListener.prototype.addHandler = function (eventType, selector, handler) {
            if (eventType === "trigger") {
                var handlers = this.triggerHandlers[selector];
                if (handlers === undefined) {
                    handlers = this.triggerHandlers[selector] = [];
                }
                handlers.push(handler);
            }
            else {
                // As of TS 2.2.2, we need to the type annotation in the next line.
                var pairs = this.eventHandlers[eventType];
                if (pairs === undefined) {
                    throw new Error("invalid eventType: " + eventType);
                }
                pairs.push([selector, handler]);
            }
        };
        /**
         * Tells the listener to fire the named trigger as soon as possible.
         *
         * @param {string} name The name of the trigger to fire.
         */
        DOMListener.prototype.trigger = function (name) {
            this.triggersToFire[name] = 1;
        };
        /**
         * Processes pending triggers.
         */
        DOMListener.prototype._processTriggers = function () {
            var keys = Object.keys(this.triggersToFire);
            while (keys.length > 0) {
                // We flush the map because the triggers could trigger
                // more triggers. This also explains why we are in a loop.
                this.triggersToFire = Object.create(null);
                var triggerMap = this.triggerHandlers;
                for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                    var key = keys_1[_i];
                    var handlers = triggerMap[key];
                    if (handlers !== undefined) {
                        for (var _a = 0, handlers_1 = handlers; _a < handlers_1.length; _a++) {
                            var handler = handlers_1[_a];
                            this._callHandler(handler);
                        }
                    }
                }
                // See whether there is more to trigger.
                keys = Object.keys(this.triggersToFire);
            }
        };
        /**
         * Utility function for calling event handlers.
         *
         * @param handler The handler.
         *
         * @param rest The arguments to pass to the handler.
         */
        // tslint:disable-next-line:no-any
        DOMListener.prototype._callHandler = function (handler) {
            var rest = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                rest[_i - 1] = arguments[_i];
            }
            rest.unshift(this.root);
            handler.apply(undefined, rest);
        };
        /**
         * Handles node additions.
         *
         * @param ev The event.
         */
        DOMListener.prototype._insertNodeAtHandler = function (ev) {
            if (this.stopped) {
                return;
            }
            var parent = ev.parent;
            var node = ev.node;
            var ccCalls = this._childrenCalls("children-changed", parent, [node], [], node.previousSibling, node.nextSibling);
            var arCalls = [];
            var ieCalls = [];
            if (domtypeguards_1.isElement(node)) {
                arCalls = this._addRemCalls("added-element", node, parent);
                ieCalls = this._incExcCalls("included-element", node, parent);
            }
            var toCall = ccCalls.concat(arCalls, ieCalls);
            for (var _i = 0, toCall_1 = toCall; _i < toCall_1.length; _i++) {
                var call = toCall_1[_i];
                (_a = this._callHandler).call.apply(_a, [this, call.fn].concat(call.params));
            }
            this._scheduleProcessTriggers();
            var _a;
        };
        /**
         * Handles node deletions.
         *
         * @param ev The event.
         */
        DOMListener.prototype._beforeDeleteNodeHandler = function (ev) {
            if (this.stopped) {
                return;
            }
            var node = ev.node;
            var parent = node.parentNode;
            var ccCalls = this._childrenCalls("children-changing", parent, [], [node], node.previousSibling, node.nextSibling);
            var arCalls = [];
            var ieCalls = [];
            if (domtypeguards_1.isElement(node)) {
                arCalls = this._addRemCalls("removing-element", node, parent);
                ieCalls = this._incExcCalls("excluding-element", node, parent);
            }
            var toCall = ccCalls.concat(arCalls, ieCalls);
            for (var _i = 0, toCall_2 = toCall; _i < toCall_2.length; _i++) {
                var call = toCall_2[_i];
                (_a = this._callHandler).call.apply(_a, [this, call.fn].concat(call.params));
            }
            this._scheduleProcessTriggers();
            var _a;
        };
        /**
         * Handles node deletion events.
         *
         * @param ev The event.
         */
        DOMListener.prototype._deleteNodeHandler = function (ev) {
            if (this.stopped) {
                return;
            }
            var node = ev.node;
            var parent = ev.formerParent;
            var ccCalls = this._childrenCalls("children-changed", parent, [], [node], null, null);
            var arCalls = [];
            var ieCalls = [];
            if (domtypeguards_1.isElement(node)) {
                arCalls = this._addRemCalls("removed-element", node, parent);
                ieCalls = this._incExcCalls("excluded-element", node, parent);
            }
            var toCall = ccCalls.concat(arCalls, ieCalls);
            for (var _i = 0, toCall_3 = toCall; _i < toCall_3.length; _i++) {
                var call = toCall_3[_i];
                (_a = this._callHandler).call.apply(_a, [this, call.fn].concat(call.params));
            }
            this._scheduleProcessTriggers();
            var _a;
        };
        /**
         * Produces the calls for ``children-...`` events.
         *
         * @param call The type of call to produce.
         *
         * @param parent The parent of the children that have changed.
         *
         * @param added The children that were added.
         *
         * @param removed The children that were removed.
         *
         * @param prev Node preceding the children.
         *
         * @param next Node following the children.
         *
         * @returns A list of call specs.
         */
        DOMListener.prototype._childrenCalls = function (call, parent, added, removed, prev, next) {
            if (added.length !== 0 && removed.length !== 0) {
                throw new Error("we do not support having nodes added " +
                    "and removed in the same event");
            }
            var pairs = this.eventHandlers[call];
            var ret = [];
            // Go over all the elements for which we have handlers
            for (var _i = 0, pairs_1 = pairs; _i < pairs_1.length; _i++) {
                var _a = pairs_1[_i], sel = _a[0], fn = _a[1];
                if (parent.matches(sel)) {
                    ret.push({ fn: fn, params: [added, removed, prev, next, parent] });
                }
            }
            return ret;
        };
        /**
         * Handles text node changes events.
         *
         * @param ev The event.
         */
        DOMListener.prototype._setTextNodeValueHandler = function (ev) {
            if (this.stopped) {
                return;
            }
            var pairs = this.eventHandlers["text-changed"];
            var node = ev.node;
            // Go over all the elements for which we have
            // handlers
            var parent = node.parentNode;
            for (var _i = 0, pairs_2 = pairs; _i < pairs_2.length; _i++) {
                var _a = pairs_2[_i], sel = _a[0], fn = _a[1];
                if (parent.matches(sel)) {
                    this._callHandler(fn, node, ev.oldValue);
                }
            }
            this._scheduleProcessTriggers();
        };
        /**
         * Handles attribute change events.
         *
         * @param ev The event.
         */
        DOMListener.prototype._setAttributeNSHandler = function (ev) {
            if (this.stopped) {
                return;
            }
            var target = ev.node;
            // Go over all the elements for which we have handlers
            var pairs = this.eventHandlers["attribute-changed"];
            for (var _i = 0, pairs_3 = pairs; _i < pairs_3.length; _i++) {
                var _a = pairs_3[_i], sel = _a[0], fn = _a[1];
                if (target.matches(sel)) {
                    this._callHandler(fn, target, ev.ns, ev.attribute, ev.oldValue);
                }
            }
            this._scheduleProcessTriggers();
        };
        /**
         * Sets a timeout to run the triggers that must be run.
         */
        DOMListener.prototype._scheduleProcessTriggers = function () {
            var _this = this;
            if (this.scheduledProcessTriggers !== undefined) {
                return;
            }
            this.scheduledProcessTriggers = window.setTimeout(function () {
                _this.scheduledProcessTriggers = undefined;
                _this._processTriggers();
            }, 0);
        };
        /**
         * Produces the calls for the added/removed family of events.
         *
         * @param name The event name.
         *
         * @param node The node added or removed.
         *
         * @param target The parent of this node.
         *
         * @returns A list of call specs.
         */
        DOMListener.prototype._addRemCalls = function (name, node, target) {
            var pairs = this.eventHandlers[name];
            var ret = [];
            var prev = node.previousSibling;
            var next = node.nextSibling;
            // Go over all the elements for which we have handlers
            for (var _i = 0, pairs_4 = pairs; _i < pairs_4.length; _i++) {
                var _a = pairs_4[_i], sel = _a[0], fn = _a[1];
                if (node.matches(sel)) {
                    ret.push({ fn: fn, params: [target, prev, next, node] });
                }
            }
            return ret;
        };
        /**
         * Produces the calls for included/excluded family of events.
         *
         * @param name The event name.
         *
         * @param node The node which was included or excluded and for which we must
         * issue the events.
         *
         * @param target The parent of this node.
         *
         * @returns A list of call specs.
         */
        DOMListener.prototype._incExcCalls = function (name, node, target) {
            var pairs = this.eventHandlers[name];
            var prev = node.previousSibling;
            var next = node.nextSibling;
            var ret = [];
            // Go over all the elements for which we have handlers
            for (var _i = 0, pairs_5 = pairs; _i < pairs_5.length; _i++) {
                var _a = pairs_5[_i], sel = _a[0], fn = _a[1];
                if (node.matches(sel)) {
                    ret.push({ fn: fn, params: [node, target, prev, next, node] });
                }
                var targets = node.querySelectorAll(sel);
                for (var _b = 0, _c = Array.prototype.slice.call(targets); _b < _c.length; _b++) {
                    var subtarget = _c[_b];
                    ret.push({ fn: fn, params: [node, target, prev, next, subtarget] });
                }
            }
            return ret;
        };
        return DOMListener;
    }());
    exports.DOMListener = DOMListener;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  eventType SetAttributeNS DeleteNode BeforeDeleteNode ul li MPL
//  LocalWords:  SetTextNodeValue nextSibling InsertNodeAt previousSibling DOM
//  LocalWords:  Dubeau Mangalam
//# sourceMappingURL=domlistener.js.map

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(250), __webpack_require__(22)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, interactjs_1, browsers) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    interactjs_1 = __importDefault(interactjs_1);
    browsers = __importStar(browsers);
    /**
     * This records changes in such a way that if any of the changes cannot take
     * effect, then all the changes are "rolled back". It is called pseudo-atomic
     * because it is not really meant to track any changes that do not happen
     * through instances of this class. This is needed because we are changing the
     * size of multiple elements, and beyond a certain "smallness", some elements
     * won't register any change in dimensions (perhaps due to "min-..." styles.
     */
    var PseudoAtomicRectChange = /** @class */ (function () {
        function PseudoAtomicRectChange() {
            this.changes = [];
            this.rolledback = false;
        }
        PseudoAtomicRectChange.prototype.updateElementRect = function (el, dx, dy) {
            // If we've already rolled back, we don't do anything.
            if (this.rolledback) {
                return;
            }
            var rect = el.getBoundingClientRect();
            // This works around a fractional pixel issue in IE. We set the element to
            // the dimensions returned by getBoundingClientRect and then reacquire the
            // dimensions to account for any funny adjustments IE may decide to do.
            if (browsers.MSIE) {
                el.style.width = rect.width + "px";
                el.style.height = rect.height + "px";
                rect = el.getBoundingClientRect();
            }
            var width = rect.width + dx;
            var height = rect.height + dy;
            el.style.width = width + "px";
            el.style.height = height + "px";
            this.changes.push({ el: el, rect: rect });
            var newRect = el.getBoundingClientRect();
            // Check whether the change "took". If not, roll back.
            if (newRect.width !== width || newRect.height !== height) {
                this.rollback();
            }
        };
        PseudoAtomicRectChange.prototype.rollback = function () {
            var changes = this.changes;
            for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {
                var change = changes_1[_i];
                var el = change.el;
                var rect = change.rect;
                el.style.width = rect.width + "px";
                el.style.height = rect.height + "px";
            }
            this.rolledback = true;
        };
        return PseudoAtomicRectChange;
    }());
    /**
     * Make a bootstrap dialog resizable by clicking on its edge.
     *
     * @param $top The top level element of the dialog.
     */
    function makeResizable($top) {
        // We listen to resizestart and resizeend to deal with the following scenario:
        // the user starts resizing the modal, it goes beyond the limits of how big it
        // can be resized, the mouse pointer moves outside the modal window and the
        // user releases the button when the pointer is outside. Without the use of
        // ignoreBackdropClick, this causes the modal to close.
        var content = $top.find(".modal-content")[0];
        var body = $top.find(".modal-body")[0];
        interactjs_1.default(content)
            .resizable({})
            .on("resizestart", function () {
            var modal = $top.data("bs.modal");
            if (modal == null) {
                return; // Deal with edge cases.
            }
            // Prevent modal closure.
            modal.ignoreBackdropClick = true;
        })
            .on("resizeend", function () {
            // We use a setTimeout otherwise we turn ignoreBackdropClick too soon.
            setTimeout(function () {
                var modal = $top.data("bs.modal");
                if (modal == null) {
                    return; // Deal with edge cases.
                }
                modal.ignoreBackdropClick = false;
            }, 0);
        })
            .on("resizemove", function (event) {
            var target = event.target;
            var change = new PseudoAtomicRectChange();
            change.updateElementRect(target, event.dx, event.dy);
            change.updateElementRect(body, event.dx, event.dy);
        });
    }
    exports.makeResizable = makeResizable;
    /**
     * Make a bootstrap dialog draggable by clicking and dragging the header.
     *
     * @param $top The top level element of the dialog.
     */
    function makeDraggable($top) {
        var win = $top[0].ownerDocument.defaultView;
        var header = $top.find(".modal-header")[0];
        var content = $top.find(".modal-content")[0];
        var startLeft;
        var startTop;
        interactjs_1.default(header)
            .draggable({
            restrict: {
                restriction: {
                    left: 0,
                    top: 0,
                    right: win.innerWidth - 10,
                    bottom: win.innerHeight - 10,
                },
            },
        })
            .on("dragstart", function () {
            startLeft = content.offsetLeft;
            startTop = content.offsetTop;
        })
            .on("dragmove", function (event) {
            content.style.left = startLeft + event.clientX - event.clientX0 + "px";
            content.style.top = startTop + event.clientY - event.clientY0 + "px";
        });
    }
    exports.makeDraggable = makeDraggable;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//# sourceMappingURL=interactivity.js.map

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(13), __webpack_require__(5), __webpack_require__(251)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, dloc_1, domutil_1, search_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Context = search_1.Context;
    exports.Direction = search_1.Direction;
    var Edge;
    (function (Edge) {
        Edge[Edge["START"] = 0] = "START";
        Edge[Edge["END"] = 1] = "END";
    })(Edge || (Edge = {}));
    /**
     * A search-and-replace engine for editor instances. This implements the code
     * that is common to quick searches and more complex searches. This object is
     * responsible for maintaining a search position in the document, and replacing
     * hits as required.
     */
    var SearchReplace = /** @class */ (function () {
        /**
         * @param editor The editor for which we are searching.
         *
         * @param scroller The scroller holding the document.
         */
        function SearchReplace(editor, scroller) {
            this.editor = editor;
            this.scroller = scroller;
            this.lastMatch = null;
            this.caretManager = this.editor.caretManager;
            var sel = this.caretManager.sel;
            var scope = (sel !== undefined && !sel.collapsed) ?
                new dloc_1.DLocRange(sel.anchor, sel.focus) : undefined;
            // If we have a scope, then we had a selection and we want to use the
            // selection's anchor, which is scope.start at this point.
            var start = scope !== undefined ? scope.start : this.caretManager.caret;
            if (start === undefined) {
                throw new Error("search without a caret!");
            }
            this.search = new search_1.Search(this.caretManager, editor.guiRoot, start, scope);
        }
        Object.defineProperty(SearchReplace.prototype, "current", {
            /**
             * The current match. This is ``undefined`` if we have not searched yet.  It
             * is ``null`` if nothing matches.
             */
            get: function () {
                return this.search.current;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SearchReplace.prototype, "canReplace", {
            /**
             * Whether we can replace the current hit. If there is no hit, then this is
             * ``false``. If the hit is somehow collapsed, this is also
             * ``false``. Otherwise, the hit must be a well-formed range.
             */
            get: function () {
                var current = this.search.current;
                if (current == null) {
                    return false;
                }
                if (current.collapsed) {
                    return false;
                }
                return domutil_1.isWellFormedRange(current.mustMakeDOMRange());
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Update the pattern to a new value. Calling this method attempts to update
         * the current hit first, and may move in the direction of the search if
         * updating the current hit is not possible. This updates [[current]].
         *
         * @param value The new pattern value.
         *
         * @param options The search options.
         */
        SearchReplace.prototype.updatePattern = function (value, options) {
            this.search.pattern = value;
            this.search.direction = options.direction;
            this.search.context = options.context;
            this.search.updateCurrent();
            this.updateHighlight();
        };
        /**
         * Find the next hit in the direction of the search. This updates [[current]].
         *
         * @param options The search options.
         */
        SearchReplace.prototype.next = function (options) {
            this.search.direction = options.direction;
            this.search.context = options.context;
            this.search.next();
            this.updateHighlight();
        };
        /**
         * Update the highlight marking the current hit.
         */
        SearchReplace.prototype.updateHighlight = function () {
            this.clearHighlight();
            var match = this.current;
            if (match != null) {
                this.lastMatch = match;
                this.setCaretToMatch();
                var range = match.start.mustMakeDLocRange(match.end);
                var domRange = range.mustMakeDOMRange();
                this.highlight = this.caretManager.highlightRange(range);
                var scRect = this.scroller.getBoundingClientRect();
                var rect = domRange.getBoundingClientRect();
                var leftOffset = this.scroller.scrollLeft - scRect.left;
                var topOffset = this.scroller.scrollTop - scRect.top;
                this.scroller.scrollIntoView(rect.left + leftOffset, rect.top + topOffset, rect.right + leftOffset, rect.bottom + topOffset);
            }
        };
        /**
         * Clear the highlight that this object produced to mark a hit.
         */
        SearchReplace.prototype.clearHighlight = function () {
            if (this.highlight !== undefined) {
                this.highlight.parentNode.removeChild(this.highlight);
                this.highlight = undefined;
            }
        };
        /**
         * Set the caret position to the latest hit we ran into.
         */
        SearchReplace.prototype.setCaretToMatch = function () {
            if (this.lastMatch !== null) {
                var loc = this.getDirectionalEnd(this.lastMatch);
                this.caretManager.setCaret(loc, { focus: false });
            }
        };
        SearchReplace.prototype.getDirectionalEnd = function (range) {
            return this.getDirectionalEdge(range, Edge.END);
        };
        SearchReplace.prototype.getDirectionalStart = function (range) {
            return this.getDirectionalEdge(range, Edge.START);
        };
        SearchReplace.prototype.getDirectionalEdge = function (range, edge) {
            var field;
            var direction = this.search.direction;
            var start = edge === Edge.START;
            switch (direction) {
                case search_1.Direction.FORWARD:
                    field = start ? "start" : "end";
                    break;
                case search_1.Direction.BACKWARDS:
                    field = start ? "end" : "start";
                    break;
                default:
                    var d = direction;
                    throw new Error("unknown direction: " + d);
            }
            return range[field];
        };
        /**
         * Replace the current hit with text.
         *
         * @param value The new text.
         *
         * @throw {Error} When called if [[canReplace]] is false.
         */
        SearchReplace.prototype.replace = function (value) {
            if (!this.canReplace) {
                throw new Error("tried to replace when it is not possible");
            }
            var current = this.current;
            // With the !this.canReplace test above, it is not currently possible to
            // hit this condition.
            if (current == null) {
                throw new Error("no current match");
            }
            var caret = this.getDirectionalStart(current);
            this.caretManager.setCaret(caret, { focus: false });
            // tslint:disable-next-line:no-object-literal-type-assertion
            this.editor.fireTransformation(this.editor.replaceRangeTr, {
                range: current,
                newText: value,
                caretAtEnd: false,
            });
            this.clearHighlight();
            var caretAfter = this.caretManager.caret;
            if (caretAfter === undefined) {
                throw new Error("no caret after replacement!");
            }
            // We must update the current match because the old range is no longe valid.
            this.search.current = caretAfter.mustMakeDLocRange();
        };
        return SearchReplace;
    }());
    exports.SearchReplace = SearchReplace;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//# sourceMappingURL=search-replace.js.map

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(7), __webpack_require__(22), __webpack_require__(51), __webpack_require__(23), __webpack_require__(39), __webpack_require__(52), __webpack_require__(38)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, jquery_1, browsers, keyMod, keyConstants, transformation_1, context_menu_1, icon) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    jquery_1 = __importDefault(jquery_1);
    browsers = __importStar(browsers);
    keyMod = __importStar(keyMod);
    keyConstants = __importStar(keyConstants);
    icon = __importStar(icon);
    var KINDS = ["transform", "add", "delete", "wrap", "unwrap"];
    // ``undefined`` is "other kinds".
    var KIND_FILTERS = KINDS.concat(undefined);
    // Sort order.
    var KIND_ORDER = [undefined].concat(KINDS);
    var TYPES = ["element", "attribute"];
    var TYPE_FILTERS = TYPES.concat(undefined);
    var ITEM_SELECTOR = "li:not(.divider):visible a";
    var plus = keyMod.makeKey("+");
    var minus = keyMod.makeKey("-");
    var period = keyMod.makeKey(".");
    var comma = keyMod.makeKey(",");
    var question = keyMod.makeKey("?");
    var less = keyMod.makeKey("<");
    var at = keyMod.makeKey("@");
    var exclamation = keyMod.makeKey("!");
    var KEY_TO_FILTER = [
        { key: plus, filter: "add", which: "kind" },
        { key: minus, filter: "delete", which: "kind" },
        { key: comma, filter: "wrap", which: "kind" },
        { key: period, filter: "unwrap", which: "kind" },
        { key: question, filter: undefined, which: "kind" },
        { key: less, filter: "element", which: "type" },
        { key: at, filter: "attribute", which: "type" },
        { key: exclamation, filter: undefined, which: "type" },
    ];
    function compareItems(a, b) {
        var aKind = (a.action !== null && (a.action instanceof transformation_1.Transformation)) ?
            a.action.kind : undefined;
        var bKind = (b.action !== null && (b.action instanceof transformation_1.Transformation)) ?
            b.action.kind : undefined;
        if (aKind !== bKind) {
            var aOrder = KIND_ORDER.indexOf(aKind);
            var bOrder = KIND_ORDER.indexOf(bKind);
            return aOrder - bOrder;
        }
        var aText = a.item.textContent;
        var bText = b.item.textContent;
        if (aText === bText) {
            return 0;
        }
        if (aText < bText) {
            return -1;
        }
        return 1;
    }
    /**
     * A context menu for displaying actions. This class is designed to know how to
     * sort [["wed/action".Action]] objects and
     * [["wed/transformation".Transformation]] objects and how to filter them. Even
     * though the names used here suggest that ``Action`` objects are the focus of
     * this class, the fact is that it is really performing its work on
     * ``Transformation`` objects. It does accept ``Action`` as a kind of lame
     * ``Transformation``. So the following description will focus on
     * ``Transformation`` objects rather than ``Action`` objects.
     *
     * Sorting is performed first by the ``kind`` of the ``Transformation`` and then
     * by the text associated with the ``Transformation``. The kinds, in order, are:
     *
     * - other kinds than those listed below
     *
     * - undefined ``kind``
     *
     * - ``"add"``
     *
     * - ``"delete"``
     *
     * - ``"wrap"``
     *
     * - ``"unwrap"``
     *
     * The text associated with the transformation is the text value of the DOM
     * ``Element`` object stored in the ``item`` field of the object given in the
     * ``items`` array passed to the constructor. ``Actions`` are considered to have
     * an undefined ``kind``.
     *
     * Filtering is performed by ``kind`` and on the text of the **element name**
     * associated with a transformation. This class presents to the user a row of
     * buttons that represent graphically the possible filters. Clicking on a button
     * will reduce the list of displayed items only to those elements that
     * correspond to the ``kind`` to which the button corresponds.
     *
     * Typing text (e.g. "foo") will narrow the list of items to the text that the
     * user typed. Let's suppose that ``item`` is successively taking the values in
     * the ``items`` array. The filtering algorithm first checks whether there is an
     * ``item.data.name`` field. If there is, the match is performed against this
     * field. If not, the match is performed against the text of ``item.item``.
     *
     * If the text typed begins with a caret (^), the text will be interpreted as a
     * regular expression.
     *
     * Typing ESCAPE will reset filtering.
     *
     * When no option is focused, typing ENTER will select the first option of the
     * menu.
     */
    var ActionContextMenu = /** @class */ (function (_super) {
        __extends(ActionContextMenu, _super);
        /**
         * @param document The DOM document for which to make this context menu.
         *
         * @param x Position of the menu. The context menu may ignore this position if
         * the menu would appear off-screen.
         *
         * @param y Position of the menu.
         *
         * @param items An array of action information in the form of anonymous
         * objects. It is valid to have some items in the array be of the form
         * ``{action: null, item: some_element, data: null}`` to insert arbitrary menu
         * items.
         *
         * @param dismissCallback Function to call when the menu is dismissed.
         */
        function ActionContextMenu(document, x, y, items, dismissCallback) {
            var _this = _super.call(this, document, x, y, [], dismissCallback, false) || this;
            _this.filters = {
                kind: null,
                type: null,
            };
            _this.actionTextFilter = "";
            // Sort the items once and for all.
            items.sort(compareItems);
            _this.actionItems = items;
            // Create the filtering GUI...
            // <li><div><button>... allows us to have this button group inserted in the
            // menu and yet be ignored by Bootstrap's Dropdown class.
            var li = document.createElement("li");
            li.className = "wed-menu-filter";
            li.style.whiteSpace = "nowrap";
            var groupGroup = document.createElement("div");
            var kindGroup = _this.makeKindGroup(document);
            var typeGroup = _this.makeTypeGroup(document);
            // Prevent clicks in the group from closing the context menu.
            jquery_1.default(li).on("click", false);
            li.appendChild(groupGroup);
            groupGroup.appendChild(kindGroup);
            groupGroup.appendChild(document.createTextNode("\u00a0"));
            groupGroup.appendChild(typeGroup);
            var textInput = document.createElement("input");
            textInput.className = "form-control input-sm";
            textInput.setAttribute("placeholder", "Filter choices by text.");
            var textDiv = document.createElement("div");
            textDiv.appendChild(textInput);
            li.appendChild(textDiv);
            var $textInput = jquery_1.default(textInput);
            $textInput.on("input", _this.inputChangeHandler.bind(_this));
            $textInput.on("keydown", _this.inputKeydownHandler.bind(_this));
            _this.actionFilterItem = li;
            _this.actionFilterInput = textInput;
            var $menu = _this.$menu;
            $menu.parent().on("hidden.bs.dropdown", function () {
                // Manually destroy the tooltips so that they are not
                // left behind.
                jquery_1.default(textInput).tooltip("destroy");
                jquery_1.default(kindGroup).children().tooltip("destroy");
            });
            $menu.on("keydown", _this.actionKeydownHandler.bind(_this));
            $menu.on("keypress", _this.actionKeypressHandler.bind(_this));
            _this.display([]);
            textInput.focus();
            return _this;
        }
        ActionContextMenu.prototype.makeKindGroup = function (document) {
            var kindGroup = document.createElement("div");
            kindGroup.className = "btn-group btn-group-xs";
            for (var _i = 0, KIND_FILTERS_1 = KIND_FILTERS; _i < KIND_FILTERS_1.length; _i++) {
                var kind = KIND_FILTERS_1[_i];
                var child = document.createElement("button");
                child.className = "btn btn-default";
                var title = void 0;
                if (kind !== undefined) {
                    // tslint:disable-next-line:no-inner-html
                    child.innerHTML = icon.makeHTML(kind);
                    title = "Show only " + kind + " operations.";
                }
                else {
                    // tslint:disable-next-line:no-inner-html
                    child.innerHTML = icon.makeHTML("other");
                    title = "Show operations not covered by other filter buttons.";
                }
                jquery_1.default(child).tooltip({
                    title: title,
                    // If we don't set it to be on the body, then the tooltip will be
                    // clipped by the dropdown. However, we then run into the problem that
                    // when the dropdown menu is removed, the tooltip may remain displayed.
                    container: "body",
                    placement: "auto top",
                    trigger: "hover",
                });
                jquery_1.default(child).on("click", this.makeKindHandler(kind));
                kindGroup.appendChild(child);
            }
            return kindGroup;
        };
        ActionContextMenu.prototype.makeTypeGroup = function (document) {
            var typeGroup = document.createElement("div");
            typeGroup.className = "btn-group btn-group-xs";
            for (var _i = 0, TYPE_FILTERS_1 = TYPE_FILTERS; _i < TYPE_FILTERS_1.length; _i++) {
                var actionType = TYPE_FILTERS_1[_i];
                var child = document.createElement("button");
                child.className = "btn btn-default";
                var title = void 0;
                if (actionType !== undefined) {
                    // tslint:disable-next-line:no-inner-html
                    child.innerHTML = icon.makeHTML(actionType);
                    title = "Show only " + actionType + " operations.";
                }
                else {
                    // tslint:disable-next-line:no-inner-html
                    child.innerHTML = icon.makeHTML("other");
                    title = "Show operations not covered by other filter buttons.";
                }
                jquery_1.default(child).tooltip({
                    title: title,
                    // If we don't set it to be on the body, then the tooltip will be
                    // clipped by the dropdown. However, we then run into the problem that
                    // when the dropdown menu is removed, the tooltip may remain displayed.
                    container: "body",
                    placement: "auto top",
                    trigger: "hover",
                });
                jquery_1.default(child).on("click", this.makeTypeHandler(actionType));
                typeGroup.appendChild(child);
            }
            return typeGroup;
        };
        ActionContextMenu.prototype.makeKindHandler = function (kind) {
            var _this = this;
            return function () {
                _this.filters.kind = kind;
                _this.render();
            };
        };
        ActionContextMenu.prototype.makeTypeHandler = function (actionType) {
            var _this = this;
            return function () {
                _this.filters.type = actionType;
                _this.render();
            };
        };
        ActionContextMenu.prototype.handleToggleFocus = function () {
            this.actionFilterInput.focus();
        };
        ActionContextMenu.prototype.actionKeydownHandler = function (ev) {
            var _this = this;
            if (keyConstants.ESCAPE.matchesEvent(ev) &&
                (this.filters.kind !== null ||
                    this.filters.type !== null ||
                    this.actionTextFilter !== "")) {
                this.filters.kind = null;
                this.filters.type = null;
                this.actionTextFilter = "";
                // For some reason, on FF 24, stopping propagation and
                // preventing the default is not enough.
                if (!browsers.FIREFOX_24) {
                    this.actionFilterInput.value = "";
                    this.render();
                }
                else {
                    setTimeout(function () {
                        _this.actionFilterInput.value = "";
                        _this.render();
                    }, 0);
                }
                ev.stopPropagation();
                ev.preventDefault();
                return false;
            }
            return true;
        };
        ActionContextMenu.prototype.actionKeypressHandler = function (ev) {
            // If the user has started filtering on text, we don't interpret
            // the key as setting a kind or type filter.
            if (this.actionTextFilter !== "") {
                return true;
            }
            for (var _i = 0, KEY_TO_FILTER_1 = KEY_TO_FILTER; _i < KEY_TO_FILTER_1.length; _i++) {
                var spec = KEY_TO_FILTER_1[_i];
                var key = spec.key;
                if (key.matchesEvent(ev)) {
                    var whichFilter = spec.which;
                    // Don't treat the key specially if the filter is already set.
                    if (this.filters[whichFilter] !== null) {
                        continue;
                    }
                    this.filters[whichFilter] = spec.filter;
                    this.render();
                    ev.stopPropagation();
                    ev.preventDefault();
                    return false;
                }
            }
            return true;
        };
        ActionContextMenu.prototype.inputChangeHandler = function (ev) {
            var previous = this.actionTextFilter;
            var newval = ev.target.value;
            // IE11 generates input events when focus is lost/gained. These
            // events do not change anything to the contents of the field so
            // we protect against unnecessary renders a bit of logic here.
            if (previous !== newval) {
                this.actionTextFilter = newval;
                this.render();
            }
        };
        ActionContextMenu.prototype.inputKeydownHandler = function (ev) {
            if (keyConstants.ENTER.matchesEvent(ev)) {
                this.$menu.find(ITEM_SELECTOR).first().focus().click();
                ev.stopPropagation();
                ev.preventDefault();
                return false;
            }
            // Bootstrap 3.3.2 (and probably some versions before this one) introduces a
            // change that prevents these events from being processed by the dropdown
            // menu. We have to manually forward them. See bug report:
            //
            // https://github.com/twbs/bootstrap/issues/15757
            //
            var matches;
            for (var _i = 0, _a = ["UP_ARROW", "DOWN_ARROW", "ESCAPE"]; _i < _a.length; _i++) {
                var check = _a[_i];
                // tslint:disable-next-line:no-any
                var key = keyConstants[check];
                if (key.matchesEvent(ev)) {
                    matches = key;
                    break;
                }
            }
            if (matches !== undefined) {
                var fakeEv = new jquery_1.default.Event("keydown");
                matches.setEventToMatch(fakeEv);
                // We have to pass the event to ``actionKeypressHandler`` so that it can
                // act in the same way as if the event had been directly on the menu. If
                // ``actionKeypressHandler`` does not handle it, then pass it on to the
                // toggle. We forward to the toggle because that's how Bootstrap normally
                // works.
                if (this.actionKeydownHandler(fakeEv) !== false) {
                    this.$toggle.trigger(fakeEv);
                }
                // We have to return `false` to make sure it is not mishandled.
                return false;
            }
            return true;
        };
        ActionContextMenu.prototype.render = function () {
            var menu = this.menu;
            var actionFilterItem = this.actionFilterItem;
            var actionKindFilter = this.filters.kind;
            var actionTypeFilter = this.filters.type;
            // On IE 10, we don't want to remove and then add back this.actionFilterItem
            // on each render because that makes this.actionFilterInput lose the
            // focus. Yes, even with the call at the end of _render, IE 10 inexplicably
            // makes the field lose focus **later**.
            while (menu.lastChild !== null && menu.lastChild !== actionFilterItem) {
                menu.removeChild(menu.lastChild);
            }
            var child = actionFilterItem
                .firstElementChild.firstElementChild.firstElementChild;
            for (var _i = 0, KIND_FILTERS_2 = KIND_FILTERS; _i < KIND_FILTERS_2.length; _i++) {
                var kind = KIND_FILTERS_2[_i];
                var cl = child.classList;
                var method = (actionKindFilter === kind) ? cl.add : cl.remove;
                method.call(cl, "active");
                child = child.nextElementSibling;
            }
            child = actionFilterItem
                .firstElementChild.lastElementChild.firstElementChild;
            for (var _a = 0, TYPE_FILTERS_2 = TYPE_FILTERS; _a < TYPE_FILTERS_2.length; _a++) {
                var actionType = TYPE_FILTERS_2[_a];
                var cl = child.classList;
                var method = (actionTypeFilter === actionType) ? cl.add : cl.remove;
                method.call(cl, "active");
                child = child.nextElementSibling;
            }
            if (actionFilterItem.parentNode === null) {
                menu.appendChild(actionFilterItem);
            }
            var items = this.computeActionItemsToDisplay(this.actionItems);
            _super.prototype.render.call(this, items);
        };
        ActionContextMenu.prototype.computeActionItemsToDisplay = function (items) {
            var kindFilter = this.filters.kind;
            var typeFilter = this.filters.type;
            var textFilter = this.actionTextFilter;
            var kindMatch;
            switch (kindFilter) {
                case null:
                    kindMatch = function () { return true; };
                    break;
                case undefined:
                    kindMatch = function (item) { return !(item.action instanceof transformation_1.Transformation) ||
                        KINDS.indexOf(item.action.kind) === -1; };
                    break;
                default:
                    kindMatch = function (item) { return (item.action instanceof transformation_1.Transformation) &&
                        item.action.kind === kindFilter; };
            }
            var typeMatch;
            switch (typeFilter) {
                case null:
                    typeMatch = function () { return true; };
                    break;
                case undefined:
                    typeMatch = function (item) { return !(item.action instanceof transformation_1.Transformation) ||
                        TYPES.indexOf(item.action.nodeType) === -1; };
                    break;
                default:
                    typeMatch = function (item) { return (item.action instanceof transformation_1.Transformation) &&
                        item.action.nodeType === typeFilter; };
            }
            var textMatch;
            if (textFilter !== "") {
                if (textFilter[0] === "^") {
                    var textFilterRe_1 = RegExp(textFilter);
                    textMatch = function (item) {
                        var text = (item.data !== null && item.data.name !== undefined) ?
                            item.data.name : item.item.textContent;
                        return textFilterRe_1.test(text);
                    };
                }
                else {
                    textMatch = function (item) {
                        var text = (item.data !== null && item.data.name !== undefined) ?
                            item.data.name : item.item.textContent;
                        return text.indexOf(textFilter) !== -1;
                    };
                }
            }
            else {
                textMatch = function () { return true; };
            }
            var ret = [];
            for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                var item = items_1[_i];
                if (kindMatch(item) && typeMatch(item) && textMatch(item)) {
                    ret.push(item.item);
                }
            }
            return ret;
        };
        return ActionContextMenu;
    }(context_menu_1.ContextMenu));
    exports.ActionContextMenu = ActionContextMenu;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL li Dropdown nowrap sm keydown tooltips keypress btn xs
//  LocalWords:  tooltip dropdown actionType actionFilterItem actionFilterInput
//  LocalWords:  actionKeypressHandler
//# sourceMappingURL=action-context-menu.js.map

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.10';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Gets the value at `key`, unless `key` is "__proto__".
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function safeGet(object, key) {
    return key == '__proto__'
      ? undefined
      : object[key];
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });

        return result;
      }

      if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });

        return result;
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(254), __webpack_require__(255)(module)))

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(7), __webpack_require__(5), __webpack_require__(23), __webpack_require__(27), __webpack_require__(258)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, jquery_1, domutil, keyConstants) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    jquery_1 = __importDefault(jquery_1);
    domutil = __importStar(domutil);
    keyConstants = __importStar(keyConstants);
    /**
     * A typeahead popup GUI element.
     */
    var TypeaheadPopup = /** @class */ (function () {
        /**
         * @param doc The DOM document for which to make this popup.
         *
         * @param x Position of popup. The popup may ignore the position if it would
         * overflow off the screen or not have enough space to reasonably show the
         * choices for typing ahead.
         *
         * @param y Position of popup.
         *
         * @param width The desired width of the popup. This value may get overridden.
         *
         * @param  placeholder The placeholder text to use.
         *
         * @param options The options to pass to the underlying Twitter Typeahead
         * menu.
         *
         * @param dismissCallback Function to call when the popup is dismissed.
         */
        // tslint:disable-next-line:max-func-body-length
        function TypeaheadPopup(doc, x, y, width, placeholder, options, 
        // tslint:disable-next-line:no-any
        dismissCallback) {
            var _this = this;
            this.dismissed = false;
            var taWrapper = domutil.htmlToElements("<div class=\"wed-typeahead-popup\">\
<input class=\"typeahead form-control\" type=\"text\">\
<span class=\"spinner\"><i class=\"fa fa-spinner fa-spin\"></i></span></div>", doc)[0];
            var ta = taWrapper.firstElementChild;
            ta.setAttribute("placeholder", placeholder);
            this.taWrapper = taWrapper;
            this.dismissCallback = dismissCallback;
            this.backdrop = document.createElement("div");
            this.backdrop.className = "wed-typeahead-popup-backdrop";
            jquery_1.default(this.backdrop).click(function () {
                _this.dismiss();
                return false;
            });
            taWrapper.style.width = width + "px";
            taWrapper.style.left = x + "px";
            taWrapper.style.top = y + "px";
            var $ta = this.$ta = jquery_1.default(ta);
            var args = [options.options];
            if (options.datasets != null && options.datasets.length > 0) {
                args = args.concat(options.datasets);
            }
            $ta.typeahead.apply($ta, args);
            $ta.on("keydown", this._keydownHandler.bind(this));
            $ta.on("typeahead:selected", this._selectedHandler.bind(this));
            var body = doc.body;
            body.insertBefore(taWrapper, body.firstChild);
            body.insertBefore(this.backdrop, body.firstChild);
            // Verify if we're going to run off screen. If so, then modify our position
            // to be inside the screen.
            var actualWidth = taWrapper.offsetWidth;
            var winWidth = doc.defaultView.innerWidth;
            // The x value that would put the menu just against the side of the window
            // is actualWidth - winWidth. If x is less than it, then x is the value we
            // want, but we don't want less than 0.
            taWrapper.style.left = Math.max(0, Math.min(x, winWidth -
                actualWidth)) + "px";
            taWrapper.style.maxWidth = winWidth + "px";
            var winHeight = doc.defaultView.innerHeight;
            var maxHeight = winHeight - y;
            taWrapper.style.maxHeight = maxHeight + "px";
            var dropdown = taWrapper.getElementsByClassName("tt-menu")[0];
            var $dropdown = jquery_1.default(dropdown);
            // Yep, we forcibly display it here because the next computations depend on
            // the dropdown being visible.
            var oldDisplay = dropdown.style.display;
            dropdown.style.display = "block";
            // We arbitrarily want to show at least five lines of information. (Which
            // may or may not translate to 4 choices. This is not the goal. The goal is
            // just to show a reasonable amount of information.)
            var fiveLines = Number($dropdown.css("line-height").replace("px", "")) * 5;
            var dropdownPos = dropdown.getBoundingClientRect();
            var dropdownMaxHeight = winHeight - dropdownPos.top;
            if (dropdownMaxHeight < fiveLines) {
                // Less than 5 lines: we need to move up.
                y -= fiveLines - dropdownMaxHeight;
                dropdownMaxHeight = fiveLines;
                taWrapper.style.top = y + "px";
            }
            dropdown.style.maxHeight = dropdownMaxHeight + "px";
            // Restore it. It was probably hidden.
            dropdown.style.display = oldDisplay;
            // Work around a stupid issue with typeahead. The problem is that
            // **hovering** over a choice makes it so that the choice is considered to
            // be the one to be selected when ENTER is pressed. This can lead to
            // inconsistent behavior from browser to browser. (It certainly messed up
            // testing.)
            $dropdown.off("mouseenter.tt", ".tt-suggestion");
            $dropdown.off("mouseleave.tt", ".tt-suggestion");
            // Prevent clicks from propagating up.
            $dropdown.on("click", false);
            ta.focus();
            // Typeahead will consider itself "activated" once it is focused. On most
            // platforms the focus above is delivered right away. However, on IE the
            // focus event is sent to elements asynchronously. Which means that the
            // typeahead could become "activated" much later than the end of this
            // constructor. For our purposes we want the typeahead to be activated right
            // away. So we unfortunately break through into private bits of the
            // typeahead code.
            var tt = jquery_1.default.data(ta, "ttTypeahead");
            tt.isActivated = true;
            // The default implementation closes the dropdown when the input is
            // unfocused. This is not a particularly good behavior for
            // wed. Unfortunately, the only way to rectify it is to break into the
            // private parts of typeahead.
            tt.input.off("blurred");
            tt._onBlurred = function _onBlurred() {
                this.isActivated = false;
            };
            tt.input.onSync("blurred", tt._onBlurred, tt);
        }
        /**
         * Dismisses the popup. Calls the callback that was passed when the popup was
         * created, if any.
         *
         * @param obj This should be the object selected by the user, if any. This
         * will be passed to the ``dismissCallback`` that was passed when the popup
         * was created, if any. If you call this method directly and want a selection
         * to occur, take care to use an object which is from the data set passed in
         * the ``options`` parameter that was used when the popup was created. The
         * value ``undefined`` means no object was selected.
         */
        // tslint:disable-next-line:no-any
        TypeaheadPopup.prototype.dismiss = function (obj) {
            if (this.dismissed) {
                return;
            }
            var taWrapper = this.taWrapper;
            if (taWrapper !== undefined && taWrapper.parentNode !== null) {
                taWrapper.parentNode.removeChild(taWrapper);
            }
            var backdrop = this.backdrop;
            if (backdrop !== undefined && backdrop.parentNode !== null) {
                backdrop.parentNode.removeChild(backdrop);
            }
            if (this.dismissCallback !== undefined) {
                this.dismissCallback(obj);
            }
            this.dismissed = true;
        };
        /**
         * Event handler for keydown events on the popup. The default implementation
         * is to dismiss the popup if escape is pressed.
         */
        TypeaheadPopup.prototype._keydownHandler = function (ev) {
            if (keyConstants.ESCAPE.matchesEvent(ev)) {
                this.dismiss();
                return false;
            }
            return undefined;
        };
        /**
         * Event handler for typeahead:selected events. The default implementation is
         * to dismiss the popup.
         */
        // tslint:disable-next-line:no-any
        TypeaheadPopup.prototype._selectedHandler = function (_ev, obj) {
            this.dismiss(obj);
        };
        /**
         * Hide the spinner that was created to indicate that the data is being
         * loaded.
         */
        TypeaheadPopup.prototype.hideSpinner = function () {
            this.taWrapper.getElementsByClassName("spinner")[0]
                .style.display = "none";
        };
        /**
         * Set the value in the input field of the typeahead. This also updates the
         * suggestions.
         *
         * @param value The new value.
         */
        TypeaheadPopup.prototype.setValue = function (value) {
            // tslint:disable-next-line:no-any
            this.$ta.typeahead("val", value);
        };
        return TypeaheadPopup;
    }());
    exports.TypeaheadPopup = TypeaheadPopup;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  typeahead MPL px keydown actualWidth winWidth tt dropdown
//  LocalWords:  dropdownMaxHeight mouseenter mouseleave ttTypeahead
//# sourceMappingURL=typeahead-popup.js.map

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Layers over the editing area.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * This class represents a layer over the editing area. Layers are used to show
     * information that are above (in z order) the edited content.
     */
    var Layer = /** @class */ (function () {
        /**
         * @param el The DOM element which is the layer.
         */
        function Layer(el) {
            this.el = el;
        }
        /**
         * Remove all elements from the layer.
         */
        Layer.prototype.clear = function () {
            var el = this.el;
            while (el.lastChild !== null) {
                el.removeChild(el.lastChild);
            }
        };
        /**
         * Append a child to a layer.
         *
         * @param child The child to append. This could be a document fragment if you
         * want to add multiple nodes at once.
         */
        Layer.prototype.append = function (child) {
            this.el.appendChild(child);
        };
        return Layer;
    }());
    exports.Layer = Layer;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL
//# sourceMappingURL=layer.js.map

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(7), __webpack_require__(115), __webpack_require__(27)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, jquery_1, interactivity_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    jquery_1 = __importDefault(jquery_1);
    /**
     * A modal needs to be created only once per instance of wed. After creation it
     * must be installed into the DOM tree of the page on which it is going to be
     * used. The method [[Modal.getTopLevel]] must be used to get the top level DOM
     * element of the modal which will be inserted into the page. Once inserted, the
     * modal is ready to be used once, twice, or more times. It need not be removed,
     * re-created, etc. The method [[Modal.modal]] just needs to be called each time
     * the modal must be displayed.
     *
     * A typical usage scenario would be:
     *
     * <pre>
     *   // Modal setup.
     *   mymodal = new Modal();
     *   mymodal.setTitle("My modal");
     *   mymodal.setBody(...);
     *   mymodal.addYesNo();
     *   // This is a generic example of how to add the modal to a page.
     *   $("body").append(mymodal.getTopLevel());
     *
     *   ...
     *
     *   // Modal use
     *   mymodal.modal(function () {...});
     *   switch(mymodal.getClickedAsText()) {...}
     *
     *   ...
     *
     *   // A second use of the same modal
     *   mymodal.modal(function () {...});
     *   switch(mymodal.getClickedAsText()) {...}
     * </pre>
     *
     * If the same modal must be displayed on two different pages, then two Modal
     * objects should be created, one per page.
     */
    var Modal = /** @class */ (function () {
        function Modal(options) {
            var _this = this;
            options = options != null ? options : {};
            // tabindex needed to make keyboard stuff work... grumble...
            // https://github.com/twitter/bootstrap/issues/4663
            // tslint:disable-next-line:no-jquery-raw-elements
            var $dom = this._$dom = jquery_1.default("\
<div class=\"modal\" style=\"position: absolute\" tabindex=\"1\">\
  <div class=\"modal-dialog\">\
    <div class=\"modal-content\">\
      <div class=\"modal-header\">\
        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" \
         aria-hidden=\"true\">&times;</button>\
        <h3 class=\"modal-title\">Untitled</h3>\
      </div>\
      <div class=\"modal-body\">\
        <p>No body.</p>\
      </div>\
      <div class=\"modal-footer\">\
      </div>\
    </div>\
  </div>\
</div>");
            this._$header = $dom.find(".modal-header");
            this._$body = $dom.find(".modal-body");
            this._$footer = $dom.find(".modal-footer");
            $dom.on("click", ".btn", function (ev) {
                _this._$clicked = jquery_1.default(ev.currentTarget);
                return true;
            });
            $dom.on("shown.bs.modal.modal", this._handleShown.bind(this));
            if (options.resizable) {
                this._$body[0].style.overflow = "auto";
                interactivity_1.makeResizable($dom);
            }
            if (options.draggable) {
                interactivity_1.makeDraggable($dom);
            }
        }
        /**
         * @returns The top level node of the modal, to be inserted
         * into a page.
         */
        Modal.prototype.getTopLevel = function () {
            return this._$dom;
        };
        /**
         * Set the title of this modal.
         */
        Modal.prototype.setTitle = function (title) {
            var $h3 = this._$header.find("h3");
            $h3.empty();
            $h3.append(title);
        };
        /**
         * Set the body of this modal.
         */
        Modal.prototype.setBody = function (body) {
            this._$body.empty();
            this._$body.append(body);
        };
        /**
         * Set the footer of this modal.
         */
        Modal.prototype.setFooter = function (footer) {
            this._$footer.empty();
            this._$footer.append(footer);
        };
        /**
         * @param name The name of the button.
         *
         * @param isPrimary True if the button is primary. A modal takes only one
         * primary button but no check is made by this method to prevent it. The
         * primary button is the one clicked if the user hits enter.
         *
         * @returns The jQuery object for the button.
         */
        Modal.prototype.addButton = function (name, isPrimary) {
            if (isPrimary === void 0) { isPrimary = false; }
            var button = this._$dom[0].ownerDocument.createElement("a");
            button.href = "#";
            button.className = "btn";
            button.setAttribute("data-dismiss", "modal");
            button.textContent = name;
            button.classList.add(isPrimary ? "btn-primary" : "btn-default");
            this._$footer.append(button);
            return jquery_1.default(button);
        };
        /**
         * Adds one Ok and one Cancel button.
         *
         * @returns The two buttons added.
         */
        Modal.prototype.addOkCancel = function () {
            return [this.addButton("Ok", true), this.addButton("Cancel")];
        };
        /**
         * Adds one Yes and one No button.
         *
         * @returns The two buttons added.
         */
        Modal.prototype.addYesNo = function () {
            return [this.addButton("Yes", true), this.addButton("No")];
        };
        /**
         * Returns the primary button.
         *
         * @returns The primary button.
         */
        Modal.prototype.getPrimary = function () {
            return this._$footer.find(".btn-primary");
        };
        /**
         * @param callback A callback to call when the modal is dismissed by the
         * user. This modal would typically inspect the modal to determine what the
         * user did, and potentially clean up after itself. The callback is left out
         * if the modal is merely for informational purposes.
         */
        Modal.prototype.modal = function (callback) {
            this._$clicked = undefined;
            if (callback !== undefined) {
                this._$dom.one("hidden.bs.modal.modal", callback);
            }
            this._$dom.modal();
        };
        /**
         * @returns The button that was clicked. Could be undefined if the modal
         * disappeared without being normally dismissed or if the modal has not been
         * used yet.
         */
        Modal.prototype.getClicked = function () {
            return this._$clicked;
        };
        /**
         * @returns The text of the button that was clicked. Could be undefined if the
         * modal disappeared without being normally dismissed or if the modal has not
         * been used yet.
         */
        Modal.prototype.getClickedAsText = function () {
            if (this._$clicked === undefined) {
                return undefined;
            }
            return this._$clicked.text();
        };
        /**
         * Handles the ``shown`` event.
         *
         * @param {Event} ev The DOM event.
         */
        Modal.prototype._handleShown = function () {
            var win = this._$dom[0].ownerDocument.defaultView;
            var winHeight = win.innerHeight;
            var dialog = this._$dom.find(".modal-dialog")[0];
            var rect = dialog.getBoundingClientRect();
            var computedStyle = window.getComputedStyle(dialog);
            var diff = -rect.top + (winHeight - rect.height) -
                parseInt(computedStyle.marginBottom);
            var dialogMaxHeight = rect.height + diff;
            dialog.style.maxHeight = dialogMaxHeight + "px";
            var content = this._$dom.find(".modal-content")[0];
            content.style.maxHeight = dialogMaxHeight + "px";
        };
        return Modal;
    }());
    exports.Modal = Modal;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  dialogMaxHeight clientY clientX resizemove dragmove setTimeout
//  LocalWords:  ignoreBackdropClick getBoundingClientRect resizeend tabindex
//  LocalWords:  getTopLevel btn param jQuery bs resizestart href jquery px pre
//  LocalWords:  mymodal setTitle setBody addYesNo rect getClickedAsText Dubeau
//  LocalWords:  MPL Mangalam DOM Ok
//# sourceMappingURL=modal.js.map

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Tooltips for elements that appear in the editor pane.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(7), __webpack_require__(27)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    jquery_1 = __importDefault(jquery_1);
    function _showHandler(ev) {
        var for_ = ev.target;
        var tt = jquery_1.default.data(for_, "bs.tooltip");
        jquery_1.default.data(tt.tip()[0], "wed-tooltip-for", for_);
    }
    /**
     * Creates a tooltip for an element. This function must be used to create *all*
     * tooltips that are associated with elements that appear in a GUI tree. It is
     * not necessary to use this function for tooltips that are outside this tree.
     *
     * This function adds the ``wed-tooltip-for`` data to the tooltip created for
     * the ``$for`` element. This allows getting the DOM element for which a tooltip
     * was created from the DOM element corresponding to the tooltip itself.
     *
     * This function also adds the ``wed-has-tooltip`` class to the ``$for``
     * element. This allows knowing which elements from the GUI tree have tooltips.
     *
     * @param $for The element for which to create a tooltip.
     *
     * @param options The options to pass to Bootstrap to create the tooltip.
     */
    function tooltip($for, options) {
        $for.tooltip(options);
        $for[0].classList.add("wed-has-tooltip");
        // This makes it so that when we find a div element created to hold a
        // tooltip, we can find the element for which the tooltip was created. We do
        // this in a show.bs.tooltip handler because the DOM element for the tooltip
        // won't be created before then. (We could force its creation earlier but it
        // would pollute the DOM with needless elements.)
        $for.on("show.bs.tooltip", _showHandler);
    }
    exports.tooltip = tooltip;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL tooltips bs Tooltips tooltip
//# sourceMappingURL=tooltip.js.map

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(265)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, log4javascript) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    log4javascript = __importStar(log4javascript);
    log4javascript.setShowStackTraces(true);
    var ajaxLogger = log4javascript.getLogger("wed");
    ajaxLogger.setLevel(log4javascript.Level.ALL);
    var log = log4javascript.getLogger("wed.common");
    log.setLevel(log4javascript.Level.ALL);
    var popup = new log4javascript.PopUpAppender(true);
    popup.setThreshold(log4javascript.Level.ERROR);
    popup.setInitiallyMinimized(true);
    popup.setNewestMessageAtTop(true);
    log.addAppender(popup);
    exports.trace = log.trace.bind(log);
    exports.debug = log.debug.bind(log);
    exports.info = log.info.bind(log);
    exports.warn = log.warn.bind(log);
    exports.error = log.error.bind(log);
    exports.fatal = log.fatal.bind(log);
    /**
     * Shows the popup appender.
     */
    function showPopup() {
        popup.show();
    }
    exports.showPopup = showPopup;
    /**
     * Wrapper for handled exceptions.
     */
    var Handled = /** @class */ (function () {
        /**
         * original The original exception that was raised.
         */
        function Handled(original) {
            this.original = original;
        }
        return Handled;
    }());
    exports.Handled = Handled;
    /**
     * Reports an unhandled exception. Avoids reporting the same exception
     * more than once.
     *
     * **Use this function only if it makes sense to not abort the current execution
     * by throwing a new exception.** In most cases you want to use [[handle]]
     * instead of this function.
     *
     * @param e The exception to report. This exception will not be
     * reported if it happens to be a [[Handled]] object.
     *
     * @returns A wrapper around the original exception.
     */
    function unhandled(e) {
        if (!(e instanceof Handled)) {
            log.fatal("Unhandled exception", e);
            // tslint:disable-next-line:no-typeof-undefined
            if (typeof console !== "undefined") {
                // tslint:disable:no-console
                console.log(e);
                console.log(e.stack);
                // tslint:enable:no-console
            }
            return new Handled(e);
        }
        return e;
    }
    exports.unhandled = unhandled;
    /**
     * Handles an unhandled exception. In almost all cases where you have to deal
     * with an unhandled exception, you want to interrupt the flow of
     * execution. This function does this.
     *
     * @param e The exception that is unhandled.
     *
     * @throws {Handled} Always.
     */
    function handle(e) {
        throw unhandled(e);
    }
    exports.handle = handle;
    /**
     * Wraps a function into an unhandled exception logger. The exceptions caught
     * are rethrown after being logged.
     *
     * @param f The function to wrap.
     *
     * @returns The value returned by f.
     */
    function wrap(fn) {
        // @ts-ignore
        return function wrapper() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            try {
                // tslint:disable-next-line:no-invalid-this
                return fn.apply(this, arguments);
            }
            catch (ex) {
                handle(ex);
            }
        };
    }
    exports.wrap = wrap;
    /**
     * This method adds an Ajax appender to the topmost logger defined by wed so
     * that all messages are sent to the URL specified as a parameter. A server
     * should be listening at that address.
     *
     * @param url The URL for the location to send log messages.
     *
     * @param headers An object having (key, value) pairs which define header fields
     * to set for communicating. One use for this parameter would be for instance to
     * set the X-CSRFToken field when wed is being used on pages served by a Django
     * server.
     *
     * @returns The appender that was created to handle the URL. This may be used
     * with [[removeAppender]] to remove an appender that is no longer used.
     */
    function addURL(url, headers) {
        var appender = new log4javascript.AjaxAppender(url);
        appender.setThreshold(log4javascript.Level.ALL);
        var layout = new log4javascript.XmlLayout();
        appender.setLayout(layout);
        if (headers !== undefined) {
            Object.keys(headers).forEach(function (x) {
                appender.addHeader(x, headers[x]);
            });
        }
        ajaxLogger.addAppender(appender);
        log.info("Ajax appender initialized");
        return appender;
    }
    exports.addURL = addURL;
    /**
     * Removes an appender from the logger. Flushes out any pending messages first.
     *
     * @param appender The appender to remove.
     */
    function removeAppender(appender) {
        appender.sendAll();
        ajaxLogger.removeAppender(appender);
    }
    exports.removeAppender = removeAppender;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  Dubeau MPL Mangalam popup appender unhandled rethrown Django
//  LocalWords:  CSRFToken param
//# sourceMappingURL=log.js.map

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * An execution runtime for editors.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(274), __webpack_require__(75), __webpack_require__(275), __webpack_require__(17)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, dexie_1, merge_options_1, ajax_1, util) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    merge_options_1 = __importDefault(merge_options_1);
    util = __importStar(util);
    // We "hide" the require call under a different name. It prevents Webpack from
    // choking on the dynamic require call we use in this file. (It is up to *us* to
    // set the environment so that the dynamic calls can work, not up to Webpack to
    // convert it to something sensible.)
    // tslint:disable-next-line:no-any no-string-literal
    var req = window["require"];
    /**
     * An object representing the runtime environment in which an editor is
     * running. In particular it allows loading external resources.
     */
    var Runtime = /** @class */ (function () {
        function Runtime(options) {
            // Make a deep copy.
            options = merge_options_1.default({}, options);
            this.options = options;
            var bluejaxOptions = options.bluejaxOptions != null ?
                options.bluejaxOptions : {
                tries: 3,
                delay: 100,
                diagnose: {
                    on: true,
                    // It would be desirable to support this...
                    // serverURL: "/ping",
                    knownServers: [
                        // tslint:disable:no-http-string
                        "http://www.google.com/",
                        "http://www.cloudfront.com/",
                    ],
                },
            };
            var made = ajax_1.make(bluejaxOptions);
            this.ajax = made.ajax;
            this.ajax$ = made.ajax$;
        }
        /**
         * Resolve resource references. References may be of the form:
         *
         * - String without a URL scheme identifier. Performs an Ajax query with the
         *   resource string as-is.
         *
         * - `indexeddb://v1/database/table/type/key/property` Loads from
         *    IndexedDB. It opens the database `database`, looks for the table
         *    `table`, loads the item with primary key `key` and extracts the value of
         *    the property `property`. (`property` is optional. When not specified,
         *    the whole record will be returned.) The `type` must have the values
         *    `number` or `string` determining how `key` is going to be
         *    interpreted. `v1` is the version number of the interpretation scheme
         *    used.
         */
        // The promise must resolve to any because when we address a field we really
        // can get anything.
        //
        // tslint:disable-next-line:no-any
        Runtime.prototype.resolve = function (resource) {
            var _this = this;
            return Promise.resolve().then(function () {
                var schemeSep = resource.indexOf("://");
                if (schemeSep === -1) {
                    return _this.ajax({
                        url: resource,
                        dataType: "text",
                    });
                }
                var scheme = resource.substr(0, schemeSep);
                if (scheme === "indexeddb") {
                    var path = resource.substr(schemeSep + 3);
                    var parts = path.split("/");
                    var version = parts[0];
                    var db = parts[1];
                    var table_1 = parts[2];
                    var keyType = parts[3];
                    var key_1 = parts[4];
                    var property_1 = parts[5];
                    if (version !== "v1") {
                        throw new Error("unsupported version number: " + version);
                    }
                    switch (keyType) {
                        case "string":
                            break;
                        case "number":
                            key_1 = Number(key_1);
                            break;
                        default:
                            throw new Error("unknown type: " + keyType);
                    }
                    var store_1 = new dexie_1.Dexie(db);
                    return store_1.open()
                        // We have to use .then<any> otherwise, TS is unable to use the right
                        // signature.
                        //
                        // tslint:disable-next-line:no-any
                        .then(function () { return store_1.table(table_1).get(key_1); })
                        .then(function (record) {
                        if (record == null) {
                            throw Error("cannot resolve key from: " + resource);
                        }
                        if (property_1 === undefined) {
                            return record;
                        }
                        if (!(property_1 in record)) {
                            throw Error("cannot resolve property in the record of: " + resource);
                        }
                        return record[property_1];
                    });
                }
                throw new Error("unknown scheme: " + scheme);
            });
        };
        Runtime.prototype.resolveToString = function (resource) {
            return this.resolve(resource).then(function (data) {
                if (typeof data === "string") {
                    return data;
                }
                if (data instanceof File) {
                    return util.readFile(data);
                }
                return String(data);
            });
        };
        /**
         * Resolve modules through the underlying module loader.
         *
         * @param resources A single module name or an array of such names.
         *
         * @returns promise of modules.
         */
        Runtime.prototype.resolveModules = function (resources) {
            return Promise.resolve().then(function () {
                if (!(resources instanceof Array)) {
                    resources = [resources];
                }
                return new Promise(function (resolve, reject) {
                    req(resources, function success() {
                        resolve(Array.prototype.slice.call(arguments));
                    }, reject);
                });
            });
        };
        return Runtime;
    }());
    exports.Runtime = Runtime;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  runtime MPL serverURL IndexedDB indexeddb keyType
//# sourceMappingURL=runtime.js.map

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Base class for savers.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(19), __webpack_require__(22), __webpack_require__(277)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, rxjs_1, browsers, serializer) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    browsers = __importStar(browsers);
    serializer = __importStar(serializer);
    var SaveKind;
    (function (SaveKind) {
        SaveKind[SaveKind["AUTO"] = 1] = "AUTO";
        SaveKind[SaveKind["MANUAL"] = 2] = "MANUAL";
    })(SaveKind = exports.SaveKind || (exports.SaveKind = {}));
    function deltaToString(delta) {
        delta = Math.round(delta / 1000);
        var timeDesc = "moments ago";
        if (delta > 0) {
            timeDesc = " ≈ ";
            // To get a single digit after the decimal point, we divide by (factor /
            // 10), round the result, and then divide by 10. Note that this is imprecise
            // due to rounding errors in floating point arithmetic but we don't care.
            if (delta > 60 * 60 * 24) {
                timeDesc += Math.round(delta / (6 * 60 * 24)) / 10 + "d";
            }
            else if (delta > 60 * 60) {
                timeDesc += Math.round(delta / (6 * 60)) / 10 + "h";
            }
            else if (delta > 60) {
                timeDesc += Math.round(delta / 6) / 10 + "m";
            }
            else {
                timeDesc += delta + "s";
            }
            timeDesc += " ago";
        }
        return timeDesc;
    }
    /**
     * A saver is responsible for saving a document's data. This class cannot be
     * instantiated as-is, but only through subclasses.
     */
    var Saver = /** @class */ (function () {
        /**
         * @param runtime The runtime under which this saver is created.
         *
         * @param version The version of wed for which this object is created.
         *
         * @param dataUpdater The updater that the editor created for its data tree.
         *
         * @param {Node} dataTree The editor's data tree.
         */
        function Saver(runtime, version, dataUpdater, dataTree, options) {
            var _this = this;
            this.runtime = runtime;
            this.version = version;
            this.dataUpdater = dataUpdater;
            this.dataTree = dataTree;
            this.options = options;
            /**
             * Subclasses must set this variable to true once they have finished with
             * their initialization.
             */
            this.initialized = false;
            /**
             * Subclasses must set this variable to true if the saver is in a failed
             * state. Note that the "failed" state is for cases where it makes no sense to
             * attempt a recovery operation.
             *
             * One effect of being in a "failed" state is that the saver won't perform a
             * recover operation if it is in a "failed" state.
             */
            this.failed = false;
            /**
             * The generation that is currently being edited.  It is mutable. Derived
             * classes can read it but not modify it.
             */
            this.currentGeneration = 0;
            /**
             * The generation that has last been saved. Derived classes can read it but
             * not modify it.
             */
            this.savedGeneration = 0;
            /**
             * The interval at which to autosave, in milliseconds.
             */
            this.autosaveInterval = 0;
            dataUpdater.events.subscribe(function (ev) {
                if (ev.name !== "Changed") {
                    return;
                }
                _this.lastModification = Date.now();
                if (_this.savedGeneration === _this.currentGeneration) {
                    _this.currentGeneration++;
                    _this._events.next({ name: "Changed" });
                }
            });
            /**
             * The _autosave method, pre-bound to ``this``.
             * @private
             */
            this._boundAutosave = this._autosave.bind(this);
            this._events = new rxjs_1.Subject();
            this.events = this._events.asObservable();
            if (options.autosave !== undefined) {
                this.setAutosaveInterval(options.autosave * 1000);
            }
        }
        /**
         * This method must be called when the user manually initiates a save.
         *
         * @returns A promise which resolves if the save was successful.
         */
        Saver.prototype.save = function () {
            return this._save(false);
        };
        /**
         * This method returns the data to be saved in a save operation. Derived
         * classes **must** call this method rather than get the data directly from
         * the data tree.
         */
        Saver.prototype.getData = function () {
            var child = this.dataTree.firstChild;
            if (browsers.MSIE) {
                return serializer.serialize(child);
            }
            var serialization = child.outerHTML;
            // Edge has the bad habit of adding a space before the forward slash in
            // self-closing tags. Remove it.
            return browsers.EDGE ? serialization.replace(/<([^/<>]+) \/>/g, "<$1/>") :
                serialization;
        };
        /**
         * Must be called by derived class upon a successful save.
         *
         * @param autosave ``true`` if called for an autosave operation, ``false`` if
         * not.
         *
         * @param savingGeneration The generation being saved. It is necessary to pass
         * this value due to the asynchronous nature of some saving operations.
         */
        Saver.prototype._saveSuccess = function (autosave, savingGeneration) {
            // If we get here, we've been successful.
            this.savedGeneration = savingGeneration;
            this.lastSave = Date.now();
            this.lastSaveKind = autosave ? SaveKind.AUTO : SaveKind.MANUAL;
            this._events.next(autosave ? { name: "Autosaved" } : { name: "Saved" });
            // This resets the countdown to now.
            this.setAutosaveInterval(this.autosaveInterval);
        };
        /**
         * Must be called by derived classes when they fail to perform their task.
         *
         * @param The error message associated with the failure. If the error message
         * is specified a ``failed`` event will be emitted. If not, no event is
         * emitted.
         */
        Saver.prototype._fail = function (error) {
            this.failed = true;
            if (error !== undefined) {
                this._events.next({ name: "Failed", error: error });
            }
        };
        /**
         * This is the function called internally when an autosave is needed.
         */
        Saver.prototype._autosave = function () {
            var _this = this;
            this.autosaveTimeout = undefined;
            var done = function () {
                // Calling ``setAutosaveInterval`` effectively starts a new timeout, and
                // takes care of possible race conditions. For instance, a call to
                // ``setAutosaveInterval`` could happen after the current timeout has
                // started saving but before ``done`` is called. This would launch a new
                // timeout. If the code here called ``setTimeout`` instead of
                // ``setAutosaveInterval`` then two timeouts would be running.
                _this.setAutosaveInterval(_this.autosaveInterval);
            };
            if (this.currentGeneration !== this.savedGeneration) {
                // We have something to save!
                // tslint:disable-next-line:no-floating-promises
                this._save(true).then(done);
            }
            else {
                done();
            }
        };
        /**
         * Changes the interval at which autosaves are performed. Note that calling
         * this function will stop the current countdown and restart it from zero. If,
         * for instance, the previous interval was 5 minutes, and 4 minutes had
         * elapsed since the last save, the next autosave should happen one minute
         * from now. However, if I now call this function with a new interval of 4
         * minutes, this will cause the next autosave to happen 4 minutes after the
         * call, rather than one minute.
         *
         * @param interval The interval between autosaves in milliseconds. 0 turns off
         * autosaves.
         */
        Saver.prototype.setAutosaveInterval = function (interval) {
            this.autosaveInterval = interval;
            var oldTimeout = this.autosaveTimeout;
            if (oldTimeout !== undefined) {
                clearTimeout(oldTimeout);
            }
            this.autosaveTimeout = interval !== 0 ?
                setTimeout(this._boundAutosave, interval) : undefined;
        };
        /**
         * This method is to be used by wed upon encountering a fatal error. It will
         * attempt to record the last state of the data tree before wed dies.
         *
         * @returns A promise which resolves to ``undefined`` if the method did not do
         * anything because the Saver object is in an unintialized state or has
         * already failed. It resolves to ``true`` if the recovery operation was
         * successful, and ``false`` if not.
         */
        Saver.prototype.recover = function () {
            var _this = this;
            return Promise.resolve().then(function () {
                if (!_this.initialized || _this.failed) {
                    return Promise.resolve(undefined);
                }
                return _this._recover();
            });
        };
        /**
         * Returns information regarding whether the saver sees the data tree as
         * having been modified since the last save occurred.
         *
         * @returns ``false`` if the tree has not been modified. Otherwise, returns a
         * string that describes how long ago the modification happened.
         */
        Saver.prototype.getModifiedWhen = function () {
            if (this.savedGeneration === this.currentGeneration ||
                this.lastModification === undefined) {
                return false;
            }
            return deltaToString(Date.now() - this.lastModification);
        };
        /**
         * Produces a string that indicates in human readable format when the last
         * save occurred.
         *
         * @returns The string. The value ``undefined`` is returned if no save has
         * occurred yet.
         */
        Saver.prototype.getSavedWhen = function () {
            if (this.lastSave === undefined) {
                return undefined;
            }
            return deltaToString(Date.now() - this.lastSave);
        };
        /**
         * Returns the last kind of save that occurred.
         *
         * @returns {number|undefined} The kind. The value will be
         * ``undefined`` if there has not been any save yet.
         */
        Saver.prototype.getLastSaveKind = function () {
            return this.lastSaveKind;
        };
        return Saver;
    }());
    exports.Saver = Saver;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  param unintialized Mangalam MPL Dubeau autosaved autosaves pre
//  LocalWords:  autosave runtime autosaving setAutosaveInterval setTimeout
//# sourceMappingURL=saver.js.map

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Task abstraction for wed.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(19), __webpack_require__(104)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, rxjs_1, operators_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * A task is a computation that should produce a definite goal after a finite
     * time. This class is used to allow the task to happen in a way that does not
     * completely block the JavaScript virtual machine. The task will happen in
     * cycles that run for a maximum amount of time before relinquishing control.
     */
    var TaskRunner = /** @class */ (function () {
        /**
         * @param task The computation controlled by this runner.
         *
         * @param options The options governing this runner.
         */
        function TaskRunner(task, options) {
            if (options === void 0) { options = {}; }
            this.task = task;
            this._timeout = 0;
            this._maxTimespan = 100;
            this._boundWrapper = this._workWrapper.bind(this);
            var keys = ["timeout", "maxTimespan"];
            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                var key = keys_1[_i];
                var value = options[key];
                if (value === undefined) {
                    continue;
                }
                if (value < 0) {
                    throw new Error("the value for " + key + " cannot be negative");
                }
                // tslint:disable-next-line:no-any
                this["_" + key] = options[key];
            }
            this._state = new rxjs_1.BehaviorSubject({
                running: false,
                completed: false,
                terminated: false,
            });
            this.state = this._state.asObservable();
        }
        Object.defineProperty(TaskRunner.prototype, "running", {
            get: function () {
                return this._state.value.running;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TaskRunner.prototype, "completed", {
            get: function () {
                return this._state.value.completed;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TaskRunner.prototype, "terminated", {
            get: function () {
                return this._state.value.terminated;
            },
            enumerable: true,
            configurable: true
        });
        TaskRunner.prototype.onCompleted = function () {
            return this.state.pipe(operators_1.first(function (state) { return state.completed; })).toPromise();
        };
        TaskRunner.prototype._stateFieldChange = function (field, value) {
            var latest = this._state.value;
            var newState = __assign({}, this._state.value);
            newState[field] = value;
            if (newState[field] !== latest[field]) {
                this._state.next(newState);
            }
        };
        TaskRunner.prototype._setTimeoutId = function (value) {
            this._timeoutId = value;
            this._stateFieldChange("running", this._timeoutId !== undefined);
        };
        /**
         * Marks the task as incomplete and starts processing.
         */
        TaskRunner.prototype.start = function () {
            this.reset();
            this.resume();
        };
        /**
         * Resets the task to its initial state. The task will be deemed incomplete.
         */
        TaskRunner.prototype.reset = function () {
            this._stateFieldChange("completed", false);
            this.task.reset(this);
        };
        /**
         * Resumes the task. This method does not change the completion status of the
         * task. So it is possible to stop a task temporarily and resume it later from
         * where it stopped.
         */
        TaskRunner.prototype.resume = function () {
            if (this.completed) {
                return;
            }
            if (this._timeoutId !== undefined) {
                this.stop();
            }
            // When we call ``this.resume``, we want the task to resume ASAP. So we do
            // not use ``this._timeout`` here. However, we do not call
            // ``this._workWrapper`` directly because we want to be able to call
            // ``this.resume`` from event handlers. If we did call ``this._workWrapper``
            // directly, we'd be calling this._cycle from inside this._cycle
            this._setTimeoutId(setTimeout(this._boundWrapper, 0));
        };
        /**
         * Convenience method. The bound version of this method
         * (``this._boundWrapper``) is what is called by the timeouts.
         */
        TaskRunner.prototype._workWrapper = function () {
            if (this._work()) {
                this._setTimeoutId(setTimeout(this._boundWrapper, this._timeout));
            }
            else {
                this._stateFieldChange("completed", true);
            }
        };
        /**
         * Keeps the task running by launching cycles only until done or until the
         * maximum time span for one run is reached.
         *
         * @returns False if there is no more work to do. True otherwise.
         */
        TaskRunner.prototype._work = function () {
            var startDate = Date.now();
            // tslint:disable-next-line:strict-boolean-expressions no-constant-condition
            while (true) {
                // Give a chance to other operations to work.
                if ((this._maxTimespan > 0) &&
                    (Date.now() - startDate) >= this._maxTimespan) {
                    return true;
                }
                var ret = this.task.cycle(this);
                if (!ret) {
                    return false;
                }
            }
        };
        /**
         * Stops the task.
         */
        TaskRunner.prototype.stop = function () {
            if (this._timeoutId !== undefined) {
                clearTimeout(this._timeoutId);
            }
            this._setTimeoutId(undefined);
        };
        /**
         * Terminate the task.
         */
        TaskRunner.prototype.terminate = function () {
            this.stop();
            this._stateFieldChange("terminated", true);
            this._state.complete();
        };
        return TaskRunner;
    }());
    exports.TaskRunner = TaskRunner;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL maxTimespan workWrapper
//# sourceMappingURL=task-runner.js.map

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * This module is responsible for validating the document being edited in wed.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(70), __webpack_require__(13), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, salve_dom_1, dloc, domtypeguards_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    dloc = __importStar(dloc);
    exports.INCOMPLETE = salve_dom_1.WorkingState.INCOMPLETE;
    exports.WORKING = salve_dom_1.WorkingState.WORKING;
    exports.INVALID = salve_dom_1.WorkingState.INVALID;
    exports.VALID = salve_dom_1.WorkingState.VALID;
    /**
     * A document validator.
     */
    var Validator = /** @class */ (function (_super) {
        __extends(Validator, _super);
        /**
         * @param schema A path to the schema to pass to salve for validation. This is
         * a path that will be interpreted by RequireJS. The schema must have already
         * been prepared for use by salve. See salve's documentation. Or this can be a
         * ``Grammar`` object that has already been produced from ``salve``'s
         * ``constructTree``.
         *
         * @param root The root of the DOM tree to validate. This root contains the
         * document to validate but is not **part** of it.
         *
         * @param modeValidators The mode-specific validators to use.
         */
        function Validator(schema, root, modeValidators) {
            var _this = _super.call(this, schema, root, {
                timeout: 0,
                maxTimespan: 100,
            }) || this;
            _this.modeValidators = modeValidators;
            return _this;
        }
        /**
         * Runs document-wide validation specific to the mode passed to
         * the validator.
         */
        Validator.prototype._runDocumentValidation = function () {
            for (var _i = 0, _a = this.modeValidators; _i < _a.length; _i++) {
                var validator = _a[_i];
                var errors = validator.validateDocument();
                for (var _b = 0, errors_1 = errors; _b < errors_1.length; _b++) {
                    var error = errors_1[_b];
                    this._processError(error);
                }
            }
        };
        Validator.prototype.possibleAt = function (container, index, attributes) {
            if (index === void 0) { index = false; }
            if (attributes === void 0) { attributes = false; }
            if (container instanceof dloc.DLoc) {
                if (typeof index !== "boolean") {
                    throw new Error("2nd parameter must be boolean");
                }
                attributes = index;
                index = container.offset;
                container = container.node;
            }
            if (typeof index !== "number") {
                throw new Error("index must be a number");
            }
            return _super.prototype.possibleAt.call(this, container, index, attributes);
        };
        Validator.prototype.speculativelyValidate = function (container, index, toParse) {
            if (container instanceof dloc.DLoc) {
                if (!(domtypeguards_1.isNode(index) || index instanceof Array)) {
                    throw new Error("2nd argument must be a Node or an array of Nodes");
                }
                toParse = index;
                index = container.offset;
                container = container.node;
            }
            if (typeof index !== "number") {
                throw new Error("index must be a number");
            }
            if (toParse === undefined) {
                throw new Error("toParse must be defined");
            }
            return _super.prototype.speculativelyValidate.call(this, container, index, toParse);
        };
        Validator.prototype.speculativelyValidateFragment = function (container, index, toParse) {
            if (container instanceof dloc.DLoc) {
                if ((typeof index === "number") || !domtypeguards_1.isElement(index)) {
                    // It appears as "toParse" to the caller, not "index".
                    throw new Error("toParse is not an element");
                }
                toParse = index;
                index = container.offset;
                container = container.node;
            }
            if (typeof index !== "number") {
                throw new Error("index must be a number");
            }
            if (toParse === undefined) {
                throw new Error("toParse must be defined");
            }
            return _super.prototype.speculativelyValidateFragment.call(this, container, index, toParse);
        };
        return Validator;
    }(salve_dom_1.Validator));
    exports.Validator = Validator;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  boolean Dubeau Mangalam validator MPL RequireJS unclosed DOM
//  LocalWords:  speculativelyValidate nd toParse
//# sourceMappingURL=validator.js.map

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* See LICENSE file for terms of use */

/*
 * Text diff implementation.
 *
 * This library supports the following APIS:
 * JsDiff.diffChars: Character by character diff
 * JsDiff.diffWords: Word (as defined by \b regex) diff which ignores whitespace
 * JsDiff.diffLines: Line based diff
 *
 * JsDiff.diffCss: Diff targeted at CSS content
 *
 * These methods are based on the implementation proposed in
 * "An O(ND) Difference Algorithm and its Variations" (Myers, 1986).
 * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927
 */
(function(global, undefined) {
  var objectPrototypeToString = Object.prototype.toString;

  /*istanbul ignore next*/
  function map(arr, mapper, that) {
    if (Array.prototype.map) {
      return Array.prototype.map.call(arr, mapper, that);
    }

    var other = new Array(arr.length);

    for (var i = 0, n = arr.length; i < n; i++) {
      other[i] = mapper.call(that, arr[i], i, arr);
    }
    return other;
  }
  function clonePath(path) {
    return { newPos: path.newPos, components: path.components.slice(0) };
  }
  function removeEmpty(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
      if (array[i]) {
        ret.push(array[i]);
      }
    }
    return ret;
  }
  function escapeHTML(s) {
    var n = s;
    n = n.replace(/&/g, '&amp;');
    n = n.replace(/</g, '&lt;');
    n = n.replace(/>/g, '&gt;');
    n = n.replace(/"/g, '&quot;');

    return n;
  }

  // This function handles the presence of circular references by bailing out when encountering an
  // object that is already on the "stack" of items being processed.
  function canonicalize(obj, stack, replacementStack) {
    stack = stack || [];
    replacementStack = replacementStack || [];

    var i;

    for (i = 0; i < stack.length; i += 1) {
      if (stack[i] === obj) {
        return replacementStack[i];
      }
    }

    var canonicalizedObj;

    if ('[object Array]' === objectPrototypeToString.call(obj)) {
      stack.push(obj);
      canonicalizedObj = new Array(obj.length);
      replacementStack.push(canonicalizedObj);
      for (i = 0; i < obj.length; i += 1) {
        canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack);
      }
      stack.pop();
      replacementStack.pop();
    } else if (typeof obj === 'object' && obj !== null) {
      stack.push(obj);
      canonicalizedObj = {};
      replacementStack.push(canonicalizedObj);
      var sortedKeys = [],
          key;
      for (key in obj) {
        sortedKeys.push(key);
      }
      sortedKeys.sort();
      for (i = 0; i < sortedKeys.length; i += 1) {
        key = sortedKeys[i];
        canonicalizedObj[key] = canonicalize(obj[key], stack, replacementStack);
      }
      stack.pop();
      replacementStack.pop();
    } else {
      canonicalizedObj = obj;
    }
    return canonicalizedObj;
  }

  function buildValues(components, newString, oldString, useLongestToken) {
    var componentPos = 0,
        componentLen = components.length,
        newPos = 0,
        oldPos = 0;

    for (; componentPos < componentLen; componentPos++) {
      var component = components[componentPos];
      if (!component.removed) {
        if (!component.added && useLongestToken) {
          var value = newString.slice(newPos, newPos + component.count);
          value = map(value, function(value, i) {
            var oldValue = oldString[oldPos + i];
            return oldValue.length > value.length ? oldValue : value;
          });

          component.value = value.join('');
        } else {
          component.value = newString.slice(newPos, newPos + component.count).join('');
        }
        newPos += component.count;

        // Common case
        if (!component.added) {
          oldPos += component.count;
        }
      } else {
        component.value = oldString.slice(oldPos, oldPos + component.count).join('');
        oldPos += component.count;

        // Reverse add and remove so removes are output first to match common convention
        // The diffing algorithm is tied to add then remove output and this is the simplest
        // route to get the desired output with minimal overhead.
        if (componentPos && components[componentPos - 1].added) {
          var tmp = components[componentPos - 1];
          components[componentPos - 1] = components[componentPos];
          components[componentPos] = tmp;
        }
      }
    }

    return components;
  }

  function Diff(ignoreWhitespace) {
    this.ignoreWhitespace = ignoreWhitespace;
  }
  Diff.prototype = {
    diff: function(oldString, newString, callback) {
      var self = this;

      function done(value) {
        if (callback) {
          setTimeout(function() { callback(undefined, value); }, 0);
          return true;
        } else {
          return value;
        }
      }

      // Handle the identity case (this is due to unrolling editLength == 0
      if (newString === oldString) {
        return done([{ value: newString }]);
      }
      if (!newString) {
        return done([{ value: oldString, removed: true }]);
      }
      if (!oldString) {
        return done([{ value: newString, added: true }]);
      }

      newString = this.tokenize(newString);
      oldString = this.tokenize(oldString);

      var newLen = newString.length, oldLen = oldString.length;
      var editLength = 1;
      var maxEditLength = newLen + oldLen;
      var bestPath = [{ newPos: -1, components: [] }];

      // Seed editLength = 0, i.e. the content starts with the same values
      var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);
      if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {
        // Identity per the equality and tokenizer
        return done([{value: newString.join('')}]);
      }

      // Main worker method. checks all permutations of a given edit length for acceptance.
      function execEditLength() {
        for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {
          var basePath;
          var addPath = bestPath[diagonalPath - 1],
              removePath = bestPath[diagonalPath + 1],
              oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;
          if (addPath) {
            // No one else is going to attempt to use this value, clear it
            bestPath[diagonalPath - 1] = undefined;
          }

          var canAdd = addPath && addPath.newPos + 1 < newLen,
              canRemove = removePath && 0 <= oldPos && oldPos < oldLen;
          if (!canAdd && !canRemove) {
            // If this path is a terminal then prune
            bestPath[diagonalPath] = undefined;
            continue;
          }

          // Select the diagonal that we want to branch from. We select the prior
          // path whose position in the new string is the farthest from the origin
          // and does not pass the bounds of the diff graph
          if (!canAdd || (canRemove && addPath.newPos < removePath.newPos)) {
            basePath = clonePath(removePath);
            self.pushComponent(basePath.components, undefined, true);
          } else {
            basePath = addPath;   // No need to clone, we've pulled it from the list
            basePath.newPos++;
            self.pushComponent(basePath.components, true, undefined);
          }

          oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath);

          // If we have hit the end of both strings, then we are done
          if (basePath.newPos + 1 >= newLen && oldPos + 1 >= oldLen) {
            return done(buildValues(basePath.components, newString, oldString, self.useLongestToken));
          } else {
            // Otherwise track this path as a potential candidate and continue.
            bestPath[diagonalPath] = basePath;
          }
        }

        editLength++;
      }

      // Performs the length of edit iteration. Is a bit fugly as this has to support the
      // sync and async mode which is never fun. Loops over execEditLength until a value
      // is produced.
      if (callback) {
        (function exec() {
          setTimeout(function() {
            // This should not happen, but we want to be safe.
            /*istanbul ignore next */
            if (editLength > maxEditLength) {
              return callback();
            }

            if (!execEditLength()) {
              exec();
            }
          }, 0);
        }());
      } else {
        while (editLength <= maxEditLength) {
          var ret = execEditLength();
          if (ret) {
            return ret;
          }
        }
      }
    },

    pushComponent: function(components, added, removed) {
      var last = components[components.length - 1];
      if (last && last.added === added && last.removed === removed) {
        // We need to clone here as the component clone operation is just
        // as shallow array clone
        components[components.length - 1] = {count: last.count + 1, added: added, removed: removed };
      } else {
        components.push({count: 1, added: added, removed: removed });
      }
    },
    extractCommon: function(basePath, newString, oldString, diagonalPath) {
      var newLen = newString.length,
          oldLen = oldString.length,
          newPos = basePath.newPos,
          oldPos = newPos - diagonalPath,

          commonCount = 0;
      while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {
        newPos++;
        oldPos++;
        commonCount++;
      }

      if (commonCount) {
        basePath.components.push({count: commonCount});
      }

      basePath.newPos = newPos;
      return oldPos;
    },

    equals: function(left, right) {
      var reWhitespace = /\S/;
      return left === right || (this.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right));
    },
    tokenize: function(value) {
      return value.split('');
    }
  };

  var CharDiff = new Diff();

  var WordDiff = new Diff(true);
  var WordWithSpaceDiff = new Diff();
  WordDiff.tokenize = WordWithSpaceDiff.tokenize = function(value) {
    return removeEmpty(value.split(/(\s+|\b)/));
  };

  var CssDiff = new Diff(true);
  CssDiff.tokenize = function(value) {
    return removeEmpty(value.split(/([{}:;,]|\s+)/));
  };

  var LineDiff = new Diff();

  var TrimmedLineDiff = new Diff();
  TrimmedLineDiff.ignoreTrim = true;

  LineDiff.tokenize = TrimmedLineDiff.tokenize = function(value) {
    var retLines = [],
        lines = value.split(/^/m);
    for (var i = 0; i < lines.length; i++) {
      var line = lines[i],
          lastLine = lines[i - 1],
          lastLineLastChar = lastLine && lastLine[lastLine.length - 1];

      // Merge lines that may contain windows new lines
      if (line === '\n' && lastLineLastChar === '\r') {
          retLines[retLines.length - 1] = retLines[retLines.length - 1].slice(0, -1) + '\r\n';
      } else {
        if (this.ignoreTrim) {
          line = line.trim();
          // add a newline unless this is the last line.
          if (i < lines.length - 1) {
            line += '\n';
          }
        }
        retLines.push(line);
      }
    }

    return retLines;
  };

  var PatchDiff = new Diff();
  PatchDiff.tokenize = function(value) {
    var ret = [],
        linesAndNewlines = value.split(/(\n|\r\n)/);

    // Ignore the final empty token that occurs if the string ends with a new line
    if (!linesAndNewlines[linesAndNewlines.length - 1]) {
      linesAndNewlines.pop();
    }

    // Merge the content and line separators into single tokens
    for (var i = 0; i < linesAndNewlines.length; i++) {
      var line = linesAndNewlines[i];

      if (i % 2) {
        ret[ret.length - 1] += line;
      } else {
        ret.push(line);
      }
    }
    return ret;
  };

  var SentenceDiff = new Diff();
  SentenceDiff.tokenize = function(value) {
    return removeEmpty(value.split(/(\S.+?[.!?])(?=\s+|$)/));
  };

  var JsonDiff = new Diff();
  // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a
  // dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:
  JsonDiff.useLongestToken = true;
  JsonDiff.tokenize = LineDiff.tokenize;
  JsonDiff.equals = function(left, right) {
    return LineDiff.equals(left.replace(/,([\r\n])/g, '$1'), right.replace(/,([\r\n])/g, '$1'));
  };

  var JsDiff = {
    Diff: Diff,

    diffChars: function(oldStr, newStr, callback) { return CharDiff.diff(oldStr, newStr, callback); },
    diffWords: function(oldStr, newStr, callback) { return WordDiff.diff(oldStr, newStr, callback); },
    diffWordsWithSpace: function(oldStr, newStr, callback) { return WordWithSpaceDiff.diff(oldStr, newStr, callback); },
    diffLines: function(oldStr, newStr, callback) { return LineDiff.diff(oldStr, newStr, callback); },
    diffTrimmedLines: function(oldStr, newStr, callback) { return TrimmedLineDiff.diff(oldStr, newStr, callback); },

    diffSentences: function(oldStr, newStr, callback) { return SentenceDiff.diff(oldStr, newStr, callback); },

    diffCss: function(oldStr, newStr, callback) { return CssDiff.diff(oldStr, newStr, callback); },
    diffJson: function(oldObj, newObj, callback) {
      return JsonDiff.diff(
        typeof oldObj === 'string' ? oldObj : JSON.stringify(canonicalize(oldObj), undefined, '  '),
        typeof newObj === 'string' ? newObj : JSON.stringify(canonicalize(newObj), undefined, '  '),
        callback
      );
    },

    createTwoFilesPatch: function(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader) {
      var ret = [];

      if (oldFileName == newFileName) {
        ret.push('Index: ' + oldFileName);
      }
      ret.push('===================================================================');
      ret.push('--- ' + oldFileName + (typeof oldHeader === 'undefined' ? '' : '\t' + oldHeader));
      ret.push('+++ ' + newFileName + (typeof newHeader === 'undefined' ? '' : '\t' + newHeader));

      var diff = PatchDiff.diff(oldStr, newStr);
      diff.push({value: '', lines: []});   // Append an empty value to make cleanup easier

      // Formats a given set of lines for printing as context lines in a patch
      function contextLines(lines) {
        return map(lines, function(entry) { return ' ' + entry; });
      }

      // Outputs the no newline at end of file warning if needed
      function eofNL(curRange, i, current) {
        var last = diff[diff.length - 2],
            isLast = i === diff.length - 2,
            isLastOfType = i === diff.length - 3 && current.added !== last.added;

        // Figure out if this is the last line for the given file and missing NL
        if (!(/\n$/.test(current.value)) && (isLast || isLastOfType)) {
          curRange.push('\\ No newline at end of file');
        }
      }

      var oldRangeStart = 0, newRangeStart = 0, curRange = [],
          oldLine = 1, newLine = 1;
      for (var i = 0; i < diff.length; i++) {
        var current = diff[i],
            lines = current.lines || current.value.replace(/\n$/, '').split('\n');
        current.lines = lines;

        if (current.added || current.removed) {
          // If we have previous context, start with that
          if (!oldRangeStart) {
            var prev = diff[i - 1];
            oldRangeStart = oldLine;
            newRangeStart = newLine;

            if (prev) {
              curRange = contextLines(prev.lines.slice(-4));
              oldRangeStart -= curRange.length;
              newRangeStart -= curRange.length;
            }
          }

          // Output our changes
          curRange.push.apply(curRange, map(lines, function(entry) {
            return (current.added ? '+' : '-') + entry;
          }));
          eofNL(curRange, i, current);

          // Track the updated file position
          if (current.added) {
            newLine += lines.length;
          } else {
            oldLine += lines.length;
          }
        } else {
          // Identical context lines. Track line changes
          if (oldRangeStart) {
            // Close out any changes that have been output (or join overlapping)
            if (lines.length <= 8 && i < diff.length - 2) {
              // Overlapping
              curRange.push.apply(curRange, contextLines(lines));
            } else {
              // end the range and output
              var contextSize = Math.min(lines.length, 4);
              ret.push(
                  '@@ -' + oldRangeStart + ',' + (oldLine - oldRangeStart + contextSize)
                  + ' +' + newRangeStart + ',' + (newLine - newRangeStart + contextSize)
                  + ' @@');
              ret.push.apply(ret, curRange);
              ret.push.apply(ret, contextLines(lines.slice(0, contextSize)));
              if (lines.length <= 4) {
                eofNL(ret, i, current);
              }

              oldRangeStart = 0;
              newRangeStart = 0;
              curRange = [];
            }
          }
          oldLine += lines.length;
          newLine += lines.length;
        }
      }

      return ret.join('\n') + '\n';
    },

    createPatch: function(fileName, oldStr, newStr, oldHeader, newHeader) {
      return JsDiff.createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader);
    },

    applyPatch: function(oldStr, uniDiff) {
      var diffstr = uniDiff.split('\n'),
          hunks = [],
          i = 0,
          remEOFNL = false,
          addEOFNL = false;

      // Skip to the first change hunk
      while (i < diffstr.length && !(/^@@/.test(diffstr[i]))) {
        i++;
      }

      // Parse the unified diff
      for (; i < diffstr.length; i++) {
        if (diffstr[i][0] === '@') {
          var chnukHeader = diffstr[i].split(/@@ -(\d+),(\d+) \+(\d+),(\d+) @@/);
          hunks.unshift({
            start: chnukHeader[3],
            oldlength: +chnukHeader[2],
            removed: [],
            newlength: chnukHeader[4],
            added: []
          });
        } else if (diffstr[i][0] === '+') {
          hunks[0].added.push(diffstr[i].substr(1));
        } else if (diffstr[i][0] === '-') {
          hunks[0].removed.push(diffstr[i].substr(1));
        } else if (diffstr[i][0] === ' ') {
          hunks[0].added.push(diffstr[i].substr(1));
          hunks[0].removed.push(diffstr[i].substr(1));
        } else if (diffstr[i][0] === '\\') {
          if (diffstr[i - 1][0] === '+') {
            remEOFNL = true;
          } else if (diffstr[i - 1][0] === '-') {
            addEOFNL = true;
          }
        }
      }

      // Apply the diff to the input
      var lines = oldStr.split('\n');
      for (i = hunks.length - 1; i >= 0; i--) {
        var hunk = hunks[i];
        // Sanity check the input string. Bail if we don't match.
        for (var j = 0; j < hunk.oldlength; j++) {
          if (lines[hunk.start - 1 + j] !== hunk.removed[j]) {
            return false;
          }
        }
        Array.prototype.splice.apply(lines, [hunk.start - 1, hunk.oldlength].concat(hunk.added));
      }

      // Handle EOFNL insertion/removal
      if (remEOFNL) {
        while (!lines[lines.length - 1]) {
          lines.pop();
        }
      } else if (addEOFNL) {
        lines.push('');
      }
      return lines.join('\n');
    },

    convertChangesToXML: function(changes) {
      var ret = [];
      for (var i = 0; i < changes.length; i++) {
        var change = changes[i];
        if (change.added) {
          ret.push('<ins>');
        } else if (change.removed) {
          ret.push('<del>');
        }

        ret.push(escapeHTML(change.value));

        if (change.added) {
          ret.push('</ins>');
        } else if (change.removed) {
          ret.push('</del>');
        }
      }
      return ret.join('');
    },

    // See: http://code.google.com/p/google-diff-match-patch/wiki/API
    convertChangesToDMP: function(changes) {
      var ret = [],
          change,
          operation;
      for (var i = 0; i < changes.length; i++) {
        change = changes[i];
        if (change.added) {
          operation = 1;
        } else if (change.removed) {
          operation = -1;
        } else {
          operation = 0;
        }

        ret.push([operation, change.value]);
      }
      return ret;
    },

    canonicalize: canonicalize
  };

  /*istanbul ignore next */
  /*global module */
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = JsDiff;
  } else if (true) {
    /*global define */
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() { return JsDiff; }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof global.JsDiff === 'undefined') {
    global.JsDiff = JsDiff;
  }
}(this));


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Content scroller.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(7), __webpack_require__(19), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, jquery_1, rxjs_1, domutil_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    jquery_1 = __importDefault(jquery_1);
    /**
     * Content scroller. This object is responsible for scrolling the GUI tree.
     */
    var Scroller = /** @class */ (function () {
        /**
         * @param el The DOM element responsible for scrolling.
         */
        function Scroller(el) {
            var _this = this;
            this.el = el;
            this._events = new rxjs_1.Subject();
            /** This is where you can listen to scrolling events. */
            this.events = this._events.asObservable();
            jquery_1.default(el).on("scroll", function () {
                _this._events.next({ scroller: _this });
            });
        }
        Object.defineProperty(Scroller.prototype, "scrollTop", {
            get: function () {
                return this.el.scrollTop;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Scroller.prototype, "scrollLeft", {
            get: function () {
                return this.el.scrollLeft;
            },
            enumerable: true,
            configurable: true
        });
        Scroller.prototype.getBoundingClientRect = function () {
            return this.el.getBoundingClientRect();
        };
        /**
         * Coerce this scroller to a specific height in pixels.
         *
         * @param height The height to which to coerce.
         */
        Scroller.prototype.coerceHeight = function (height) {
            this.el.style.height = height + "px";
        };
        /**
         * Determine whether a point is inside the DOM element managed by this
         * scroller.
         */
        Scroller.prototype.isPointInside = function (x, y) {
            return domutil_1.pointInContents(this.el, x, y);
        };
        /**
         * Scrolls the window and scroller so that the rectangle is visible to the
         * user. The rectangle coordinates must be relative to the scroller
         * element.
         *
         * This method tries to be the least disruptive it can: it will adjust the
         * scroller and the window *just enough* to show the rectangle.
         */
        Scroller.prototype.scrollIntoView = function (left, top, right, bottom) {
            // Adjust gui_root.
            var el = this.el;
            var vtop = el.scrollTop;
            var vheight = el.clientHeight;
            var vbottom = vtop + vheight;
            if (top < vtop || bottom > vbottom) {
                // Not already in view.
                vtop = top < vtop ? top : bottom - vheight;
                el.scrollTop = vtop;
            }
            var vleft = el.scrollLeft;
            var vwidth = el.clientWidth;
            var vright = vleft + vwidth;
            if (left < vleft || right > vright) {
                // Not already in view.
                vleft = left < vleft ? left : right - vwidth;
                el.scrollLeft = vleft;
            }
            var pos = el.getBoundingClientRect();
            // Compute the coordinates relative to the client.
            left = left - vleft + pos.left;
            right = right - vleft + pos.left;
            top = top - vtop + pos.top;
            bottom = bottom - vtop + pos.top;
            var doc = el.ownerDocument;
            var sheight = doc.body.scrollHeight;
            var swidth = doc.body.scrollWidth;
            var byY = 0;
            if (top < 0 || bottom > sheight) {
                byY = top < 0 ? top : bottom;
            }
            var byX = 0;
            if (left < 0 || right > swidth) {
                byX = left < 0 ? left : right;
            }
            doc.defaultView.scrollBy(byX, byY);
        };
        return Scroller;
    }());
    exports.Scroller = Scroller;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  scroller MPL px
//# sourceMappingURL=scroller.js.map

/***/ }),
/* 130 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = toSubscriber;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__symbol_rxSubscriber__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Observer__ = __webpack_require__(79);
/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */



function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof __WEBPACK_IMPORTED_MODULE_0__Subscriber__["a" /* Subscriber */]) {
            return nextOrObserver;
        }
        if (nextOrObserver[__WEBPACK_IMPORTED_MODULE_1__symbol_rxSubscriber__["a" /* rxSubscriber */]]) {
            return nextOrObserver[__WEBPACK_IMPORTED_MODULE_1__symbol_rxSubscriber__["a" /* rxSubscriber */]]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new __WEBPACK_IMPORTED_MODULE_0__Subscriber__["a" /* Subscriber */](__WEBPACK_IMPORTED_MODULE_2__Observer__["a" /* empty */]);
    }
    return new __WEBPACK_IMPORTED_MODULE_0__Subscriber__["a" /* Subscriber */](nextOrObserver, error, complete);
}
//# sourceMappingURL=toSubscriber.js.map


/***/ }),
/* 131 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return QueueAction; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsyncAction__ = __webpack_require__(29);
/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */


/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var QueueAction = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](QueueAction, _super);
    function QueueAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    QueueAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (delay > 0) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.delay = delay;
        this.state = state;
        this.scheduler.flush(this);
        return this;
    };
    QueueAction.prototype.execute = function (state, delay) {
        return (delay > 0 || this.closed) ?
            _super.prototype.execute.call(this, state, delay) :
            this._execute(state, delay);
    };
    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Otherwise flush the scheduler starting with this action.
        return scheduler.flush(this);
    };
    return QueueAction;
}(__WEBPACK_IMPORTED_MODULE_1__AsyncAction__["a" /* AsyncAction */]));

//# sourceMappingURL=QueueAction.js.map


/***/ }),
/* 132 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Action; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscription__ = __webpack_require__(8);
/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */


/**
 * A unit of work to be executed in a {@link Scheduler}. An action is typically
 * created from within a Scheduler and an RxJS user does not need to concern
 * themselves about creating and manipulating an Action.
 *
 * ```ts
 * class Action<T> extends Subscription {
 *   new (scheduler: Scheduler, work: (state?: T) => void);
 *   schedule(state?: T, delay: number = 0): Subscription;
 * }
 * ```
 *
 * @class Action<T>
 */
var Action = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](Action, _super);
    function Action(scheduler, work) {
        return _super.call(this) || this;
    }
    /**
     * Schedules this action on its parent Scheduler for execution. May be passed
     * some context object, `state`. May happen at some point in the future,
     * according to the `delay` parameter, if specified.
     * @param {T} [state] Some contextual data that the `work` function uses when
     * called by the Scheduler.
     * @param {number} [delay] Time to wait before executing the work, where the
     * time unit is implicit and defined by the Scheduler.
     * @return {void}
     */
    Action.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return this;
    };
    return Action;
}(__WEBPACK_IMPORTED_MODULE_1__Subscription__["a" /* Subscription */]));

//# sourceMappingURL=Action.js.map


/***/ }),
/* 133 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return QueueScheduler; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsyncScheduler__ = __webpack_require__(30);
/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */


var QueueScheduler = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](QueueScheduler, _super);
    function QueueScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return QueueScheduler;
}(__WEBPACK_IMPORTED_MODULE_1__AsyncScheduler__["a" /* AsyncScheduler */]));

//# sourceMappingURL=QueueScheduler.js.map


/***/ }),
/* 134 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AsapAction; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_Immediate__ = __webpack_require__(135);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AsyncAction__ = __webpack_require__(29);
/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */



/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AsapAction = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](AsapAction, _super);
    function AsapAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        // If delay is greater than 0, request as an async action.
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Push the action to the end of the scheduler queue.
        scheduler.actions.push(this);
        // If a microtask has already been scheduled, don't schedule another
        // one. If a microtask hasn't been scheduled yet, schedule one now. Return
        // the current scheduled microtask id.
        return scheduler.scheduled || (scheduler.scheduled = __WEBPACK_IMPORTED_MODULE_1__util_Immediate__["a" /* Immediate */].setImmediate(scheduler.flush.bind(scheduler, null)));
    };
    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        // If the scheduler queue is empty, cancel the requested microtask and
        // set the scheduled flag to undefined so the next AsapAction will schedule
        // its own.
        if (scheduler.actions.length === 0) {
            __WEBPACK_IMPORTED_MODULE_1__util_Immediate__["a" /* Immediate */].clearImmediate(id);
            scheduler.scheduled = undefined;
        }
        // Return undefined so the action knows to request a new async id if it's rescheduled.
        return undefined;
    };
    return AsapAction;
}(__WEBPACK_IMPORTED_MODULE_2__AsyncAction__["a" /* AsyncAction */]));

//# sourceMappingURL=AsapAction.js.map


/***/ }),
/* 135 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Immediate; });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var nextHandle = 1;
var tasksByHandle = {};
function runIfPresent(handle) {
    var cb = tasksByHandle[handle];
    if (cb) {
        cb();
    }
}
var Immediate = {
    setImmediate: function (cb) {
        var handle = nextHandle++;
        tasksByHandle[handle] = cb;
        Promise.resolve().then(function () { return runIfPresent(handle); });
        return handle;
    },
    clearImmediate: function (handle) {
        delete tasksByHandle[handle];
    },
};
//# sourceMappingURL=Immediate.js.map


/***/ }),
/* 136 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AsapScheduler; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsyncScheduler__ = __webpack_require__(30);
/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */


var AsapScheduler = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](AsapScheduler, _super);
    function AsapScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AsapScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsapScheduler;
}(__WEBPACK_IMPORTED_MODULE_1__AsyncScheduler__["a" /* AsyncScheduler */]));

//# sourceMappingURL=AsapScheduler.js.map


/***/ }),
/* 137 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return animationFrame; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AnimationFrameAction__ = __webpack_require__(138);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AnimationFrameScheduler__ = __webpack_require__(139);
/** PURE_IMPORTS_START _AnimationFrameAction,_AnimationFrameScheduler PURE_IMPORTS_END */


/**
 *
 * Animation Frame Scheduler
 *
 * <span class="informal">Perform task when `window.requestAnimationFrame` would fire</span>
 *
 * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler
 * behaviour.
 *
 * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.
 * It makes sure scheduled task will happen just before next browser content repaint,
 * thus performing animations as efficiently as possible.
 *
 * @example <caption>Schedule div height animation</caption>
 * const div = document.querySelector('.some-div');
 *
 * Rx.Scheduler.animationFrame.schedule(function(height) {
 *   div.style.height = height + "px";
 *
 *   this.schedule(height + 1);  // `this` references currently executing Action,
 *                               // which we reschedule with new state
 * }, 0, 0);
 *
 * // You will see .some-div element growing in height
 *
 *
 * @static true
 * @name animationFrame
 * @owner Scheduler
 */
var animationFrame = /*@__PURE__*/ new __WEBPACK_IMPORTED_MODULE_1__AnimationFrameScheduler__["a" /* AnimationFrameScheduler */](__WEBPACK_IMPORTED_MODULE_0__AnimationFrameAction__["a" /* AnimationFrameAction */]);
//# sourceMappingURL=animationFrame.js.map


/***/ }),
/* 138 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AnimationFrameAction; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsyncAction__ = __webpack_require__(29);
/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */


/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AnimationFrameAction = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](AnimationFrameAction, _super);
    function AnimationFrameAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        // If delay is greater than 0, request as an async action.
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Push the action to the end of the scheduler queue.
        scheduler.actions.push(this);
        // If an animation frame has already been requested, don't request another
        // one. If an animation frame hasn't been requested yet, request one. Return
        // the current animation frame request id.
        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));
    };
    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        // If the scheduler queue is empty, cancel the requested animation frame and
        // set the scheduled flag to undefined so the next AnimationFrameAction will
        // request its own.
        if (scheduler.actions.length === 0) {
            cancelAnimationFrame(id);
            scheduler.scheduled = undefined;
        }
        // Return undefined so the action knows to request a new async id if it's rescheduled.
        return undefined;
    };
    return AnimationFrameAction;
}(__WEBPACK_IMPORTED_MODULE_1__AsyncAction__["a" /* AsyncAction */]));

//# sourceMappingURL=AnimationFrameAction.js.map


/***/ }),
/* 139 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AnimationFrameScheduler; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsyncScheduler__ = __webpack_require__(30);
/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */


var AnimationFrameScheduler = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](AnimationFrameScheduler, _super);
    function AnimationFrameScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnimationFrameScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AnimationFrameScheduler;
}(__WEBPACK_IMPORTED_MODULE_1__AsyncScheduler__["a" /* AsyncScheduler */]));

//# sourceMappingURL=AnimationFrameScheduler.js.map


/***/ }),
/* 140 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return VirtualTimeScheduler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VirtualAction; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsyncAction__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AsyncScheduler__ = __webpack_require__(30);
/** PURE_IMPORTS_START tslib,_AsyncAction,_AsyncScheduler PURE_IMPORTS_END */



var VirtualTimeScheduler = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](VirtualTimeScheduler, _super);
    function VirtualTimeScheduler(SchedulerAction, maxFrames) {
        if (SchedulerAction === void 0) {
            SchedulerAction = VirtualAction;
        }
        if (maxFrames === void 0) {
            maxFrames = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;
        _this.maxFrames = maxFrames;
        _this.frame = 0;
        _this.index = -1;
        return _this;
    }
    /**
     * Prompt the Scheduler to execute all of its queued actions, therefore
     * clearing its queue.
     * @return {void}
     */
    VirtualTimeScheduler.prototype.flush = function () {
        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
        var error, action;
        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        }
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    VirtualTimeScheduler.frameTimeFactor = 10;
    return VirtualTimeScheduler;
}(__WEBPACK_IMPORTED_MODULE_2__AsyncScheduler__["a" /* AsyncScheduler */]));

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var VirtualAction = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](VirtualAction, _super);
    function VirtualAction(scheduler, work, index) {
        if (index === void 0) {
            index = scheduler.index += 1;
        }
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.index = index;
        _this.active = true;
        _this.index = scheduler.index = index;
        return _this;
    }
    VirtualAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (!this.id) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.active = false;
        // If an action is rescheduled, we save allocations by mutating its state,
        // pushing it to the end of the scheduler queue, and recycling the action.
        // But since the VirtualTimeScheduler is used for testing, VirtualActions
        // must be immutable so they can be inspected later.
        var action = new VirtualAction(this.scheduler, this.work);
        this.add(action);
        return action.schedule(state, delay);
    };
    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        this.delay = scheduler.frame + delay;
        var actions = scheduler.actions;
        actions.push(this);
        actions.sort(VirtualAction.sortActions);
        return true;
    };
    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return undefined;
    };
    VirtualAction.prototype._execute = function (state, delay) {
        if (this.active === true) {
            return _super.prototype._execute.call(this, state, delay);
        }
    };
    VirtualAction.sortActions = function (a, b) {
        if (a.delay === b.delay) {
            if (a.index === b.index) {
                return 0;
            }
            else if (a.index > b.index) {
                return 1;
            }
            else {
                return -1;
            }
        }
        else if (a.delay > b.delay) {
            return 1;
        }
        else {
            return -1;
        }
    };
    return VirtualAction;
}(__WEBPACK_IMPORTED_MODULE_1__AsyncAction__["a" /* AsyncAction */]));

//# sourceMappingURL=VirtualTimeScheduler.js.map


/***/ }),
/* 141 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isObservable;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

/**
 * Tests to see if the object is an RxJS {@link Observable}
 * @param obj the object to test
 */
function isObservable(obj) {
    return !!obj && (obj instanceof __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */] || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));
}
//# sourceMappingURL=isObservable.js.map


/***/ }),
/* 142 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = bindCallback;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsyncSubject__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__operators_map__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_isArray__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_isScheduler__ = __webpack_require__(15);
/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_isArray,_util_isScheduler PURE_IMPORTS_END */





// tslint:enable:max-line-length
/**
 * Converts a callback API to a function that returns an Observable.
 *
 * <span class="informal">Give it a function `f` of type `f(x, callback)` and
 * it will return a function `g` that when called as `g(x)` will output an
 * Observable.</span>
 *
 * `bindCallback` is not an operator because its input and output are not
 * Observables. The input is a function `func` with some parameters, the
 * last parameter must be a callback function that `func` calls when it is
 * done.
 *
 * The output of `bindCallback` is a function that takes the same parameters
 * as `func`, except the last one (the callback). When the output function
 * is called with arguments it will return an Observable. If function `func`
 * calls its callback with one argument the Observable will emit that value.
 * If on the other hand the callback is called with multiple values the resulting
 * Observable will emit an array with said values as arguments.
 *
 * It is very important to remember that input function `func` is not called
 * when the output function is, but rather when the Observable returned by the output
 * function is subscribed. This means if `func` makes an AJAX request, that request
 * will be made every time someone subscribes to the resulting Observable, but not before.
 *
 * The last optional parameter - {@link Scheduler} - can be used to control when the call
 * to `func` happens after someone subscribes to Observable, as well as when results
 * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`
 * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,
 * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler
 * and call `subscribe` on the output Observable all function calls that are currently executing
 * will end before `func` is invoked.
 *
 * By default results passed to the callback are emitted immediately after `func` invokes the callback.
 * In particular, if the callback is called synchronously the subscription of the resulting Observable
 * will call the `next` function synchronously as well.  If you want to defer that call,
 * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can
 * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.
 *
 * Note that the Observable created by the output function will always emit a single value
 * and then complete immediately. If `func` calls the callback multiple times, values from subsequent
 * calls will not appear in the stream. If you need to listen for multiple calls,
 *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.
 *
 * If `func` depends on some context (`this` property) and is not already bound the context of `func`
 * will be the context that the output function has at call time. In particular, if `func`
 * is called as a method of some objec and if `func` is not already bound, in order to preserve the context
 * it is recommended that the context of the output function is set to that object as well.
 *
 * If the input function calls its callback in the "node style" (i.e. first argument to callback is
 * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}
 * provides convenient error handling and probably is a better choice.
 * `bindCallback` will treat such functions the same as any other and error parameters
 * (whether passed or not) will always be interpreted as regular callback argument.
 *
 *
 * @example <caption>Convert jQuery's getJSON to an Observable API</caption>
 * // Suppose we have jQuery.getJSON('/my/url', callback)
 * var getJSONAsObservable = bindCallback(jQuery.getJSON);
 * var result = getJSONAsObservable('/my/url');
 * result.subscribe(x => console.log(x), e => console.error(e));
 *
 *
 * @example <caption>Receive an array of arguments passed to a callback</caption>
 * someFunction((a, b, c) => {
 *   console.log(a); // 5
 *   console.log(b); // 'some string'
 *   console.log(c); // {someProperty: 'someValue'}
 * });
 *
 * const boundSomeFunction = bindCallback(someFunction);
 * boundSomeFunction().subscribe(values => {
 *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]
 * });
 *
 *
 * @example <caption>Compare behaviour with and without async Scheduler</caption>
 * function iCallMyCallbackSynchronously(cb) {
 *   cb();
 * }
 *
 * const boundSyncFn = bindCallback(iCallMyCallbackSynchronously);
 * const boundAsyncFn = bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);
 *
 * boundSyncFn().subscribe(() => console.log('I was sync!'));
 * boundAsyncFn().subscribe(() => console.log('I was async!'));
 * console.log('This happened...');
 *
 * // Logs:
 * // I was sync!
 * // This happened...
 * // I was async!
 *
 *
 * @example <caption>Use bindCallback on an object method</caption>
 * const boundMethod = bindCallback(someObject.methodWithCallback);
 * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject
 * .subscribe(subscriber);
 *
 *
 * @see {@link bindNodeCallback}
 * @see {@link from}
 * @see {@link fromPromise}
 *
 * @param {function} func A function with a callback as the last parameter.
 * @param {Scheduler} [scheduler] The scheduler on which to schedule the
 * callbacks.
 * @return {function(...params: *): Observable} A function which returns the
 * Observable that delivers the same values the callback would deliver.
 * @name bindCallback
 */
function bindCallback(callbackFunc, resultSelector, scheduler) {
    if (resultSelector) {
        if (Object(__WEBPACK_IMPORTED_MODULE_4__util_isScheduler__["a" /* isScheduler */])(resultSelector)) {
            scheduler = resultSelector;
        }
        else {
            // DEPRECATED PATH
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(Object(__WEBPACK_IMPORTED_MODULE_2__operators_map__["a" /* map */])(function (args) { return Object(__WEBPACK_IMPORTED_MODULE_3__util_isArray__["a" /* isArray */])(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
            };
        }
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var context = this;
        var subject;
        var params = {
            context: context,
            subject: subject,
            callbackFunc: callbackFunc,
            scheduler: scheduler,
        };
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
            if (!scheduler) {
                if (!subject) {
                    subject = new __WEBPACK_IMPORTED_MODULE_1__AsyncSubject__["a" /* AsyncSubject */]();
                    var handler = function () {
                        var innerArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            innerArgs[_i] = arguments[_i];
                        }
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    };
                    try {
                        callbackFunc.apply(context, args.concat([handler]));
                    }
                    catch (err) {
                        subject.error(err);
                    }
                }
                return subject.subscribe(subscriber);
            }
            else {
                var state = {
                    args: args, subscriber: subscriber, params: params,
                };
                return scheduler.schedule(dispatch, 0, state);
            }
        });
    };
}
function dispatch(state) {
    var _this = this;
    var self = this;
    var args = state.args, subscriber = state.subscriber, params = state.params;
    var callbackFunc = params.callbackFunc, context = params.context, scheduler = params.scheduler;
    var subject = params.subject;
    if (!subject) {
        subject = params.subject = new __WEBPACK_IMPORTED_MODULE_1__AsyncSubject__["a" /* AsyncSubject */]();
        var handler = function () {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                innerArgs[_i] = arguments[_i];
            }
            var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
            _this.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
        };
        try {
            callbackFunc.apply(context, args.concat([handler]));
        }
        catch (err) {
            subject.error(err);
        }
    }
    this.add(subject.subscribe(subscriber));
}
function dispatchNext(state) {
    var value = state.value, subject = state.subject;
    subject.next(value);
    subject.complete();
}
function dispatchError(state) {
    var err = state.err, subject = state.subject;
    subject.error(err);
}
//# sourceMappingURL=bindCallback.js.map


/***/ }),
/* 143 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = bindNodeCallback;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AsyncSubject__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__operators_map__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_isScheduler__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_isArray__ = __webpack_require__(10);
/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_isScheduler,_util_isArray PURE_IMPORTS_END */





/**
 * Converts a Node.js-style callback API to a function that returns an
 * Observable.
 *
 * <span class="informal">It's just like {@link bindCallback}, but the
 * callback is expected to be of type `callback(error, result)`.</span>
 *
 * `bindNodeCallback` is not an operator because its input and output are not
 * Observables. The input is a function `func` with some parameters, but the
 * last parameter must be a callback function that `func` calls when it is
 * done. The callback function is expected to follow Node.js conventions,
 * where the first argument to the callback is an error object, signaling
 * whether call was successful. If that object is passed to callback, it means
 * something went wrong.
 *
 * The output of `bindNodeCallback` is a function that takes the same
 * parameters as `func`, except the last one (the callback). When the output
 * function is called with arguments, it will return an Observable.
 * If `func` calls its callback with error parameter present, Observable will
 * error with that value as well. If error parameter is not passed, Observable will emit
 * second parameter. If there are more parameters (third and so on),
 * Observable will emit an array with all arguments, except first error argument.
 *
 * Note that `func` will not be called at the same time output function is,
 * but rather whenever resulting Observable is subscribed. By default call to
 * `func` will happen synchronously after subscription, but that can be changed
 * with proper {@link Scheduler} provided as optional third parameter. Scheduler
 * can also control when values from callback will be emitted by Observable.
 * To find out more, check out documentation for {@link bindCallback}, where
 * Scheduler works exactly the same.
 *
 * As in {@link bindCallback}, context (`this` property) of input function will be set to context
 * of returned function, when it is called.
 *
 * After Observable emits value, it will complete immediately. This means
 * even if `func` calls callback again, values from second and consecutive
 * calls will never appear on the stream. If you need to handle functions
 * that call callbacks multiple times, check out {@link fromEvent} or
 * {@link fromEventPattern} instead.
 *
 * Note that `bindNodeCallback` can be used in non-Node.js environments as well.
 * "Node.js-style" callbacks are just a convention, so if you write for
 * browsers or any other environment and API you use implements that callback style,
 * `bindNodeCallback` can be safely used on that API functions as well.
 *
 * Remember that Error object passed to callback does not have to be an instance
 * of JavaScript built-in `Error` object. In fact, it does not even have to an object.
 * Error parameter of callback function is interpreted as "present", when value
 * of that parameter is truthy. It could be, for example, non-zero number, non-empty
 * string or boolean `true`. In all of these cases resulting Observable would error
 * with that value. This means usually regular style callbacks will fail very often when
 * `bindNodeCallback` is used. If your Observable errors much more often then you
 * would expect, check if callback really is called in Node.js-style and, if not,
 * switch to {@link bindCallback} instead.
 *
 * Note that even if error parameter is technically present in callback, but its value
 * is falsy, it still won't appear in array emitted by Observable.
 *
 *
 * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>
 * import * as fs from 'fs';
 * var readFileAsObservable = bindNodeCallback(fs.readFile);
 * var result = readFileAsObservable('./roadNames.txt', 'utf8');
 * result.subscribe(x => console.log(x), e => console.error(e));
 *
 *
 * @example <caption>Use on function calling callback with multiple arguments</caption>
 * someFunction((err, a, b) => {
 *   console.log(err); // null
 *   console.log(a); // 5
 *   console.log(b); // "some string"
 * });
 * var boundSomeFunction = bindNodeCallback(someFunction);
 * boundSomeFunction()
 * .subscribe(value => {
 *   console.log(value); // [5, "some string"]
 * });
 *
 * @example <caption>Use on function calling callback in regular style</caption>
 * someFunction(a => {
 *   console.log(a); // 5
 * });
 * var boundSomeFunction = bindNodeCallback(someFunction);
 * boundSomeFunction()
 * .subscribe(
 *   value => {}             // never gets called
 *   err => console.log(err) // 5
 * );
 *
 *
 * @see {@link bindCallback}
 * @see {@link from}
 * @see {@link fromPromise}
 *
 * @param {function} func Function with a Node.js-style callback as the last parameter.
 * @param {Scheduler} [scheduler] The scheduler on which to schedule the
 * callbacks.
 * @return {function(...params: *): Observable} A function which returns the
 * Observable that delivers the same values the Node.js callback would
 * deliver.
 * @name bindNodeCallback
 */
function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
    if (resultSelector) {
        if (Object(__WEBPACK_IMPORTED_MODULE_3__util_isScheduler__["a" /* isScheduler */])(resultSelector)) {
            scheduler = resultSelector;
        }
        else {
            // DEPRECATED PATH
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return bindNodeCallback(callbackFunc, scheduler).apply(void 0, args).pipe(Object(__WEBPACK_IMPORTED_MODULE_2__operators_map__["a" /* map */])(function (args) { return Object(__WEBPACK_IMPORTED_MODULE_4__util_isArray__["a" /* isArray */])(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
            };
        }
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var params = {
            subject: undefined,
            args: args,
            callbackFunc: callbackFunc,
            scheduler: scheduler,
            context: this,
        };
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
            var context = params.context;
            var subject = params.subject;
            if (!scheduler) {
                if (!subject) {
                    subject = params.subject = new __WEBPACK_IMPORTED_MODULE_1__AsyncSubject__["a" /* AsyncSubject */]();
                    var handler = function () {
                        var innerArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            innerArgs[_i] = arguments[_i];
                        }
                        var err = innerArgs.shift();
                        if (err) {
                            subject.error(err);
                            return;
                        }
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    };
                    try {
                        callbackFunc.apply(context, args.concat([handler]));
                    }
                    catch (err) {
                        subject.error(err);
                    }
                }
                return subject.subscribe(subscriber);
            }
            else {
                return scheduler.schedule(dispatch, 0, { params: params, subscriber: subscriber, context: context });
            }
        });
    };
}
function dispatch(state) {
    var _this = this;
    var params = state.params, subscriber = state.subscriber, context = state.context;
    var callbackFunc = params.callbackFunc, args = params.args, scheduler = params.scheduler;
    var subject = params.subject;
    if (!subject) {
        subject = params.subject = new __WEBPACK_IMPORTED_MODULE_1__AsyncSubject__["a" /* AsyncSubject */]();
        var handler = function () {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                innerArgs[_i] = arguments[_i];
            }
            var err = innerArgs.shift();
            if (err) {
                _this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
            }
            else {
                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
                _this.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
            }
        };
        try {
            callbackFunc.apply(context, args.concat([handler]));
        }
        catch (err) {
            this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
        }
    }
    this.add(subject.subscribe(subscriber));
}
function dispatchNext(arg) {
    var value = arg.value, subject = arg.subject;
    subject.next(value);
    subject.complete();
}
function dispatchError(arg) {
    var err = arg.err, subject = arg.subject;
    subject.error(err);
}
//# sourceMappingURL=bindNodeCallback.js.map


/***/ }),
/* 144 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InnerSubscriber; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](InnerSubscriber, _super);
    function InnerSubscriber(parent, outerValue, outerIndex) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.outerValue = outerValue;
        _this.outerIndex = outerIndex;
        _this.index = 0;
        return _this;
    }
    InnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    };
    InnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
    };
    InnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    };
    return InnerSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));

//# sourceMappingURL=InnerSubscriber.js.map


/***/ }),
/* 145 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isInteropObservable;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__symbol_observable__ = __webpack_require__(24);
/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */

/** Identifies an input as being Observable (but not necessary an Rx Observable) */
function isInteropObservable(input) {
    return input && typeof input[__WEBPACK_IMPORTED_MODULE_0__symbol_observable__["a" /* observable */]] === 'function';
}
//# sourceMappingURL=isInteropObservable.js.map


/***/ }),
/* 146 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isIterable;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__symbol_iterator__ = __webpack_require__(33);
/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */

/** Identifies an input as being an Iterable */
function isIterable(input) {
    return input && typeof input[__WEBPACK_IMPORTED_MODULE_0__symbol_iterator__["a" /* iterator */]] === 'function';
}
//# sourceMappingURL=isIterable.js.map


/***/ }),
/* 147 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = fromPromise;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscription__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_subscribeToPromise__ = __webpack_require__(93);
/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToPromise PURE_IMPORTS_END */



function fromPromise(input, scheduler) {
    if (!scheduler) {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](Object(__WEBPACK_IMPORTED_MODULE_2__util_subscribeToPromise__["a" /* subscribeToPromise */])(input));
    }
    else {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
            var sub = new __WEBPACK_IMPORTED_MODULE_1__Subscription__["a" /* Subscription */]();
            sub.add(scheduler.schedule(function () {
                return input.then(function (value) {
                    sub.add(scheduler.schedule(function () {
                        subscriber.next(value);
                        sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
                    }));
                }, function (err) {
                    sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
                });
            }));
            return sub;
        });
    }
}
//# sourceMappingURL=fromPromise.js.map


/***/ }),
/* 148 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = fromIterable;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscription__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__symbol_iterator__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_subscribeToIterable__ = __webpack_require__(94);
/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator,_util_subscribeToIterable PURE_IMPORTS_END */




function fromIterable(input, scheduler) {
    if (!input) {
        throw new Error('Iterable cannot be null');
    }
    if (!scheduler) {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](Object(__WEBPACK_IMPORTED_MODULE_3__util_subscribeToIterable__["a" /* subscribeToIterable */])(input));
    }
    else {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
            var sub = new __WEBPACK_IMPORTED_MODULE_1__Subscription__["a" /* Subscription */]();
            var iterator;
            sub.add(function () {
                // Finalize generators
                if (iterator && typeof iterator.return === 'function') {
                    iterator.return();
                }
            });
            sub.add(scheduler.schedule(function () {
                iterator = input[__WEBPACK_IMPORTED_MODULE_2__symbol_iterator__["a" /* iterator */]]();
                sub.add(scheduler.schedule(function () {
                    if (subscriber.closed) {
                        return;
                    }
                    var value;
                    var done;
                    try {
                        var result = iterator.next();
                        value = result.value;
                        done = result.done;
                    }
                    catch (err) {
                        subscriber.error(err);
                        return;
                    }
                    if (done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(value);
                        this.schedule();
                    }
                }));
            }));
            return sub;
        });
    }
}
//# sourceMappingURL=fromIterable.js.map


/***/ }),
/* 149 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = fromObservable;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscription__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__symbol_observable__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_subscribeToObservable__ = __webpack_require__(95);
/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable,_util_subscribeToObservable PURE_IMPORTS_END */




function fromObservable(input, scheduler) {
    if (!scheduler) {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](Object(__WEBPACK_IMPORTED_MODULE_3__util_subscribeToObservable__["a" /* subscribeToObservable */])(input));
    }
    else {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
            var sub = new __WEBPACK_IMPORTED_MODULE_1__Subscription__["a" /* Subscription */]();
            sub.add(scheduler.schedule(function () {
                var observable = input[__WEBPACK_IMPORTED_MODULE_2__symbol_observable__["a" /* observable */]]();
                sub.add(observable.subscribe({
                    next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
                    error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
                    complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
                }));
            }));
            return sub;
        });
    }
}
//# sourceMappingURL=fromObservable.js.map


/***/ }),
/* 150 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = forkJoin;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isArray__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__empty__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__operators_map__ = __webpack_require__(16);
/** PURE_IMPORTS_START tslib,_Observable,_util_isArray,_empty,_util_subscribeToResult,_OuterSubscriber,_operators_map PURE_IMPORTS_END */







/* tslint:enable:max-line-length */
/**
 * Joins last values emitted by passed Observables.
 *
 * <span class="informal">Wait for Observables to complete and then combine last values they emitted.</span>
 *
 * <img src="./img/forkJoin.png" width="100%">
 *
 * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array
 * or directly as arguments. If no input Observables are provided, resulting stream will complete
 * immediately.
 *
 * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last
 * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting
 * array will have `n` values, where first value is the last thing emitted by the first Observable,
 * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will
 * not emit more than once and it will complete after that. If you need to emit combined values not only
 * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}
 * or {@link zip} instead.
 *
 * In order for resulting array to have the same length as the number of input Observables, whenever any of
 * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well
 * and it will not emit anything either, even if it already has some last values from other Observables.
 * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,
 * unless at any point some other Observable completes without emitting value, which brings us back to
 * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments
 * have to emit something at least once and complete.
 *
 * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables
 * will be immediately unsubscribed.
 *
 * Optionally `forkJoin` accepts project function, that will be called with values which normally
 * would land in emitted array. Whatever is returned by project function, will appear in output
 * Observable instead. This means that default project can be thought of as a function that takes
 * all its arguments and puts them into an array. Note that project function will be called only
 * when output Observable is supposed to emit a result.
 *
 * @example <caption>Use forkJoin with operator emitting immediately</caption>
 * import { forkJoin, of } from 'rxjs';
 *
 * const observable = forkJoin(
 *   of(1, 2, 3, 4),
 *   of(5, 6, 7, 8)
 * );
 * observable.subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('This is how it ends!')
 * );
 *
 * // Logs:
 * // [4, 8]
 * // "This is how it ends!"
 *
 *
 * @example <caption>Use forkJoin with operator emitting after some time</caption>
 * import { forkJoin, interval } from 'rxjs';
 * import { take } from 'rxjs/operators';
 *
 * const observable = forkJoin(
 *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete
 *   interval(500).pipe(take(4)) // emit 0, 1, 2, 3 every half a second and complete
 * );
 * observable.subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('This is how it ends!')
 * );
 *
 * // Logs:
 * // [2, 3] after 3 seconds
 * // "This is how it ends!" immediately after
 *
 *
 * @example <caption>Use forkJoin with project function</caption>
 * import { jorkJoin, interval } from 'rxjs';
 * import { take } from 'rxjs/operators';
 *
 * const observable = forkJoin(
 *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete
 *   interval(500).pipe(take(4)), // emit 0, 1, 2, 3 every half a second and complete
 *   (n, m) => n + m
 * );
 * observable.subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('This is how it ends!')
 * );
 *
 * // Logs:
 * // 5 after 3 seconds
 * // "This is how it ends!" immediately after
 *
 * @see {@link combineLatest}
 * @see {@link zip}
 *
 * @param {...ObservableInput} sources Any number of Observables provided either as an array or as an arguments
 * passed directly to the operator.
 * @param {function} [project] Function that takes values emitted by input Observables and returns value
 * that will appear in resulting Observable instead of default array.
 * @return {Observable} Observable emitting either an array of last values emitted by passed Observables
 * or value from project function.
 */
function forkJoin() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    var resultSelector;
    if (typeof sources[sources.length - 1] === 'function') {
        // DEPRECATED PATH
        resultSelector = sources.pop();
    }
    // if the first and only other argument is an array
    // assume it's been called with `forkJoin([obs1, obs2, obs3])`
    if (sources.length === 1 && Object(__WEBPACK_IMPORTED_MODULE_2__util_isArray__["a" /* isArray */])(sources[0])) {
        sources = sources[0];
    }
    if (sources.length === 0) {
        return __WEBPACK_IMPORTED_MODULE_3__empty__["a" /* EMPTY */];
    }
    if (resultSelector) {
        // DEPRECATED PATH
        return forkJoin(sources).pipe(Object(__WEBPACK_IMPORTED_MODULE_6__operators_map__["a" /* map */])(function (args) { return resultSelector.apply(void 0, args); }));
    }
    return new __WEBPACK_IMPORTED_MODULE_1__Observable__["a" /* Observable */](function (subscriber) {
        return new ForkJoinSubscriber(subscriber, sources);
    });
}
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ForkJoinSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ForkJoinSubscriber, _super);
    function ForkJoinSubscriber(destination, sources) {
        var _this = _super.call(this, destination) || this;
        _this.sources = sources;
        _this.completed = 0;
        _this.haveValues = 0;
        var len = sources.length;
        _this.values = new Array(len);
        for (var i = 0; i < len; i++) {
            var source = sources[i];
            var innerSubscription = Object(__WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__["a" /* subscribeToResult */])(_this, source, null, i);
            if (innerSubscription) {
                _this.add(innerSubscription);
            }
        }
        return _this;
    }
    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values[outerIndex] = innerValue;
        if (!innerSub._hasValue) {
            innerSub._hasValue = true;
            this.haveValues++;
        }
    };
    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
        var _a = this, destination = _a.destination, haveValues = _a.haveValues, values = _a.values;
        var len = values.length;
        if (!innerSub._hasValue) {
            destination.complete();
            return;
        }
        this.completed++;
        if (this.completed !== len) {
            return;
        }
        if (haveValues === len) {
            destination.next(values);
        }
        destination.complete();
    };
    return ForkJoinSubscriber;
}(__WEBPACK_IMPORTED_MODULE_5__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=forkJoin.js.map


/***/ }),
/* 151 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = fromEvent;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_isArray__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isFunction__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__operators_map__ = __webpack_require__(16);
/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */




var toString = Object.prototype.toString;
/* tslint:enable:max-line-length */
/**
 * Creates an Observable that emits events of a specific type coming from the
 * given event target.
 *
 * <span class="informal">Creates an Observable from DOM events, or Node.js
 * EventEmitter events or others.</span>
 *
 * <img src="./img/fromEvent.png" width="100%">
 *
 * `fromEvent` accepts as a first argument event target, which is an object with methods
 * for registering event handler functions. As a second argument it takes string that indicates
 * type of event we want to listen for. `fromEvent` supports selected types of event targets,
 * which are described in detail below. If your event target does not match any of the ones listed,
 * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.
 * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event
 * handler functions have different names, but they all accept a string describing event type
 * and function itself, which will be called whenever said event happens.
 *
 * Every time resulting Observable is subscribed, event handler function will be registered
 * to event target on given event type. When that event fires, value
 * passed as a first argument to registered function will be emitted by output Observable.
 * When Observable is unsubscribed, function will be unregistered from event target.
 *
 * Note that if event target calls registered function with more than one argument, second
 * and following arguments will not appear in resulting stream. In order to get access to them,
 * you can pass to `fromEvent` optional project function, which will be called with all arguments
 * passed to event handler. Output Observable will then emit value returned by project function,
 * instead of the usual value.
 *
 * Remember that event targets listed below are checked via duck typing. It means that
 * no matter what kind of object you have and no matter what environment you work in,
 * you can safely use `fromEvent` on that object if it exposes described methods (provided
 * of course they behave as was described above). So for example if Node.js library exposes
 * event target which has the same method names as DOM EventTarget, `fromEvent` is still
 * a good choice.
 *
 * If the API you use is more callback then event handler oriented (subscribed
 * callback function fires only once and thus there is no need to manually
 * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}
 * instead.
 *
 * `fromEvent` supports following types of event targets:
 *
 * **DOM EventTarget**
 *
 * This is an object with `addEventListener` and `removeEventListener` methods.
 *
 * In the browser, `addEventListener` accepts - apart from event type string and event
 * handler function arguments - optional third parameter, which is either an object or boolean,
 * both used for additional configuration how and when passed function will be called. When
 * `fromEvent` is used with event target of that type, you can provide this values
 * as third parameter as well.
 *
 * **Node.js EventEmitter**
 *
 * An object with `addListener` and `removeListener` methods.
 *
 * **JQuery-style event target**
 *
 * An object with `on` and `off` methods
 *
 * **DOM NodeList**
 *
 * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.
 *
 * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes
 * it contains and install event handler function in every of them. When returned Observable
 * is unsubscribed, function will be removed from all Nodes.
 *
 * **DOM HtmlCollection**
 *
 * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is
 * installed and removed in each of elements.
 *
 *
 * @example <caption>Emits clicks happening on the DOM document</caption>
 * var clicks = fromEvent(document, 'click');
 * clicks.subscribe(x => console.log(x));
 *
 * // Results in:
 * // MouseEvent object logged to console every time a click
 * // occurs on the document.
 *
 *
 * @example <caption>Use addEventListener with capture option</caption>
 * var clicksInDocument = fromEvent(document, 'click', true); // note optional configuration parameter
 *                                                                          // which will be passed to addEventListener
 * var clicksInDiv = fromEvent(someDivInDocument, 'click');
 *
 * clicksInDocument.subscribe(() => console.log('document'));
 * clicksInDiv.subscribe(() => console.log('div'));
 *
 * // By default events bubble UP in DOM tree, so normally
 * // when we would click on div in document
 * // "div" would be logged first and then "document".
 * // Since we specified optional `capture` option, document
 * // will catch event when it goes DOWN DOM tree, so console
 * // will log "document" and then "div".
 *
 * @see {@link bindCallback}
 * @see {@link bindNodeCallback}
 * @see {@link fromEventPattern}
 *
 * @param {FromEventTarget<T>} target The DOM EventTarget, Node.js
 * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.
 * @param {string} eventName The event name of interest, being emitted by the
 * `target`.
 * @param {EventListenerOptions} [options] Options to pass through to addEventListener
 * @return {Observable<T>}
 * @name fromEvent
 */
function fromEvent(target, eventName, options, resultSelector) {
    if (Object(__WEBPACK_IMPORTED_MODULE_2__util_isFunction__["a" /* isFunction */])(options)) {
        // DEPRECATED PATH
        resultSelector = options;
        options = undefined;
    }
    if (resultSelector) {
        // DEPRECATED PATH
        return fromEvent(target, eventName, options).pipe(Object(__WEBPACK_IMPORTED_MODULE_3__operators_map__["a" /* map */])(function (args) { return Object(__WEBPACK_IMPORTED_MODULE_1__util_isArray__["a" /* isArray */])(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
    }
    return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
        function handler(e) {
            if (arguments.length > 1) {
                subscriber.next(Array.prototype.slice.call(arguments));
            }
            else {
                subscriber.next(e);
            }
        }
        setupSubscription(target, eventName, handler, subscriber, options);
    });
}
function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
    var unsubscribe;
    if (isEventTarget(sourceObj)) {
        var source_1 = sourceObj;
        sourceObj.addEventListener(eventName, handler, options);
        unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };
    }
    else if (isJQueryStyleEventEmitter(sourceObj)) {
        var source_2 = sourceObj;
        sourceObj.on(eventName, handler);
        unsubscribe = function () { return source_2.off(eventName, handler); };
    }
    else if (isNodeStyleEventEmitter(sourceObj)) {
        var source_3 = sourceObj;
        sourceObj.addListener(eventName, handler);
        unsubscribe = function () { return source_3.removeListener(eventName, handler); };
    }
    else if (sourceObj && sourceObj.length) {
        for (var i = 0, len = sourceObj.length; i < len; i++) {
            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
        }
    }
    else {
        throw new TypeError('Invalid event target');
    }
    subscriber.add(unsubscribe);
}
function isNodeStyleEventEmitter(sourceObj) {
    return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
}
function isJQueryStyleEventEmitter(sourceObj) {
    return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
}
function isEventTarget(sourceObj) {
    return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
}
//# sourceMappingURL=fromEvent.js.map


/***/ }),
/* 152 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = fromEventPattern;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_isArray__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isFunction__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__operators_map__ = __webpack_require__(16);
/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */




/* tslint:enable:max-line-length */
/**
 * Creates an Observable from an API based on addHandler/removeHandler
 * functions.
 *
 * <span class="informal">Converts any addHandler/removeHandler API to an
 * Observable.</span>
 *
 * <img src="./img/fromEventPattern.png" width="100%">
 *
 * Creates an Observable by using the `addHandler` and `removeHandler`
 * functions to add and remove the handlers. The `addHandler` is
 * called when the output Observable is subscribed, and `removeHandler` is
 * called when the Subscription is unsubscribed.
 *
 * @example <caption>Emits clicks happening on the DOM document</caption>
 * function addClickHandler(handler) {
 *   document.addEventListener('click', handler);
 * }
 *
 * function removeClickHandler(handler) {
 *   document.removeEventListener('click', handler);
 * }
 *
 * var clicks = fromEventPattern(
 *   addClickHandler,
 *   removeClickHandler
 * );
 * clicks.subscribe(x => console.log(x));
 *
 * @see {@link from}
 * @see {@link fromEvent}
 *
 * @param {function(handler: Function): any} addHandler A function that takes
 * a `handler` function as argument and attaches it somehow to the actual
 * source of events.
 * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that
 * takes a `handler` function as argument and removes it in case it was
 * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,
 * removeHandler function will forward it.
 * @return {Observable<T>}
 * @name fromEventPattern
 */
function fromEventPattern(addHandler, removeHandler, resultSelector) {
    if (resultSelector) {
        // DEPRECATED PATH
        return fromEventPattern(addHandler, removeHandler).pipe(Object(__WEBPACK_IMPORTED_MODULE_3__operators_map__["a" /* map */])(function (args) { return Object(__WEBPACK_IMPORTED_MODULE_1__util_isArray__["a" /* isArray */])(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
    }
    return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
        var handler = function () {
            var e = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                e[_i] = arguments[_i];
            }
            return subscriber.next(e.length === 1 ? e[0] : e);
        };
        var retValue;
        try {
            retValue = addHandler(handler);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        if (!Object(__WEBPACK_IMPORTED_MODULE_2__util_isFunction__["a" /* isFunction */])(removeHandler)) {
            return undefined;
        }
        return function () { return removeHandler(handler, retValue); };
    });
}
//# sourceMappingURL=fromEventPattern.js.map


/***/ }),
/* 153 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = generate;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_identity__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isScheduler__ = __webpack_require__(15);
/** PURE_IMPORTS_START _Observable,_util_identity,_util_isScheduler PURE_IMPORTS_END */



function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
    var resultSelector;
    var initialState;
    if (arguments.length == 1) {
        var options = initialStateOrOptions;
        initialState = options.initialState;
        condition = options.condition;
        iterate = options.iterate;
        resultSelector = options.resultSelector || __WEBPACK_IMPORTED_MODULE_1__util_identity__["a" /* identity */];
        scheduler = options.scheduler;
    }
    else if (resultSelectorOrObservable === undefined || Object(__WEBPACK_IMPORTED_MODULE_2__util_isScheduler__["a" /* isScheduler */])(resultSelectorOrObservable)) {
        initialState = initialStateOrOptions;
        resultSelector = __WEBPACK_IMPORTED_MODULE_1__util_identity__["a" /* identity */];
        scheduler = resultSelectorOrObservable;
    }
    else {
        initialState = initialStateOrOptions;
        resultSelector = resultSelectorOrObservable;
    }
    return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
        var state = initialState;
        if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
                subscriber: subscriber,
                iterate: iterate,
                condition: condition,
                resultSelector: resultSelector,
                state: state
            });
        }
        do {
            if (condition) {
                var conditionResult = void 0;
                try {
                    conditionResult = condition(state);
                }
                catch (err) {
                    subscriber.error(err);
                    return undefined;
                }
                if (!conditionResult) {
                    subscriber.complete();
                    break;
                }
            }
            var value = void 0;
            try {
                value = resultSelector(state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
            subscriber.next(value);
            if (subscriber.closed) {
                break;
            }
            try {
                state = iterate(state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
        } while (true);
        return undefined;
    });
}
function dispatch(state) {
    var subscriber = state.subscriber, condition = state.condition;
    if (subscriber.closed) {
        return undefined;
    }
    if (state.needIterate) {
        try {
            state.state = state.iterate(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
    }
    else {
        state.needIterate = true;
    }
    if (condition) {
        var conditionResult = void 0;
        try {
            conditionResult = condition(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        if (!conditionResult) {
            subscriber.complete();
            return undefined;
        }
        if (subscriber.closed) {
            return undefined;
        }
    }
    var value;
    try {
        value = state.resultSelector(state.state);
    }
    catch (err) {
        subscriber.error(err);
        return undefined;
    }
    if (subscriber.closed) {
        return undefined;
    }
    subscriber.next(value);
    if (subscriber.closed) {
        return undefined;
    }
    return this.schedule(state);
}
//# sourceMappingURL=generate.js.map


/***/ }),
/* 154 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = iif;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__defer__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__empty__ = __webpack_require__(11);
/** PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END */


/**
 * Decides at subscription time which Observable will actually be subscribed.
 *
 * <span class="informal">`If` statement for Observables.</span>
 *
 * `if` accepts a condition function and two Observables. When
 * an Observable returned by the operator is subscribed, condition function will be called.
 * Based on what boolean it returns at that moment, consumer will subscribe either to
 * the first Observable (if condition was true) or to the second (if condition was false). Condition
 * function may also not return anything - in that case condition will be evaluated as false and
 * second Observable will be subscribed.
 *
 * Note that Observables for both cases (true and false) are optional. If condition points to an Observable that
 * was left undefined, resulting stream will simply complete immediately. That allows you to, rather
 * then controlling which Observable will be subscribed, decide at runtime if consumer should have access
 * to given Observable or not.
 *
 * If you have more complex logic that requires decision between more than two Observables, {@link defer}
 * will probably be a better choice. Actually `if` can be easily implemented with {@link defer}
 * and exists only for convenience and readability reasons.
 *
 *
 * @example <caption>Change at runtime which Observable will be subscribed</caption>
 * let subscribeToFirst;
 * const firstOrSecond = Rx.Observable.if(
 *   () => subscribeToFirst,
 *   Rx.Observable.of('first'),
 *   Rx.Observable.of('second')
 * );
 *
 * subscribeToFirst = true;
 * firstOrSecond.subscribe(value => console.log(value));
 *
 * // Logs:
 * // "first"
 *
 * subscribeToFirst = false;
 * firstOrSecond.subscribe(value => console.log(value));
 *
 * // Logs:
 * // "second"
 *
 *
 * @example <caption>Control an access to an Observable</caption>
 * let accessGranted;
 * const observableIfYouHaveAccess = Rx.Observable.if(
 *   () => accessGranted,
 *   Rx.Observable.of('It seems you have an access...') // Note that only one Observable is passed to the operator.
 * );
 *
 * accessGranted = true;
 * observableIfYouHaveAccess.subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('The end')
 * );
 *
 * // Logs:
 * // "It seems you have an access..."
 * // "The end"
 *
 * accessGranted = false;
 * observableIfYouHaveAccess.subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('The end')
 * );
 *
 * // Logs:
 * // "The end"
 *
 * @see {@link defer}
 *
 * @param {function(): boolean} condition Condition which Observable should be chosen.
 * @param {Observable} [trueObservable] An Observable that will be subscribed if condition is true.
 * @param {Observable} [falseObservable] An Observable that will be subscribed if condition is false.
 * @return {Observable} Either first or second Observable, depending on condition.
 * @static true
 * @name iif
 * @owner Observable
 */
function iif(condition, trueResult, falseResult) {
    if (trueResult === void 0) {
        trueResult = __WEBPACK_IMPORTED_MODULE_1__empty__["a" /* EMPTY */];
    }
    if (falseResult === void 0) {
        falseResult = __WEBPACK_IMPORTED_MODULE_1__empty__["a" /* EMPTY */];
    }
    return Object(__WEBPACK_IMPORTED_MODULE_0__defer__["a" /* defer */])(function () { return condition() ? trueResult : falseResult; });
}
//# sourceMappingURL=iif.js.map


/***/ }),
/* 155 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = interval;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__scheduler_async__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isNumeric__ = __webpack_require__(46);
/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */



/**
 * Creates an Observable that emits sequential numbers every specified
 * interval of time, on a specified IScheduler.
 *
 * <span class="informal">Emits incremental numbers periodically in time.
 * </span>
 *
 * <img src="./img/interval.png" width="100%">
 *
 * `interval` returns an Observable that emits an infinite sequence of
 * ascending integers, with a constant interval of time of your choosing
 * between those emissions. The first emission is not sent immediately, but
 * only after the first period has passed. By default, this operator uses the
 * `async` IScheduler to provide a notion of time, but you may pass any
 * IScheduler to it.
 *
 * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>
 * var numbers = Rx.Observable.interval(1000);
 * numbers.subscribe(x => console.log(x));
 *
 * @see {@link timer}
 * @see {@link delay}
 *
 * @param {number} [period=0] The interval size in milliseconds (by default)
 * or the time unit determined by the scheduler's clock.
 * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling
 * the emission of values, and providing a notion of "time".
 * @return {Observable} An Observable that emits a sequential number each time
 * interval.
 * @static true
 * @name interval
 * @owner Observable
 */
function interval(period, scheduler) {
    if (period === void 0) {
        period = 0;
    }
    if (scheduler === void 0) {
        scheduler = __WEBPACK_IMPORTED_MODULE_1__scheduler_async__["a" /* async */];
    }
    if (!Object(__WEBPACK_IMPORTED_MODULE_2__util_isNumeric__["a" /* isNumeric */])(period) || period < 0) {
        period = 0;
    }
    if (!scheduler || typeof scheduler.schedule !== 'function') {
        scheduler = __WEBPACK_IMPORTED_MODULE_1__scheduler_async__["a" /* async */];
    }
    return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
        subscriber.add(scheduler.schedule(dispatch, period, { subscriber: subscriber, counter: 0, period: period }));
        return subscriber;
    });
}
function dispatch(state) {
    var subscriber = state.subscriber, counter = state.counter, period = state.period;
    subscriber.next(counter);
    this.schedule({ subscriber: subscriber, counter: counter + 1, period: period }, period);
}
//# sourceMappingURL=interval.js.map


/***/ }),
/* 156 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = onErrorResumeNext;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__from__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isArray__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__empty__ = __webpack_require__(11);
/** PURE_IMPORTS_START _Observable,_from,_util_isArray,_empty PURE_IMPORTS_END */




/* tslint:enable:max-line-length */
/**
 * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one
 * that was passed.
 *
 * <span class="informal">Execute series of Observables no matter what, even if it means swallowing errors.</span>
 *
 * <img src="./img/onErrorResumeNext.png" width="100%">
 *
 * `onErrorResumeNext` Will subscribe to each observable source it is provided, in order.
 * If the source it's subscribed to emits an error or completes, it will move to the next source
 * without error.
 *
 * If `onErrorResumeNext` is provided no arguments, or a single, empty array, it will return {@link EMPTY}.
 *
 * `onErrorResumeNext` is basically {@link concat}, only it will continue, even if one of its
 * sources emits an error.
 *
 * Note that there is no way to handle any errors thrown by sources via the resuult of
 * `onErrorResumeNext`. If you want to handle errors thrown in any given source, you can
 * always use the {@link catchError} operator on them before passing them into `onErrorResumeNext`.
 *
 * @example <caption>Subscribe to the next Observable after map fails</caption>
 * import { onErrorResumeNext, of } from 'rxjs/create';
 * import { map } from 'rxjs/operators';
 *
 * onErrorResumeNext(
 *  of(1, 2, 3, 0).pipe(
 *    map(x => {
 *      if (x === 0) throw Error();
 *      return 10 / x;
 *    })
 *  ),
 *  of(1, 2, 3),
 * )
 * .subscribe(
 *   val => console.log(val),
 *   err => console.log(err),          // Will never be called.
 *   () => console.log('done')
 * );
 *
 * // Logs:
 * // 10
 * // 5
 * // 3.3333333333333335
 * // 1
 * // 2
 * // 3
 * // "done"
 *
 * @see {@link concat}
 * @see {@link catch}
 *
 * @param {...ObservableInput} sources Observables (or anything that *is* observable) passed either directly or as an array.
 * @return {Observable} An Observable that concatenates all sources, one after the other,
 * ignoring all errors, such that any error causes it to move on to the next source.
 */
function onErrorResumeNext() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    if (sources.length === 0) {
        return __WEBPACK_IMPORTED_MODULE_3__empty__["a" /* EMPTY */];
    }
    var first = sources[0], remainder = sources.slice(1);
    if (sources.length === 1 && Object(__WEBPACK_IMPORTED_MODULE_2__util_isArray__["a" /* isArray */])(first)) {
        return onErrorResumeNext.apply(void 0, first);
    }
    return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
        var subNext = function () { return subscriber.add(onErrorResumeNext.apply(void 0, remainder).subscribe(subscriber)); };
        return Object(__WEBPACK_IMPORTED_MODULE_1__from__["a" /* from */])(first).subscribe({
            next: function (value) { subscriber.next(value); },
            error: subNext,
            complete: subNext,
        });
    });
}
//# sourceMappingURL=onErrorResumeNext.js.map


/***/ }),
/* 157 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = pairs;
/* unused harmony export dispatch */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscription__ = __webpack_require__(8);
/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */


/**
 * Convert an object into an observable sequence of [key, value] pairs
 * using an optional IScheduler to enumerate the object.
 *
 * @example <caption>Converts a javascript object to an Observable</caption>
 * var obj = {
 *   foo: 42,
 *   bar: 56,
 *   baz: 78
 * };
 *
 * var source = Rx.Observable.pairs(obj);
 *
 * var subscription = source.subscribe(
 *   function (x) {
 *     console.log('Next: %s', x);
 *   },
 *   function (err) {
 *     console.log('Error: %s', err);
 *   },
 *   function () {
 *     console.log('Completed');
 *   });
 *
 * @param {Object} obj The object to inspect and turn into an
 * Observable sequence.
 * @param {Scheduler} [scheduler] An optional IScheduler to run the
 * enumeration of the input sequence on.
 * @returns {(Observable<[string, T]>)} An observable sequence of
 * [key, value] pairs from the object.
 */
function pairs(obj, scheduler) {
    if (!scheduler) {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
            var keys = Object.keys(obj);
            for (var i = 0; i < keys.length && !subscriber.closed; i++) {
                var key = keys[i];
                if (obj.hasOwnProperty(key)) {
                    subscriber.next([key, obj[key]]);
                }
            }
            subscriber.complete();
        });
    }
    else {
        return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
            var keys = Object.keys(obj);
            var subscription = new __WEBPACK_IMPORTED_MODULE_1__Subscription__["a" /* Subscription */]();
            subscription.add(scheduler.schedule(dispatch, 0, { keys: keys, index: 0, subscriber: subscriber, subscription: subscription, obj: obj }));
            return subscription;
        });
    }
}
/** @internal */
function dispatch(state) {
    var keys = state.keys, index = state.index, subscriber = state.subscriber, subscription = state.subscription, obj = state.obj;
    if (!subscriber.closed) {
        if (index < keys.length) {
            var key = keys[index];
            subscriber.next([key, obj[key]]);
            subscription.add(this.schedule({ keys: keys, index: index + 1, subscriber: subscriber, subscription: subscription, obj: obj }));
        }
        else {
            subscriber.complete();
        }
    }
}
//# sourceMappingURL=pairs.js.map


/***/ }),
/* 158 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = range;
/* unused harmony export dispatch */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

/**
 * Creates an Observable that emits a sequence of numbers within a specified
 * range.
 *
 * <span class="informal">Emits a sequence of numbers in a range.</span>
 *
 * <img src="./img/range.png" width="100%">
 *
 * `range` operator emits a range of sequential integers, in order, where you
 * select the `start` of the range and its `length`. By default, uses no
 * IScheduler and just delivers the notifications synchronously, but may use
 * an optional IScheduler to regulate those deliveries.
 *
 * @example <caption>Emits the numbers 1 to 10</caption>
 * var numbers = Rx.Observable.range(1, 10);
 * numbers.subscribe(x => console.log(x));
 *
 * @see {@link timer}
 * @see {@link interval}
 *
 * @param {number} [start=0] The value of the first integer in the sequence.
 * @param {number} [count=0] The number of sequential integers to generate.
 * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
 * the emissions of the notifications.
 * @return {Observable} An Observable of numbers that emits a finite range of
 * sequential integers.
 * @static true
 * @name range
 * @owner Observable
 */
function range(start, count, scheduler) {
    if (start === void 0) {
        start = 0;
    }
    if (count === void 0) {
        count = 0;
    }
    return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
        var index = 0;
        var current = start;
        if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
                index: index, count: count, start: start, subscriber: subscriber
            });
        }
        else {
            do {
                if (index++ >= count) {
                    subscriber.complete();
                    break;
                }
                subscriber.next(current++);
                if (subscriber.closed) {
                    break;
                }
            } while (true);
        }
        return undefined;
    });
}
/** @internal */
function dispatch(state) {
    var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;
    if (index >= count) {
        subscriber.complete();
        return;
    }
    subscriber.next(start);
    if (subscriber.closed) {
        return;
    }
    state.index = index + 1;
    state.start = start + 1;
    this.schedule(state);
}
//# sourceMappingURL=range.js.map


/***/ }),
/* 159 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = using;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__from__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__empty__ = __webpack_require__(11);
/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */

 // from from from! LAWL

/**
 * Creates an Observable that uses a resource which will be disposed at the same time as the Observable.
 *
 * <span class="informal">Use it when you catch yourself cleaning up after an Observable.</span>
 *
 * `using` is a factory operator, which accepts two functions. First function returns a disposable resource.
 * It can be an arbitrary object that implements `unsubscribe` method. Second function will be injected with
 * that object and should return an Observable. That Observable can use resource object during its execution.
 * Both functions passed to `using` will be called every time someone subscribes - neither an Observable nor
 * resource object will be shared in any way between subscriptions.
 *
 * When Observable returned by `using` is subscribed, Observable returned from the second function will be subscribed
 * as well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output
 * Observable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,
 * the `unsubscribe` method on resource object will be called. This can be used to do any necessary clean up, which
 * otherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone
 * cancels subscription to an Observable via `unsubscribe`, so `using` can be used as a hook, allowing you to make
 * sure that all resources which need to exist during an Observable execution will be disposed at appropriate time.
 *
 * @see {@link defer}
 *
 * @param {function(): ISubscription} resourceFactory A function which creates any resource object
 * that implements `unsubscribe` method.
 * @param {function(resource: ISubscription): Observable<T>} observableFactory A function which
 * creates an Observable, that can use injected resource object.
 * @return {Observable<T>} An Observable that behaves the same as Observable returned by `observableFactory`, but
 * which - when completed, errored or unsubscribed - will also call `unsubscribe` on created resource object.
 */
function using(resourceFactory, observableFactory) {
    return new __WEBPACK_IMPORTED_MODULE_0__Observable__["a" /* Observable */](function (subscriber) {
        var resource;
        try {
            resource = resourceFactory();
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var result;
        try {
            result = observableFactory(resource);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var source = result ? Object(__WEBPACK_IMPORTED_MODULE_1__from__["a" /* from */])(result) : __WEBPACK_IMPORTED_MODULE_2__empty__["a" /* EMPTY */];
        var subscription = source.subscribe(subscriber);
        return function () {
            subscription.unsubscribe();
            if (resource) {
                resource.unsubscribe();
            }
        };
    });
}
//# sourceMappingURL=using.js.map


/***/ }),
/* 160 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = auditTime;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__scheduler_async__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__audit__ = __webpack_require__(105);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__observable_timer__ = __webpack_require__(102);
/** PURE_IMPORTS_START _scheduler_async,_audit,_observable_timer PURE_IMPORTS_END */



/**
 * Ignores source values for `duration` milliseconds, then emits the most recent
 * value from the source Observable, then repeats this process.
 *
 * <span class="informal">When it sees a source values, it ignores that plus
 * the next ones for `duration` milliseconds, and then it emits the most recent
 * value from the source.</span>
 *
 * <img src="./img/auditTime.png" width="100%">
 *
 * `auditTime` is similar to `throttleTime`, but emits the last value from the
 * silenced time window, instead of the first value. `auditTime` emits the most
 * recent value from the source Observable on the output Observable as soon as
 * its internal timer becomes disabled, and ignores source values while the
 * timer is enabled. Initially, the timer is disabled. As soon as the first
 * source value arrives, the timer is enabled. After `duration` milliseconds (or
 * the time unit determined internally by the optional `scheduler`) has passed,
 * the timer is disabled, then the most recent source value is emitted on the
 * output Observable, and this process repeats for the next source value.
 * Optionally takes a {@link IScheduler} for managing timers.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.auditTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttleTime}
 *
 * @param {number} duration Time to wait before emitting the most recent source
 * value, measured in milliseconds or the time unit determined internally
 * by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the rate-limiting behavior.
 * @return {Observable<T>} An Observable that performs rate-limiting of
 * emissions from the source Observable.
 * @method auditTime
 * @owner Observable
 */
function auditTime(duration, scheduler) {
    if (scheduler === void 0) {
        scheduler = __WEBPACK_IMPORTED_MODULE_0__scheduler_async__["a" /* async */];
    }
    return Object(__WEBPACK_IMPORTED_MODULE_1__audit__["a" /* audit */])(function () { return Object(__WEBPACK_IMPORTED_MODULE_2__observable_timer__["a" /* timer */])(duration, scheduler); });
}
//# sourceMappingURL=auditTime.js.map


/***/ }),
/* 161 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = buffer;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */



/**
 * Buffers the source Observable values until `closingNotifier` emits.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * that array only when another Observable emits.</span>
 *
 * <img src="./img/buffer.png" width="100%">
 *
 * Buffers the incoming Observable values until the given `closingNotifier`
 * Observable emits a value, at which point it emits the buffer on the output
 * Observable and starts a new buffer internally, awaiting the next time
 * `closingNotifier` emits.
 *
 * @example <caption>On every click, emit array of most recent interval events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var interval = Rx.Observable.interval(1000);
 * var buffered = interval.buffer(clicks);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link window}
 *
 * @param {Observable<any>} closingNotifier An Observable that signals the
 * buffer to be emitted on the output Observable.
 * @return {Observable<T[]>} An Observable of buffers, which are arrays of
 * values.
 * @method buffer
 * @owner Observable
 */
function buffer(closingNotifier) {
    return function bufferOperatorFunction(source) {
        return source.lift(new BufferOperator(closingNotifier));
    };
}
var BufferOperator = /*@__PURE__*/ (function () {
    function BufferOperator(closingNotifier) {
        this.closingNotifier = closingNotifier;
    }
    BufferOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
    };
    return BufferOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](BufferSubscriber, _super);
    function BufferSubscriber(destination, closingNotifier) {
        var _this = _super.call(this, destination) || this;
        _this.buffer = [];
        _this.add(Object(__WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__["a" /* subscribeToResult */])(_this, closingNotifier));
        return _this;
    }
    BufferSubscriber.prototype._next = function (value) {
        this.buffer.push(value);
    };
    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var buffer = this.buffer;
        this.buffer = [];
        this.destination.next(buffer);
    };
    return BufferSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=buffer.js.map


/***/ }),
/* 162 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = bufferCount;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/**
 * Buffers the source Observable values until the size hits the maximum
 * `bufferSize` given.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * that array only when its size reaches `bufferSize`.</span>
 *
 * <img src="./img/bufferCount.png" width="100%">
 *
 * Buffers a number of values from the source Observable by `bufferSize` then
 * emits the buffer and clears it, and starts a new buffer each
 * `startBufferEvery` values. If `startBufferEvery` is not provided or is
 * `null`, then new buffers are started immediately at the start of the source
 * and when each buffer closes and is emitted.
 *
 * @example <caption>Emit the last two click events as an array</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferCount(2);
 * buffered.subscribe(x => console.log(x));
 *
 * @example <caption>On every click, emit the last two click events as an array</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferCount(2, 1);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link pairwise}
 * @see {@link windowCount}
 *
 * @param {number} bufferSize The maximum size of the buffer emitted.
 * @param {number} [startBufferEvery] Interval at which to start a new buffer.
 * For example if `startBufferEvery` is `2`, then a new buffer will be started
 * on every other value from the source. A new buffer is started at the
 * beginning of the source by default.
 * @return {Observable<T[]>} An Observable of arrays of buffered values.
 * @method bufferCount
 * @owner Observable
 */
function bufferCount(bufferSize, startBufferEvery) {
    if (startBufferEvery === void 0) {
        startBufferEvery = null;
    }
    return function bufferCountOperatorFunction(source) {
        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));
    };
}
var BufferCountOperator = /*@__PURE__*/ (function () {
    function BufferCountOperator(bufferSize, startBufferEvery) {
        this.bufferSize = bufferSize;
        this.startBufferEvery = startBufferEvery;
        if (!startBufferEvery || bufferSize === startBufferEvery) {
            this.subscriberClass = BufferCountSubscriber;
        }
        else {
            this.subscriberClass = BufferSkipCountSubscriber;
        }
    }
    BufferCountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));
    };
    return BufferCountOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferCountSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](BufferCountSubscriber, _super);
    function BufferCountSubscriber(destination, bufferSize) {
        var _this = _super.call(this, destination) || this;
        _this.bufferSize = bufferSize;
        _this.buffer = [];
        return _this;
    }
    BufferCountSubscriber.prototype._next = function (value) {
        var buffer = this.buffer;
        buffer.push(value);
        if (buffer.length == this.bufferSize) {
            this.destination.next(buffer);
            this.buffer = [];
        }
    };
    BufferCountSubscriber.prototype._complete = function () {
        var buffer = this.buffer;
        if (buffer.length > 0) {
            this.destination.next(buffer);
        }
        _super.prototype._complete.call(this);
    };
    return BufferCountSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferSkipCountSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](BufferSkipCountSubscriber, _super);
    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
        var _this = _super.call(this, destination) || this;
        _this.bufferSize = bufferSize;
        _this.startBufferEvery = startBufferEvery;
        _this.buffers = [];
        _this.count = 0;
        return _this;
    }
    BufferSkipCountSubscriber.prototype._next = function (value) {
        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;
        this.count++;
        if (count % startBufferEvery === 0) {
            buffers.push([]);
        }
        for (var i = buffers.length; i--;) {
            var buffer = buffers[i];
            buffer.push(value);
            if (buffer.length === bufferSize) {
                buffers.splice(i, 1);
                this.destination.next(buffer);
            }
        }
    };
    BufferSkipCountSubscriber.prototype._complete = function () {
        var _a = this, buffers = _a.buffers, destination = _a.destination;
        while (buffers.length > 0) {
            var buffer = buffers.shift();
            if (buffer.length > 0) {
                destination.next(buffer);
            }
        }
        _super.prototype._complete.call(this);
    };
    return BufferSkipCountSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=bufferCount.js.map


/***/ }),
/* 163 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = bufferTime;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__scheduler_async__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_isScheduler__ = __webpack_require__(15);
/** PURE_IMPORTS_START tslib,_scheduler_async,_Subscriber,_util_isScheduler PURE_IMPORTS_END */




/* tslint:enable:max-line-length */
/**
 * Buffers the source Observable values for a specific time period.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * those arrays periodically in time.</span>
 *
 * <img src="./img/bufferTime.png" width="100%">
 *
 * Buffers values from the source for a specific time duration `bufferTimeSpan`.
 * Unless the optional argument `bufferCreationInterval` is given, it emits and
 * resets the buffer every `bufferTimeSpan` milliseconds. If
 * `bufferCreationInterval` is given, this operator opens the buffer every
 * `bufferCreationInterval` milliseconds and closes (emits and resets) the
 * buffer every `bufferTimeSpan` milliseconds. When the optional argument
 * `maxBufferSize` is specified, the buffer will be closed either after
 * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.
 *
 * @example <caption>Every second, emit an array of the recent click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferTime(1000);
 * buffered.subscribe(x => console.log(x));
 *
 * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferTime(2000, 5000);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link windowTime}
 *
 * @param {number} bufferTimeSpan The amount of time to fill each buffer array.
 * @param {number} [bufferCreationInterval] The interval at which to start new
 * buffers.
 * @param {number} [maxBufferSize] The maximum buffer size.
 * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the
 * intervals that determine buffer boundaries.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferTime
 * @owner Observable
 */
function bufferTime(bufferTimeSpan) {
    var length = arguments.length;
    var scheduler = __WEBPACK_IMPORTED_MODULE_1__scheduler_async__["a" /* async */];
    if (Object(__WEBPACK_IMPORTED_MODULE_3__util_isScheduler__["a" /* isScheduler */])(arguments[arguments.length - 1])) {
        scheduler = arguments[arguments.length - 1];
        length--;
    }
    var bufferCreationInterval = null;
    if (length >= 2) {
        bufferCreationInterval = arguments[1];
    }
    var maxBufferSize = Number.POSITIVE_INFINITY;
    if (length >= 3) {
        maxBufferSize = arguments[2];
    }
    return function bufferTimeOperatorFunction(source) {
        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));
    };
}
var BufferTimeOperator = /*@__PURE__*/ (function () {
    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
        this.bufferTimeSpan = bufferTimeSpan;
        this.bufferCreationInterval = bufferCreationInterval;
        this.maxBufferSize = maxBufferSize;
        this.scheduler = scheduler;
    }
    BufferTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
    };
    return BufferTimeOperator;
}());
var Context = /*@__PURE__*/ (function () {
    function Context() {
        this.buffer = [];
    }
    return Context;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](BufferTimeSubscriber, _super);
    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.bufferTimeSpan = bufferTimeSpan;
        _this.bufferCreationInterval = bufferCreationInterval;
        _this.maxBufferSize = maxBufferSize;
        _this.scheduler = scheduler;
        _this.contexts = [];
        var context = _this.openContext();
        _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
        if (_this.timespanOnly) {
            var timeSpanOnlyState = { subscriber: _this, context: context, bufferTimeSpan: bufferTimeSpan };
            _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
        }
        else {
            var closeState = { subscriber: _this, context: context };
            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: _this, scheduler: scheduler };
            _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
            _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
        }
        return _this;
    }
    BufferTimeSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        var len = contexts.length;
        var filledBufferContext;
        for (var i = 0; i < len; i++) {
            var context_1 = contexts[i];
            var buffer = context_1.buffer;
            buffer.push(value);
            if (buffer.length == this.maxBufferSize) {
                filledBufferContext = context_1;
            }
        }
        if (filledBufferContext) {
            this.onBufferFull(filledBufferContext);
        }
    };
    BufferTimeSubscriber.prototype._error = function (err) {
        this.contexts.length = 0;
        _super.prototype._error.call(this, err);
    };
    BufferTimeSubscriber.prototype._complete = function () {
        var _a = this, contexts = _a.contexts, destination = _a.destination;
        while (contexts.length > 0) {
            var context_2 = contexts.shift();
            destination.next(context_2.buffer);
        }
        _super.prototype._complete.call(this);
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    BufferTimeSubscriber.prototype._unsubscribe = function () {
        this.contexts = null;
    };
    BufferTimeSubscriber.prototype.onBufferFull = function (context) {
        this.closeContext(context);
        var closeAction = context.closeAction;
        closeAction.unsubscribe();
        this.remove(closeAction);
        if (!this.closed && this.timespanOnly) {
            context = this.openContext();
            var bufferTimeSpan = this.bufferTimeSpan;
            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
        }
    };
    BufferTimeSubscriber.prototype.openContext = function () {
        var context = new Context();
        this.contexts.push(context);
        return context;
    };
    BufferTimeSubscriber.prototype.closeContext = function (context) {
        this.destination.next(context.buffer);
        var contexts = this.contexts;
        var spliceIndex = contexts ? contexts.indexOf(context) : -1;
        if (spliceIndex >= 0) {
            contexts.splice(contexts.indexOf(context), 1);
        }
    };
    return BufferTimeSubscriber;
}(__WEBPACK_IMPORTED_MODULE_2__Subscriber__["a" /* Subscriber */]));
function dispatchBufferTimeSpanOnly(state) {
    var subscriber = state.subscriber;
    var prevContext = state.context;
    if (prevContext) {
        subscriber.closeContext(prevContext);
    }
    if (!subscriber.closed) {
        state.context = subscriber.openContext();
        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
    }
}
function dispatchBufferCreation(state) {
    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;
    var context = subscriber.openContext();
    var action = this;
    if (!subscriber.closed) {
        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));
        action.schedule(state, bufferCreationInterval);
    }
}
function dispatchBufferClose(arg) {
    var subscriber = arg.subscriber, context = arg.context;
    subscriber.closeContext(context);
}
//# sourceMappingURL=bufferTime.js.map


/***/ }),
/* 164 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = bufferToggle;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscription__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__OuterSubscriber__ = __webpack_require__(3);
/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */




/**
 * Buffers the source Observable values starting from an emission from
 * `openings` and ending when the output of `closingSelector` emits.
 *
 * <span class="informal">Collects values from the past as an array. Starts
 * collecting only when `opening` emits, and calls the `closingSelector`
 * function to get an Observable that tells when to close the buffer.</span>
 *
 * <img src="./img/bufferToggle.png" width="100%">
 *
 * Buffers values from the source by opening the buffer via signals from an
 * Observable provided to `openings`, and closing and sending the buffers when
 * a Subscribable or Promise returned by the `closingSelector` function emits.
 *
 * @example <caption>Every other second, emit the click events from the next 500ms</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var openings = Rx.Observable.interval(1000);
 * var buffered = clicks.bufferToggle(openings, i =>
 *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()
 * );
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferWhen}
 * @see {@link windowToggle}
 *
 * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new
 * buffers.
 * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes
 * the value emitted by the `openings` observable and returns a Subscribable or Promise,
 * which, when it emits, signals that the associated buffer should be emitted
 * and cleared.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferToggle
 * @owner Observable
 */
function bufferToggle(openings, closingSelector) {
    return function bufferToggleOperatorFunction(source) {
        return source.lift(new BufferToggleOperator(openings, closingSelector));
    };
}
var BufferToggleOperator = /*@__PURE__*/ (function () {
    function BufferToggleOperator(openings, closingSelector) {
        this.openings = openings;
        this.closingSelector = closingSelector;
    }
    BufferToggleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
    };
    return BufferToggleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferToggleSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](BufferToggleSubscriber, _super);
    function BufferToggleSubscriber(destination, openings, closingSelector) {
        var _this = _super.call(this, destination) || this;
        _this.openings = openings;
        _this.closingSelector = closingSelector;
        _this.contexts = [];
        _this.add(Object(__WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__["a" /* subscribeToResult */])(_this, openings));
        return _this;
    }
    BufferToggleSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        var len = contexts.length;
        for (var i = 0; i < len; i++) {
            contexts[i].buffer.push(value);
        }
    };
    BufferToggleSubscriber.prototype._error = function (err) {
        var contexts = this.contexts;
        while (contexts.length > 0) {
            var context_1 = contexts.shift();
            context_1.subscription.unsubscribe();
            context_1.buffer = null;
            context_1.subscription = null;
        }
        this.contexts = null;
        _super.prototype._error.call(this, err);
    };
    BufferToggleSubscriber.prototype._complete = function () {
        var contexts = this.contexts;
        while (contexts.length > 0) {
            var context_2 = contexts.shift();
            this.destination.next(context_2.buffer);
            context_2.subscription.unsubscribe();
            context_2.buffer = null;
            context_2.subscription = null;
        }
        this.contexts = null;
        _super.prototype._complete.call(this);
    };
    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
    };
    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
        this.closeBuffer(innerSub.context);
    };
    BufferToggleSubscriber.prototype.openBuffer = function (value) {
        try {
            var closingSelector = this.closingSelector;
            var closingNotifier = closingSelector.call(this, value);
            if (closingNotifier) {
                this.trySubscribe(closingNotifier);
            }
        }
        catch (err) {
            this._error(err);
        }
    };
    BufferToggleSubscriber.prototype.closeBuffer = function (context) {
        var contexts = this.contexts;
        if (contexts && context) {
            var buffer = context.buffer, subscription = context.subscription;
            this.destination.next(buffer);
            contexts.splice(contexts.indexOf(context), 1);
            this.remove(subscription);
            subscription.unsubscribe();
        }
    };
    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
        var contexts = this.contexts;
        var buffer = [];
        var subscription = new __WEBPACK_IMPORTED_MODULE_1__Subscription__["a" /* Subscription */]();
        var context = { buffer: buffer, subscription: subscription };
        contexts.push(context);
        var innerSubscription = Object(__WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__["a" /* subscribeToResult */])(this, closingNotifier, context);
        if (!innerSubscription || innerSubscription.closed) {
            this.closeBuffer(context);
        }
        else {
            innerSubscription.context = context;
            this.add(innerSubscription);
            subscription.add(innerSubscription);
        }
    };
    return BufferToggleSubscriber;
}(__WEBPACK_IMPORTED_MODULE_3__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=bufferToggle.js.map


/***/ }),
/* 165 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = bufferWhen;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscription__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_tryCatch__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_errorObject__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */






/**
 * Buffers the source Observable values, using a factory function of closing
 * Observables to determine when to close, emit, and reset the buffer.
 *
 * <span class="informal">Collects values from the past as an array. When it
 * starts collecting values, it calls a function that returns an Observable that
 * tells when to close the buffer and restart collecting.</span>
 *
 * <img src="./img/bufferWhen.png" width="100%">
 *
 * Opens a buffer immediately, then closes the buffer when the observable
 * returned by calling `closingSelector` function emits a value. When it closes
 * the buffer, it immediately opens a new buffer and repeats the process.
 *
 * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferWhen(() =>
 *   Rx.Observable.interval(1000 + Math.random() * 4000)
 * );
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link windowWhen}
 *
 * @param {function(): Observable} closingSelector A function that takes no
 * arguments and returns an Observable that signals buffer closure.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferWhen
 * @owner Observable
 */
function bufferWhen(closingSelector) {
    return function (source) {
        return source.lift(new BufferWhenOperator(closingSelector));
    };
}
var BufferWhenOperator = /*@__PURE__*/ (function () {
    function BufferWhenOperator(closingSelector) {
        this.closingSelector = closingSelector;
    }
    BufferWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
    };
    return BufferWhenOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferWhenSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](BufferWhenSubscriber, _super);
    function BufferWhenSubscriber(destination, closingSelector) {
        var _this = _super.call(this, destination) || this;
        _this.closingSelector = closingSelector;
        _this.subscribing = false;
        _this.openBuffer();
        return _this;
    }
    BufferWhenSubscriber.prototype._next = function (value) {
        this.buffer.push(value);
    };
    BufferWhenSubscriber.prototype._complete = function () {
        var buffer = this.buffer;
        if (buffer) {
            this.destination.next(buffer);
        }
        _super.prototype._complete.call(this);
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    BufferWhenSubscriber.prototype._unsubscribe = function () {
        this.buffer = null;
        this.subscribing = false;
    };
    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openBuffer();
    };
    BufferWhenSubscriber.prototype.notifyComplete = function () {
        if (this.subscribing) {
            this.complete();
        }
        else {
            this.openBuffer();
        }
    };
    BufferWhenSubscriber.prototype.openBuffer = function () {
        var closingSubscription = this.closingSubscription;
        if (closingSubscription) {
            this.remove(closingSubscription);
            closingSubscription.unsubscribe();
        }
        var buffer = this.buffer;
        if (this.buffer) {
            this.destination.next(buffer);
        }
        this.buffer = [];
        var closingNotifier = Object(__WEBPACK_IMPORTED_MODULE_2__util_tryCatch__["a" /* tryCatch */])(this.closingSelector)();
        if (closingNotifier === __WEBPACK_IMPORTED_MODULE_3__util_errorObject__["a" /* errorObject */]) {
            this.error(__WEBPACK_IMPORTED_MODULE_3__util_errorObject__["a" /* errorObject */].e);
        }
        else {
            closingSubscription = new __WEBPACK_IMPORTED_MODULE_1__Subscription__["a" /* Subscription */]();
            this.closingSubscription = closingSubscription;
            this.add(closingSubscription);
            this.subscribing = true;
            closingSubscription.add(Object(__WEBPACK_IMPORTED_MODULE_5__util_subscribeToResult__["a" /* subscribeToResult */])(this, closingNotifier));
            this.subscribing = false;
        }
    };
    return BufferWhenSubscriber;
}(__WEBPACK_IMPORTED_MODULE_4__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=bufferWhen.js.map


/***/ }),
/* 166 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = catchError;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */



function catchError(selector) {
    return function catchErrorOperatorFunction(source) {
        var operator = new CatchOperator(selector);
        var caught = source.lift(operator);
        return (operator.caught = caught);
    };
}
var CatchOperator = /*@__PURE__*/ (function () {
    function CatchOperator(selector) {
        this.selector = selector;
    }
    CatchOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
    };
    return CatchOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CatchSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](CatchSubscriber, _super);
    function CatchSubscriber(destination, selector, caught) {
        var _this = _super.call(this, destination) || this;
        _this.selector = selector;
        _this.caught = caught;
        return _this;
    }
    // NOTE: overriding `error` instead of `_error` because we don't want
    // to have this flag this subscriber as `isStopped`. We can mimic the
    // behavior of the RetrySubscriber (from the `retry` operator), where
    // we unsubscribe from our source chain, reset our Subscriber flags,
    // then subscribe to the selector result.
    CatchSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var result = void 0;
            try {
                result = this.selector(err, this.caught);
            }
            catch (err2) {
                _super.prototype.error.call(this, err2);
                return;
            }
            this._unsubscribeAndRecycle();
            this.add(Object(__WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__["a" /* subscribeToResult */])(this, result));
        }
    };
    return CatchSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=catchError.js.map


/***/ }),
/* 167 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = combineAll;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__observable_combineLatest__ = __webpack_require__(62);
/** PURE_IMPORTS_START _observable_combineLatest PURE_IMPORTS_END */

function combineAll(project) {
    return function (source) { return source.lift(new __WEBPACK_IMPORTED_MODULE_0__observable_combineLatest__["a" /* CombineLatestOperator */](project)); };
}
//# sourceMappingURL=combineAll.js.map


/***/ }),
/* 168 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = combineLatest;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_isArray__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__observable_combineLatest__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__observable_from__ = __webpack_require__(20);
/** PURE_IMPORTS_START _util_isArray,_observable_combineLatest,_observable_from PURE_IMPORTS_END */



var none = {};
/* tslint:enable:max-line-length */
/**
 * @deprecated Deprecated in favor of static combineLatest.
 */
function combineLatest() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var project = null;
    if (typeof observables[observables.length - 1] === 'function') {
        project = observables.pop();
    }
    // if the first and only other argument besides the resultSelector is an array
    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`
    if (observables.length === 1 && Object(__WEBPACK_IMPORTED_MODULE_0__util_isArray__["a" /* isArray */])(observables[0])) {
        observables = observables[0].slice();
    }
    return function (source) { return source.lift.call(Object(__WEBPACK_IMPORTED_MODULE_2__observable_from__["a" /* from */])([source].concat(observables)), new __WEBPACK_IMPORTED_MODULE_1__observable_combineLatest__["a" /* CombineLatestOperator */](project)); };
}
//# sourceMappingURL=combineLatest.js.map


/***/ }),
/* 169 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = concat;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__observable_concat__ = __webpack_require__(45);
/** PURE_IMPORTS_START _observable_concat PURE_IMPORTS_END */

/* tslint:enable:max-line-length */
/**
 * @deprecated Deprecated in favor of static concat.
 */
function concat() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    return function (source) { return source.lift.call(__WEBPACK_IMPORTED_MODULE_0__observable_concat__["a" /* concat */].apply(void 0, [source].concat(observables))); };
}
//# sourceMappingURL=concat.js.map


/***/ }),
/* 170 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = concatMapTo;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__concatMap__ = __webpack_require__(106);
/** PURE_IMPORTS_START _concatMap PURE_IMPORTS_END */

/* tslint:enable:max-line-length */
/**
 * Projects each source value to the same Observable which is merged multiple
 * times in a serialized fashion on the output Observable.
 *
 * <span class="informal">It's like {@link concatMap}, but maps each value
 * always to the same inner Observable.</span>
 *
 * <img src="./img/concatMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then flattens those resulting Observables into one
 * single Observable, which is the output Observable. Each new `innerObservable`
 * instance emitted on the output Observable is concatenated with the previous
 * `innerObservable` instance.
 *
 * __Warning:__ if source values arrive endlessly and faster than their
 * corresponding inner Observables can complete, it will result in memory issues
 * as inner Observables amass in an unbounded buffer waiting for their turn to
 * be subscribed to.
 *
 * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter
 * set to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link concat}
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link mergeMapTo}
 * @see {@link switchMapTo}
 *
 * @param {ObservableInput} innerObservable An Observable to replace each value from
 * the source Observable.
 * @return {Observable} An observable of values merged together by joining the
 * passed observable with itself, one after the other, for each value emitted
 * from the source.
 * @method concatMapTo
 * @owner Observable
 */
function concatMapTo(innerObservable, resultSelector) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__concatMap__["a" /* concatMap */])(function () { return innerObservable; }, resultSelector);
}
//# sourceMappingURL=concatMapTo.js.map


/***/ }),
/* 171 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = count;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/**
 * Counts the number of emissions on the source and emits that number when the
 * source completes.
 *
 * <span class="informal">Tells how many values were emitted, when the source
 * completes.</span>
 *
 * <img src="./img/count.png" width="100%">
 *
 * `count` transforms an Observable that emits values into an Observable that
 * emits a single value that represents the number of values emitted by the
 * source Observable. If the source Observable terminates with an error, `count`
 * will pass this error notification along without emitting a value first. If
 * the source Observable does not terminate at all, `count` will neither emit
 * a value nor terminate. This operator takes an optional `predicate` function
 * as argument, in which case the output emission will represent the number of
 * source values that matched `true` with the `predicate`.
 *
 * @example <caption>Counts how many seconds have passed before the first click happened</caption>
 * var seconds = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var secondsBeforeClick = seconds.takeUntil(clicks);
 * var result = secondsBeforeClick.count();
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>
 * var numbers = Rx.Observable.range(1, 7);
 * var result = numbers.count(i => i % 2 === 1);
 * result.subscribe(x => console.log(x));
 *
 * // Results in:
 * // 4
 *
 * @see {@link max}
 * @see {@link min}
 * @see {@link reduce}
 *
 * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A
 * boolean function to select what values are to be counted. It is provided with
 * arguments of:
 * - `value`: the value from the source Observable.
 * - `index`: the (zero-based) "index" of the value from the source Observable.
 * - `source`: the source Observable instance itself.
 * @return {Observable} An Observable of one number that represents the count as
 * described above.
 * @method count
 * @owner Observable
 */
function count(predicate) {
    return function (source) { return source.lift(new CountOperator(predicate, source)); };
}
var CountOperator = /*@__PURE__*/ (function () {
    function CountOperator(predicate, source) {
        this.predicate = predicate;
        this.source = source;
    }
    CountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
    };
    return CountOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CountSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](CountSubscriber, _super);
    function CountSubscriber(destination, predicate, source) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.source = source;
        _this.count = 0;
        _this.index = 0;
        return _this;
    }
    CountSubscriber.prototype._next = function (value) {
        if (this.predicate) {
            this._tryPredicate(value);
        }
        else {
            this.count++;
        }
    };
    CountSubscriber.prototype._tryPredicate = function (value) {
        var result;
        try {
            result = this.predicate(value, this.index++, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.count++;
        }
    };
    CountSubscriber.prototype._complete = function () {
        this.destination.next(this.count);
        this.destination.complete();
    };
    return CountSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=count.js.map


/***/ }),
/* 172 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = debounce;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */



/**
 * Emits a value from the source Observable only after a particular time span
 * determined by another Observable has passed without another source emission.
 *
 * <span class="informal">It's like {@link debounceTime}, but the time span of
 * emission silence is determined by a second Observable.</span>
 *
 * <img src="./img/debounce.png" width="100%">
 *
 * `debounce` delays values emitted by the source Observable, but drops previous
 * pending delayed emissions if a new value arrives on the source Observable.
 * This operator keeps track of the most recent value from the source
 * Observable, and spawns a duration Observable by calling the
 * `durationSelector` function. The value is emitted only when the duration
 * Observable emits a value or completes, and if no other value was emitted on
 * the source Observable since the duration Observable was spawned. If a new
 * value appears before the duration Observable emits, the previous value will
 * be dropped and will not be emitted on the output Observable.
 *
 * Like {@link debounceTime}, this is a rate-limiting operator, and also a
 * delay-like operator since output emissions do not necessarily occur at the
 * same time as they did on the source Observable.
 *
 * @example <caption>Emit the most recent click after a burst of clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.debounce(() => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounceTime}
 * @see {@link delayWhen}
 * @see {@link throttle}
 *
 * @param {function(value: T): SubscribableOrPromise} durationSelector A function
 * that receives a value from the source Observable, for computing the timeout
 * duration for each source value, returned as an Observable or a Promise.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified duration Observable returned by
 * `durationSelector`, and may drop some values if they occur too frequently.
 * @method debounce
 * @owner Observable
 */
function debounce(durationSelector) {
    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };
}
var DebounceOperator = /*@__PURE__*/ (function () {
    function DebounceOperator(durationSelector) {
        this.durationSelector = durationSelector;
    }
    DebounceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
    };
    return DebounceOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DebounceSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](DebounceSubscriber, _super);
    function DebounceSubscriber(destination, durationSelector) {
        var _this = _super.call(this, destination) || this;
        _this.durationSelector = durationSelector;
        _this.hasValue = false;
        _this.durationSubscription = null;
        return _this;
    }
    DebounceSubscriber.prototype._next = function (value) {
        try {
            var result = this.durationSelector.call(this, value);
            if (result) {
                this._tryNext(value, result);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    DebounceSubscriber.prototype._complete = function () {
        this.emitValue();
        this.destination.complete();
    };
    DebounceSubscriber.prototype._tryNext = function (value, duration) {
        var subscription = this.durationSubscription;
        this.value = value;
        this.hasValue = true;
        if (subscription) {
            subscription.unsubscribe();
            this.remove(subscription);
        }
        subscription = Object(__WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__["a" /* subscribeToResult */])(this, duration);
        if (subscription && !subscription.closed) {
            this.add(this.durationSubscription = subscription);
        }
    };
    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.emitValue();
    };
    DebounceSubscriber.prototype.notifyComplete = function () {
        this.emitValue();
    };
    DebounceSubscriber.prototype.emitValue = function () {
        if (this.hasValue) {
            var value = this.value;
            var subscription = this.durationSubscription;
            if (subscription) {
                this.durationSubscription = null;
                subscription.unsubscribe();
                this.remove(subscription);
            }
            // This must be done *before* passing the value
            // along to the destination because it's possible for
            // the value to synchronously re-enter this operator
            // recursively if the duration selector Observable
            // emits synchronously
            this.value = null;
            this.hasValue = false;
            _super.prototype._next.call(this, value);
        }
    };
    return DebounceSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=debounce.js.map


/***/ }),
/* 173 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = debounceTime;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__scheduler_async__ = __webpack_require__(12);
/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */



/**
 * Emits a value from the source Observable only after a particular time span
 * has passed without another source emission.
 *
 * <span class="informal">It's like {@link delay}, but passes only the most
 * recent value from each burst of emissions.</span>
 *
 * <img src="./img/debounceTime.png" width="100%">
 *
 * `debounceTime` delays values emitted by the source Observable, but drops
 * previous pending delayed emissions if a new value arrives on the source
 * Observable. This operator keeps track of the most recent value from the
 * source Observable, and emits that only when `dueTime` enough time has passed
 * without any other value appearing on the source Observable. If a new value
 * appears before `dueTime` silence occurs, the previous value will be dropped
 * and will not be emitted on the output Observable.
 *
 * This is a rate-limiting operator, because it is impossible for more than one
 * value to be emitted in any time window of duration `dueTime`, but it is also
 * a delay-like operator since output emissions do not occur at the same time as
 * they did on the source Observable. Optionally takes a {@link IScheduler} for
 * managing timers.
 *
 * @example <caption>Emit the most recent click after a burst of clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.debounceTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounce}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttleTime}
 *
 * @param {number} dueTime The timeout duration in milliseconds (or the time
 * unit determined internally by the optional `scheduler`) for the window of
 * time required to wait for emission silence before emitting the most recent
 * source value.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the timeout for each value.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified `dueTime`, and may drop some values if they occur
 * too frequently.
 * @method debounceTime
 * @owner Observable
 */
function debounceTime(dueTime, scheduler) {
    if (scheduler === void 0) {
        scheduler = __WEBPACK_IMPORTED_MODULE_2__scheduler_async__["a" /* async */];
    }
    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };
}
var DebounceTimeOperator = /*@__PURE__*/ (function () {
    function DebounceTimeOperator(dueTime, scheduler) {
        this.dueTime = dueTime;
        this.scheduler = scheduler;
    }
    DebounceTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
    };
    return DebounceTimeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DebounceTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](DebounceTimeSubscriber, _super);
    function DebounceTimeSubscriber(destination, dueTime, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.dueTime = dueTime;
        _this.scheduler = scheduler;
        _this.debouncedSubscription = null;
        _this.lastValue = null;
        _this.hasValue = false;
        return _this;
    }
    DebounceTimeSubscriber.prototype._next = function (value) {
        this.clearDebounce();
        this.lastValue = value;
        this.hasValue = true;
        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
    };
    DebounceTimeSubscriber.prototype._complete = function () {
        this.debouncedNext();
        this.destination.complete();
    };
    DebounceTimeSubscriber.prototype.debouncedNext = function () {
        this.clearDebounce();
        if (this.hasValue) {
            var lastValue = this.lastValue;
            // This must be done *before* passing the value
            // along to the destination because it's possible for
            // the value to synchronously re-enter this operator
            // recursively when scheduled with things like
            // VirtualScheduler/TestScheduler.
            this.lastValue = null;
            this.hasValue = false;
            this.destination.next(lastValue);
        }
    };
    DebounceTimeSubscriber.prototype.clearDebounce = function () {
        var debouncedSubscription = this.debouncedSubscription;
        if (debouncedSubscription !== null) {
            this.remove(debouncedSubscription);
            debouncedSubscription.unsubscribe();
            this.debouncedSubscription = null;
        }
    };
    return DebounceTimeSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
function dispatchNext(subscriber) {
    subscriber.debouncedNext();
}
//# sourceMappingURL=debounceTime.js.map


/***/ }),
/* 174 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = delay;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__scheduler_async__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isDate__ = __webpack_require__(107);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Notification__ = __webpack_require__(43);
/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_Subscriber,_Notification PURE_IMPORTS_END */





/**
 * Delays the emission of items from the source Observable by a given timeout or
 * until a given Date.
 *
 * <span class="informal">Time shifts each item by some specified amount of
 * milliseconds.</span>
 *
 * <img src="./img/delay.png" width="100%">
 *
 * If the delay argument is a Number, this operator time shifts the source
 * Observable by that amount of time expressed in milliseconds. The relative
 * time intervals between the values are preserved.
 *
 * If the delay argument is a Date, this operator time shifts the start of the
 * Observable execution until the given date occurs.
 *
 * @example <caption>Delay each click by one second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second
 * delayedClicks.subscribe(x => console.log(x));
 *
 * @example <caption>Delay all clicks until a future date happens</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var date = new Date('March 15, 2050 12:00:00'); // in the future
 * var delayedClicks = clicks.delay(date); // click emitted only after that date
 * delayedClicks.subscribe(x => console.log(x));
 *
 * @see {@link debounceTime}
 * @see {@link delayWhen}
 *
 * @param {number|Date} delay The delay duration in milliseconds (a `number`) or
 * a `Date` until which the emission of the source items is delayed.
 * @param {Scheduler} [scheduler=async] The IScheduler to use for
 * managing the timers that handle the time-shift for each item.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified timeout or Date.
 * @method delay
 * @owner Observable
 */
function delay(delay, scheduler) {
    if (scheduler === void 0) {
        scheduler = __WEBPACK_IMPORTED_MODULE_1__scheduler_async__["a" /* async */];
    }
    var absoluteDelay = Object(__WEBPACK_IMPORTED_MODULE_2__util_isDate__["a" /* isDate */])(delay);
    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);
    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };
}
var DelayOperator = /*@__PURE__*/ (function () {
    function DelayOperator(delay, scheduler) {
        this.delay = delay;
        this.scheduler = scheduler;
    }
    DelayOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
    };
    return DelayOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DelaySubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](DelaySubscriber, _super);
    function DelaySubscriber(destination, delay, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.delay = delay;
        _this.scheduler = scheduler;
        _this.queue = [];
        _this.active = false;
        _this.errored = false;
        return _this;
    }
    DelaySubscriber.dispatch = function (state) {
        var source = state.source;
        var queue = source.queue;
        var scheduler = state.scheduler;
        var destination = state.destination;
        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
            queue.shift().notification.observe(destination);
        }
        if (queue.length > 0) {
            var delay_1 = Math.max(0, queue[0].time - scheduler.now());
            this.schedule(state, delay_1);
        }
        else {
            this.unsubscribe();
            source.active = false;
        }
    };
    DelaySubscriber.prototype._schedule = function (scheduler) {
        this.active = true;
        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
            source: this, destination: this.destination, scheduler: scheduler
        }));
    };
    DelaySubscriber.prototype.scheduleNotification = function (notification) {
        if (this.errored === true) {
            return;
        }
        var scheduler = this.scheduler;
        var message = new DelayMessage(scheduler.now() + this.delay, notification);
        this.queue.push(message);
        if (this.active === false) {
            this._schedule(scheduler);
        }
    };
    DelaySubscriber.prototype._next = function (value) {
        this.scheduleNotification(__WEBPACK_IMPORTED_MODULE_4__Notification__["a" /* Notification */].createNext(value));
    };
    DelaySubscriber.prototype._error = function (err) {
        this.errored = true;
        this.queue = [];
        this.destination.error(err);
    };
    DelaySubscriber.prototype._complete = function () {
        this.scheduleNotification(__WEBPACK_IMPORTED_MODULE_4__Notification__["a" /* Notification */].createComplete());
    };
    return DelaySubscriber;
}(__WEBPACK_IMPORTED_MODULE_3__Subscriber__["a" /* Subscriber */]));
var DelayMessage = /*@__PURE__*/ (function () {
    function DelayMessage(time, notification) {
        this.time = time;
        this.notification = notification;
    }
    return DelayMessage;
}());
//# sourceMappingURL=delay.js.map


/***/ }),
/* 175 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = delayWhen;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */





/**
 * Delays the emission of items from the source Observable by a given time span
 * determined by the emissions of another Observable.
 *
 * <span class="informal">It's like {@link delay}, but the time span of the
 * delay duration is determined by a second Observable.</span>
 *
 * <img src="./img/delayWhen.png" width="100%">
 *
 * `delayWhen` time shifts each emitted value from the source Observable by a
 * time span determined by another Observable. When the source emits a value,
 * the `delayDurationSelector` function is called with the source value as
 * argument, and should return an Observable, called the "duration" Observable.
 * The source value is emitted on the output Observable only when the duration
 * Observable emits a value or completes.
 *
 * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which
 * is an Observable. When `subscriptionDelay` emits its first value or
 * completes, the source Observable is subscribed to and starts behaving like
 * described in the previous paragraph. If `subscriptionDelay` is not provided,
 * `delayWhen` will subscribe to the source Observable as soon as the output
 * Observable is subscribed.
 *
 * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var delayedClicks = clicks.delayWhen(event =>
 *   Rx.Observable.interval(Math.random() * 5000)
 * );
 * delayedClicks.subscribe(x => console.log(x));
 *
 * @see {@link debounce}
 * @see {@link delay}
 *
 * @param {function(value: T): Observable} delayDurationSelector A function that
 * returns an Observable for each value emitted by the source Observable, which
 * is then used to delay the emission of that item on the output Observable
 * until the Observable returned from this function emits a value.
 * @param {Observable} subscriptionDelay An Observable that triggers the
 * subscription to the source Observable once it emits any value.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by an amount of time specified by the Observable returned by
 * `delayDurationSelector`.
 * @method delayWhen
 * @owner Observable
 */
function delayWhen(delayDurationSelector, subscriptionDelay) {
    if (subscriptionDelay) {
        return function (source) {
            return new SubscriptionDelayObservable(source, subscriptionDelay)
                .lift(new DelayWhenOperator(delayDurationSelector));
        };
    }
    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };
}
var DelayWhenOperator = /*@__PURE__*/ (function () {
    function DelayWhenOperator(delayDurationSelector) {
        this.delayDurationSelector = delayDurationSelector;
    }
    DelayWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
    };
    return DelayWhenOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DelayWhenSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](DelayWhenSubscriber, _super);
    function DelayWhenSubscriber(destination, delayDurationSelector) {
        var _this = _super.call(this, destination) || this;
        _this.delayDurationSelector = delayDurationSelector;
        _this.completed = false;
        _this.delayNotifierSubscriptions = [];
        _this.values = [];
        return _this;
    }
    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(outerValue);
        this.removeSubscription(innerSub);
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
        var value = this.removeSubscription(innerSub);
        if (value) {
            this.destination.next(value);
        }
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype._next = function (value) {
        try {
            var delayNotifier = this.delayDurationSelector(value);
            if (delayNotifier) {
                this.tryDelay(delayNotifier, value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    DelayWhenSubscriber.prototype._complete = function () {
        this.completed = true;
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
        subscription.unsubscribe();
        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
        var value = null;
        if (subscriptionIdx !== -1) {
            value = this.values[subscriptionIdx];
            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
            this.values.splice(subscriptionIdx, 1);
        }
        return value;
    };
    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
        var notifierSubscription = Object(__WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__["a" /* subscribeToResult */])(this, delayNotifier, value);
        if (notifierSubscription && !notifierSubscription.closed) {
            this.add(notifierSubscription);
            this.delayNotifierSubscriptions.push(notifierSubscription);
        }
        this.values.push(value);
    };
    DelayWhenSubscriber.prototype.tryComplete = function () {
        if (this.completed && this.delayNotifierSubscriptions.length === 0) {
            this.destination.complete();
        }
    };
    return DelayWhenSubscriber;
}(__WEBPACK_IMPORTED_MODULE_3__OuterSubscriber__["a" /* OuterSubscriber */]));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubscriptionDelayObservable = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SubscriptionDelayObservable, _super);
    function SubscriptionDelayObservable(source, subscriptionDelay) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subscriptionDelay = subscriptionDelay;
        return _this;
    }
    /** @deprecated This is an internal implementation detail, do not use. */
    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
    };
    return SubscriptionDelayObservable;
}(__WEBPACK_IMPORTED_MODULE_2__Observable__["a" /* Observable */]));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubscriptionDelaySubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SubscriptionDelaySubscriber, _super);
    function SubscriptionDelaySubscriber(parent, source) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.source = source;
        _this.sourceSubscribed = false;
        return _this;
    }
    SubscriptionDelaySubscriber.prototype._next = function (unused) {
        this.subscribeToSource();
    };
    SubscriptionDelaySubscriber.prototype._error = function (err) {
        this.unsubscribe();
        this.parent.error(err);
    };
    SubscriptionDelaySubscriber.prototype._complete = function () {
        this.subscribeToSource();
    };
    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
        if (!this.sourceSubscribed) {
            this.sourceSubscribed = true;
            this.unsubscribe();
            this.source.subscribe(this.parent);
        }
    };
    return SubscriptionDelaySubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=delayWhen.js.map


/***/ }),
/* 176 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = dematerialize;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/**
 * Converts an Observable of {@link Notification} objects into the emissions
 * that they represent.
 *
 * <span class="informal">Unwraps {@link Notification} objects as actual `next`,
 * `error` and `complete` emissions. The opposite of {@link materialize}.</span>
 *
 * <img src="./img/dematerialize.png" width="100%">
 *
 * `dematerialize` is assumed to operate an Observable that only emits
 * {@link Notification} objects as `next` emissions, and does not emit any
 * `error`. Such Observable is the output of a `materialize` operation. Those
 * notifications are then unwrapped using the metadata they contain, and emitted
 * as `next`, `error`, and `complete` on the output Observable.
 *
 * Use this operator in conjunction with {@link materialize}.
 *
 * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>
 * var notifA = new Rx.Notification('N', 'A');
 * var notifB = new Rx.Notification('N', 'B');
 * var notifE = new Rx.Notification('E', void 0,
 *   new TypeError('x.toUpperCase is not a function')
 * );
 * var materialized = Rx.Observable.of(notifA, notifB, notifE);
 * var upperCase = materialized.dematerialize();
 * upperCase.subscribe(x => console.log(x), e => console.error(e));
 *
 * // Results in:
 * // A
 * // B
 * // TypeError: x.toUpperCase is not a function
 *
 * @see {@link Notification}
 * @see {@link materialize}
 *
 * @return {Observable} An Observable that emits items and notifications
 * embedded in Notification objects emitted by the source Observable.
 * @method dematerialize
 * @owner Observable
 */
function dematerialize() {
    return function dematerializeOperatorFunction(source) {
        return source.lift(new DeMaterializeOperator());
    };
}
var DeMaterializeOperator = /*@__PURE__*/ (function () {
    function DeMaterializeOperator() {
    }
    DeMaterializeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DeMaterializeSubscriber(subscriber));
    };
    return DeMaterializeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DeMaterializeSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](DeMaterializeSubscriber, _super);
    function DeMaterializeSubscriber(destination) {
        return _super.call(this, destination) || this;
    }
    DeMaterializeSubscriber.prototype._next = function (value) {
        value.observe(this.destination);
    };
    return DeMaterializeSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=dematerialize.js.map


/***/ }),
/* 177 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = distinct;
/* unused harmony export DistinctSubscriber */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */



/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.
 *
 * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will
 * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the
 * source observable directly with an equality check against previous values.
 *
 * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.
 *
 * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the
 * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`
 * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so
 * that the internal `Set` can be "flushed", basically clearing it of values.
 *
 * @example <caption>A simple example with numbers</caption>
 * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)
 *   .distinct()
 *   .subscribe(x => console.log(x)); // 1, 2, 3, 4
 *
 * @example <caption>An example using a keySelector function</caption>
 * interface Person {
 *    age: number,
 *    name: string
 * }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'})
 *     .distinct((p: Person) => p.name)
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 *
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 *
 * @param {function} [keySelector] Optional function to select which value you want to check as distinct.
 * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values.
 * @method distinct
 * @owner Observable
 */
function distinct(keySelector, flushes) {
    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };
}
var DistinctOperator = /*@__PURE__*/ (function () {
    function DistinctOperator(keySelector, flushes) {
        this.keySelector = keySelector;
        this.flushes = flushes;
    }
    DistinctOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
    };
    return DistinctOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DistinctSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](DistinctSubscriber, _super);
    function DistinctSubscriber(destination, keySelector, flushes) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.values = new Set();
        if (flushes) {
            _this.add(Object(__WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__["a" /* subscribeToResult */])(_this, flushes));
        }
        return _this;
    }
    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values.clear();
    };
    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    DistinctSubscriber.prototype._next = function (value) {
        if (this.keySelector) {
            this._useKeySelector(value);
        }
        else {
            this._finalizeNext(value, value);
        }
    };
    DistinctSubscriber.prototype._useKeySelector = function (value) {
        var key;
        var destination = this.destination;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        this._finalizeNext(key, value);
    };
    DistinctSubscriber.prototype._finalizeNext = function (key, value) {
        var values = this.values;
        if (!values.has(key)) {
            values.add(key);
            this.destination.next(value);
        }
    };
    return DistinctSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__["a" /* OuterSubscriber */]));

//# sourceMappingURL=distinct.js.map


/***/ }),
/* 178 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = distinctUntilKeyChanged;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__distinctUntilChanged__ = __webpack_require__(108);
/** PURE_IMPORTS_START _distinctUntilChanged PURE_IMPORTS_END */

/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,
 * using a property accessed by using the key provided to check if the two items are distinct.
 *
 * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
 *
 * If a comparator function is not provided, an equality check is used by default.
 *
 * @example <caption>An example comparing the name of persons</caption>
 *
 *  interface Person {
 *     age: number,
 *     name: string
 *  }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'},
 *     { age: 6, name: 'Foo'})
 *     .distinctUntilKeyChanged('name')
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo' }
 *
 * @example <caption>An example comparing the first letters of the name</caption>
 *
 * interface Person {
 *     age: number,
 *     name: string
 *  }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo1'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo2'},
 *     { age: 6, name: 'Foo3'})
 *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo1' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo2' }
 *
 * @see {@link distinct}
 * @see {@link distinctUntilChanged}
 *
 * @param {string} key String key for object property lookup on each item.
 * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.
 * @method distinctUntilKeyChanged
 * @owner Observable
 */
function distinctUntilKeyChanged(key, compare) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__distinctUntilChanged__["a" /* distinctUntilChanged */])(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });
}
//# sourceMappingURL=distinctUntilKeyChanged.js.map


/***/ }),
/* 179 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = elementAt;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_ArgumentOutOfRangeError__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__filter__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__throwIfEmpty__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__defaultIfEmpty__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__take__ = __webpack_require__(66);
/** PURE_IMPORTS_START _util_ArgumentOutOfRangeError,_filter,_throwIfEmpty,_defaultIfEmpty,_take PURE_IMPORTS_END */





/**
 * Emits the single value at the specified `index` in a sequence of emissions
 * from the source Observable.
 *
 * <span class="informal">Emits only the i-th value, then completes.</span>
 *
 * <img src="./img/elementAt.png" width="100%">
 *
 * `elementAt` returns an Observable that emits the item at the specified
 * `index` in the source Observable, or a default value if that `index` is out
 * of range and the `default` argument is provided. If the `default` argument is
 * not given and the `index` is out of range, the output Observable will emit an
 * `ArgumentOutOfRangeError` error.
 *
 * @example <caption>Emit only the third click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.elementAt(2);
 * result.subscribe(x => console.log(x));
 *
 * // Results in:
 * // click 1 = nothing
 * // click 2 = nothing
 * // click 3 = MouseEvent object logged to console
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link skip}
 * @see {@link single}
 * @see {@link take}
 *
 * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the
 * Observable has completed before emitting the i-th `next` notification.
 *
 * @param {number} index Is the number `i` for the i-th source emission that has
 * happened since the subscription, starting from the number `0`.
 * @param {T} [defaultValue] The default value returned for missing indices.
 * @return {Observable} An Observable that emits a single item, if it is found.
 * Otherwise, will emit the default value if given. If not, then emits an error.
 * @method elementAt
 * @owner Observable
 */
function elementAt(index, defaultValue) {
    if (index < 0) {
        throw new __WEBPACK_IMPORTED_MODULE_0__util_ArgumentOutOfRangeError__["a" /* ArgumentOutOfRangeError */]();
    }
    var hasDefaultValue = arguments.length >= 2;
    return function (source) {
        return source.pipe(Object(__WEBPACK_IMPORTED_MODULE_1__filter__["a" /* filter */])(function (v, i) { return i === index; }), Object(__WEBPACK_IMPORTED_MODULE_4__take__["a" /* take */])(1), hasDefaultValue
            ? Object(__WEBPACK_IMPORTED_MODULE_3__defaultIfEmpty__["a" /* defaultIfEmpty */])(defaultValue)
            : Object(__WEBPACK_IMPORTED_MODULE_2__throwIfEmpty__["a" /* throwIfEmpty */])(function () { return new __WEBPACK_IMPORTED_MODULE_0__util_ArgumentOutOfRangeError__["a" /* ArgumentOutOfRangeError */](); }));
    };
}
//# sourceMappingURL=elementAt.js.map


/***/ }),
/* 180 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = endWith;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__observable_fromArray__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__observable_scalar__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__observable_empty__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__observable_concat__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_isScheduler__ = __webpack_require__(15);
/** PURE_IMPORTS_START _observable_fromArray,_observable_scalar,_observable_empty,_observable_concat,_util_isScheduler PURE_IMPORTS_END */





/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the items you specify as arguments after it finishes emitting
 * items emitted by the source Observable.
 *
 * @param {...T} values - Items you want the modified Observable to emit last.
 * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling
 * the emissions of the `next` notifications.
 * @return {Observable} An Observable that emits the items emitted by the source Observable
 *  and then emits the items in the specified Iterable.
 * @method endWith
 * @owner Observable
 */
function endWith() {
    var array = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        array[_i] = arguments[_i];
    }
    return function (source) {
        var scheduler = array[array.length - 1];
        if (Object(__WEBPACK_IMPORTED_MODULE_4__util_isScheduler__["a" /* isScheduler */])(scheduler)) {
            array.pop();
        }
        else {
            scheduler = null;
        }
        var len = array.length;
        if (len === 1 && !scheduler) {
            return Object(__WEBPACK_IMPORTED_MODULE_3__observable_concat__["a" /* concat */])(source, Object(__WEBPACK_IMPORTED_MODULE_1__observable_scalar__["a" /* scalar */])(array[0]));
        }
        else if (len > 0) {
            return Object(__WEBPACK_IMPORTED_MODULE_3__observable_concat__["a" /* concat */])(source, Object(__WEBPACK_IMPORTED_MODULE_0__observable_fromArray__["a" /* fromArray */])(array, scheduler));
        }
        else {
            return Object(__WEBPACK_IMPORTED_MODULE_3__observable_concat__["a" /* concat */])(source, Object(__WEBPACK_IMPORTED_MODULE_2__observable_empty__["b" /* empty */])(scheduler));
        }
    };
}
//# sourceMappingURL=endWith.js.map


/***/ }),
/* 181 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = every;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/**
 * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
 *
 * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>
 *  Observable.of(1, 2, 3, 4, 5, 6)
 *     .every(x => x < 5)
 *     .subscribe(x => console.log(x)); // -> false
 *
 * @param {function} predicate A function for determining if an item meets a specified condition.
 * @param {any} [thisArg] Optional object to use for `this` in the callback.
 * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.
 * @method every
 * @owner Observable
 */
function every(predicate, thisArg) {
    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };
}
var EveryOperator = /*@__PURE__*/ (function () {
    function EveryOperator(predicate, thisArg, source) {
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
    }
    EveryOperator.prototype.call = function (observer, source) {
        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
    };
    return EveryOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var EverySubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](EverySubscriber, _super);
    function EverySubscriber(destination, predicate, thisArg, source) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.thisArg = thisArg;
        _this.source = source;
        _this.index = 0;
        _this.thisArg = thisArg || _this;
        return _this;
    }
    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
        this.destination.next(everyValueMatch);
        this.destination.complete();
    };
    EverySubscriber.prototype._next = function (value) {
        var result = false;
        try {
            result = this.predicate.call(this.thisArg, value, this.index++, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (!result) {
            this.notifyComplete(false);
        }
    };
    EverySubscriber.prototype._complete = function () {
        this.notifyComplete(true);
    };
    return EverySubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=every.js.map


/***/ }),
/* 182 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = exhaust;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */



/**
 * Converts a higher-order Observable into a first-order Observable by dropping
 * inner Observables while the previous inner Observable has not yet completed.
 *
 * <span class="informal">Flattens an Observable-of-Observables by dropping the
 * next inner Observables while the current inner is still executing.</span>
 *
 * <img src="./img/exhaust.png" width="100%">
 *
 * `exhaust` subscribes to an Observable that emits Observables, also known as a
 * higher-order Observable. Each time it observes one of these emitted inner
 * Observables, the output Observable begins emitting the items emitted by that
 * inner Observable. So far, it behaves like {@link mergeAll}. However,
 * `exhaust` ignores every new inner Observable if the previous Observable has
 * not yet completed. Once that one completes, it will accept and flatten the
 * next inner Observable and repeat this process.
 *
 * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));
 * var result = higherOrder.exhaust();
 * result.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link switch}
 * @see {@link mergeAll}
 * @see {@link exhaustMap}
 * @see {@link zipAll}
 *
 * @return {Observable} An Observable that takes a source of Observables and propagates the first observable
 * exclusively until it completes before subscribing to the next.
 * @method exhaust
 * @owner Observable
 */
function exhaust() {
    return function (source) { return source.lift(new SwitchFirstOperator()); };
}
var SwitchFirstOperator = /*@__PURE__*/ (function () {
    function SwitchFirstOperator() {
    }
    SwitchFirstOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SwitchFirstSubscriber(subscriber));
    };
    return SwitchFirstOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchFirstSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SwitchFirstSubscriber, _super);
    function SwitchFirstSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasCompleted = false;
        _this.hasSubscription = false;
        return _this;
    }
    SwitchFirstSubscriber.prototype._next = function (value) {
        if (!this.hasSubscription) {
            this.hasSubscription = true;
            this.add(Object(__WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__["a" /* subscribeToResult */])(this, value));
        }
    };
    SwitchFirstSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (!this.hasSubscription) {
            this.destination.complete();
        }
    };
    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.hasSubscription = false;
        if (this.hasCompleted) {
            this.destination.complete();
        }
    };
    return SwitchFirstSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=exhaust.js.map


/***/ }),
/* 183 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = exhaustMap;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__map__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__observable_from__ = __webpack_require__(20);
/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */





/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable only if the previous projected Observable has completed.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link exhaust}.</span>
 *
 * <img src="./img/exhaustMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. When it projects a source value to
 * an Observable, the output Observable begins emitting the items emitted by
 * that projected Observable. However, `exhaustMap` ignores every new projected
 * Observable if the previous projected Observable has not yet completed. Once
 * that one completes, it will accept and flatten the next projected Observable
 * and repeat this process.
 *
 * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMap}
 * @see {@link exhaust}
 * @see {@link mergeMap}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @return {Observable} An Observable containing projected Observables
 * of each item of the source, ignoring projected Observables that start before
 * their preceding Observable has completed.
 * @method exhaustMap
 * @owner Observable
 */
function exhaustMap(project, resultSelector) {
    if (resultSelector) {
        // DEPRECATED PATH
        return function (source) { return source.pipe(exhaustMap(function (a, i) { return Object(__WEBPACK_IMPORTED_MODULE_4__observable_from__["a" /* from */])(project(a, i)).pipe(Object(__WEBPACK_IMPORTED_MODULE_3__map__["a" /* map */])(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };
    }
    return function (source) {
        return source.lift(new ExhauseMapOperator(project));
    };
}
var ExhauseMapOperator = /*@__PURE__*/ (function () {
    function ExhauseMapOperator(project) {
        this.project = project;
    }
    ExhauseMapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));
    };
    return ExhauseMapOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ExhaustMapSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ExhaustMapSubscriber, _super);
    function ExhaustMapSubscriber(destination, project) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.hasSubscription = false;
        _this.hasCompleted = false;
        _this.index = 0;
        return _this;
    }
    ExhaustMapSubscriber.prototype._next = function (value) {
        if (!this.hasSubscription) {
            this.tryNext(value);
        }
    };
    ExhaustMapSubscriber.prototype.tryNext = function (value) {
        var index = this.index++;
        var destination = this.destination;
        try {
            var result = this.project(value, index);
            this.hasSubscription = true;
            this.add(Object(__WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__["a" /* subscribeToResult */])(this, result, value, index));
        }
        catch (err) {
            destination.error(err);
        }
    };
    ExhaustMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (!this.hasSubscription) {
            this.destination.complete();
        }
    };
    ExhaustMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    ExhaustMapSubscriber.prototype.notifyError = function (err) {
        this.destination.error(err);
    };
    ExhaustMapSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.hasSubscription = false;
        if (this.hasCompleted) {
            this.destination.complete();
        }
    };
    return ExhaustMapSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=exhaustMap.js.map


/***/ }),
/* 184 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = expand;
/* unused harmony export ExpandOperator */
/* unused harmony export ExpandSubscriber */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_tryCatch__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_errorObject__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */





/* tslint:enable:max-line-length */
/**
 * Recursively projects each source value to an Observable which is merged in
 * the output Observable.
 *
 * <span class="informal">It's similar to {@link mergeMap}, but applies the
 * projection function to every source value as well as every output value.
 * It's recursive.</span>
 *
 * <img src="./img/expand.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger. *Expand* will re-emit on the output
 * Observable every source value. Then, each output value is given to the
 * `project` function which returns an inner Observable to be merged on the
 * output Observable. Those output values resulting from the projection are also
 * given to the `project` function to produce new output values. This is how
 * *expand* behaves recursively.
 *
 * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var powersOfTwo = clicks
 *   .mapTo(1)
 *   .expand(x => Rx.Observable.of(2 * x).delay(1000))
 *   .take(10);
 * powersOfTwo.subscribe(x => console.log(x));
 *
 * @see {@link mergeMap}
 * @see {@link mergeScan}
 *
 * @param {function(value: T, index: number) => Observable} project A function
 * that, when applied to an item emitted by the source or the output Observable,
 * returns an Observable.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to
 * each projected inner Observable.
 * @return {Observable} An Observable that emits the source values and also
 * result of applying the projection function to each value emitted on the
 * output Observable and and merging the results of the Observables obtained
 * from this transformation.
 * @method expand
 * @owner Observable
 */
function expand(project, concurrent, scheduler) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    if (scheduler === void 0) {
        scheduler = undefined;
    }
    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };
}
var ExpandOperator = /*@__PURE__*/ (function () {
    function ExpandOperator(project, concurrent, scheduler) {
        this.project = project;
        this.concurrent = concurrent;
        this.scheduler = scheduler;
    }
    ExpandOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
    };
    return ExpandOperator;
}());

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ExpandSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ExpandSubscriber, _super);
    function ExpandSubscriber(destination, project, concurrent, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.concurrent = concurrent;
        _this.scheduler = scheduler;
        _this.index = 0;
        _this.active = 0;
        _this.hasCompleted = false;
        if (concurrent < Number.POSITIVE_INFINITY) {
            _this.buffer = [];
        }
        return _this;
    }
    ExpandSubscriber.dispatch = function (arg) {
        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;
        subscriber.subscribeToProjection(result, value, index);
    };
    ExpandSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        if (destination.closed) {
            this._complete();
            return;
        }
        var index = this.index++;
        if (this.active < this.concurrent) {
            destination.next(value);
            var result = Object(__WEBPACK_IMPORTED_MODULE_1__util_tryCatch__["a" /* tryCatch */])(this.project)(value, index);
            if (result === __WEBPACK_IMPORTED_MODULE_2__util_errorObject__["a" /* errorObject */]) {
                destination.error(__WEBPACK_IMPORTED_MODULE_2__util_errorObject__["a" /* errorObject */].e);
            }
            else if (!this.scheduler) {
                this.subscribeToProjection(result, value, index);
            }
            else {
                var state = { subscriber: this, result: result, value: value, index: index };
                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
            }
        }
        else {
            this.buffer.push(value);
        }
    };
    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
        this.active++;
        this.add(Object(__WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__["a" /* subscribeToResult */])(this, result, value, index));
    };
    ExpandSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
        }
    };
    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this._next(innerValue);
    };
    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer && buffer.length > 0) {
            this._next(buffer.shift());
        }
        if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
        }
    };
    return ExpandSubscriber;
}(__WEBPACK_IMPORTED_MODULE_3__OuterSubscriber__["a" /* OuterSubscriber */]));

//# sourceMappingURL=expand.js.map


/***/ }),
/* 185 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = finalize;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Subscription__ = __webpack_require__(8);
/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription PURE_IMPORTS_END */



/**
 * Returns an Observable that mirrors the source Observable, but will call a specified function when
 * the source terminates on complete or error.
 * @param {function} callback Function to be called when source terminates.
 * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.
 * @method finally
 * @owner Observable
 */
function finalize(callback) {
    return function (source) { return source.lift(new FinallyOperator(callback)); };
}
var FinallyOperator = /*@__PURE__*/ (function () {
    function FinallyOperator(callback) {
        this.callback = callback;
    }
    FinallyOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new FinallySubscriber(subscriber, this.callback));
    };
    return FinallyOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FinallySubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](FinallySubscriber, _super);
    function FinallySubscriber(destination, callback) {
        var _this = _super.call(this, destination) || this;
        _this.add(new __WEBPACK_IMPORTED_MODULE_2__Subscription__["a" /* Subscription */](callback));
        return _this;
    }
    return FinallySubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=finalize.js.map


/***/ }),
/* 186 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = findIndex;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__operators_find__ = __webpack_require__(110);
/** PURE_IMPORTS_START _operators_find PURE_IMPORTS_END */

/**
 * Emits only the index of the first value emitted by the source Observable that
 * meets some condition.
 *
 * <span class="informal">It's like {@link find}, but emits the index of the
 * found value, not the value itself.</span>
 *
 * <img src="./img/findIndex.png" width="100%">
 *
 * `findIndex` searches for the first item in the source Observable that matches
 * the specified condition embodied by the `predicate`, and returns the
 * (zero-based) index of the first occurrence in the source. Unlike
 * {@link first}, the `predicate` is required in `findIndex`, and does not emit
 * an error if a valid value is not found.
 *
 * @example <caption>Emit the index of first click that happens on a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link find}
 * @see {@link first}
 * @see {@link take}
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate
 * A function called with each item to test for condition matching.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable} An Observable of the index of the first item that
 * matches the condition.
 * @method find
 * @owner Observable
 */
function findIndex(predicate, thisArg) {
    return function (source) { return source.lift(new __WEBPACK_IMPORTED_MODULE_0__operators_find__["a" /* FindValueOperator */](predicate, source, true, thisArg)); };
}
//# sourceMappingURL=findIndex.js.map


/***/ }),
/* 187 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = first;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_EmptyError__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__filter__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__take__ = __webpack_require__(66);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__defaultIfEmpty__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__throwIfEmpty__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_identity__ = __webpack_require__(25);
/** PURE_IMPORTS_START _util_EmptyError,_filter,_take,_defaultIfEmpty,_throwIfEmpty,_util_identity PURE_IMPORTS_END */






/**
 * Emits only the first value (or the first value that meets some condition)
 * emitted by the source Observable.
 *
 * <span class="informal">Emits only the first value. Or emits only the first
 * value that passes some test.</span>
 *
 * <img src="./img/first.png" width="100%">
 *
 * If called with no arguments, `first` emits the first value of the source
 * Observable, then completes. If called with a `predicate` function, `first`
 * emits the first value of the source that matches the specified condition. It
 * may also take a `resultSelector` function to produce the output value from
 * the input value, and a `defaultValue` to emit in case the source completes
 * before it is able to emit a valid value. Throws an error if `defaultValue`
 * was not provided and a matching element is not found.
 *
 * @example <caption>Emit only the first click that happens on the DOM</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first();
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Emits the first click that happens on a DIV</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link find}
 * @see {@link take}
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
 * An optional function called with each item to test for condition matching.
 * @param {R} [defaultValue] The default value emitted in case no valid value
 * was found on the source.
 * @return {Observable<T|R>} An Observable of the first item that matches the
 * condition.
 * @method first
 * @owner Observable
 */
function first(predicate, defaultValue) {
    var hasDefaultValue = arguments.length >= 2;
    return function (source) { return source.pipe(predicate ? Object(__WEBPACK_IMPORTED_MODULE_1__filter__["a" /* filter */])(function (v, i) { return predicate(v, i, source); }) : __WEBPACK_IMPORTED_MODULE_5__util_identity__["a" /* identity */], Object(__WEBPACK_IMPORTED_MODULE_2__take__["a" /* take */])(1), hasDefaultValue ? Object(__WEBPACK_IMPORTED_MODULE_3__defaultIfEmpty__["a" /* defaultIfEmpty */])(defaultValue) : Object(__WEBPACK_IMPORTED_MODULE_4__throwIfEmpty__["a" /* throwIfEmpty */])(function () { return new __WEBPACK_IMPORTED_MODULE_0__util_EmptyError__["a" /* EmptyError */](); })); };
}
//# sourceMappingURL=first.js.map


/***/ }),
/* 188 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = ignoreElements;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/**
 * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.
 *
 * <img src="./img/ignoreElements.png" width="100%">
 *
 * @return {Observable} An empty Observable that only calls `complete`
 * or `error`, based on which one is called by the source Observable.
 * @method ignoreElements
 * @owner Observable
 */
function ignoreElements() {
    return function ignoreElementsOperatorFunction(source) {
        return source.lift(new IgnoreElementsOperator());
    };
}
var IgnoreElementsOperator = /*@__PURE__*/ (function () {
    function IgnoreElementsOperator() {
    }
    IgnoreElementsOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new IgnoreElementsSubscriber(subscriber));
    };
    return IgnoreElementsOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var IgnoreElementsSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](IgnoreElementsSubscriber, _super);
    function IgnoreElementsSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IgnoreElementsSubscriber.prototype._next = function (unused) {
        // Do nothing
    };
    return IgnoreElementsSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=ignoreElements.js.map


/***/ }),
/* 189 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isEmpty;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function isEmpty() {
    return function (source) { return source.lift(new IsEmptyOperator()); };
}
var IsEmptyOperator = /*@__PURE__*/ (function () {
    function IsEmptyOperator() {
    }
    IsEmptyOperator.prototype.call = function (observer, source) {
        return source.subscribe(new IsEmptySubscriber(observer));
    };
    return IsEmptyOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var IsEmptySubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](IsEmptySubscriber, _super);
    function IsEmptySubscriber(destination) {
        return _super.call(this, destination) || this;
    }
    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
        var destination = this.destination;
        destination.next(isEmpty);
        destination.complete();
    };
    IsEmptySubscriber.prototype._next = function (value) {
        this.notifyComplete(false);
    };
    IsEmptySubscriber.prototype._complete = function () {
        this.notifyComplete(true);
    };
    return IsEmptySubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=isEmpty.js.map


/***/ }),
/* 190 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = last;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_EmptyError__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__filter__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__takeLast__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__throwIfEmpty__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__defaultIfEmpty__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_identity__ = __webpack_require__(25);
/** PURE_IMPORTS_START _util_EmptyError,_filter,_takeLast,_throwIfEmpty,_defaultIfEmpty,_util_identity PURE_IMPORTS_END */






/**
 * Returns an Observable that emits only the last item emitted by the source Observable.
 * It optionally takes a predicate function as a parameter, in which case, rather than emitting
 * the last item from the source Observable, the resulting Observable will emit the last item
 * from the source Observable that satisfies the predicate.
 *
 * <img src="./img/last.png" width="100%">
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 * @param {function} [predicate] - The condition any source emitted item has to satisfy.
 * @param {any} [defaultValue] - An optional default value to provide if last
 * predicate isn't met or no values were emitted.
 * @return {Observable} An Observable that emits only the last item satisfying the given condition
 * from the source, or an NoSuchElementException if no such items are emitted.
 * @throws - Throws if no items that match the predicate are emitted by the source Observable.
 */
function last(predicate, defaultValue) {
    var hasDefaultValue = arguments.length >= 2;
    return function (source) { return source.pipe(predicate ? Object(__WEBPACK_IMPORTED_MODULE_1__filter__["a" /* filter */])(function (v, i) { return predicate(v, i, source); }) : __WEBPACK_IMPORTED_MODULE_5__util_identity__["a" /* identity */], Object(__WEBPACK_IMPORTED_MODULE_2__takeLast__["a" /* takeLast */])(1), hasDefaultValue ? Object(__WEBPACK_IMPORTED_MODULE_4__defaultIfEmpty__["a" /* defaultIfEmpty */])(defaultValue) : Object(__WEBPACK_IMPORTED_MODULE_3__throwIfEmpty__["a" /* throwIfEmpty */])(function () { return new __WEBPACK_IMPORTED_MODULE_0__util_EmptyError__["a" /* EmptyError */](); })); };
}
//# sourceMappingURL=last.js.map


/***/ }),
/* 191 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = mapTo;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/**
 * Emits the given constant value on the output Observable every time the source
 * Observable emits a value.
 *
 * <span class="informal">Like {@link map}, but it maps every source value to
 * the same output value every time.</span>
 *
 * <img src="./img/mapTo.png" width="100%">
 *
 * Takes a constant `value` as argument, and emits that whenever the source
 * Observable emits a value. In other words, ignores the actual source value,
 * and simply uses the emission moment to know when to emit the given `value`.
 *
 * @example <caption>Map every click to the string 'Hi'</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var greetings = clicks.mapTo('Hi');
 * greetings.subscribe(x => console.log(x));
 *
 * @see {@link map}
 *
 * @param {any} value The value to map each source value to.
 * @return {Observable} An Observable that emits the given `value` every time
 * the source Observable emits something.
 * @method mapTo
 * @owner Observable
 */
function mapTo(value) {
    return function (source) { return source.lift(new MapToOperator(value)); };
}
var MapToOperator = /*@__PURE__*/ (function () {
    function MapToOperator(value) {
        this.value = value;
    }
    MapToOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapToSubscriber(subscriber, this.value));
    };
    return MapToOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MapToSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](MapToSubscriber, _super);
    function MapToSubscriber(destination, value) {
        var _this = _super.call(this, destination) || this;
        _this.value = value;
        return _this;
    }
    MapToSubscriber.prototype._next = function (x) {
        this.destination.next(this.value);
    };
    return MapToSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=mapTo.js.map


/***/ }),
/* 192 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = materialize;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Notification__ = __webpack_require__(43);
/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */



/**
 * Represents all of the notifications from the source Observable as `next`
 * emissions marked with their original types within {@link Notification}
 * objects.
 *
 * <span class="informal">Wraps `next`, `error` and `complete` emissions in
 * {@link Notification} objects, emitted as `next` on the output Observable.
 * </span>
 *
 * <img src="./img/materialize.png" width="100%">
 *
 * `materialize` returns an Observable that emits a `next` notification for each
 * `next`, `error`, or `complete` emission of the source Observable. When the
 * source Observable emits `complete`, the output Observable will emit `next` as
 * a Notification of type "complete", and then it will emit `complete` as well.
 * When the source Observable emits `error`, the output will emit `next` as a
 * Notification of type "error", and then `complete`.
 *
 * This operator is useful for producing metadata of the source Observable, to
 * be consumed as `next` emissions. Use it in conjunction with
 * {@link dematerialize}.
 *
 * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>
 * var letters = Rx.Observable.of('a', 'b', 13, 'd');
 * var upperCase = letters.map(x => x.toUpperCase());
 * var materialized = upperCase.materialize();
 * materialized.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // - Notification {kind: "N", value: "A", error: undefined, hasValue: true}
 * // - Notification {kind: "N", value: "B", error: undefined, hasValue: true}
 * // - Notification {kind: "E", value: undefined, error: TypeError:
 * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x
 * //   [as project] (http://1…, hasValue: false}
 *
 * @see {@link Notification}
 * @see {@link dematerialize}
 *
 * @return {Observable<Notification<T>>} An Observable that emits
 * {@link Notification} objects that wrap the original emissions from the source
 * Observable with metadata.
 * @method materialize
 * @owner Observable
 */
function materialize() {
    return function materializeOperatorFunction(source) {
        return source.lift(new MaterializeOperator());
    };
}
var MaterializeOperator = /*@__PURE__*/ (function () {
    function MaterializeOperator() {
    }
    MaterializeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MaterializeSubscriber(subscriber));
    };
    return MaterializeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MaterializeSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](MaterializeSubscriber, _super);
    function MaterializeSubscriber(destination) {
        return _super.call(this, destination) || this;
    }
    MaterializeSubscriber.prototype._next = function (value) {
        this.destination.next(__WEBPACK_IMPORTED_MODULE_2__Notification__["a" /* Notification */].createNext(value));
    };
    MaterializeSubscriber.prototype._error = function (err) {
        var destination = this.destination;
        destination.next(__WEBPACK_IMPORTED_MODULE_2__Notification__["a" /* Notification */].createError(err));
        destination.complete();
    };
    MaterializeSubscriber.prototype._complete = function () {
        var destination = this.destination;
        destination.next(__WEBPACK_IMPORTED_MODULE_2__Notification__["a" /* Notification */].createComplete());
        destination.complete();
    };
    return MaterializeSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=materialize.js.map


/***/ }),
/* 193 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = max;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__reduce__ = __webpack_require__(48);
/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

/**
 * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),
 * and when source Observable completes it emits a single item: the item with the largest value.
 *
 * <img src="./img/max.png" width="100%">
 *
 * @example <caption>Get the maximal value of a series of numbers</caption>
 * Rx.Observable.of(5, 4, 7, 2, 8)
 *   .max()
 *   .subscribe(x => console.log(x)); // -> 8
 *
 * @example <caption>Use a comparer function to get the maximal item</caption>
 * interface Person {
 *   age: number,
 *   name: string
 * }
 * Observable.of<Person>({age: 7, name: 'Foo'},
 *                       {age: 5, name: 'Bar'},
 *                       {age: 9, name: 'Beer'})
 *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)
 *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'
 * }
 *
 * @see {@link min}
 *
 * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the
 * value of two items.
 * @return {Observable} An Observable that emits item with the largest value.
 * @method max
 * @owner Observable
 */
function max(comparer) {
    var max = (typeof comparer === 'function')
        ? function (x, y) { return comparer(x, y) > 0 ? x : y; }
        : function (x, y) { return x > y ? x : y; };
    return Object(__WEBPACK_IMPORTED_MODULE_0__reduce__["a" /* reduce */])(max);
}
//# sourceMappingURL=max.js.map


/***/ }),
/* 194 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = merge;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__observable_merge__ = __webpack_require__(99);
/** PURE_IMPORTS_START _observable_merge PURE_IMPORTS_END */

/* tslint:enable:max-line-length */
/**
 * @deprecated Deprecated in favor of static merge.
 */
function merge() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    return function (source) { return source.lift.call(__WEBPACK_IMPORTED_MODULE_0__observable_merge__["a" /* merge */].apply(void 0, [source].concat(observables))); };
}
//# sourceMappingURL=merge.js.map


/***/ }),
/* 195 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = mergeMapTo;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mergeMap__ = __webpack_require__(34);
/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */

/* tslint:enable:max-line-length */
/**
 * Projects each source value to the same Observable which is merged multiple
 * times in the output Observable.
 *
 * <span class="informal">It's like {@link mergeMap}, but maps each value always
 * to the same inner Observable.</span>
 *
 * <img src="./img/mergeMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then merges those resulting Observables into one
 * single Observable, which is the output Observable.
 *
 * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMapTo}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeScan}
 * @see {@link switchMapTo}
 *
 * @param {ObservableInput} innerObservable An Observable to replace each value from
 * the source Observable.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits items from the given
 * `innerObservable`
 * @method mergeMapTo
 * @owner Observable
 */
function mergeMapTo(innerObservable, resultSelector, concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    if (typeof resultSelector === 'function') {
        return Object(__WEBPACK_IMPORTED_MODULE_0__mergeMap__["a" /* mergeMap */])(function () { return innerObservable; }, resultSelector, concurrent);
    }
    if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return Object(__WEBPACK_IMPORTED_MODULE_0__mergeMap__["a" /* mergeMap */])(function () { return innerObservable; }, concurrent);
}
//# sourceMappingURL=mergeMapTo.js.map


/***/ }),
/* 196 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = mergeScan;
/* unused harmony export MergeScanOperator */
/* unused harmony export MergeScanSubscriber */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_tryCatch__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_errorObject__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_subscribeToResult__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__OuterSubscriber__ = __webpack_require__(3);
/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */





/**
 * Applies an accumulator function over the source Observable where the
 * accumulator function itself returns an Observable, then each intermediate
 * Observable returned is merged into the output Observable.
 *
 * <span class="informal">It's like {@link scan}, but the Observables returned
 * by the accumulator are merged into the outer Observable.</span>
 *
 * @example <caption>Count the number of click events</caption>
 * const click$ = Rx.Observable.fromEvent(document, 'click');
 * const one$ = click$.mapTo(1);
 * const seed = 0;
 * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);
 * count$.subscribe(x => console.log(x));
 *
 * // Results:
 * 1
 * 2
 * 3
 * 4
 * // ...and so on for each click
 *
 * @param {function(acc: R, value: T): Observable<R>} accumulator
 * The accumulator function called on each source value.
 * @param seed The initial accumulation value.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of
 * input Observables being subscribed to concurrently.
 * @return {Observable<R>} An observable of the accumulated values.
 * @method mergeScan
 * @owner Observable
 */
function mergeScan(accumulator, seed, concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };
}
var MergeScanOperator = /*@__PURE__*/ (function () {
    function MergeScanOperator(accumulator, seed, concurrent) {
        this.accumulator = accumulator;
        this.seed = seed;
        this.concurrent = concurrent;
    }
    MergeScanOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));
    };
    return MergeScanOperator;
}());

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeScanSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](MergeScanSubscriber, _super);
    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
        var _this = _super.call(this, destination) || this;
        _this.accumulator = accumulator;
        _this.acc = acc;
        _this.concurrent = concurrent;
        _this.hasValue = false;
        _this.hasCompleted = false;
        _this.buffer = [];
        _this.active = 0;
        _this.index = 0;
        return _this;
    }
    MergeScanSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            var index = this.index++;
            var ish = Object(__WEBPACK_IMPORTED_MODULE_1__util_tryCatch__["a" /* tryCatch */])(this.accumulator)(this.acc, value);
            var destination = this.destination;
            if (ish === __WEBPACK_IMPORTED_MODULE_2__util_errorObject__["a" /* errorObject */]) {
                destination.error(__WEBPACK_IMPORTED_MODULE_2__util_errorObject__["a" /* errorObject */].e);
            }
            else {
                this.active++;
                this._innerSub(ish, value, index);
            }
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {
        this.add(Object(__WEBPACK_IMPORTED_MODULE_3__util_subscribeToResult__["a" /* subscribeToResult */])(this, ish, value, index));
    };
    MergeScanSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            if (this.hasValue === false) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        }
    };
    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var destination = this.destination;
        this.acc = innerValue;
        this.hasValue = true;
        destination.next(innerValue);
    };
    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            if (this.hasValue === false) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        }
    };
    return MergeScanSubscriber;
}(__WEBPACK_IMPORTED_MODULE_4__OuterSubscriber__["a" /* OuterSubscriber */]));

//# sourceMappingURL=mergeScan.js.map


/***/ }),
/* 197 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = min;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__reduce__ = __webpack_require__(48);
/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

/**
 * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),
 * and when source Observable completes it emits a single item: the item with the smallest value.
 *
 * <img src="./img/min.png" width="100%">
 *
 * @example <caption>Get the minimal value of a series of numbers</caption>
 * Rx.Observable.of(5, 4, 7, 2, 8)
 *   .min()
 *   .subscribe(x => console.log(x)); // -> 2
 *
 * @example <caption>Use a comparer function to get the minimal item</caption>
 * interface Person {
 *   age: number,
 *   name: string
 * }
 * Observable.of<Person>({age: 7, name: 'Foo'},
 *                       {age: 5, name: 'Bar'},
 *                       {age: 9, name: 'Beer'})
 *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)
 *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'
 * }
 *
 * @see {@link max}
 *
 * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the
 * value of two items.
 * @return {Observable<R>} An Observable that emits item with the smallest value.
 * @method min
 * @owner Observable
 */
function min(comparer) {
    var min = (typeof comparer === 'function')
        ? function (x, y) { return comparer(x, y) < 0 ? x : y; }
        : function (x, y) { return x < y ? x : y; };
    return Object(__WEBPACK_IMPORTED_MODULE_0__reduce__["a" /* reduce */])(min);
}
//# sourceMappingURL=min.js.map


/***/ }),
/* 198 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = onErrorResumeNext;
/* unused harmony export onErrorResumeNextStatic */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__observable_from__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_isArray__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_observable_from,_util_isArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */





/* tslint:enable:max-line-length */
/**
 * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one
 * that was passed.
 *
 * <span class="informal">Execute series of Observables no matter what, even if it means swallowing errors.</span>
 *
 * <img src="./img/onErrorResumeNext.png" width="100%">
 *
 * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as
 * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same
 * as the source.
 *
 * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.
 * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`
 * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting
 * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another
 * Observable in provided series, no matter if previous Observable completed or ended with an error. This will
 * be happening until there is no more Observables left in the series, at which point returned Observable will
 * complete - even if the last subscribed stream ended with an error.
 *
 * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive
 * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable
 * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with
 * an error.
 *
 * Note that you do not get any access to errors emitted by the Observables. In particular do not
 * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take
 * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.
 *
 *
 * @example <caption>Subscribe to the next Observable after map fails</caption>
 * Rx.Observable.of(1, 2, 3, 0)
 *   .map(x => {
 *       if (x === 0) { throw Error(); }
         return 10 / x;
 *   })
 *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))
 *   .subscribe(
 *     val => console.log(val),
 *     err => console.log(err),          // Will never be called.
 *     () => console.log('that\'s it!')
 *   );
 *
 * // Logs:
 * // 10
 * // 5
 * // 3.3333333333333335
 * // 1
 * // 2
 * // 3
 * // "that's it!"
 *
 * @see {@link concat}
 * @see {@link catch}
 *
 * @param {...ObservableInput} observables Observables passed either directly or as an array.
 * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes
 * to the next passed Observable and so on, until it completes or runs out of Observables.
 * @method onErrorResumeNext
 * @owner Observable
 */
function onErrorResumeNext() {
    var nextSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        nextSources[_i] = arguments[_i];
    }
    if (nextSources.length === 1 && Object(__WEBPACK_IMPORTED_MODULE_2__util_isArray__["a" /* isArray */])(nextSources[0])) {
        nextSources = nextSources[0];
    }
    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };
}
/* tslint:enable:max-line-length */
function onErrorResumeNextStatic() {
    var nextSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        nextSources[_i] = arguments[_i];
    }
    var source = null;
    if (nextSources.length === 1 && Object(__WEBPACK_IMPORTED_MODULE_2__util_isArray__["a" /* isArray */])(nextSources[0])) {
        nextSources = nextSources[0];
    }
    source = nextSources.shift();
    return Object(__WEBPACK_IMPORTED_MODULE_1__observable_from__["a" /* from */])(source, null).lift(new OnErrorResumeNextOperator(nextSources));
}
var OnErrorResumeNextOperator = /*@__PURE__*/ (function () {
    function OnErrorResumeNextOperator(nextSources) {
        this.nextSources = nextSources;
    }
    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
    };
    return OnErrorResumeNextOperator;
}());
var OnErrorResumeNextSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](OnErrorResumeNextSubscriber, _super);
    function OnErrorResumeNextSubscriber(destination, nextSources) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.nextSources = nextSources;
        return _this;
    }
    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype._error = function (err) {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype._complete = function () {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
        var next = this.nextSources.shift();
        if (next) {
            this.add(Object(__WEBPACK_IMPORTED_MODULE_4__util_subscribeToResult__["a" /* subscribeToResult */])(this, next));
        }
        else {
            this.destination.complete();
        }
    };
    return OnErrorResumeNextSubscriber;
}(__WEBPACK_IMPORTED_MODULE_3__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=onErrorResumeNext.js.map


/***/ }),
/* 199 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = pairwise;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/**
 * Groups pairs of consecutive emissions together and emits them as an array of
 * two values.
 *
 * <span class="informal">Puts the current value and previous value together as
 * an array, and emits that.</span>
 *
 * <img src="./img/pairwise.png" width="100%">
 *
 * The Nth emission from the source Observable will cause the output Observable
 * to emit an array [(N-1)th, Nth] of the previous and the current value, as a
 * pair. For this reason, `pairwise` emits on the second and subsequent
 * emissions from the source Observable, but not on the first emission, because
 * there is no previous value in that case.
 *
 * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var pairs = clicks.pairwise();
 * var distance = pairs.map(pair => {
 *   var x0 = pair[0].clientX;
 *   var y0 = pair[0].clientY;
 *   var x1 = pair[1].clientX;
 *   var y1 = pair[1].clientY;
 *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));
 * });
 * distance.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 *
 * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of
 * consecutive values from the source Observable.
 * @method pairwise
 * @owner Observable
 */
function pairwise() {
    return function (source) { return source.lift(new PairwiseOperator()); };
}
var PairwiseOperator = /*@__PURE__*/ (function () {
    function PairwiseOperator() {
    }
    PairwiseOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new PairwiseSubscriber(subscriber));
    };
    return PairwiseOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var PairwiseSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](PairwiseSubscriber, _super);
    function PairwiseSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasPrev = false;
        return _this;
    }
    PairwiseSubscriber.prototype._next = function (value) {
        if (this.hasPrev) {
            this.destination.next([this.prev, value]);
        }
        else {
            this.hasPrev = true;
        }
        this.prev = value;
    };
    return PairwiseSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=pairwise.js.map


/***/ }),
/* 200 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = partition;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_not__ = __webpack_require__(201);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__filter__ = __webpack_require__(36);
/** PURE_IMPORTS_START _util_not,_filter PURE_IMPORTS_END */


/**
 * Splits the source Observable into two, one with values that satisfy a
 * predicate, and another with values that don't satisfy the predicate.
 *
 * <span class="informal">It's like {@link filter}, but returns two Observables:
 * one like the output of {@link filter}, and the other with values that did not
 * pass the condition.</span>
 *
 * <img src="./img/partition.png" width="100%">
 *
 * `partition` outputs an array with two Observables that partition the values
 * from the source Observable through the given `predicate` function. The first
 * Observable in that array emits source values for which the predicate argument
 * returns true. The second Observable emits source values for which the
 * predicate returns false. The first behaves like {@link filter} and the second
 * behaves like {@link filter} with the predicate negated.
 *
 * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');
 * var clicksOnDivs = parts[0];
 * var clicksElsewhere = parts[1];
 * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));
 * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));
 *
 * @see {@link filter}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates each value emitted by the source Observable. If it returns `true`,
 * the value is emitted on the first Observable in the returned array, if
 * `false` the value is emitted on the second Observable in the array. The
 * `index` parameter is the number `i` for the i-th source emission that has
 * happened since the subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {[Observable<T>, Observable<T>]} An array with two Observables: one
 * with values that passed the predicate, and another with values that did not
 * pass the predicate.
 * @method partition
 * @owner Observable
 */
function partition(predicate, thisArg) {
    return function (source) {
        return [
            Object(__WEBPACK_IMPORTED_MODULE_1__filter__["a" /* filter */])(predicate, thisArg)(source),
            Object(__WEBPACK_IMPORTED_MODULE_1__filter__["a" /* filter */])(Object(__WEBPACK_IMPORTED_MODULE_0__util_not__["a" /* not */])(predicate, thisArg))(source)
        ];
    };
}
//# sourceMappingURL=partition.js.map


/***/ }),
/* 201 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = not;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function not(pred, thisArg) {
    function notPred() {
        return !(notPred.pred.apply(notPred.thisArg, arguments));
    }
    notPred.pred = pred;
    notPred.thisArg = thisArg;
    return notPred;
}
//# sourceMappingURL=not.js.map


/***/ }),
/* 202 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = pluck;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__map__ = __webpack_require__(16);
/** PURE_IMPORTS_START _map PURE_IMPORTS_END */

/**
 * Maps each source value (an object) to its specified nested property.
 *
 * <span class="informal">Like {@link map}, but meant only for picking one of
 * the nested properties of every emitted object.</span>
 *
 * <img src="./img/pluck.png" width="100%">
 *
 * Given a list of strings describing a path to an object property, retrieves
 * the value of a specified nested property from all values in the source
 * Observable. If a property can't be resolved, it will return `undefined` for
 * that value.
 *
 * @example <caption>Map every click to the tagName of the clicked target element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var tagNames = clicks.pluck('target', 'tagName');
 * tagNames.subscribe(x => console.log(x));
 *
 * @see {@link map}
 *
 * @param {...string} properties The nested properties to pluck from each source
 * value (an object).
 * @return {Observable} A new Observable of property values from the source values.
 * @method pluck
 * @owner Observable
 */
function pluck() {
    var properties = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        properties[_i] = arguments[_i];
    }
    var length = properties.length;
    if (length === 0) {
        throw new Error('list of properties cannot be empty.');
    }
    return function (source) { return Object(__WEBPACK_IMPORTED_MODULE_0__map__["a" /* map */])(plucker(properties, length))(source); };
}
function plucker(props, length) {
    var mapper = function (x) {
        var currentProp = x;
        for (var i = 0; i < length; i++) {
            var p = currentProp[props[i]];
            if (typeof p !== 'undefined') {
                currentProp = p;
            }
            else {
                return undefined;
            }
        }
        return currentProp;
    };
    return mapper;
}
//# sourceMappingURL=pluck.js.map


/***/ }),
/* 203 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = publish;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Subject__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__multicast__ = __webpack_require__(26);
/** PURE_IMPORTS_START _Subject,_multicast PURE_IMPORTS_END */


/* tslint:enable:max-line-length */
/**
 * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called
 * before it begins emitting items to those Observers that have subscribed to it.
 *
 * <img src="./img/publish.png" width="100%">
 *
 * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times
 * as needed, without causing multiple subscriptions to the source sequence.
 * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.
 * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.
 * @method publish
 * @owner Observable
 */
function publish(selector) {
    return selector ?
        Object(__WEBPACK_IMPORTED_MODULE_1__multicast__["a" /* multicast */])(function () { return new __WEBPACK_IMPORTED_MODULE_0__Subject__["a" /* Subject */](); }, selector) :
        Object(__WEBPACK_IMPORTED_MODULE_1__multicast__["a" /* multicast */])(new __WEBPACK_IMPORTED_MODULE_0__Subject__["a" /* Subject */]());
}
//# sourceMappingURL=publish.js.map


/***/ }),
/* 204 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = publishBehavior;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BehaviorSubject__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__multicast__ = __webpack_require__(26);
/** PURE_IMPORTS_START _BehaviorSubject,_multicast PURE_IMPORTS_END */


/**
 * @param value
 * @return {ConnectableObservable<T>}
 * @method publishBehavior
 * @owner Observable
 */
function publishBehavior(value) {
    return function (source) { return Object(__WEBPACK_IMPORTED_MODULE_1__multicast__["a" /* multicast */])(new __WEBPACK_IMPORTED_MODULE_0__BehaviorSubject__["a" /* BehaviorSubject */](value))(source); };
}
//# sourceMappingURL=publishBehavior.js.map


/***/ }),
/* 205 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = publishLast;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AsyncSubject__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__multicast__ = __webpack_require__(26);
/** PURE_IMPORTS_START _AsyncSubject,_multicast PURE_IMPORTS_END */


function publishLast() {
    return function (source) { return Object(__WEBPACK_IMPORTED_MODULE_1__multicast__["a" /* multicast */])(new __WEBPACK_IMPORTED_MODULE_0__AsyncSubject__["a" /* AsyncSubject */]())(source); };
}
//# sourceMappingURL=publishLast.js.map


/***/ }),
/* 206 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = publishReplay;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ReplaySubject__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__multicast__ = __webpack_require__(26);
/** PURE_IMPORTS_START _ReplaySubject,_multicast PURE_IMPORTS_END */


/* tslint:enable:max-line-length */
function publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {
    if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {
        scheduler = selectorOrScheduler;
    }
    var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;
    var subject = new __WEBPACK_IMPORTED_MODULE_0__ReplaySubject__["a" /* ReplaySubject */](bufferSize, windowTime, scheduler);
    return function (source) { return Object(__WEBPACK_IMPORTED_MODULE_1__multicast__["a" /* multicast */])(function () { return subject; }, selector)(source); };
}
//# sourceMappingURL=publishReplay.js.map


/***/ }),
/* 207 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = race;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_isArray__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__observable_race__ = __webpack_require__(101);
/** PURE_IMPORTS_START _util_isArray,_observable_race PURE_IMPORTS_END */


/* tslint:enable:max-line-length */
/**
 * Returns an Observable that mirrors the first source Observable to emit an item
 * from the combination of this Observable and supplied Observables.
 * @param {...Observables} ...observables Sources used to race for which Observable emits first.
 * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.
 * @method race
 * @owner Observable
 * @deprecated Deprecated in favor of static race.
 */
function race() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    return function raceOperatorFunction(source) {
        // if the only argument is an array, it was most likely called with
        // `pair([obs1, obs2, ...])`
        if (observables.length === 1 && Object(__WEBPACK_IMPORTED_MODULE_0__util_isArray__["a" /* isArray */])(observables[0])) {
            observables = observables[0];
        }
        return source.lift.call(__WEBPACK_IMPORTED_MODULE_1__observable_race__["a" /* race */].apply(void 0, [source].concat(observables)));
    };
}
//# sourceMappingURL=race.js.map


/***/ }),
/* 208 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = repeat;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__observable_empty__ = __webpack_require__(11);
/** PURE_IMPORTS_START tslib,_Subscriber,_observable_empty PURE_IMPORTS_END */



/**
 * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.
 *
 * <img src="./img/repeat.png" width="100%">
 *
 * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield
 * an empty Observable.
 * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most
 * count times.
 * @method repeat
 * @owner Observable
 */
function repeat(count) {
    if (count === void 0) {
        count = -1;
    }
    return function (source) {
        if (count === 0) {
            return Object(__WEBPACK_IMPORTED_MODULE_2__observable_empty__["b" /* empty */])();
        }
        else if (count < 0) {
            return source.lift(new RepeatOperator(-1, source));
        }
        else {
            return source.lift(new RepeatOperator(count - 1, source));
        }
    };
}
var RepeatOperator = /*@__PURE__*/ (function () {
    function RepeatOperator(count, source) {
        this.count = count;
        this.source = source;
    }
    RepeatOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
    };
    return RepeatOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RepeatSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](RepeatSubscriber, _super);
    function RepeatSubscriber(destination, count, source) {
        var _this = _super.call(this, destination) || this;
        _this.count = count;
        _this.source = source;
        return _this;
    }
    RepeatSubscriber.prototype.complete = function () {
        if (!this.isStopped) {
            var _a = this, source = _a.source, count = _a.count;
            if (count === 0) {
                return _super.prototype.complete.call(this);
            }
            else if (count > -1) {
                this.count = count - 1;
            }
            source.subscribe(this._unsubscribeAndRecycle());
        }
    };
    return RepeatSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=repeat.js.map


/***/ }),
/* 209 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = repeatWhen;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subject__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_tryCatch__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_errorObject__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */






/**
 * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source
 * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable
 * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise
 * this method will resubscribe to the source Observable.
 *
 * <img src="./img/repeatWhen.png" width="100%">
 *
 * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with
 * which a user can `complete` or `error`, aborting the repetition.
 * @return {Observable} The source Observable modified with repeat logic.
 * @method repeatWhen
 * @owner Observable
 */
function repeatWhen(notifier) {
    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };
}
var RepeatWhenOperator = /*@__PURE__*/ (function () {
    function RepeatWhenOperator(notifier) {
        this.notifier = notifier;
    }
    RepeatWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));
    };
    return RepeatWhenOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RepeatWhenSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](RepeatWhenSubscriber, _super);
    function RepeatWhenSubscriber(destination, notifier, source) {
        var _this = _super.call(this, destination) || this;
        _this.notifier = notifier;
        _this.source = source;
        _this.sourceIsBeingSubscribedTo = true;
        return _this;
    }
    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.sourceIsBeingSubscribedTo = true;
        this.source.subscribe(this);
    };
    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {
        if (this.sourceIsBeingSubscribedTo === false) {
            return _super.prototype.complete.call(this);
        }
    };
    RepeatWhenSubscriber.prototype.complete = function () {
        this.sourceIsBeingSubscribedTo = false;
        if (!this.isStopped) {
            if (!this.retries) {
                this.subscribeToRetries();
            }
            if (!this.retriesSubscription || this.retriesSubscription.closed) {
                return _super.prototype.complete.call(this);
            }
            this._unsubscribeAndRecycle();
            this.notifications.next();
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    RepeatWhenSubscriber.prototype._unsubscribe = function () {
        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
        if (notifications) {
            notifications.unsubscribe();
            this.notifications = null;
        }
        if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        }
        this.retries = null;
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {
        var _unsubscribe = this._unsubscribe;
        this._unsubscribe = null;
        _super.prototype._unsubscribeAndRecycle.call(this);
        this._unsubscribe = _unsubscribe;
        return this;
    };
    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {
        this.notifications = new __WEBPACK_IMPORTED_MODULE_1__Subject__["a" /* Subject */]();
        var retries = Object(__WEBPACK_IMPORTED_MODULE_2__util_tryCatch__["a" /* tryCatch */])(this.notifier)(this.notifications);
        if (retries === __WEBPACK_IMPORTED_MODULE_3__util_errorObject__["a" /* errorObject */]) {
            return _super.prototype.complete.call(this);
        }
        this.retries = retries;
        this.retriesSubscription = Object(__WEBPACK_IMPORTED_MODULE_5__util_subscribeToResult__["a" /* subscribeToResult */])(this, retries);
    };
    return RepeatWhenSubscriber;
}(__WEBPACK_IMPORTED_MODULE_4__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=repeatWhen.js.map


/***/ }),
/* 210 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = retry;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/**
 * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable
 * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given
 * as a number parameter) rather than propagating the `error` call.
 *
 * <img src="./img/retry.png" width="100%">
 *
 * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted
 * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second
 * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications
 * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].
 * @param {number} count - Number of retry attempts before failing.
 * @return {Observable} The source Observable modified with the retry logic.
 * @method retry
 * @owner Observable
 */
function retry(count) {
    if (count === void 0) {
        count = -1;
    }
    return function (source) { return source.lift(new RetryOperator(count, source)); };
}
var RetryOperator = /*@__PURE__*/ (function () {
    function RetryOperator(count, source) {
        this.count = count;
        this.source = source;
    }
    RetryOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
    };
    return RetryOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RetrySubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](RetrySubscriber, _super);
    function RetrySubscriber(destination, count, source) {
        var _this = _super.call(this, destination) || this;
        _this.count = count;
        _this.source = source;
        return _this;
    }
    RetrySubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _a = this, source = _a.source, count = _a.count;
            if (count === 0) {
                return _super.prototype.error.call(this, err);
            }
            else if (count > -1) {
                this.count = count - 1;
            }
            source.subscribe(this._unsubscribeAndRecycle());
        }
    };
    return RetrySubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=retry.js.map


/***/ }),
/* 211 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = retryWhen;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subject__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_tryCatch__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_errorObject__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */






/**
 * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable
 * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.
 * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child
 * subscription. Otherwise this method will resubscribe to the source Observable.
 *
 * <img src="./img/retryWhen.png" width="100%">
 *
 * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a
 * user can `complete` or `error`, aborting the retry.
 * @return {Observable} The source Observable modified with retry logic.
 * @method retryWhen
 * @owner Observable
 */
function retryWhen(notifier) {
    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };
}
var RetryWhenOperator = /*@__PURE__*/ (function () {
    function RetryWhenOperator(notifier, source) {
        this.notifier = notifier;
        this.source = source;
    }
    RetryWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
    };
    return RetryWhenOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RetryWhenSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](RetryWhenSubscriber, _super);
    function RetryWhenSubscriber(destination, notifier, source) {
        var _this = _super.call(this, destination) || this;
        _this.notifier = notifier;
        _this.source = source;
        return _this;
    }
    RetryWhenSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var errors = this.errors;
            var retries = this.retries;
            var retriesSubscription = this.retriesSubscription;
            if (!retries) {
                errors = new __WEBPACK_IMPORTED_MODULE_1__Subject__["a" /* Subject */]();
                retries = Object(__WEBPACK_IMPORTED_MODULE_2__util_tryCatch__["a" /* tryCatch */])(this.notifier)(errors);
                if (retries === __WEBPACK_IMPORTED_MODULE_3__util_errorObject__["a" /* errorObject */]) {
                    return _super.prototype.error.call(this, __WEBPACK_IMPORTED_MODULE_3__util_errorObject__["a" /* errorObject */].e);
                }
                retriesSubscription = Object(__WEBPACK_IMPORTED_MODULE_5__util_subscribeToResult__["a" /* subscribeToResult */])(this, retries);
            }
            else {
                this.errors = null;
                this.retriesSubscription = null;
            }
            this._unsubscribeAndRecycle();
            this.errors = errors;
            this.retries = retries;
            this.retriesSubscription = retriesSubscription;
            errors.next(err);
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    RetryWhenSubscriber.prototype._unsubscribe = function () {
        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
        if (errors) {
            errors.unsubscribe();
            this.errors = null;
        }
        if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        }
        this.retries = null;
    };
    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var _unsubscribe = this._unsubscribe;
        this._unsubscribe = null;
        this._unsubscribeAndRecycle();
        this._unsubscribe = _unsubscribe;
        this.source.subscribe(this);
    };
    return RetryWhenSubscriber;
}(__WEBPACK_IMPORTED_MODULE_4__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=retryWhen.js.map


/***/ }),
/* 212 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = sample;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */



/**
 * Emits the most recently emitted value from the source Observable whenever
 * another Observable, the `notifier`, emits.
 *
 * <span class="informal">It's like {@link sampleTime}, but samples whenever
 * the `notifier` Observable emits something.</span>
 *
 * <img src="./img/sample.png" width="100%">
 *
 * Whenever the `notifier` Observable emits a value or completes, `sample`
 * looks at the source Observable and emits whichever value it has most recently
 * emitted since the previous sampling, unless the source has not emitted
 * anything since the previous sampling. The `notifier` is subscribed to as soon
 * as the output Observable is subscribed.
 *
 * @example <caption>On every click, sample the most recent "seconds" timer</caption>
 * var seconds = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = seconds.sample(clicks);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounce}
 * @see {@link sampleTime}
 * @see {@link throttle}
 *
 * @param {Observable<any>} notifier The Observable to use for sampling the
 * source Observable.
 * @return {Observable<T>} An Observable that emits the results of sampling the
 * values emitted by the source Observable whenever the notifier Observable
 * emits value or completes.
 * @method sample
 * @owner Observable
 */
function sample(notifier) {
    return function (source) { return source.lift(new SampleOperator(notifier)); };
}
var SampleOperator = /*@__PURE__*/ (function () {
    function SampleOperator(notifier) {
        this.notifier = notifier;
    }
    SampleOperator.prototype.call = function (subscriber, source) {
        var sampleSubscriber = new SampleSubscriber(subscriber);
        var subscription = source.subscribe(sampleSubscriber);
        subscription.add(Object(__WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__["a" /* subscribeToResult */])(sampleSubscriber, this.notifier));
        return subscription;
    };
    return SampleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SampleSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SampleSubscriber, _super);
    function SampleSubscriber() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.hasValue = false;
        return _this;
    }
    SampleSubscriber.prototype._next = function (value) {
        this.value = value;
        this.hasValue = true;
    };
    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.emitValue();
    };
    SampleSubscriber.prototype.notifyComplete = function () {
        this.emitValue();
    };
    SampleSubscriber.prototype.emitValue = function () {
        if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.value);
        }
    };
    return SampleSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=sample.js.map


/***/ }),
/* 213 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = sampleTime;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__scheduler_async__ = __webpack_require__(12);
/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */



/**
 * Emits the most recently emitted value from the source Observable within
 * periodic time intervals.
 *
 * <span class="informal">Samples the source Observable at periodic time
 * intervals, emitting what it samples.</span>
 *
 * <img src="./img/sampleTime.png" width="100%">
 *
 * `sampleTime` periodically looks at the source Observable and emits whichever
 * value it has most recently emitted since the previous sampling, unless the
 * source has not emitted anything since the previous sampling. The sampling
 * happens periodically in time every `period` milliseconds (or the time unit
 * defined by the optional `scheduler` argument). The sampling starts as soon as
 * the output Observable is subscribed.
 *
 * @example <caption>Every second, emit the most recent click at most once</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.sampleTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sample}
 * @see {@link throttleTime}
 *
 * @param {number} period The sampling period expressed in milliseconds or the
 * time unit determined internally by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the sampling.
 * @return {Observable<T>} An Observable that emits the results of sampling the
 * values emitted by the source Observable at the specified time interval.
 * @method sampleTime
 * @owner Observable
 */
function sampleTime(period, scheduler) {
    if (scheduler === void 0) {
        scheduler = __WEBPACK_IMPORTED_MODULE_2__scheduler_async__["a" /* async */];
    }
    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };
}
var SampleTimeOperator = /*@__PURE__*/ (function () {
    function SampleTimeOperator(period, scheduler) {
        this.period = period;
        this.scheduler = scheduler;
    }
    SampleTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
    };
    return SampleTimeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SampleTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SampleTimeSubscriber, _super);
    function SampleTimeSubscriber(destination, period, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.period = period;
        _this.scheduler = scheduler;
        _this.hasValue = false;
        _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));
        return _this;
    }
    SampleTimeSubscriber.prototype._next = function (value) {
        this.lastValue = value;
        this.hasValue = true;
    };
    SampleTimeSubscriber.prototype.notifyNext = function () {
        if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.lastValue);
        }
    };
    return SampleTimeSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
function dispatchNotification(state) {
    var subscriber = state.subscriber, period = state.period;
    subscriber.notifyNext();
    this.schedule(state, period);
}
//# sourceMappingURL=sampleTime.js.map


/***/ }),
/* 214 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = sequenceEqual;
/* unused harmony export SequenceEqualOperator */
/* unused harmony export SequenceEqualSubscriber */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_tryCatch__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_errorObject__ = __webpack_require__(14);
/** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */




/**
 * Compares all values of two observables in sequence using an optional comparor function
 * and returns an observable of a single boolean value representing whether or not the two sequences
 * are equal.
 *
 * <span class="informal">Checks to see of all values emitted by both observables are equal, in order.</span>
 *
 * <img src="./img/sequenceEqual.png" width="100%">
 *
 * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either
 * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom
 * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the
 * observables completes, the operator will wait for the other observable to complete; If the other
 * observable emits before completing, the returned observable will emit `false` and complete. If one observable never
 * completes or emits after the other complets, the returned observable will never complete.
 *
 * @example <caption>figure out if the Konami code matches</caption>
 * var code = Rx.Observable.from([
 *  "ArrowUp",
 *  "ArrowUp",
 *  "ArrowDown",
 *  "ArrowDown",
 *  "ArrowLeft",
 *  "ArrowRight",
 *  "ArrowLeft",
 *  "ArrowRight",
 *  "KeyB",
 *  "KeyA",
 *  "Enter" // no start key, clearly.
 * ]);
 *
 * var keys = Rx.Observable.fromEvent(document, 'keyup')
 *  .map(e => e.code);
 * var matches = keys.bufferCount(11, 1)
 *  .mergeMap(
 *    last11 =>
 *      Rx.Observable.from(last11)
 *        .sequenceEqual(code)
 *   );
 * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));
 *
 * @see {@link combineLatest}
 * @see {@link zip}
 * @see {@link withLatestFrom}
 *
 * @param {Observable} compareTo The observable sequence to compare the source sequence to.
 * @param {function} [comparor] An optional function to compare each value pair
 * @return {Observable} An Observable of a single boolean value representing whether or not
 * the values emitted by both observables were equal in sequence.
 * @method sequenceEqual
 * @owner Observable
 */
function sequenceEqual(compareTo, comparor) {
    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparor)); };
}
var SequenceEqualOperator = /*@__PURE__*/ (function () {
    function SequenceEqualOperator(compareTo, comparor) {
        this.compareTo = compareTo;
        this.comparor = comparor;
    }
    SequenceEqualOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));
    };
    return SequenceEqualOperator;
}());

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SequenceEqualSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SequenceEqualSubscriber, _super);
    function SequenceEqualSubscriber(destination, compareTo, comparor) {
        var _this = _super.call(this, destination) || this;
        _this.compareTo = compareTo;
        _this.comparor = comparor;
        _this._a = [];
        _this._b = [];
        _this._oneComplete = false;
        _this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));
        return _this;
    }
    SequenceEqualSubscriber.prototype._next = function (value) {
        if (this._oneComplete && this._b.length === 0) {
            this.emit(false);
        }
        else {
            this._a.push(value);
            this.checkValues();
        }
    };
    SequenceEqualSubscriber.prototype._complete = function () {
        if (this._oneComplete) {
            this.emit(this._a.length === 0 && this._b.length === 0);
        }
        else {
            this._oneComplete = true;
        }
    };
    SequenceEqualSubscriber.prototype.checkValues = function () {
        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;
        while (_a.length > 0 && _b.length > 0) {
            var a = _a.shift();
            var b = _b.shift();
            var areEqual = false;
            if (comparor) {
                areEqual = Object(__WEBPACK_IMPORTED_MODULE_2__util_tryCatch__["a" /* tryCatch */])(comparor)(a, b);
                if (areEqual === __WEBPACK_IMPORTED_MODULE_3__util_errorObject__["a" /* errorObject */]) {
                    this.destination.error(__WEBPACK_IMPORTED_MODULE_3__util_errorObject__["a" /* errorObject */].e);
                }
            }
            else {
                areEqual = a === b;
            }
            if (!areEqual) {
                this.emit(false);
            }
        }
    };
    SequenceEqualSubscriber.prototype.emit = function (value) {
        var destination = this.destination;
        destination.next(value);
        destination.complete();
    };
    SequenceEqualSubscriber.prototype.nextB = function (value) {
        if (this._oneComplete && this._a.length === 0) {
            this.emit(false);
        }
        else {
            this._b.push(value);
            this.checkValues();
        }
    };
    return SequenceEqualSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));

var SequenceEqualCompareToSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SequenceEqualCompareToSubscriber, _super);
    function SequenceEqualCompareToSubscriber(destination, parent) {
        var _this = _super.call(this, destination) || this;
        _this.parent = parent;
        return _this;
    }
    SequenceEqualCompareToSubscriber.prototype._next = function (value) {
        this.parent.nextB(value);
    };
    SequenceEqualCompareToSubscriber.prototype._error = function (err) {
        this.parent.error(err);
    };
    SequenceEqualCompareToSubscriber.prototype._complete = function () {
        this.parent._complete();
    };
    return SequenceEqualCompareToSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=sequenceEqual.js.map


/***/ }),
/* 215 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = share;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__multicast__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__refCount__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Subject__ = __webpack_require__(9);
/** PURE_IMPORTS_START _multicast,_refCount,_Subject PURE_IMPORTS_END */



function shareSubjectFactory() {
    return new __WEBPACK_IMPORTED_MODULE_2__Subject__["a" /* Subject */]();
}
/**
 * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
 * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
 * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
 * This is an alias for .multicast(() => new Subject()).refCount().
 *
 * <img src="./img/share.png" width="100%">
 *
 * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.
 * @method share
 * @owner Observable
 */
function share() {
    return function (source) { return Object(__WEBPACK_IMPORTED_MODULE_1__refCount__["a" /* refCount */])()(Object(__WEBPACK_IMPORTED_MODULE_0__multicast__["a" /* multicast */])(shareSubjectFactory)(source)); };
}
//# sourceMappingURL=share.js.map


/***/ }),
/* 216 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = shareReplay;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ReplaySubject__ = __webpack_require__(58);
/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */

/**
 * @method shareReplay
 * @owner Observable
 */
function shareReplay(bufferSize, windowTime, scheduler) {
    return function (source) { return source.lift(shareReplayOperator(bufferSize, windowTime, scheduler)); };
}
function shareReplayOperator(bufferSize, windowTime, scheduler) {
    var subject;
    var refCount = 0;
    var subscription;
    var hasError = false;
    var isComplete = false;
    return function shareReplayOperation(source) {
        refCount++;
        if (!subject || hasError) {
            hasError = false;
            subject = new __WEBPACK_IMPORTED_MODULE_0__ReplaySubject__["a" /* ReplaySubject */](bufferSize, windowTime, scheduler);
            subscription = source.subscribe({
                next: function (value) { subject.next(value); },
                error: function (err) {
                    hasError = true;
                    subject.error(err);
                },
                complete: function () {
                    isComplete = true;
                    subject.complete();
                },
            });
        }
        var innerSub = subject.subscribe(this);
        return function () {
            refCount--;
            innerSub.unsubscribe();
            if (subscription && refCount === 0 && isComplete) {
                subscription.unsubscribe();
            }
        };
    };
}
//# sourceMappingURL=shareReplay.js.map


/***/ }),
/* 217 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = single;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_EmptyError__ = __webpack_require__(32);
/** PURE_IMPORTS_START tslib,_Subscriber,_util_EmptyError PURE_IMPORTS_END */



/**
 * Returns an Observable that emits the single item emitted by the source Observable that matches a specified
 * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no
 * items, notify of an IllegalArgumentException or NoSuchElementException respectively. If the source Observable
 * emits items but none match the specified predicate then `undefined` is emiited.
 *
 * <img src="./img/single.png" width="100%">
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.
 * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches
 * the predicate or `undefined` when no items match.
 *
 * @method single
 * @owner Observable
 */
function single(predicate) {
    return function (source) { return source.lift(new SingleOperator(predicate, source)); };
}
var SingleOperator = /*@__PURE__*/ (function () {
    function SingleOperator(predicate, source) {
        this.predicate = predicate;
        this.source = source;
    }
    SingleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
    };
    return SingleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SingleSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SingleSubscriber, _super);
    function SingleSubscriber(destination, predicate, source) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.source = source;
        _this.seenValue = false;
        _this.index = 0;
        return _this;
    }
    SingleSubscriber.prototype.applySingleValue = function (value) {
        if (this.seenValue) {
            this.destination.error('Sequence contains more than one element');
        }
        else {
            this.seenValue = true;
            this.singleValue = value;
        }
    };
    SingleSubscriber.prototype._next = function (value) {
        var index = this.index++;
        if (this.predicate) {
            this.tryNext(value, index);
        }
        else {
            this.applySingleValue(value);
        }
    };
    SingleSubscriber.prototype.tryNext = function (value, index) {
        try {
            if (this.predicate(value, index, this.source)) {
                this.applySingleValue(value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    SingleSubscriber.prototype._complete = function () {
        var destination = this.destination;
        if (this.index > 0) {
            destination.next(this.seenValue ? this.singleValue : undefined);
            destination.complete();
        }
        else {
            destination.error(new __WEBPACK_IMPORTED_MODULE_2__util_EmptyError__["a" /* EmptyError */]);
        }
    };
    return SingleSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=single.js.map


/***/ }),
/* 218 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = skip;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/**
 * Returns an Observable that skips the first `count` items emitted by the source Observable.
 *
 * <img src="./img/skip.png" width="100%">
 *
 * @param {Number} count - The number of times, items emitted by source Observable should be skipped.
 * @return {Observable} An Observable that skips values emitted by the source Observable.
 *
 * @method skip
 * @owner Observable
 */
function skip(count) {
    return function (source) { return source.lift(new SkipOperator(count)); };
}
var SkipOperator = /*@__PURE__*/ (function () {
    function SkipOperator(total) {
        this.total = total;
    }
    SkipOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SkipSubscriber(subscriber, this.total));
    };
    return SkipOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SkipSubscriber, _super);
    function SkipSubscriber(destination, total) {
        var _this = _super.call(this, destination) || this;
        _this.total = total;
        _this.count = 0;
        return _this;
    }
    SkipSubscriber.prototype._next = function (x) {
        if (++this.count > this.total) {
            this.destination.next(x);
        }
    };
    return SkipSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=skip.js.map


/***/ }),
/* 219 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = skipLast;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_ArgumentOutOfRangeError__ = __webpack_require__(31);
/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError PURE_IMPORTS_END */



/**
 * Skip the last `count` values emitted by the source Observable.
 *
 * <img src="./img/skipLast.png" width="100%">
 *
 * `skipLast` returns an Observable that accumulates a queue with a length
 * enough to store the first `count` values. As more values are received,
 * values are taken from the front of the queue and produced on the result
 * sequence. This causes values to be delayed.
 *
 * @example <caption>Skip the last 2 values of an Observable with many values</caption>
 * var many = Rx.Observable.range(1, 5);
 * var skipLastTwo = many.skipLast(2);
 * skipLastTwo.subscribe(x => console.log(x));
 *
 * // Results in:
 * // 1 2 3
 *
 * @see {@link skip}
 * @see {@link skipUntil}
 * @see {@link skipWhile}
 * @see {@link take}
 *
 * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws
 * ArgumentOutOrRangeError if `i < 0`.
 *
 * @param {number} count Number of elements to skip from the end of the source Observable.
 * @returns {Observable<T>} An Observable that skips the last count values
 * emitted by the source Observable.
 * @method skipLast
 * @owner Observable
 */
function skipLast(count) {
    return function (source) { return source.lift(new SkipLastOperator(count)); };
}
var SkipLastOperator = /*@__PURE__*/ (function () {
    function SkipLastOperator(_skipCount) {
        this._skipCount = _skipCount;
        if (this._skipCount < 0) {
            throw new __WEBPACK_IMPORTED_MODULE_2__util_ArgumentOutOfRangeError__["a" /* ArgumentOutOfRangeError */];
        }
    }
    SkipLastOperator.prototype.call = function (subscriber, source) {
        if (this._skipCount === 0) {
            // If we don't want to skip any values then just subscribe
            // to Subscriber without any further logic.
            return source.subscribe(new __WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */](subscriber));
        }
        else {
            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));
        }
    };
    return SkipLastOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipLastSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SkipLastSubscriber, _super);
    function SkipLastSubscriber(destination, _skipCount) {
        var _this = _super.call(this, destination) || this;
        _this._skipCount = _skipCount;
        _this._count = 0;
        _this._ring = new Array(_skipCount);
        return _this;
    }
    SkipLastSubscriber.prototype._next = function (value) {
        var skipCount = this._skipCount;
        var count = this._count++;
        if (count < skipCount) {
            this._ring[count] = value;
        }
        else {
            var currentIndex = count % skipCount;
            var ring = this._ring;
            var oldValue = ring[currentIndex];
            ring[currentIndex] = value;
            this.destination.next(oldValue);
        }
    };
    return SkipLastSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=skipLast.js.map


/***/ }),
/* 220 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = skipUntil;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */



/**
 * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.
 *
 * <img src="./img/skipUntil.png" width="100%">
 *
 * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to
 * be mirrored by the resulting Observable.
 * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits
 * an item, then emits the remaining items.
 * @method skipUntil
 * @owner Observable
 */
function skipUntil(notifier) {
    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };
}
var SkipUntilOperator = /*@__PURE__*/ (function () {
    function SkipUntilOperator(notifier) {
        this.notifier = notifier;
    }
    SkipUntilOperator.prototype.call = function (destination, source) {
        return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));
    };
    return SkipUntilOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipUntilSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SkipUntilSubscriber, _super);
    function SkipUntilSubscriber(destination, notifier) {
        var _this = _super.call(this, destination) || this;
        _this.hasValue = false;
        _this.add(_this.innerSubscription = Object(__WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__["a" /* subscribeToResult */])(_this, notifier));
        return _this;
    }
    SkipUntilSubscriber.prototype._next = function (value) {
        if (this.hasValue) {
            _super.prototype._next.call(this, value);
        }
    };
    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.hasValue = true;
        if (this.innerSubscription) {
            this.innerSubscription.unsubscribe();
        }
    };
    SkipUntilSubscriber.prototype.notifyComplete = function () {
        /* do nothing */
    };
    return SkipUntilSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=skipUntil.js.map


/***/ }),
/* 221 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = skipWhile;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/**
 * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds
 * true, but emits all further source items as soon as the condition becomes false.
 *
 * <img src="./img/skipWhile.png" width="100%">
 *
 * @param {Function} predicate - A function to test each item emitted from the source Observable.
 * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the
 * specified predicate becomes false.
 * @method skipWhile
 * @owner Observable
 */
function skipWhile(predicate) {
    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };
}
var SkipWhileOperator = /*@__PURE__*/ (function () {
    function SkipWhileOperator(predicate) {
        this.predicate = predicate;
    }
    SkipWhileOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
    };
    return SkipWhileOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipWhileSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SkipWhileSubscriber, _super);
    function SkipWhileSubscriber(destination, predicate) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.skipping = true;
        _this.index = 0;
        return _this;
    }
    SkipWhileSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        if (this.skipping) {
            this.tryCallPredicate(value);
        }
        if (!this.skipping) {
            destination.next(value);
        }
    };
    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
        try {
            var result = this.predicate(value, this.index++);
            this.skipping = Boolean(result);
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    return SkipWhileSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=skipWhile.js.map


/***/ }),
/* 222 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = startWith;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__observable_fromArray__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__observable_scalar__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__observable_empty__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__observable_concat__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_isScheduler__ = __webpack_require__(15);
/** PURE_IMPORTS_START _observable_fromArray,_observable_scalar,_observable_empty,_observable_concat,_util_isScheduler PURE_IMPORTS_END */





/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the items you specify as arguments before it begins to emit
 * items emitted by the source Observable.
 *
 * <img src="./img/startWith.png" width="100%">
 *
 * @param {...T} values - Items you want the modified Observable to emit first.
 * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling
 * the emissions of the `next` notifications.
 * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items
 * emitted by the source Observable.
 * @method startWith
 * @owner Observable
 */
function startWith() {
    var array = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        array[_i] = arguments[_i];
    }
    return function (source) {
        var scheduler = array[array.length - 1];
        if (Object(__WEBPACK_IMPORTED_MODULE_4__util_isScheduler__["a" /* isScheduler */])(scheduler)) {
            array.pop();
        }
        else {
            scheduler = null;
        }
        var len = array.length;
        if (len === 1 && !scheduler) {
            return Object(__WEBPACK_IMPORTED_MODULE_3__observable_concat__["a" /* concat */])(Object(__WEBPACK_IMPORTED_MODULE_1__observable_scalar__["a" /* scalar */])(array[0]), source);
        }
        else if (len > 0) {
            return Object(__WEBPACK_IMPORTED_MODULE_3__observable_concat__["a" /* concat */])(Object(__WEBPACK_IMPORTED_MODULE_0__observable_fromArray__["a" /* fromArray */])(array, scheduler), source);
        }
        else {
            return Object(__WEBPACK_IMPORTED_MODULE_3__observable_concat__["a" /* concat */])(Object(__WEBPACK_IMPORTED_MODULE_2__observable_empty__["b" /* empty */])(scheduler), source);
        }
    };
}
//# sourceMappingURL=startWith.js.map


/***/ }),
/* 223 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = subscribeOn;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__observable_SubscribeOnObservable__ = __webpack_require__(224);
/** PURE_IMPORTS_START _observable_SubscribeOnObservable PURE_IMPORTS_END */

/**
 * Asynchronously subscribes Observers to this Observable on the specified IScheduler.
 *
 * <img src="./img/subscribeOn.png" width="100%">
 *
 * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.
 * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.
 .
 * @method subscribeOn
 * @owner Observable
 */
function subscribeOn(scheduler, delay) {
    if (delay === void 0) {
        delay = 0;
    }
    return function subscribeOnOperatorFunction(source) {
        return source.lift(new SubscribeOnOperator(scheduler, delay));
    };
}
var SubscribeOnOperator = /*@__PURE__*/ (function () {
    function SubscribeOnOperator(scheduler, delay) {
        this.scheduler = scheduler;
        this.delay = delay;
    }
    SubscribeOnOperator.prototype.call = function (subscriber, source) {
        return new __WEBPACK_IMPORTED_MODULE_0__observable_SubscribeOnObservable__["a" /* SubscribeOnObservable */](source, this.delay, this.scheduler).subscribe(subscriber);
    };
    return SubscribeOnOperator;
}());
//# sourceMappingURL=subscribeOn.js.map


/***/ }),
/* 224 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SubscribeOnObservable; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Observable__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__scheduler_asap__ = __webpack_require__(90);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_isNumeric__ = __webpack_require__(46);
/** PURE_IMPORTS_START tslib,_Observable,_scheduler_asap,_util_isNumeric PURE_IMPORTS_END */




/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var SubscribeOnObservable = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SubscribeOnObservable, _super);
    function SubscribeOnObservable(source, delayTime, scheduler) {
        if (delayTime === void 0) {
            delayTime = 0;
        }
        if (scheduler === void 0) {
            scheduler = __WEBPACK_IMPORTED_MODULE_2__scheduler_asap__["a" /* asap */];
        }
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.delayTime = delayTime;
        _this.scheduler = scheduler;
        if (!Object(__WEBPACK_IMPORTED_MODULE_3__util_isNumeric__["a" /* isNumeric */])(delayTime) || delayTime < 0) {
            _this.delayTime = 0;
        }
        if (!scheduler || typeof scheduler.schedule !== 'function') {
            _this.scheduler = __WEBPACK_IMPORTED_MODULE_2__scheduler_asap__["a" /* asap */];
        }
        return _this;
    }
    /** @nocollapse */
    SubscribeOnObservable.create = function (source, delay, scheduler) {
        if (delay === void 0) {
            delay = 0;
        }
        if (scheduler === void 0) {
            scheduler = __WEBPACK_IMPORTED_MODULE_2__scheduler_asap__["a" /* asap */];
        }
        return new SubscribeOnObservable(source, delay, scheduler);
    };
    /** @nocollapse */
    SubscribeOnObservable.dispatch = function (arg) {
        var source = arg.source, subscriber = arg.subscriber;
        return this.add(source.subscribe(subscriber));
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    SubscribeOnObservable.prototype._subscribe = function (subscriber) {
        var delay = this.delayTime;
        var source = this.source;
        var scheduler = this.scheduler;
        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
            source: source, subscriber: subscriber
        });
    };
    return SubscribeOnObservable;
}(__WEBPACK_IMPORTED_MODULE_1__Observable__["a" /* Observable */]));

//# sourceMappingURL=SubscribeOnObservable.js.map


/***/ }),
/* 225 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = switchAll;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__switchMap__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_identity__ = __webpack_require__(25);
/** PURE_IMPORTS_START _switchMap,_util_identity PURE_IMPORTS_END */


function switchAll() {
    return Object(__WEBPACK_IMPORTED_MODULE_0__switchMap__["a" /* switchMap */])(__WEBPACK_IMPORTED_MODULE_1__util_identity__["a" /* identity */]);
}
//# sourceMappingURL=switchAll.js.map


/***/ }),
/* 226 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = switchMapTo;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__switchMap__ = __webpack_require__(69);
/** PURE_IMPORTS_START _switchMap PURE_IMPORTS_END */

/* tslint:enable:max-line-length */
/**
 * Projects each source value to the same Observable which is flattened multiple
 * times with {@link switch} in the output Observable.
 *
 * <span class="informal">It's like {@link switchMap}, but maps each value
 * always to the same inner Observable.</span>
 *
 * <img src="./img/switchMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then flattens those resulting Observables into one
 * single Observable, which is the output Observable. The output Observables
 * emits values only from the most recently emitted instance of
 * `innerObservable`.
 *
 * @example <caption>Rerun an interval Observable on every click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.switchMapTo(Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMapTo}
 * @see {@link switch}
 * @see {@link switchMap}
 * @see {@link mergeMapTo}
 *
 * @param {ObservableInput} innerObservable An Observable to replace each value from
 * the source Observable.
 * @return {Observable} An Observable that emits items from the given
 * `innerObservable` (and optionally transformed through `resultSelector`) every
 * time a value is emitted on the source Observable, and taking only the values
 * from the most recently projected inner Observable.
 * @method switchMapTo
 * @owner Observable
 */
function switchMapTo(innerObservable, resultSelector) {
    return resultSelector ? Object(__WEBPACK_IMPORTED_MODULE_0__switchMap__["a" /* switchMap */])(function () { return innerObservable; }, resultSelector) : Object(__WEBPACK_IMPORTED_MODULE_0__switchMap__["a" /* switchMap */])(function () { return innerObservable; });
}
//# sourceMappingURL=switchMapTo.js.map


/***/ }),
/* 227 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = takeUntil;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */



/**
 * Emits the values emitted by the source Observable until a `notifier`
 * Observable emits a value.
 *
 * <span class="informal">Lets values pass until a second Observable,
 * `notifier`, emits a value. Then, it completes.</span>
 *
 * <img src="./img/takeUntil.png" width="100%">
 *
 * `takeUntil` subscribes and begins mirroring the source Observable. It also
 * monitors a second Observable, `notifier` that you provide. If the `notifier`
 * emits a value, the output Observable stops mirroring the source Observable
 * and completes. If the `notifier` doesn't emit any value and completes
 * then `takeUntil` will pass all values.
 *
 * @example <caption>Tick every second until the first click happens</caption>
 * var interval = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = interval.takeUntil(clicks);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link take}
 * @see {@link takeLast}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @param {Observable} notifier The Observable whose first emitted value will
 * cause the output Observable of `takeUntil` to stop emitting values from the
 * source Observable.
 * @return {Observable<T>} An Observable that emits the values from the source
 * Observable until such time as `notifier` emits its first value.
 * @method takeUntil
 * @owner Observable
 */
function takeUntil(notifier) {
    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };
}
var TakeUntilOperator = /*@__PURE__*/ (function () {
    function TakeUntilOperator(notifier) {
        this.notifier = notifier;
    }
    TakeUntilOperator.prototype.call = function (subscriber, source) {
        var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);
        var notifierSubscription = Object(__WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__["a" /* subscribeToResult */])(takeUntilSubscriber, this.notifier);
        if (notifierSubscription && !notifierSubscription.closed) {
            takeUntilSubscriber.add(notifierSubscription);
            return source.subscribe(takeUntilSubscriber);
        }
        return takeUntilSubscriber;
    };
    return TakeUntilOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeUntilSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](TakeUntilSubscriber, _super);
    function TakeUntilSubscriber(destination) {
        return _super.call(this, destination) || this;
    }
    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.complete();
    };
    TakeUntilSubscriber.prototype.notifyComplete = function () {
        // noop
    };
    return TakeUntilSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=takeUntil.js.map


/***/ }),
/* 228 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = takeWhile;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


/**
 * Emits values emitted by the source Observable so long as each value satisfies
 * the given `predicate`, and then completes as soon as this `predicate` is not
 * satisfied.
 *
 * <span class="informal">Takes values from the source only while they pass the
 * condition given. When the first value does not satisfy, it completes.</span>
 *
 * <img src="./img/takeWhile.png" width="100%">
 *
 * `takeWhile` subscribes and begins mirroring the source Observable. Each value
 * emitted on the source is given to the `predicate` function which returns a
 * boolean, representing a condition to be satisfied by the source values. The
 * output Observable emits the source values until such time as the `predicate`
 * returns false, at which point `takeWhile` stops mirroring the source
 * Observable and completes the output Observable.
 *
 * @example <caption>Emit click events only while the clientX property is greater than 200</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.takeWhile(ev => ev.clientX > 200);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link take}
 * @see {@link takeLast}
 * @see {@link takeUntil}
 * @see {@link skip}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates a value emitted by the source Observable and returns a boolean.
 * Also takes the (zero-based) index as the second argument.
 * @return {Observable<T>} An Observable that emits the values from the source
 * Observable so long as each value satisfies the condition defined by the
 * `predicate`, then completes.
 * @method takeWhile
 * @owner Observable
 */
function takeWhile(predicate) {
    return function (source) { return source.lift(new TakeWhileOperator(predicate)); };
}
var TakeWhileOperator = /*@__PURE__*/ (function () {
    function TakeWhileOperator(predicate) {
        this.predicate = predicate;
    }
    TakeWhileOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));
    };
    return TakeWhileOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeWhileSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](TakeWhileSubscriber, _super);
    function TakeWhileSubscriber(destination, predicate) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.index = 0;
        return _this;
    }
    TakeWhileSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        var result;
        try {
            result = this.predicate(value, this.index++);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        this.nextOrComplete(value, result);
    };
    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
        var destination = this.destination;
        if (Boolean(predicateResult)) {
            destination.next(value);
        }
        else {
            destination.complete();
        }
    };
    return TakeWhileSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=takeWhile.js.map


/***/ }),
/* 229 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = throttleTime;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__scheduler_async__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__throttle__ = __webpack_require__(111);
/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */




/**
 * Emits a value from the source Observable, then ignores subsequent source
 * values for `duration` milliseconds, then repeats this process.
 *
 * <span class="informal">Lets a value pass, then ignores source values for the
 * next `duration` milliseconds.</span>
 *
 * <img src="./img/throttleTime.png" width="100%">
 *
 * `throttleTime` emits the source Observable values on the output Observable
 * when its internal timer is disabled, and ignores source values when the timer
 * is enabled. Initially, the timer is disabled. As soon as the first source
 * value arrives, it is forwarded to the output Observable, and then the timer
 * is enabled. After `duration` milliseconds (or the time unit determined
 * internally by the optional `scheduler`) has passed, the timer is disabled,
 * and this process repeats for the next source value. Optionally takes a
 * {@link IScheduler} for managing timers.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.throttleTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttle}
 *
 * @param {number} duration Time to wait before emitting another value after
 * emitting the last value, measured in milliseconds or the time unit determined
 * internally by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the throttling.
 * @param {Object} config a configuration object to define `leading` and
 * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.
 * @return {Observable<T>} An Observable that performs the throttle operation to
 * limit the rate of emissions from the source.
 * @method throttleTime
 * @owner Observable
 */
function throttleTime(duration, scheduler, config) {
    if (scheduler === void 0) {
        scheduler = __WEBPACK_IMPORTED_MODULE_2__scheduler_async__["a" /* async */];
    }
    if (config === void 0) {
        config = __WEBPACK_IMPORTED_MODULE_3__throttle__["a" /* defaultThrottleConfig */];
    }
    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };
}
var ThrottleTimeOperator = /*@__PURE__*/ (function () {
    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {
        this.duration = duration;
        this.scheduler = scheduler;
        this.leading = leading;
        this.trailing = trailing;
    }
    ThrottleTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
    };
    return ThrottleTimeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ThrottleTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ThrottleTimeSubscriber, _super);
    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
        var _this = _super.call(this, destination) || this;
        _this.duration = duration;
        _this.scheduler = scheduler;
        _this.leading = leading;
        _this.trailing = trailing;
        _this._hasTrailingValue = false;
        _this._trailingValue = null;
        return _this;
    }
    ThrottleTimeSubscriber.prototype._next = function (value) {
        if (this.throttled) {
            if (this.trailing) {
                this._trailingValue = value;
                this._hasTrailingValue = true;
            }
        }
        else {
            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));
            if (this.leading) {
                this.destination.next(value);
            }
        }
    };
    ThrottleTimeSubscriber.prototype._complete = function () {
        if (this._hasTrailingValue) {
            this.destination.next(this._trailingValue);
            this.destination.complete();
        }
        else {
            this.destination.complete();
        }
    };
    ThrottleTimeSubscriber.prototype.clearThrottle = function () {
        var throttled = this.throttled;
        if (throttled) {
            if (this.trailing && this._hasTrailingValue) {
                this.destination.next(this._trailingValue);
                this._trailingValue = null;
                this._hasTrailingValue = false;
            }
            throttled.unsubscribe();
            this.remove(throttled);
            this.throttled = null;
        }
    };
    return ThrottleTimeSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
function dispatchNext(arg) {
    var subscriber = arg.subscriber;
    subscriber.clearThrottle();
}
//# sourceMappingURL=throttleTime.js.map


/***/ }),
/* 230 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = timeInterval;
/* unused harmony export TimeInterval */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__scheduler_async__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__scan__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__observable_defer__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__map__ = __webpack_require__(16);
/** PURE_IMPORTS_START _scheduler_async,_scan,_observable_defer,_map PURE_IMPORTS_END */




function timeInterval(scheduler) {
    if (scheduler === void 0) {
        scheduler = __WEBPACK_IMPORTED_MODULE_0__scheduler_async__["a" /* async */];
    }
    return function (source) {
        return Object(__WEBPACK_IMPORTED_MODULE_2__observable_defer__["a" /* defer */])(function () {
            return source.pipe(
            // HACK: the typings seem off with scan
            Object(__WEBPACK_IMPORTED_MODULE_1__scan__["a" /* scan */])(function (_a, value) {
                var current = _a.current;
                return ({ value: value, current: scheduler.now(), last: current });
            }, { current: scheduler.now(), value: undefined, last: undefined }), Object(__WEBPACK_IMPORTED_MODULE_3__map__["a" /* map */])(function (_a) {
                var current = _a.current, last = _a.last, value = _a.value;
                return new TimeInterval(value, current - last);
            }));
        });
    };
}
var TimeInterval = /*@__PURE__*/ (function () {
    function TimeInterval(value, interval) {
        this.value = value;
        this.interval = interval;
    }
    return TimeInterval;
}());

//# sourceMappingURL=timeInterval.js.map


/***/ }),
/* 231 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = timeout;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__scheduler_async__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_TimeoutError__ = __webpack_require__(91);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__timeoutWith__ = __webpack_require__(112);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__observable_throwError__ = __webpack_require__(61);
/** PURE_IMPORTS_START _scheduler_async,_util_TimeoutError,_timeoutWith,_observable_throwError PURE_IMPORTS_END */




/**
 *
 * Errors if Observable does not emit a value in given time span.
 *
 * <span class="informal">Timeouts on Observable that doesn't emit values fast enough.</span>
 *
 * <img src="./img/timeout.png" width="100%">
 *
 * `timeout` operator accepts as an argument either a number or a Date.
 *
 * If number was provided, it returns an Observable that behaves like a source
 * Observable, unless there is a period of time where there is no value emitted.
 * So if you provide `100` as argument and first value comes after 50ms from
 * the moment of subscription, this value will be simply re-emitted by the resulting
 * Observable. If however after that 100ms passes without a second value being emitted,
 * stream will end with an error and source Observable will be unsubscribed.
 * These checks are performed throughout whole lifecycle of Observable - from the moment
 * it was subscribed to, until it completes or errors itself. Thus every value must be
 * emitted within specified period since previous value.
 *
 * If provided argument was Date, returned Observable behaves differently. It throws
 * if Observable did not complete before provided Date. This means that periods between
 * emission of particular values do not matter in this case. If Observable did not complete
 * before provided Date, source Observable will be unsubscribed. Other than that, resulting
 * stream behaves just as source Observable.
 *
 * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)
 * when returned Observable will check if source stream emitted value or completed.
 *
 * @example <caption>Check if ticks are emitted within certain timespan</caption>
 * const seconds = Rx.Observable.interval(1000);
 *
 * seconds.timeout(1100) // Let's use bigger timespan to be safe,
 *                       // since `interval` might fire a bit later then scheduled.
 * .subscribe(
 *     value => console.log(value), // Will emit numbers just as regular `interval` would.
 *     err => console.log(err) // Will never be called.
 * );
 *
 * seconds.timeout(900).subscribe(
 *     value => console.log(value), // Will never be called.
 *     err => console.log(err) // Will emit error before even first value is emitted,
 *                             // since it did not arrive within 900ms period.
 * );
 *
 * @example <caption>Use Date to check if Observable completed</caption>
 * const seconds = Rx.Observable.interval(1000);
 *
 * seconds.timeout(new Date("December 17, 2020 03:24:00"))
 * .subscribe(
 *     value => console.log(value), // Will emit values as regular `interval` would
 *                                  // until December 17, 2020 at 03:24:00.
 *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,
 *                             // since Observable did not complete by then.
 * );
 *
 * @see {@link timeoutWith}
 *
 * @param {number|Date} due Number specifying period within which Observable must emit values
 *                          or Date specifying before when Observable should complete
 * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.
 * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.
 * @method timeout
 * @owner Observable
 */
function timeout(due, scheduler) {
    if (scheduler === void 0) {
        scheduler = __WEBPACK_IMPORTED_MODULE_0__scheduler_async__["a" /* async */];
    }
    return Object(__WEBPACK_IMPORTED_MODULE_2__timeoutWith__["a" /* timeoutWith */])(due, Object(__WEBPACK_IMPORTED_MODULE_3__observable_throwError__["a" /* throwError */])(new __WEBPACK_IMPORTED_MODULE_1__util_TimeoutError__["a" /* TimeoutError */]()), scheduler);
}
//# sourceMappingURL=timeout.js.map


/***/ }),
/* 232 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = timestamp;
/* unused harmony export Timestamp */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__scheduler_async__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__map__ = __webpack_require__(16);
/** PURE_IMPORTS_START _scheduler_async,_map PURE_IMPORTS_END */


/**
 * @param scheduler
 * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}
 * @method timestamp
 * @owner Observable
 */
function timestamp(scheduler) {
    if (scheduler === void 0) {
        scheduler = __WEBPACK_IMPORTED_MODULE_0__scheduler_async__["a" /* async */];
    }
    return Object(__WEBPACK_IMPORTED_MODULE_1__map__["a" /* map */])(function (value) { return new Timestamp(value, scheduler.now()); });
    // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));
}
var Timestamp = /*@__PURE__*/ (function () {
    function Timestamp(value, timestamp) {
        this.value = value;
        this.timestamp = timestamp;
    }
    return Timestamp;
}());

//# sourceMappingURL=timestamp.js.map


/***/ }),
/* 233 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = toArray;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__reduce__ = __webpack_require__(48);
/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

function toArrayReducer(arr, item, index) {
    if (index === 0) {
        return [item];
    }
    arr.push(item);
    return arr;
}
function toArray() {
    return Object(__WEBPACK_IMPORTED_MODULE_0__reduce__["a" /* reduce */])(toArrayReducer, []);
}
//# sourceMappingURL=toArray.js.map


/***/ }),
/* 234 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = window;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subject__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */




/**
 * Branch out the source Observable values as a nested Observable whenever
 * `windowBoundaries` emits.
 *
 * <span class="informal">It's like {@link buffer}, but emits a nested Observable
 * instead of an array.</span>
 *
 * <img src="./img/window.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits connected, non-overlapping
 * windows. It emits the current window and opens a new one whenever the
 * Observable `windowBoundaries` emits an item. Because each window is an
 * Observable, the output is a higher-order Observable.
 *
 * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var interval = Rx.Observable.interval(1000);
 * var result = clicks.window(interval)
 *   .map(win => win.take(2)) // each window has at most 2 emissions
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link windowWhen}
 * @see {@link buffer}
 *
 * @param {Observable<any>} windowBoundaries An Observable that completes the
 * previous window and starts a new window.
 * @return {Observable<Observable<T>>} An Observable of windows, which are
 * Observables emitting values of the source Observable.
 * @method window
 * @owner Observable
 */
function window(windowBoundaries) {
    return function windowOperatorFunction(source) {
        return source.lift(new WindowOperator(windowBoundaries));
    };
}
var WindowOperator = /*@__PURE__*/ (function () {
    function WindowOperator(windowBoundaries) {
        this.windowBoundaries = windowBoundaries;
    }
    WindowOperator.prototype.call = function (subscriber, source) {
        var windowSubscriber = new WindowSubscriber(subscriber);
        var sourceSubscription = source.subscribe(windowSubscriber);
        if (!sourceSubscription.closed) {
            windowSubscriber.add(Object(__WEBPACK_IMPORTED_MODULE_3__util_subscribeToResult__["a" /* subscribeToResult */])(windowSubscriber, this.windowBoundaries));
        }
        return sourceSubscription;
    };
    return WindowOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](WindowSubscriber, _super);
    function WindowSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.window = new __WEBPACK_IMPORTED_MODULE_1__Subject__["a" /* Subject */]();
        destination.next(_this.window);
        return _this;
    }
    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openWindow();
    };
    WindowSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
        this._complete();
    };
    WindowSubscriber.prototype._next = function (value) {
        this.window.next(value);
    };
    WindowSubscriber.prototype._error = function (err) {
        this.window.error(err);
        this.destination.error(err);
    };
    WindowSubscriber.prototype._complete = function () {
        this.window.complete();
        this.destination.complete();
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    WindowSubscriber.prototype._unsubscribe = function () {
        this.window = null;
    };
    WindowSubscriber.prototype.openWindow = function () {
        var prevWindow = this.window;
        if (prevWindow) {
            prevWindow.complete();
        }
        var destination = this.destination;
        var newWindow = this.window = new __WEBPACK_IMPORTED_MODULE_1__Subject__["a" /* Subject */]();
        destination.next(newWindow);
    };
    return WindowSubscriber;
}(__WEBPACK_IMPORTED_MODULE_2__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=window.js.map


/***/ }),
/* 235 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = windowCount;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Subject__ = __webpack_require__(9);
/** PURE_IMPORTS_START tslib,_Subscriber,_Subject PURE_IMPORTS_END */



/**
 * Branch out the source Observable values as a nested Observable with each
 * nested Observable emitting at most `windowSize` values.
 *
 * <span class="informal">It's like {@link bufferCount}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowCount.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits windows every `startWindowEvery`
 * items, each containing no more than `windowSize` items. When the source
 * Observable completes or encounters an error, the output Observable emits
 * the current window and propagates the notification from the source
 * Observable. If `startWindowEvery` is not provided, then new windows are
 * started immediately at the start of the source and when each window completes
 * with size `windowSize`.
 *
 * @example <caption>Ignore every 3rd click event, starting from the first one</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.windowCount(3)
 *   .map(win => win.skip(1)) // skip first of every 3 clicks
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Ignore every 3rd click event, starting from the third one</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.windowCount(2, 3)
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @see {@link window}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link windowWhen}
 * @see {@link bufferCount}
 *
 * @param {number} windowSize The maximum number of values emitted by each
 * window.
 * @param {number} [startWindowEvery] Interval at which to start a new window.
 * For example if `startWindowEvery` is `2`, then a new window will be started
 * on every other value from the source. A new window is started at the
 * beginning of the source by default.
 * @return {Observable<Observable<T>>} An Observable of windows, which in turn
 * are Observable of values.
 * @method windowCount
 * @owner Observable
 */
function windowCount(windowSize, startWindowEvery) {
    if (startWindowEvery === void 0) {
        startWindowEvery = 0;
    }
    return function windowCountOperatorFunction(source) {
        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));
    };
}
var WindowCountOperator = /*@__PURE__*/ (function () {
    function WindowCountOperator(windowSize, startWindowEvery) {
        this.windowSize = windowSize;
        this.startWindowEvery = startWindowEvery;
    }
    WindowCountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
    };
    return WindowCountOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowCountSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](WindowCountSubscriber, _super);
    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.windowSize = windowSize;
        _this.startWindowEvery = startWindowEvery;
        _this.windows = [new __WEBPACK_IMPORTED_MODULE_2__Subject__["a" /* Subject */]()];
        _this.count = 0;
        destination.next(_this.windows[0]);
        return _this;
    }
    WindowCountSubscriber.prototype._next = function (value) {
        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
        var destination = this.destination;
        var windowSize = this.windowSize;
        var windows = this.windows;
        var len = windows.length;
        for (var i = 0; i < len && !this.closed; i++) {
            windows[i].next(value);
        }
        var c = this.count - windowSize + 1;
        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
            windows.shift().complete();
        }
        if (++this.count % startWindowEvery === 0 && !this.closed) {
            var window_1 = new __WEBPACK_IMPORTED_MODULE_2__Subject__["a" /* Subject */]();
            windows.push(window_1);
            destination.next(window_1);
        }
    };
    WindowCountSubscriber.prototype._error = function (err) {
        var windows = this.windows;
        if (windows) {
            while (windows.length > 0 && !this.closed) {
                windows.shift().error(err);
            }
        }
        this.destination.error(err);
    };
    WindowCountSubscriber.prototype._complete = function () {
        var windows = this.windows;
        if (windows) {
            while (windows.length > 0 && !this.closed) {
                windows.shift().complete();
            }
        }
        this.destination.complete();
    };
    WindowCountSubscriber.prototype._unsubscribe = function () {
        this.count = 0;
        this.windows = null;
    };
    return WindowCountSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__Subscriber__["a" /* Subscriber */]));
//# sourceMappingURL=windowCount.js.map


/***/ }),
/* 236 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = windowTime;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subject__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__scheduler_async__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Subscriber__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_isNumeric__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_isScheduler__ = __webpack_require__(15);
/** PURE_IMPORTS_START tslib,_Subject,_scheduler_async,_Subscriber,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */






function windowTime(windowTimeSpan) {
    var scheduler = __WEBPACK_IMPORTED_MODULE_2__scheduler_async__["a" /* async */];
    var windowCreationInterval = null;
    var maxWindowSize = Number.POSITIVE_INFINITY;
    if (Object(__WEBPACK_IMPORTED_MODULE_5__util_isScheduler__["a" /* isScheduler */])(arguments[3])) {
        scheduler = arguments[3];
    }
    if (Object(__WEBPACK_IMPORTED_MODULE_5__util_isScheduler__["a" /* isScheduler */])(arguments[2])) {
        scheduler = arguments[2];
    }
    else if (Object(__WEBPACK_IMPORTED_MODULE_4__util_isNumeric__["a" /* isNumeric */])(arguments[2])) {
        maxWindowSize = arguments[2];
    }
    if (Object(__WEBPACK_IMPORTED_MODULE_5__util_isScheduler__["a" /* isScheduler */])(arguments[1])) {
        scheduler = arguments[1];
    }
    else if (Object(__WEBPACK_IMPORTED_MODULE_4__util_isNumeric__["a" /* isNumeric */])(arguments[1])) {
        windowCreationInterval = arguments[1];
    }
    return function windowTimeOperatorFunction(source) {
        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));
    };
}
var WindowTimeOperator = /*@__PURE__*/ (function () {
    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
        this.windowTimeSpan = windowTimeSpan;
        this.windowCreationInterval = windowCreationInterval;
        this.maxWindowSize = maxWindowSize;
        this.scheduler = scheduler;
    }
    WindowTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));
    };
    return WindowTimeOperator;
}());
var CountedSubject = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](CountedSubject, _super);
    function CountedSubject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._numberOfNextedValues = 0;
        return _this;
    }
    CountedSubject.prototype.next = function (value) {
        this._numberOfNextedValues++;
        _super.prototype.next.call(this, value);
    };
    Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", {
        get: function () {
            return this._numberOfNextedValues;
        },
        enumerable: true,
        configurable: true
    });
    return CountedSubject;
}(__WEBPACK_IMPORTED_MODULE_1__Subject__["a" /* Subject */]));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](WindowTimeSubscriber, _super);
    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.windowTimeSpan = windowTimeSpan;
        _this.windowCreationInterval = windowCreationInterval;
        _this.maxWindowSize = maxWindowSize;
        _this.scheduler = scheduler;
        _this.windows = [];
        var window = _this.openWindow();
        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
            var closeState = { subscriber: _this, window: window, context: null };
            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };
            _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
            _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
        }
        else {
            var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };
            _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
        }
        return _this;
    }
    WindowTimeSubscriber.prototype._next = function (value) {
        var windows = this.windows;
        var len = windows.length;
        for (var i = 0; i < len; i++) {
            var window_1 = windows[i];
            if (!window_1.closed) {
                window_1.next(value);
                if (window_1.numberOfNextedValues >= this.maxWindowSize) {
                    this.closeWindow(window_1);
                }
            }
        }
    };
    WindowTimeSubscriber.prototype._error = function (err) {
        var windows = this.windows;
        while (windows.length > 0) {
            windows.shift().error(err);
        }
        this.destination.error(err);
    };
    WindowTimeSubscriber.prototype._complete = function () {
        var windows = this.windows;
        while (windows.length > 0) {
            var window_2 = windows.shift();
            if (!window_2.closed) {
                window_2.complete();
            }
        }
        this.destination.complete();
    };
    WindowTimeSubscriber.prototype.openWindow = function () {
        var window = new CountedSubject();
        this.windows.push(window);
        var destination = this.destination;
        destination.next(window);
        return window;
    };
    WindowTimeSubscriber.prototype.closeWindow = function (window) {
        window.complete();
        var windows = this.windows;
        windows.splice(windows.indexOf(window), 1);
    };
    return WindowTimeSubscriber;
}(__WEBPACK_IMPORTED_MODULE_3__Subscriber__["a" /* Subscriber */]));
function dispatchWindowTimeSpanOnly(state) {
    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
    if (window) {
        subscriber.closeWindow(window);
    }
    state.window = subscriber.openWindow();
    this.schedule(state, windowTimeSpan);
}
function dispatchWindowCreation(state) {
    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
    var window = subscriber.openWindow();
    var action = this;
    var context = { action: action, subscription: null };
    var timeSpanState = { subscriber: subscriber, window: window, context: context };
    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
    action.add(context.subscription);
    action.schedule(state, windowCreationInterval);
}
function dispatchWindowClose(state) {
    var subscriber = state.subscriber, window = state.window, context = state.context;
    if (context && context.action && context.subscription) {
        context.action.remove(context.subscription);
    }
    subscriber.closeWindow(window);
}
//# sourceMappingURL=windowTime.js.map


/***/ }),
/* 237 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = windowToggle;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subject__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Subscription__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_tryCatch__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_errorObject__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_Subject,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */







/**
 * Branch out the source Observable values as a nested Observable starting from
 * an emission from `openings` and ending when the output of `closingSelector`
 * emits.
 *
 * <span class="informal">It's like {@link bufferToggle}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowToggle.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits windows that contain those items
 * emitted by the source Observable between the time when the `openings`
 * Observable emits an item and when the Observable returned by
 * `closingSelector` emits an item.
 *
 * @example <caption>Every other second, emit the click events from the next 500ms</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var openings = Rx.Observable.interval(1000);
 * var result = clicks.windowToggle(openings, i =>
 *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()
 * ).mergeAll();
 * result.subscribe(x => console.log(x));
 *
 * @see {@link window}
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowWhen}
 * @see {@link bufferToggle}
 *
 * @param {Observable<O>} openings An observable of notifications to start new
 * windows.
 * @param {function(value: O): Observable} closingSelector A function that takes
 * the value emitted by the `openings` observable and returns an Observable,
 * which, when it emits (either `next` or `complete`), signals that the
 * associated window should complete.
 * @return {Observable<Observable<T>>} An observable of windows, which in turn
 * are Observables.
 * @method windowToggle
 * @owner Observable
 */
function windowToggle(openings, closingSelector) {
    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };
}
var WindowToggleOperator = /*@__PURE__*/ (function () {
    function WindowToggleOperator(openings, closingSelector) {
        this.openings = openings;
        this.closingSelector = closingSelector;
    }
    WindowToggleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
    };
    return WindowToggleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowToggleSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](WindowToggleSubscriber, _super);
    function WindowToggleSubscriber(destination, openings, closingSelector) {
        var _this = _super.call(this, destination) || this;
        _this.openings = openings;
        _this.closingSelector = closingSelector;
        _this.contexts = [];
        _this.add(_this.openSubscription = Object(__WEBPACK_IMPORTED_MODULE_6__util_subscribeToResult__["a" /* subscribeToResult */])(_this, openings, openings));
        return _this;
    }
    WindowToggleSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        if (contexts) {
            var len = contexts.length;
            for (var i = 0; i < len; i++) {
                contexts[i].window.next(value);
            }
        }
    };
    WindowToggleSubscriber.prototype._error = function (err) {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context_1 = contexts[index];
                context_1.window.error(err);
                context_1.subscription.unsubscribe();
            }
        }
        _super.prototype._error.call(this, err);
    };
    WindowToggleSubscriber.prototype._complete = function () {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context_2 = contexts[index];
                context_2.window.complete();
                context_2.subscription.unsubscribe();
            }
        }
        _super.prototype._complete.call(this);
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    WindowToggleSubscriber.prototype._unsubscribe = function () {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context_3 = contexts[index];
                context_3.window.unsubscribe();
                context_3.subscription.unsubscribe();
            }
        }
    };
    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (outerValue === this.openings) {
            var closingSelector = this.closingSelector;
            var closingNotifier = Object(__WEBPACK_IMPORTED_MODULE_3__util_tryCatch__["a" /* tryCatch */])(closingSelector)(innerValue);
            if (closingNotifier === __WEBPACK_IMPORTED_MODULE_4__util_errorObject__["a" /* errorObject */]) {
                return this.error(__WEBPACK_IMPORTED_MODULE_4__util_errorObject__["a" /* errorObject */].e);
            }
            else {
                var window_1 = new __WEBPACK_IMPORTED_MODULE_1__Subject__["a" /* Subject */]();
                var subscription = new __WEBPACK_IMPORTED_MODULE_2__Subscription__["a" /* Subscription */]();
                var context_4 = { window: window_1, subscription: subscription };
                this.contexts.push(context_4);
                var innerSubscription = Object(__WEBPACK_IMPORTED_MODULE_6__util_subscribeToResult__["a" /* subscribeToResult */])(this, closingNotifier, context_4);
                if (innerSubscription.closed) {
                    this.closeWindow(this.contexts.length - 1);
                }
                else {
                    innerSubscription.context = context_4;
                    subscription.add(innerSubscription);
                }
                this.destination.next(window_1);
            }
        }
        else {
            this.closeWindow(this.contexts.indexOf(outerValue));
        }
    };
    WindowToggleSubscriber.prototype.notifyError = function (err) {
        this.error(err);
    };
    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
        if (inner !== this.openSubscription) {
            this.closeWindow(this.contexts.indexOf(inner.context));
        }
    };
    WindowToggleSubscriber.prototype.closeWindow = function (index) {
        if (index === -1) {
            return;
        }
        var contexts = this.contexts;
        var context = contexts[index];
        var window = context.window, subscription = context.subscription;
        contexts.splice(index, 1);
        window.complete();
        subscription.unsubscribe();
    };
    return WindowToggleSubscriber;
}(__WEBPACK_IMPORTED_MODULE_5__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=windowToggle.js.map


/***/ }),
/* 238 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = windowWhen;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Subject__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_tryCatch__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_errorObject__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */






/**
 * Branch out the source Observable values as a nested Observable using a
 * factory function of closing Observables to determine when to start a new
 * window.
 *
 * <span class="informal">It's like {@link bufferWhen}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowWhen.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits connected, non-overlapping windows.
 * It emits the current window and opens a new one whenever the Observable
 * produced by the specified `closingSelector` function emits an item. The first
 * window is opened immediately when subscribing to the output Observable.
 *
 * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks
 *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))
 *   .map(win => win.take(2)) // each window has at most 2 emissions
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @see {@link window}
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link bufferWhen}
 *
 * @param {function(): Observable} closingSelector A function that takes no
 * arguments and returns an Observable that signals (on either `next` or
 * `complete`) when to close the previous window and start a new one.
 * @return {Observable<Observable<T>>} An observable of windows, which in turn
 * are Observables.
 * @method windowWhen
 * @owner Observable
 */
function windowWhen(closingSelector) {
    return function windowWhenOperatorFunction(source) {
        return source.lift(new WindowOperator(closingSelector));
    };
}
var WindowOperator = /*@__PURE__*/ (function () {
    function WindowOperator(closingSelector) {
        this.closingSelector = closingSelector;
    }
    WindowOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));
    };
    return WindowOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](WindowSubscriber, _super);
    function WindowSubscriber(destination, closingSelector) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.closingSelector = closingSelector;
        _this.openWindow();
        return _this;
    }
    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openWindow(innerSub);
    };
    WindowSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
        this.openWindow(innerSub);
    };
    WindowSubscriber.prototype._next = function (value) {
        this.window.next(value);
    };
    WindowSubscriber.prototype._error = function (err) {
        this.window.error(err);
        this.destination.error(err);
        this.unsubscribeClosingNotification();
    };
    WindowSubscriber.prototype._complete = function () {
        this.window.complete();
        this.destination.complete();
        this.unsubscribeClosingNotification();
    };
    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
        if (this.closingNotification) {
            this.closingNotification.unsubscribe();
        }
    };
    WindowSubscriber.prototype.openWindow = function (innerSub) {
        if (innerSub === void 0) {
            innerSub = null;
        }
        if (innerSub) {
            this.remove(innerSub);
            innerSub.unsubscribe();
        }
        var prevWindow = this.window;
        if (prevWindow) {
            prevWindow.complete();
        }
        var window = this.window = new __WEBPACK_IMPORTED_MODULE_1__Subject__["a" /* Subject */]();
        this.destination.next(window);
        var closingNotifier = Object(__WEBPACK_IMPORTED_MODULE_2__util_tryCatch__["a" /* tryCatch */])(this.closingSelector)();
        if (closingNotifier === __WEBPACK_IMPORTED_MODULE_3__util_errorObject__["a" /* errorObject */]) {
            var err = __WEBPACK_IMPORTED_MODULE_3__util_errorObject__["a" /* errorObject */].e;
            this.destination.error(err);
            this.window.error(err);
        }
        else {
            this.add(this.closingNotification = Object(__WEBPACK_IMPORTED_MODULE_5__util_subscribeToResult__["a" /* subscribeToResult */])(this, closingNotifier));
        }
    };
    return WindowSubscriber;
}(__WEBPACK_IMPORTED_MODULE_4__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=windowWhen.js.map


/***/ }),
/* 239 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = withLatestFrom;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__ = __webpack_require__(4);
/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */



/* tslint:enable:max-line-length */
/**
 * Combines the source Observable with other Observables to create an Observable
 * whose values are calculated from the latest values of each, only when the
 * source emits.
 *
 * <span class="informal">Whenever the source Observable emits a value, it
 * computes a formula using that value plus the latest values from other input
 * Observables, then emits the output of that formula.</span>
 *
 * <img src="./img/withLatestFrom.png" width="100%">
 *
 * `withLatestFrom` combines each value from the source Observable (the
 * instance) with the latest values from the other input Observables only when
 * the source emits a value, optionally using a `project` function to determine
 * the value to be emitted on the output Observable. All input Observables must
 * emit at least one value before the output Observable will emit a value.
 *
 * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var result = clicks.withLatestFrom(timer);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link combineLatest}
 *
 * @param {ObservableInput} other An input Observable to combine with the source
 * Observable. More than one input Observables may be given as argument.
 * @param {Function} [project] Projection function for combining values
 * together. Receives all values in order of the Observables passed, where the
 * first parameter is a value from the source Observable. (e.g.
 * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not
 * passed, arrays will be emitted on the output Observable.
 * @return {Observable} An Observable of projected values from the most recent
 * values from each input Observable, or an array of the most recent values from
 * each input Observable.
 * @method withLatestFrom
 * @owner Observable
 */
function withLatestFrom() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return function (source) {
        var project;
        if (typeof args[args.length - 1] === 'function') {
            project = args.pop();
        }
        var observables = args;
        return source.lift(new WithLatestFromOperator(observables, project));
    };
}
var WithLatestFromOperator = /*@__PURE__*/ (function () {
    function WithLatestFromOperator(observables, project) {
        this.observables = observables;
        this.project = project;
    }
    WithLatestFromOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
    };
    return WithLatestFromOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WithLatestFromSubscriber = /*@__PURE__*/ (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](WithLatestFromSubscriber, _super);
    function WithLatestFromSubscriber(destination, observables, project) {
        var _this = _super.call(this, destination) || this;
        _this.observables = observables;
        _this.project = project;
        _this.toRespond = [];
        var len = observables.length;
        _this.values = new Array(len);
        for (var i = 0; i < len; i++) {
            _this.toRespond.push(i);
        }
        for (var i = 0; i < len; i++) {
            var observable = observables[i];
            _this.add(Object(__WEBPACK_IMPORTED_MODULE_2__util_subscribeToResult__["a" /* subscribeToResult */])(_this, observable, observable, i));
        }
        return _this;
    }
    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values[outerIndex] = innerValue;
        var toRespond = this.toRespond;
        if (toRespond.length > 0) {
            var found = toRespond.indexOf(outerIndex);
            if (found !== -1) {
                toRespond.splice(found, 1);
            }
        }
    };
    WithLatestFromSubscriber.prototype.notifyComplete = function () {
        // noop
    };
    WithLatestFromSubscriber.prototype._next = function (value) {
        if (this.toRespond.length === 0) {
            var args = [value].concat(this.values);
            if (this.project) {
                this._tryProject(args);
            }
            else {
                this.destination.next(args);
            }
        }
    };
    WithLatestFromSubscriber.prototype._tryProject = function (args) {
        var result;
        try {
            result = this.project.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return WithLatestFromSubscriber;
}(__WEBPACK_IMPORTED_MODULE_1__OuterSubscriber__["a" /* OuterSubscriber */]));
//# sourceMappingURL=withLatestFrom.js.map


/***/ }),
/* 240 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = zip;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__observable_zip__ = __webpack_require__(65);
/** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */

/* tslint:enable:max-line-length */
/**
 * @deprecated Deprecated in favor of static zip.
 */
function zip() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    return function zipOperatorFunction(source) {
        return source.lift.call(__WEBPACK_IMPORTED_MODULE_0__observable_zip__["b" /* zip */].apply(void 0, [source].concat(observables)));
    };
}
//# sourceMappingURL=zip.js.map


/***/ }),
/* 241 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = zipAll;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__observable_zip__ = __webpack_require__(65);
/** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */

function zipAll(project) {
    return function (source) { return source.lift(new __WEBPACK_IMPORTED_MODULE_0__observable_zip__["a" /* ZipOperator */](project)); };
}
//# sourceMappingURL=zipAll.js.map


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(7), __webpack_require__(19), __webpack_require__(22), __webpack_require__(243), __webpack_require__(244), __webpack_require__(13), __webpack_require__(6), __webpack_require__(5), __webpack_require__(72), __webpack_require__(245), __webpack_require__(37)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, jquery_1, rxjs_1, browsers, caret_mark_1, caretMovement, dloc_1, domtypeguards_1, domutil_1, objectCheck, wed_selection_1, wed_util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    jquery_1 = __importDefault(jquery_1);
    browsers = __importStar(browsers);
    caretMovement = __importStar(caretMovement);
    objectCheck = __importStar(objectCheck);
    /**
     * This is the template use with objectCheck to check whether the options passed
     * are correct. Changes to [[SetCaretOptions]] must be reflected here.
     */
    var caretOptionTemplate = {
        textEdit: false,
        focus: false,
    };
    /**
     * Find a previous sibling which is either a text node or a node with the class
     * ``_real``.
     *
     * @param node The element whose sibling we are looking for.
     *
     * @param cl The class to use for matches.
     *
     * @returns The first sibling (searing in reverse document order from ``node``)
     * that matches the class, or ``null`` if nothing matches.
     */
    function previousTextOrReal(node) {
        if (!domtypeguards_1.isElement(node)) {
            return null;
        }
        var child = node.previousSibling;
        while (child !== null &&
            !(domtypeguards_1.isText(child) ||
                (domtypeguards_1.isElement(child) && child.classList.contains("_real")))) {
            child = child.previousSibling;
        }
        return child;
    }
    /**
     * A caret manager maintains and modifies caret and selection positions. It also
     * manages associated GUI elements like the input field. It is also responsible
     * for converting positions in the GUI tree to positions in the data tree and
     * vice-versa.
     *
     * Given wed's notion of parallel data and GUI trees. A caret can either point
     * into the GUI tree or into the data tree. In the following documentation, if
     * the caret is not qualified, then it is a GUI caret.
     *
     * Similarly, a selection can either span a range in the GUI tree or in the data
     * tree. Again, "selection" without qualifier is a GUI selection.
     */
    var CaretManager = /** @class */ (function () {
        /**
         * @param guiRoot The object representing the root of the gui tree.
         *
         * @param dataRoot The object representing the root of the data tree.
         *
         * @param inputField The HTML element that is the input field.
         *
         * @param guiUpdater The GUI updater that is responsible for updating the
         * tree whose root is ``guiRoot``.
         *
         * @param layer The layer that holds the caret.
         *
         * @param scroller The element that scrolls ``guiRoot``.
         *
         * @param modeTree The mode tree from which to get modes.
         */
        function CaretManager(guiRoot, dataRoot, inputField, guiUpdater, layer, scroller, modeTree) {
            var _this = this;
            this.guiRoot = guiRoot;
            this.dataRoot = dataRoot;
            this.inputField = inputField;
            this.guiUpdater = guiUpdater;
            this.layer = layer;
            this.scroller = scroller;
            this.modeTree = modeTree;
            this.selectionStack = [];
            this.mark = new caret_mark_1.CaretMark(this, guiRoot.node.ownerDocument, layer, inputField, scroller);
            var guiRootEl = this.guiRootEl = guiRoot.node;
            this.dataRootEl = dataRoot.node;
            this.doc = guiRootEl.ownerDocument;
            this.win = this.doc.defaultView;
            this.$inputField = jquery_1.default(this.inputField);
            this._events = new rxjs_1.Subject();
            this.events = this._events.asObservable();
            jquery_1.default(this.guiRootEl).on("focus", function (ev) {
                _this.focusInputField();
                ev.preventDefault();
                ev.stopPropagation();
            });
            jquery_1.default(this.win).on("blur.wed", this.onBlur.bind(this));
            jquery_1.default(this.win).on("focus.wed", this.onFocus.bind(this));
        }
        Object.defineProperty(CaretManager.prototype, "caret", {
            /**
             * The raw caret. Use [[getNormalizedCaret]] if you need it normalized.
             *
             * This is synonymous with the focus of the current selection. (`foo.caret ===
             * foo.focus === foo.sel.focus`).
             */
            get: function () {
                return this.focus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CaretManager.prototype, "sel", {
            /**
             * The current selection.
             */
            get: function () {
                return this._sel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CaretManager.prototype, "focus", {
            /**
             * The focus of the current selection.
             */
            get: function () {
                if (this._sel === undefined) {
                    return undefined;
                }
                return this._sel.focus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CaretManager.prototype, "anchor", {
            /**
             * The anchor of the current selection.
             */
            get: function () {
                if (this._sel === undefined) {
                    return undefined;
                }
                return this._sel.anchor;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CaretManager.prototype, "range", {
            /**
             * The range formed by the current selection.
             */
            get: function () {
                var info = this.rangeInfo;
                return info !== undefined ? info.range : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CaretManager.prototype, "rangeInfo", {
            /**
             * A range info object describing the current selection.
             */
            get: function () {
                var sel = this._sel;
                if (sel === undefined) {
                    return undefined;
                }
                return sel.rangeInfo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CaretManager.prototype, "minCaret", {
            get: function () {
                return dloc_1.DLoc.mustMakeDLoc(this.guiRoot, this.guiRootEl, 0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CaretManager.prototype, "maxCaret", {
            get: function () {
                return dloc_1.DLoc.mustMakeDLoc(this.guiRoot, this.guiRootEl, this.guiRootEl.childNodes.length);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CaretManager.prototype, "docDLocRange", {
            get: function () {
                return new dloc_1.DLocRange(this.minCaret, this.maxCaret);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Get a normalized caret.
         *
         * @returns A normalized caret, or ``undefined`` if there is no caret.
         */
        CaretManager.prototype.getNormalizedCaret = function () {
            var caret = this.caret;
            if (caret === undefined) {
                return caret;
            }
            // The node is not in the root. This could be due to a stale location.
            if (!this.guiRootEl.contains(caret.node)) {
                return undefined;
            }
            if (!caret.isValid()) {
                var newSel = new wed_selection_1.WedSelection(this, this.anchor, caret.normalizeOffset());
                this._sel = newSel;
                caret = newSel.focus;
            }
            var normalized = this._normalizeCaret(caret);
            return normalized == null ? undefined : normalized;
        };
        /**
         * Same as [[getNormalizedCaret]] but must return a location.
         *
         * @throws {Error} If it cannot return a location.
         */
        CaretManager.prototype.mustGetNormalizedCaret = function () {
            var ret = this.getNormalizedCaret();
            if (ret === undefined) {
                throw new Error("cannot get a normalized caret");
            }
            return ret;
        };
        CaretManager.prototype.normalizeToEditableRange = function (loc) {
            if (loc.root !== this.guiRootEl) {
                throw new Error("DLoc object must be for the GUI tree");
            }
            var offset = loc.offset;
            var node = loc.node;
            if (domtypeguards_1.isElement(node)) {
                // Normalize to a range within the editable nodes. We could be outside of
                // them in an element which is empty, for instance.
                var mode = this.modeTree.getMode(node);
                var _a = mode.nodesAroundEditableContents(node), first = _a[0], second = _a[1];
                var firstIndex = first !== null ? domutil_1.indexOf(node.childNodes, first) : -1;
                if (offset <= firstIndex) {
                    offset = firstIndex + 1;
                }
                else {
                    var secondIndex = second !== null ?
                        domutil_1.indexOf(node.childNodes, second) : node.childNodes.length;
                    if (offset >= secondIndex) {
                        offset = secondIndex;
                    }
                }
                return loc.makeWithOffset(offset);
            }
            return loc;
        };
        /**
         * Get the current caret position in the data tree.
         *
         * @param approximate Some GUI locations do not correspond to data
         * locations. Like if the location is in a gui element or phantom text. By
         * default, this method will return undefined in such case. If this parameter
         * is true, then this method will return the closest position.
         *
         * @returns A caret position in the data tree, or ``undefined`` if no such
         * position exists.
         */
        CaretManager.prototype.getDataCaret = function (approximate) {
            var caret = this.getNormalizedCaret();
            if (caret === undefined) {
                return undefined;
            }
            return this.toDataLocation(caret, approximate);
        };
        CaretManager.prototype.fromDataLocation = function (node, offset) {
            if (node instanceof dloc_1.DLoc) {
                offset = node.offset;
                node = node.node;
            }
            if (offset === undefined) {
                throw new Error("offset is undefined");
            }
            var ret = this.guiUpdater.fromDataLocation(node, offset);
            if (ret === null) {
                return undefined;
            }
            var newOffset = ret.offset;
            node = ret.node;
            if (domtypeguards_1.isElement(node)) {
                // Normalize to a range within the editable nodes. We could be outside of
                // them in an element which is empty, for instance.
                var mode = this.modeTree.getMode(node);
                var _a = mode.nodesAroundEditableContents(node), first = _a[0], second = _a[1];
                var firstIndex = (first !== null) ? domutil_1.indexOf(node.childNodes, first) :
                    -1;
                if (newOffset <= firstIndex) {
                    newOffset = firstIndex + 1;
                }
                else {
                    var secondIndex = second !== null ? domutil_1.indexOf(node.childNodes, second) :
                        node.childNodes.length;
                    if (newOffset >= secondIndex) {
                        newOffset = secondIndex;
                    }
                }
                return ret.makeWithOffset(newOffset);
            }
            return ret;
        };
        // @ts-ignore
        CaretManager.prototype.mustFromDataLocation = function (node, offset) {
            var ret = this.fromDataLocation.apply(this, arguments);
            if (ret === undefined) {
                throw new Error("cannot convert to a data location");
            }
            return ret;
        };
        // tslint:disable-next-line:cyclomatic-complexity
        CaretManager.prototype.toDataLocation = function (loc, offset, approximate) {
            if (offset === void 0) { offset = false; }
            if (approximate === void 0) { approximate = false; }
            var node;
            var root;
            if (loc instanceof dloc_1.DLoc) {
                if (typeof offset !== "boolean") {
                    throw new Error("2nd argument must be a boolean");
                }
                approximate = offset;
                (offset = loc.offset, node = loc.node, root = loc.root);
            }
            else {
                node = loc;
            }
            if (typeof offset !== "number") {
                throw new Error("offset must be a number");
            }
            var initialCaret = this.makeCaret(node, offset);
            if (domutil_1.closestByClass(node, "_attribute_value", root) === null) {
                var wrap = domutil_1.closestByClass(node, "_phantom_wrap", root);
                if (wrap !== null) {
                    // We are in a phantom wrap. Set position to the real element being
                    // wrapped. This is not considered to be an "approximation" because
                    // _phantom_wrap elements are considered visual parts of the real
                    // element.
                    initialCaret = this.makeCaret(wrap.getElementsByClassName("_real")[0]);
                }
                else {
                    var topPg = void 0;
                    var check = (domtypeguards_1.isText(node) ? node.parentNode : node);
                    while (check !== null && check !== this.guiRootEl) {
                        if ((check.classList.contains("_phantom") ||
                            check.classList.contains("_gui"))) {
                            // We already know that the caller does not want an approximation.
                            // No point in going on.
                            if (!approximate) {
                                return undefined;
                            }
                            topPg = check;
                        }
                        check = check.parentNode;
                    }
                    if (topPg !== undefined) {
                        initialCaret = this.makeCaret(topPg);
                    }
                }
            }
            var normalized = this._normalizeCaret(initialCaret);
            if (normalized == null) {
                return undefined;
            }
            (node = normalized.node, offset = normalized.offset);
            var dataNode = this.dataRoot.pathToNode(this.guiRoot.nodeToPath(node));
            if (domtypeguards_1.isText(node)) {
                return this.makeCaret(dataNode, offset, true);
            }
            if (offset >= node.childNodes.length) {
                return dataNode === null ? undefined :
                    this.makeCaret(dataNode, dataNode.childNodes.length);
            }
            // If pointing to a node that is not a text node or a real element, we must
            // find the previous text node or real element and return a position which
            // points after it.
            var child = node.childNodes[offset];
            if (domtypeguards_1.isElement(child) && !child.classList.contains("_real")) {
                var found = previousTextOrReal(child);
                if (found === null) {
                    return this.makeCaret(dataNode, 0);
                }
                dataNode = this.dataRoot.pathToNode(this.guiRoot.nodeToPath(found));
                if (dataNode === null) {
                    return undefined;
                }
                var parent_1 = dataNode.parentNode;
                return this.makeCaret(parent_1, domutil_1.indexOf(parent_1.childNodes, dataNode) + 1);
            }
            dataNode = this.dataRoot.pathToNode(this.guiRoot.nodeToPath(child));
            return this.makeCaret(dataNode, domtypeguards_1.isAttr(dataNode) ? offset : undefined);
        };
        /**
         * Modify the passed position so that it if appears inside of a placeholder
         * node, the resulting position is moved out of it.
         *
         * @param loc The location to normalize.
         *
         * @returns The normalized position. If ``undefined`` or ``null`` was passed,
         * then the return value is the same as what was passed.
         */
        CaretManager.prototype._normalizeCaret = function (loc) {
            if (loc == null) {
                return loc;
            }
            var pg = domutil_1.closestByClass(loc.node, "_placeholder", loc.root);
            // If we are in a placeholder: make the caret be the parent of the this
            // node.
            return (pg !== null) ? loc.make(pg) : loc;
        };
        /**
         * Make a caret from a node and offset pair.
         *
         * @param node The node from which to make the caret. The node may be in the
         * GUI tree or the data tree. If ``offset`` is omitted, the resulting location
         * will point to this node (rather than point to some offset *inside* the
         * node.)
         *
         * @param offset The offset into the node.
         *
         * @param normalize Whether to normalize the location. (Note that this is
         * normalization in the [[DLoc]] sense of the term.)
         *
         * @returns A new caret. This will be ``undefined`` if the value passed for
         * ``node`` was undefined or if the node is not in the GUI or data trees.
         */
        CaretManager.prototype.makeCaret = function (node, offset, normalize) {
            if (normalize === void 0) { normalize = false; }
            if (node == null) {
                return undefined;
            }
            var root;
            if (this.guiRootEl.contains(node)) {
                root = this.guiRoot;
            }
            else if (domutil_1.contains(this.dataRootEl, node)) {
                root = this.dataRoot;
            }
            if (root === undefined) {
                return undefined;
            }
            return dloc_1.DLoc.mustMakeDLoc(root, node, offset, normalize);
        };
        CaretManager.prototype.setRange = function (anchorNode, anchorOffset, focusNode, focusOffset) {
            var anchor;
            var focus;
            if (anchorNode instanceof dloc_1.DLoc && anchorOffset instanceof dloc_1.DLoc) {
                anchor = anchorNode;
                focus = anchorOffset;
            }
            else {
                anchor = this.makeCaret(anchorNode, anchorOffset);
                focus = this.makeCaret(focusNode, focusOffset);
            }
            if (anchor === undefined || focus === undefined) {
                throw new Error("must provide both anchor and focus");
            }
            if (anchor.root === this.dataRootEl) {
                anchor = this.fromDataLocation(anchor);
                focus = this.fromDataLocation(focus);
                if (anchor === undefined || focus === undefined) {
                    throw new Error("cannot find GUI anchor and focus");
                }
            }
            var sel = this._sel = new wed_selection_1.WedSelection(this, anchor, focus);
            // This check reduces selection fiddling by an order of magnitude when just
            // straightforwardly selecting one character.
            if (this.prevCaret === undefined || !this.prevCaret.equals(focus)) {
                this.mark.refresh();
                var range = sel.range;
                if (range === undefined) {
                    throw new Error("unable to make a range");
                }
                this._setDOMSelectionRange(range);
            }
            this._caretChange();
        };
        /**
         * Compute a position derived from an arbitrary position. Note that
         * this method is meant to be used for positions in the GUI tree. Computing
         * positions in the data tree requires no special algorithm.
         *
         * This method does not allow movement outside of the GUI tree.
         *
         * @param pos The starting position in the GUI tree.
         *
         * @param direction The direction in which to move.
         *
         * @return The position to the right of the starting position. Or
         * ``undefined`` if the starting position was undefined or if there is no
         * valid position to compute.
         */
        CaretManager.prototype.newPosition = function (pos, direction) {
            return caretMovement.newPosition(pos, direction, this.guiRootEl, this.modeTree);
        };
        /**
         * Compute the position of the current caret if it were moved according to
         * some direction.
         *
         * @param direction The direction in which the caret would be moved.
         *
         * @return The position to the right of the caret position. Or ``undefined``
         * if there is no valid position to compute.
         */
        CaretManager.prototype.newCaretPosition = function (direction) {
            return this.newPosition(this.caret, direction);
        };
        /**
         * Move the caret in a specific direction. The caret may not move if it is
         * not possible to move in the specified direction.
         *
         * @param direction The direction in which to move.
         */
        CaretManager.prototype.move = function (direction, extend) {
            if (extend === void 0) { extend = false; }
            var pos = this.newCaretPosition(direction);
            if (pos === undefined) {
                return;
            }
            if (!extend) {
                this.setCaret(pos);
            }
            else {
                var anchor = this.anchor;
                if (anchor !== undefined) {
                    this.setRange(anchor, pos);
                }
            }
        };
        CaretManager.prototype.setCaret = function (node, offset, options) {
            var loc;
            if (node instanceof dloc_1.DLoc) {
                loc = node;
                if (typeof offset === "number") {
                    throw new Error("2nd argument must be options");
                }
                options = offset;
                offset = undefined;
            }
            else {
                if (offset !== undefined && typeof offset !== "number") {
                    throw new Error("2nd argument must be number");
                }
                var newLoc = this.makeCaret(node, offset);
                if (newLoc === undefined) {
                    return;
                }
                loc = newLoc;
            }
            if (options !== undefined) {
                objectCheck.assertSummarily(caretOptionTemplate, options);
            }
            else {
                options = {};
            }
            this._setGUICaret(loc.root === this.guiRootEl ?
                loc : this.fromDataLocation(loc), options);
        };
        /**
         * Set the caret into a normalized label position. There are only some
         * locations in which it is valid to put the caret inside a label:
         *
         * - The element name.
         *
         * - Inside attribute values.
         *
         * This method is used by DOM event handlers (usually mouse events handlers)
         * to normalize the location of the caret to one of the valid locations listed
         * above.
         *
         * @param target The target of the DOM event that requires moving the caret.
         *
         * @param label The label element that contains ``target``.
         *
         * @param location The location of the event, which is what is normalized by
         * this method.
         */
        CaretManager.prototype.setCaretToLabelPosition = function (target, label, location) {
            var node;
            var offset = 0;
            // Note that in the code that follows, the choice between testing against
            // ``target`` or against ``location.node`` is not arbitrary.
            var attr = domutil_1.closestByClass(target, "_attribute", label);
            if (attr !== null) {
                if (domutil_1.closestByClass(location.node, "_attribute_value", label) !== null) {
                    (node = location.node, offset = location.offset);
                }
                else {
                    node = wed_util_1.getAttrValueNode(attr.getElementsByClassName("_attribute_value")[0]);
                }
            }
            else {
                // Find the element name and put it there.
                node = label.getElementsByClassName("_element_name")[0];
            }
            this.setCaret(node, offset);
        };
        /**
         * Save the current selection (and caret) on an internal selection stack.
         */
        CaretManager.prototype.pushSelection = function () {
            this.selectionStack.push(this._sel);
        };
        /**
         * Pop the last selection that was pushed with ``pushSelection`` and restore
         * the current caret and selection on the basis of the popped value.
         */
        CaretManager.prototype.popSelection = function () {
            this._sel = this.selectionStack.pop();
            this._restoreCaretAndSelection(false);
        };
        /**
         * Pop the last selection that was pushed with ``pushSelection`` but do not
         * restore the current caret and selection from the popped value.
         */
        CaretManager.prototype.popSelectionAndDiscard = function () {
            this.selectionStack.pop();
        };
        /**
         * Restores the caret and selection from the current selection. This is used
         * to deal with situations in which the caret and range may have been
         * "damaged" due to browser operations, changes of state, etc.
         *
         * @param gainingFocus Whether the restoration of the caret and selection is
         * due to regaining focus or not.
         */
        CaretManager.prototype._restoreCaretAndSelection = function (gainingFocus) {
            if (this.caret !== undefined && this.anchor !== undefined &&
                // It is possible that the anchor has been removed after focus was lost
                // so check for it.
                this.guiRootEl.contains(this.anchor.node)) {
                var range = this.range;
                if (range === undefined) {
                    throw new Error("could not make a range");
                }
                this._setDOMSelectionRange(range);
                // We're not selecting anything...
                if (range.collapsed) {
                    this.focusInputField();
                }
                this.mark.refresh();
                this._caretChange({ gainingFocus: gainingFocus });
            }
            else {
                this.clearSelection();
            }
        };
        /**
         * Clear the selection and caret.
         */
        CaretManager.prototype.clearSelection = function () {
            this._sel = undefined;
            this.mark.refresh();
            var sel = this._getDOMSelection();
            if (sel.rangeCount > 0 && this.guiRootEl.contains(sel.focusNode)) {
                sel.removeAllRanges();
            }
            this._caretChange();
        };
        /**
         * Get the current selection from the DOM tree.
         */
        CaretManager.prototype._getDOMSelectionRange = function () {
            var range = domutil_1.getSelectionRange(this.win);
            if (range === undefined) {
                return undefined;
            }
            // Don't return a range outside our editing framework.
            if (!this.guiRootEl.contains(range.startContainer) ||
                !this.guiRootEl.contains(range.endContainer)) {
                return undefined;
            }
            return range;
        };
        /**
         * This function is meant to be used internally to manipulate the DOM
         * selection directly.
         */
        CaretManager.prototype._setDOMSelectionRange = function (range) {
            if (range.collapsed) {
                this._clearDOMSelection();
                return;
            }
            // tslint:disable-next-line:no-suspicious-comment
            // The focusTheNode call is required to work around bug:
            // https://bugzilla.mozilla.org/show_bug.cgi?id=921444
            if (browsers.FIREFOX) {
                domutil_1.focusNode(range.endContainer);
            }
            var sel = this._getDOMSelection();
            sel.removeAllRanges();
            sel.addRange(range);
        };
        /**
         * Sets the caret position in the GUI tree.
         *
         * @param loc The new position.
         *
         * @param options Set of options governing the caret movement.
         */
        CaretManager.prototype._setGUICaret = function (loc, options) {
            var offset = loc.offset;
            var node = loc.node;
            // We accept a location which has for ``node`` a node which is an
            // _attribute_value with an offset. However, this is not an actually valid
            // caret location. So we normalize the location to point inside the text
            // node that contains the data.
            if (domtypeguards_1.isElement(node)) {
                if (node.classList.contains("_attribute_value")) {
                    var attr = wed_util_1.getAttrValueNode(node);
                    if (node !== attr) {
                        node = attr;
                        loc = loc.make(node, offset);
                    }
                }
                // Placeholders attract adjacent carets into them.
                var ph = domutil_1.childByClass(node, "_placeholder");
                if (ph !== null && !ph.classList.contains("_dying")) {
                    node = ph;
                    offset = 0;
                    loc = loc.make(node, offset);
                }
            }
            // Don't update if noop.
            if (this.caret !== undefined &&
                this.anchor === this.caret &&
                this.caret.node === node &&
                this.caret.offset === offset) {
                return;
            }
            // If we do not want to gain focus, we also don't want to take it away
            // from somewhere else, so don't change the DOM.
            if (options.focus !== false) {
                this._clearDOMSelection(true);
            }
            this._sel = new wed_selection_1.WedSelection(this, loc);
            this.mark.refresh();
            if (options.focus !== false) {
                this.focusInputField();
            }
            this._caretChange(options);
        };
        /**
         * Emit a caret change event.
         */
        CaretManager.prototype._caretChange = function (options) {
            if (options === void 0) { options = {}; }
            var prevCaret = this.prevCaret;
            var caret = this.caret;
            var mode = caret !== undefined ?
                this.modeTree.getMode(caret.node) : undefined;
            if (prevCaret === undefined || !prevCaret.equals(caret)) {
                this._events.next({
                    manager: this,
                    caret: caret,
                    mode: mode,
                    prevCaret: prevCaret,
                    prevMode: this.prevMode,
                    options: options,
                });
                this.prevCaret = caret;
                this.prevMode = mode;
            }
        };
        CaretManager.prototype._clearDOMSelection = function (dontFocus) {
            if (dontFocus === void 0) { dontFocus = false; }
            this._getDOMSelection().removeAllRanges();
            // Make sure the focus goes back there.
            if (!dontFocus) {
                this.focusInputField();
            }
        };
        CaretManager.prototype._getDOMSelection = function () {
            return this.win.getSelection();
        };
        /**
         * Focus the field use for input events.  It is used by wed on some occasions
         * where it is needed. Mode authors should never need to call this. If they do
         * find that calling this helps solve a problem they ran into, they probably
         * should file an issue report.
         */
        CaretManager.prototype.focusInputField = function () {
            // The following call was added to satisfy IE 11. The symptom is that when
            // clicking on an element's label **on a fresh window that has never
            // received focus**, it is not possible to move off the label using the
            // keyboard. This issue happens only with IE 11.
            this.win.focus();
            // The call to blur here is here ***only*** to satisfy Chrome 29!
            this.$inputField.blur();
            this.$inputField.focus();
        };
        /**
         * This is called when the editing area is blurred. This is not something you
         * should be calling in a mode's implementation. It is public because other
         * parts of wed need to call it.
         */
        CaretManager.prototype.onBlur = function () {
            if (this.caret === undefined) {
                return;
            }
            this.selAtBlur = this._sel;
            this.$inputField.blur();
            this._sel = undefined;
            this.mark.refresh();
        };
        CaretManager.prototype.onFocus = function () {
            if (this.selAtBlur !== undefined) {
                this._sel = this.selAtBlur;
                this._restoreCaretAndSelection(true);
                this.selAtBlur = undefined;
            }
        };
        CaretManager.prototype.highlightRange = function (range) {
            var domRange = range.mustMakeDOMRange();
            var grPosition = this.scroller.getBoundingClientRect();
            var topOffset = this.scroller.scrollTop - grPosition.top;
            var leftOffset = this.scroller.scrollLeft - grPosition.left;
            var highlight = this.doc.createElement("div");
            for (var _i = 0, _a = Array.from(domRange.getClientRects()); _i < _a.length; _i++) {
                var rect = _a[_i];
                var highlightPart = this.doc.createElement("div");
                highlightPart.className = "_wed_highlight";
                highlightPart.style.top = rect.top + topOffset + "px";
                highlightPart.style.left = rect.left + leftOffset + "px";
                highlightPart.style.height = rect.height + "px";
                highlightPart.style.width = rect.width + "px";
                highlight.appendChild(highlightPart);
            }
            this.layer.append(highlight);
            return highlight;
        };
        /**
         * Dump to the console caret-specific information.
         */
        CaretManager.prototype.dumpCaretInfo = function () {
            var dataCaret = this.getDataCaret();
            /* tslint:disable:no-console */
            if (dataCaret !== undefined) {
                console.log("data caret", dataCaret.node, dataCaret.offset);
            }
            else {
                console.log("no data caret");
            }
            if (this.anchor !== undefined) {
                console.log("selection anchor", this.anchor.node, this.anchor.offset);
            }
            else {
                console.log("no selection anchor");
            }
            var caret = this.caret;
            if (caret !== undefined) {
                var node = caret.node, offset = caret.offset;
                console.log("selection focus", node, offset);
                console.log("selection focus closest real", domutil_1.closestByClass(node, "_real", this.guiRootEl));
                if (domtypeguards_1.isText(node)) {
                    if (offset < node.data.length) {
                        var range = this.doc.createRange();
                        range.setStart(node, offset);
                        range.setEnd(node, offset + 1);
                        var rect = range.getBoundingClientRect();
                        console.log("rectangle around character at caret:", rect);
                    }
                }
            }
            else {
                console.log("no selection focus");
            }
            domutil_1.dumpRange("DOM range: ", this._getDOMSelectionRange());
            console.log("input field location", this.inputField.style.top, this.inputField.style.left);
            console.log("document.activeElement", document.activeElement);
            /* tslint:enable:no-console */
        };
        return CaretManager;
    }());
    exports.CaretManager = CaretManager;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL wed's DLoc sel setCaret clearDOMSelection rst focusTheNode
//  LocalWords:  bugzilla nd noop activeElement px rect grPosition topOffset
//  LocalWords:  leftOffset
//# sourceMappingURL=caret-manager.js.map

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * This module implements the "caret mark". The "caret mark" is the graphical
 * indicator showing the position of the caret.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(6), __webpack_require__(37)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, domtypeguards_1, wed_util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * The "caret mark" is the graphical indicator
     * showing the position of the caret.
     */
    var CaretMark = /** @class */ (function () {
        /**
         * @param manager The caret manager that holds this marker.
         *
         * @param doc The document in which the caret is located.
         *
         * @param layer The layer that holds the caret.
         *
         * @param inputField The input field element that ought to be moved with the
         * caret.
         *
         * @param scroller The scroller element that contains the editor document for
         * which we are managing a caret.
         */
        function CaretMark(manager, doc, layer, inputField, scroller) {
            this.manager = manager;
            this.layer = layer;
            this.inputField = inputField;
            this.scroller = scroller;
            this.suspended = 0;
            this.pendingRefresh = false;
            var el = this.el = doc.createElement("span");
            el.className = "_wed_caret";
            el.setAttribute("contenteditable", "false");
            el.textContent = " ";
            var dummy = this.dummy = doc.createElement("span");
            dummy.textContent = "\u00A0";
            dummy.style.height = "100%";
            dummy.style.width = "1px";
            dummy.style.maxWidth = "1px";
            this.boundRefresh = this.refresh.bind(this);
        }
        /**
         * Suspend refreshing the caret. Calling this function multiple times
         * increases the suspension count. [[resume]] must be called an equal number
         * of times before refreshes are resumed.
         */
        CaretMark.prototype.suspend = function () {
            this.suspended++;
        };
        /**
         * Resume refreshing the caret. This must be called the same number of times
         * [[suspend]] was called before refreshing is actually resumed.
         *
         * This function checks whether anything called [[refresh]] while refreshing
         * was suspended, and if so will call [[refresh]] as soon as refreshing is
         * resumed.
         */
        CaretMark.prototype.resume = function () {
            this.suspended--;
            if (this.suspended < 0) {
                throw new Error("too many calls to resume");
            }
            if (this.pendingRefresh) {
                this.refresh();
                this.pendingRefresh = false;
            }
        };
        /**
         * Refreshes the caret position on screen. If refreshing has been suspended,
         * it records that a refresh was requested but does not actually refresh the
         * caret.
         */
        CaretMark.prototype.refresh = function () {
            if (this.suspended > 0) {
                this.pendingRefresh = true;
                return;
            }
            var el = this.el;
            var caret = this.manager.caret;
            if (caret == null) {
                // We do not remove the fake caret from the DOM here because seeing
                // the caret position when the user is doing work outside the editing
                // pane is useful.
                return;
            }
            var boundary = wed_util_1.boundaryXY(caret);
            var grPosition = this.scroller.getBoundingClientRect();
            var top = boundary.top - grPosition.top + this.scroller.scrollTop;
            var left = boundary.left - grPosition.left + this.scroller.scrollLeft;
            var node = caret.node;
            var heightNode = domtypeguards_1.isElement(node) ? node : node.parentNode;
            var height = getComputedStyle(heightNode).lineHeight;
            var topStr = top + "px";
            var leftStr = left + "px";
            el.style.top = topStr;
            el.style.left = leftStr;
            el.style.height = height;
            el.style.maxHeight = height;
            el.style.minHeight = height;
            // If the fake caret has been removed from the DOM, reinsert it.
            if (el.parentNode === null) {
                this.layer.append(this.el);
            }
            var inputField = this.inputField;
            if (Number(inputField.style.zIndex) > 0) {
                inputField.style.top = topStr;
                inputField.style.left = leftStr;
            }
            else {
                inputField.style.top = "";
                inputField.style.left = "";
            }
        };
        /**
         * @returns The coordinates of the caret marker relative to the scroller.
         */
        CaretMark.prototype.getPositionFromScroller = function () {
            // This function may be called when the caret layer is invisible. So we
            // can't rely on offset. Fortunately, the CSS values are what we want, so...
            var el = this.el;
            // Given our usage scenario, left and top cannot be null.
            var pos = {
                left: Number(el.style.left.replace("px", "")),
                top: Number(el.style.top.replace("px", "")),
            };
            if (isNaN(pos.left) || isNaN(pos.top)) {
                throw new Error("NAN for left or top");
            }
            return pos;
        };
        Object.defineProperty(CaretMark.prototype, "inDOM", {
            /**
             * @returns True if the caret is in the DOM tree, false otherwise.
             */
            get: function () {
                return this.el.parentNode !== null;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Scroll the mark into view.
         */
        CaretMark.prototype.scrollIntoView = function () {
            var pos = this.getPositionFromScroller();
            var rect = this.getBoundingClientRect();
            this.scroller.scrollIntoView(pos.left, pos.top, pos.left + rect.width, pos.top + rect.height);
        };
        /**
         * @returns The bounding client rectangle of the DOM element associated with
         * this marker.
         */
        CaretMark.prototype.getBoundingClientRect = function () {
            return this.el.getBoundingClientRect();
        };
        return CaretMark;
    }());
    exports.CaretMark = CaretMark;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL scroller contenteditable px
//# sourceMappingURL=caret-mark.js.map

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Library of caret movement computations.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(6), __webpack_require__(5), __webpack_require__(37)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, domtypeguards_1, domutil_1, wed_util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function moveInAttributes(node, modeTree) {
        return modeTree.getAttributeHandling(node) === "edit";
    }
    /**
     * @param pos The position form which we start.
     *
     * @param root The root of the DOM tree within which we move.
     *
     * @param after Whether we are to move after the placeholder (``true``) or not
     * (``false``).
     *
     * @returns If called with a position inside a placeholder, return a position
     * outside of the placeholder. Otherwise, return the position unchanged.
     */
    function moveOutOfPlaceholder(pos, root, after) {
        // If we are in a placeholder node, immediately move out of it.
        var closestPh = domutil_1.closestByClass(pos.node, "_placeholder", root);
        if (closestPh !== null) {
            var parent_1 = closestPh.parentNode;
            var index = domutil_1.indexOf(parent_1.childNodes, closestPh);
            if (after) {
                index++;
            }
            pos = pos.make(parent_1, index);
        }
        return pos;
    }
    /**
     * Determines what should be used as the "container" for caret movement
     * purposes. The "container" is the element within which caret movements are
     * constrained. (The caret cannot move out of it.)
     *
     * @param docRoot The root element of the document being edited by wed.
     *
     * @returns A container that can be used by the caret movement functions.
     */
    function determineContainer(docRoot) {
        var container = docRoot.firstChild;
        if (!domtypeguards_1.isElement(container)) {
            throw new Error("docRoot does not contain an element");
        }
        // This takes care of the special case where we have an empty document that
        // contains only a placeholder. In such case, setting the container to
        // docRoot.firstChild will have a perverse effect of setting the container to
        // be **inside** the current pos.
        if (container.classList.contains("_placeholder")) {
            container = docRoot;
        }
        return container;
    }
    /**
     * Determine whether a position is within the editable content of an element or
     * outside of it. Modes often decorate elements by adding decorations before and
     * after the content of the element. These are not editable, and should be
     * skipped by caret movement.
     *
     * @param element The element in which the caret is appearing.
     *
     * @param offset The offset into the element at which the caret is positioned.
     *
     * @param modeTree The mode tree from which to get a mode.
     *
     * @returns ``true`` if we are inside editable content, ``false`` otherwise.
     */
    function insideEditableContent(element, offset, modeTree) {
        var mode = modeTree.getMode(element);
        var _a = mode.nodesAroundEditableContents(element), before = _a[0], after = _a[1];
        // If the element has nodes before editable contents and the caret would
        // be before or among such nodes, then ...
        if (before !== null && domutil_1.indexOf(element.childNodes, before) >= offset) {
            return false;
        }
        // If the element has nodes after editable contents and the caret would be
        // after or among such nodes, then ...
        if (after !== null && domutil_1.indexOf(element.childNodes, after) < offset) {
            return false;
        }
        return true;
    }
    /**
     * @returns ``true`` if ``prev`` and ``next`` are both decorated; ``false``
     * otherwise.
     */
    function bothDecorated(prev, next) {
        if (next === undefined || prev === undefined) {
            return false;
        }
        var nextFirst = next.firstChild;
        var prevLast = prev.lastChild;
        return domtypeguards_1.isElement(nextFirst) &&
            nextFirst.classList.contains("_gui") &&
            !nextFirst.classList.contains("_invisible") &&
            domtypeguards_1.isElement(prevLast) &&
            prevLast.classList.contains("_gui") &&
            !prevLast.classList.contains("_invisible");
    }
    /**
     * Find the first node in a set of nodes which is such that the reference node
     * **precedes** it.
     *
     * @param haystack The nodes to search.
     *
     * @param ref The reference node.
     *
     * @returns The first node in ``haystack`` which does not precede ``ref``.
     */
    function findNext(haystack, ref) {
        var arr = Array.prototype.slice.call(haystack);
        for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
            var x = arr_1[_i];
            // tslint:disable-next-line:no-bitwise
            if ((x.compareDocumentPosition(ref) &
                Node.DOCUMENT_POSITION_PRECEDING) !== 0) {
                return x;
            }
        }
        return undefined;
    }
    var directionToFunction = {
        right: positionRight,
        left: positionLeft,
        up: positionUp,
        down: positionDown,
    };
    function newPosition(pos, direction, docRoot, modeTree) {
        var fn = directionToFunction[direction];
        if (fn === undefined) {
            throw new Error("cannot resolve direction: " + direction);
        }
        return fn(pos, docRoot, modeTree);
    }
    exports.newPosition = newPosition;
    /**
     * Compute the position to the right of a starting position. This function takes
     * into account wed-specific needs. For instance, it knows how start and end
     * labels are structured.
     *
     * @param pos The position at which we start.
     *
     * @param docRoot The element within which caret movement is to be constrained.
     *
     * @param modeTree The mode tree from which to get a mode.
     *
     * @returns The new position, or ``undefined`` if there is no such position.
     */
    // tslint:disable-next-line:cyclomatic-complexity max-func-body-length
    function positionRight(pos, docRoot, modeTree) {
        if (pos == null) {
            return undefined;
        }
        var root = pos.root;
        // If we are in a placeholder node, immediately move out of it.
        pos = moveOutOfPlaceholder(pos, root, true);
        var container = determineContainer(docRoot);
        // tslint:disable-next-line:strict-boolean-expressions no-constant-condition
        while (true) {
            var guiBefore = domutil_1.closestByClass(pos.node, "_gui", root);
            var nextCaret = domutil_1.nextCaretPosition(pos.toArray(), container, false);
            if (nextCaret === null) {
                pos = null;
                break;
            }
            pos = pos.make(nextCaret);
            var node = pos.node, offset = pos.offset;
            var closestGUI = domutil_1.closest(node, "._gui:not(._invisible)", root);
            if (closestGUI !== null) {
                var startLabel = closestGUI.classList.contains("__start_label");
                if (startLabel &&
                    moveInAttributes(domutil_1.closestByClass(closestGUI, "_real", root), modeTree)) {
                    if (domutil_1.closestByClass(node, "_attribute_value", root) !== null) {
                        // We're in an attribute value, stop here.
                        break;
                    }
                    // Already in the element name, or in a previous attribute, move from
                    // attribute to attribute.
                    if (domutil_1.closest(node, "._element_name, ._attribute", root) !== null) {
                        // Search for the next attribute.
                        var nextAttr = findNext(closestGUI.getElementsByClassName("_attribute"), node);
                        if (nextAttr !== undefined) {
                            // There is a next attribute: move to it.
                            var val = wed_util_1.getAttrValueNode(domutil_1.childByClass(nextAttr, "_attribute_value"));
                            pos = pos.make(val, 0);
                            break;
                        }
                    }
                    // else fall through and move to end of gui element.
                }
                if (guiBefore === closestGUI) {
                    // Move to the end of the gui element ...
                    pos = pos.make(closestGUI, closestGUI.childNodes.length);
                    // ... and then out of it.
                    continue;
                }
                pos = pos.make(
                // If in a label, normalize to element name. If in another kind of gui
                // element, normalize to start of the element.
                (startLabel || domutil_1.closestByClass(node, "_label", closestGUI) !== null) ?
                    node.getElementsByClassName("_element_name")[0] :
                    closestGUI, 0);
                // ... stop here.
                break;
            }
            // Can't stop inside a phantom node.
            var closestPhantom = domutil_1.closestByClass(node, "_phantom", root);
            if (closestPhantom !== null) {
                // This ensures the next loop will move after the phantom.
                pos = pos.make(closestPhantom, closestPhantom.childNodes.length);
                continue;
            }
            // Or beyond the first position in a placeholder node.
            var closestPh = domutil_1.closestByClass(node, "_placeholder", root);
            if (closestPh !== null && offset > 0) {
                // This ensures the next loop will move after the placeholder.
                pos = pos.make(closestPh, closestPh.childNodes.length);
                continue;
            }
            // Make sure the position makes sense from an editing standpoint.
            if (domtypeguards_1.isElement(node)) {
                var nextNode = node.childNodes[offset];
                // Always move into text
                if (domtypeguards_1.isText(nextNode)) {
                    continue;
                }
                var prevNode = node.childNodes[offset - 1];
                // Stop between two decorated elements.
                if (bothDecorated(prevNode, nextNode)) {
                    break;
                }
                if (domtypeguards_1.isElement(prevNode) &&
                    // We do not stop in front of element nodes.
                    ((domtypeguards_1.isElement(nextNode) &&
                        !nextNode.classList.contains("_end_wrapper") &&
                        !prevNode.classList.contains("_start_wrapper")) ||
                        prevNode.matches("._wed-validation-error, ._gui.__end_label"))) {
                    // can't stop here
                    continue;
                }
                // If the offset is not inside the editable content of the node, then...
                if (!insideEditableContent(node, offset, modeTree)) {
                    // ... can't stop here.
                    continue;
                }
            }
            // If we get here, the position is good!
            break;
        }
        return pos !== null ? pos : undefined;
    }
    exports.positionRight = positionRight;
    /**
     * Compute the position to the left of a starting position. This function takes
     * into account wed-specific needs. For instance, it knows how start and end
     * labels are structured.
     *
     * @param pos The position at which we start.
     *
     * @param docRoot The element within which caret movement is to be constrained.
     *
     * @param modeTree The mode tree from which to get a mode.
     *
     * @returns The new position, or ``undefined`` if there is no such position.
     */
    // tslint:disable-next-line:cyclomatic-complexity max-func-body-length
    function positionLeft(pos, docRoot, modeTree) {
        if (pos == null) {
            return undefined;
        }
        var root = pos.root;
        // If we are in a placeholder node, immediately move out of it.
        pos = moveOutOfPlaceholder(pos, root, false);
        var container = determineContainer(docRoot);
        // tslint:disable-next-line:strict-boolean-expressions no-constant-condition
        while (true) {
            var elName = domutil_1.closestByClass(pos.node, "_element_name", root);
            var wasInName = (pos.node === elName) && (pos.offset === 0);
            var prevCaret = domutil_1.prevCaretPosition(pos.toArray(), container, false);
            if (prevCaret === null) {
                pos = null;
                break;
            }
            pos = pos.make(prevCaret);
            var node = pos.node;
            var offset = pos.offset;
            var closestGUI = domutil_1.closest(node, "._gui:not(._invisible)", root);
            if (closestGUI !== null) {
                var startLabel = closestGUI.classList.contains("__start_label");
                if (startLabel && !wasInName &&
                    moveInAttributes(domutil_1.closestByClass(closestGUI, "_real", root), modeTree)) {
                    if (domutil_1.closestByClass(node, "_attribute_value", closestGUI) !== null) {
                        // We're in an attribute value, stop here.
                        break;
                    }
                    var attr = domutil_1.closestByClass(node, "_attribute", closestGUI);
                    if (attr === null &&
                        domtypeguards_1.isElement(node) &&
                        node.nextElementSibling !== null &&
                        node.nextElementSibling.classList.contains("_attribute")) {
                        attr = node.nextElementSibling;
                    }
                    if (attr === null) {
                        elName = domutil_1.closestByClass(node, "_element_name", closestGUI);
                        attr = elName !== null ? elName.nextElementSibling : null;
                    }
                    var prevAttr = attr !== null ? attr.previousElementSibling : null;
                    // If we have not yet found anything, then the
                    // previous attribute is the last one.
                    if (prevAttr === null) {
                        var all = closestGUI.getElementsByClassName("_attribute");
                        if (all.length > 0) {
                            prevAttr = all[all.length - 1];
                        }
                    }
                    // Eliminate those elements which are not attributes.
                    if (prevAttr !== null && !prevAttr.classList.contains("_attribute")) {
                        prevAttr = null;
                    }
                    if (prevAttr !== null) {
                        // There is a previous attribute: move to it.
                        var val = domutil_1.childByClass(prevAttr, "_attribute_value");
                        offset = 0;
                        if (val.lastChild !== null) {
                            val = val.lastChild;
                            if (domtypeguards_1.isElement(val) && val.classList.contains("_placeholder")) {
                                offset = 0;
                            }
                            else if (domtypeguards_1.isText(val)) {
                                offset = val.length;
                            }
                            else {
                                throw new Error("unexpected content in attribute value");
                            }
                        }
                        pos = pos.make(val, offset);
                        break;
                    }
                }
                if (!wasInName) {
                    pos = pos.make(
                    // If we are in any label, normalize to the element name, otherwise
                    // normalize to the first position in the gui element.
                    (startLabel ||
                        domutil_1.closestByClass(node, "_label", closestGUI) !== null) ?
                        closestGUI.getElementsByClassName("_element_name")[0]
                        : closestGUI, 0);
                    break;
                }
                // ... move to start of gui element ...
                pos = pos.make(closestGUI, 0);
                // ... and then out of it.
                continue;
            }
            var closestPh = domutil_1.closestByClass(node, "_placeholder", root);
            if (closestPh !== null) {
                // Stopping in a placeholder is fine, but normalize the position to the
                // start of the text.
                pos = pos.make(closestPh.firstChild, 0);
                break;
            }
            // Can't stop inside a phantom node.
            var closestPhantom = domutil_1.closestByClass(node, "_phantom", root);
            if (closestPhantom !== null) {
                // Setting the position to this will ensure that on the next loop we move
                // to the left of the phantom node.
                pos = pos.make(closestPhantom, 0);
                continue;
            }
            // Make sure the position makes sense from an editing standpoint.
            if (domtypeguards_1.isElement(node)) {
                var prevNode = node.childNodes[offset - 1];
                // Always move into text
                if (domtypeguards_1.isText(prevNode)) {
                    continue;
                }
                var nextNode = node.childNodes[offset];
                // Stop between two decorated elements.
                if (bothDecorated(prevNode, nextNode)) {
                    break;
                }
                if (domtypeguards_1.isElement(nextNode) &&
                    // We do not stop just before a start tag button.
                    ((domtypeguards_1.isElement(prevNode) &&
                        !prevNode.classList.contains("_start_wrapper") &&
                        !nextNode.classList.contains("_end_wrapper")) ||
                        // Can't stop right before a validation error.
                        nextNode.matches("._gui.__start_label, .wed-validation-error"))) {
                    continue;
                } // can't stop here
                // If the offset is not inside the editable content of the node, then...
                if (!insideEditableContent(node, offset, modeTree)) {
                    // ... can't stop here.
                    continue;
                }
            }
            // If we get here, the position is good!
            break;
        }
        return pos !== null ? pos : undefined;
    }
    exports.positionLeft = positionLeft;
    /**
     * Compute the position under a starting position. This function takes into
     * account wed-specific needs. For instance, it knows how start and end labels
     * are structured.
     *
     * @param pos The position at which we start.
     *
     * @param docRoot The element within which caret movement is to be constrained.
     *
     * @param modeTree The mode tree from which to get a mode.
     *
     * @returns The new position, or ``undefined`` if there is no such position.
     */
    function positionDown(pos, docRoot, modeTree) {
        if (pos == null) {
            return undefined;
        }
        // Search for the next line.
        var initialCaret = wed_util_1.boundaryXY(pos);
        var next = initialCaret;
        while (initialCaret.bottom > next.top) {
            pos = positionRight(pos, docRoot, modeTree);
            if (pos === undefined) {
                return undefined;
            }
            next = wed_util_1.boundaryXY(pos);
        }
        // pos is now at the start of the next line. We need to find the position that
        // is closest horizontally.
        var nextBottom = next.bottom;
        var minDist = Infinity;
        var minPosition;
        while (pos !== undefined) {
            var dist = Math.abs(next.left - initialCaret.left);
            // We've started moving away from the minimum distance.
            if (dist > minDist) {
                break;
            }
            // We've moved to yet another line. The minimum we have so far is *it*.
            if (nextBottom <= next.top) {
                break;
            }
            minDist = dist;
            minPosition = pos;
            pos = positionRight(pos, docRoot, modeTree);
            if (pos !== undefined) {
                next = wed_util_1.boundaryXY(pos);
            }
        }
        return minPosition;
    }
    exports.positionDown = positionDown;
    /**
     * Compute the position above a starting position. This function takes into
     * account wed-specific needs. For instance, it knows how start and end labels
     * are structured.
     *
     * @param pos The position at which we start.
     *
     * @param docRoot The element within which caret movement is to be constrained.
     *
     * @param modeTree The mode tree from which to get a mode.
     *
     * @returns The new position, or ``undefined`` if there is no such position.
     */
    function positionUp(pos, docRoot, modeTree) {
        if (pos == null) {
            return undefined;
        }
        // Search for the previous line.
        var initialBoundary = wed_util_1.boundaryXY(pos);
        var prev = initialBoundary;
        while (initialBoundary.top < prev.bottom) {
            pos = positionLeft(pos, docRoot, modeTree);
            if (pos === undefined) {
                return undefined;
            }
            prev = wed_util_1.boundaryXY(pos);
        }
        // pos is now at the end of the previous line. We need to find the position
        // that is closest horizontally.
        var prevTop = prev.top;
        var minDist = Infinity;
        var minPosition;
        while (pos !== undefined) {
            var dist = Math.abs(prev.left - initialBoundary.left);
            // We've started moving away from the minimum distance.
            if (dist > minDist) {
                break;
            }
            // We've moved to yet another line. The minimum we have so far is *it*.
            if (prev.bottom <= prevTop) {
                break;
            }
            minDist = dist;
            minPosition = pos;
            pos = positionLeft(pos, docRoot, modeTree);
            if (pos !== undefined) {
                prev = wed_util_1.boundaryXY(pos);
            }
        }
        return minPosition;
    }
    exports.positionUp = positionUp;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  docRoot firstChild pos
//# sourceMappingURL=caret-movement.js.map

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, domutil_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Represents a selection as wed understands it.
     */
    var WedSelection = /** @class */ (function () {
        /**
         * @param anchor The anchor point of the selection. The anchor is where the
         * selection started. It does not move when the user selects text.
         *
         * @param focus The focus point of the selection. It is the part of the
         * selection that moves when the user selects text. Omitting ``focus`` will
         * result in a collapsed selection.
         */
        function WedSelection(converter, anchor, focus) {
            this.converter = converter;
            this.anchor = anchor;
            this.focus = (focus === undefined) ? anchor : focus;
        }
        Object.defineProperty(WedSelection.prototype, "range", {
            get: function () {
                var rr = this.rangeInfo;
                if (rr === undefined) {
                    return undefined;
                }
                return rr.range;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WedSelection.prototype, "rangeInfo", {
            get: function () {
                return this.anchor.makeRange(this.focus);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WedSelection.prototype, "collapsed", {
            get: function () {
                return this.anchor.equals(this.focus);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WedSelection.prototype, "wellFormed", {
            get: function () {
                var range = this.range;
                if (range === undefined) {
                    return false;
                }
                return domutil_1.isWellFormedRange(range);
            },
            enumerable: true,
            configurable: true
        });
        WedSelection.prototype.asDataCarets = function () {
            var range = this.range;
            if (range === undefined) {
                return undefined;
            }
            var startCaret = this.converter.toDataLocation(range.startContainer, range.startOffset);
            var endCaret = this.converter.toDataLocation(range.endContainer, range.endOffset);
            if (startCaret === undefined || endCaret === undefined) {
                return undefined;
            }
            return [startCaret, endCaret];
        };
        WedSelection.prototype.mustAsDataCarets = function () {
            var ret = this.asDataCarets();
            if (ret === undefined) {
                throw new Error("cannot get the selection as data carets");
            }
            return ret;
        };
        /**
         * @returns Whether the two objects are equal. They are equal if they are the
         * same object or if they have equal focuses (foci?) and equal anchors.
         */
        WedSelection.prototype.equals = function (other) {
            if (other == null) {
                return false;
            }
            return this.focus.equals(other.focus) && this.anchor.equals(other.anchor);
        };
        return WedSelection;
    }());
    exports.WedSelection = WedSelection;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL foci
//# sourceMappingURL=wed-selection.js.map

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(19), __webpack_require__(49), __webpack_require__(50), __webpack_require__(38)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, rxjs_1, action_1, button_1, icon_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function makeAction(desc, abbreviatedDesc, icon, needsInput, fn) {
        var actualAbbreviatedDesc;
        var actualIcon;
        var actualNeedsInput;
        var actualFn;
        if (typeof icon === "boolean") {
            actualAbbreviatedDesc = undefined;
            actualIcon = abbreviatedDesc;
            actualNeedsInput = icon;
            actualFn = needsInput;
        }
        else {
            actualAbbreviatedDesc = abbreviatedDesc;
            actualIcon = icon;
            actualNeedsInput = needsInput;
            actualFn = fn;
        }
        return /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1(editor) {
                return _super.call(this, editor, desc, actualAbbreviatedDesc, actualIcon, actualNeedsInput) || this;
            }
            class_1.prototype.execute = function () {
                actualFn(this.editor);
            };
            return class_1;
        }(action_1.Action));
    }
    exports.makeAction = makeAction;
    // tslint:disable-next-line:variable-name
    exports.Save = makeAction("Save", icon_1.makeHTML("upload"), false, function (editor) {
        // tslint:disable-next-line:no-floating-promises
        editor.save();
    });
    // tslint:disable-next-line:variable-name
    exports.Undo = makeAction("Undo", icon_1.makeHTML("undo"), false, function (editor) {
        editor.undo();
    });
    // tslint:disable-next-line:variable-name
    exports.Redo = makeAction("Redo", icon_1.makeHTML("redo"), false, function (editor) {
        editor.redo();
    });
    // tslint:disable-next-line:variable-name
    exports.DecreaseLabelVisibilityLevel = makeAction("Decrease label visibility level", "Decrease label visibility", icon_1.makeHTML("arrow-down"), false, function (editor) {
        editor.decreaseLabelVisiblityLevel();
    });
    // tslint:disable-next-line:variable-name
    exports.IncreaseLabelVisibilityLevel = makeAction("Increase label visibility level", "Increase label visibility", icon_1.makeHTML("arrow-up"), false, function (editor) {
        editor.increaseLabelVisibilityLevel();
    });
    /**
     * An action that toggles the editors attribute hiding.
     */
    var ToggleAttributeHiding = /** @class */ (function (_super) {
        __extends(ToggleAttributeHiding, _super);
        function ToggleAttributeHiding(editor) {
            var _this = _super.call(this, editor, "Toggle attribute hiding", "AH", undefined, false) || this;
            _this.pressed = true;
            /**
             * The object on which this class and subclasses may push new events.
             */
            _this._events = new rxjs_1.Subject();
            /**
             * The observable on which clients can listen for events.
             */
            _this.events = _this._events.asObservable();
            return _this;
        }
        ToggleAttributeHiding.prototype.execute = function (data) {
            if (this.pressed !== data) {
                this.pressed = data;
                this.editor.toggleAttributeHiding();
                this._events.next({ name: "Pressed", action: this });
            }
        };
        ToggleAttributeHiding.prototype.makeButton = function (data) {
            var _this = this;
            var button = new button_1.ToggleButton(this.pressed, data !== undefined ? this.getDescriptionFor(data) : this.getDescription(), this.getAbbreviatedDescription(), this.getIcon());
            button.events.subscribe(function () {
                _this.execute(button.pressed);
            });
            this.events.subscribe(function () {
                button.pressed = _this.pressed;
            });
            return button;
        };
        return ToggleAttributeHiding;
    }(action_1.Action));
    exports.ToggleAttributeHiding = ToggleAttributeHiding;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//# sourceMappingURL=editor-actions.js.map

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Listens to changes on a tree and updates the GUI tree in response to changes.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(7), __webpack_require__(77), __webpack_require__(13), __webpack_require__(6), __webpack_require__(5), __webpack_require__(74), __webpack_require__(17)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, jquery_1, convert, dloc_1, domtypeguards_1, domutil_1, tree_updater_1, util) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    jquery_1 = __importDefault(jquery_1);
    convert = __importStar(convert);
    util = __importStar(util);
    /**
     * Updates a GUI tree so that its data nodes (those nodes that are not
     * decorations) mirror a data tree.
     */
    var GUIUpdater = /** @class */ (function (_super) {
        __extends(GUIUpdater, _super);
        /**
         * @param guiTree The DOM tree to update.
         *
         * @param treeUpdater A tree updater that updates the data tree. It serves as
         * a source of modification events which the object being created will listen
         * on.
         */
        function GUIUpdater(guiTree, treeUpdater) {
            var _this = _super.call(this, guiTree) || this;
            _this.treeUpdater = treeUpdater;
            _this.treeUpdater.events.subscribe(function (ev) {
                switch (ev.name) {
                    case "InsertNodeAt":
                        _this._insertNodeAtHandler(ev);
                        break;
                    case "SetTextNodeValue":
                        _this._setTextNodeValueHandler(ev);
                        break;
                    case "BeforeDeleteNode":
                        _this._beforeDeleteNodeHandler(ev);
                        break;
                    case "SetAttributeNS":
                        _this._setAttributeNSHandler(ev);
                        break;
                    default:
                    // Do nothing...
                }
            });
            return _this;
        }
        /**
         * Handles "InsertNodeAt" events.
         *
         * @param ev The event.
         */
        GUIUpdater.prototype._insertNodeAtHandler = function (ev) {
            var guiCaret = this.fromDataLocation(ev.parent, ev.index);
            if (guiCaret === null) {
                throw new Error("cannot find gui tree position");
            }
            var clone = convert.toHTMLTree(this.tree.ownerDocument, ev.node);
            if (domtypeguards_1.isElement(ev.node)) {
                // If ev.node is an element, then the clone is an element too.
                domutil_1.linkTrees(ev.node, clone);
            }
            this.insertNodeAt(guiCaret, clone);
        };
        /**
         * Handles "SetTextNodeValue" events.
         *
         * @param ev The event.
         */
        GUIUpdater.prototype._setTextNodeValueHandler = function (ev) {
            var guiCaret = this.fromDataLocation(ev.node, 0);
            if (guiCaret === null) {
                throw new Error("cannot find gui tree position");
            }
            this.setTextNodeValue(guiCaret.node, ev.value);
        };
        /**
         * Handles "BeforeDeleteNode" events.
         *
         * @param ev The event.
         */
        GUIUpdater.prototype._beforeDeleteNodeHandler = function (ev) {
            var dataNode = ev.node;
            var toRemove;
            var element = false;
            switch (dataNode.nodeType) {
                case Node.TEXT_NODE:
                    var guiCaret = this.fromDataLocation(dataNode, 0);
                    if (guiCaret === null) {
                        throw new Error("cannot find gui tree position");
                    }
                    toRemove = guiCaret.node;
                    break;
                case Node.ELEMENT_NODE:
                    toRemove = jquery_1.default.data(dataNode, "wed_mirror_node");
                    element = true;
                    break;
                default:
            }
            this.deleteNode(toRemove);
            // We have to do this **after** we delete the node.
            if (element) {
                domutil_1.unlinkTree(dataNode);
                domutil_1.unlinkTree(toRemove);
            }
        };
        /**
         * Handles "SetAttributeNS" events.
         *
         * @param ev The event.
         */
        GUIUpdater.prototype._setAttributeNSHandler = function (ev) {
            var guiCaret = this.fromDataLocation(ev.node, 0);
            if (guiCaret === null) {
                throw new Error("cannot find gui tree position");
            }
            this.setAttributeNS(guiCaret.node, "", util.encodeAttrName(ev.attribute), ev.newValue);
        };
        GUIUpdater.prototype.fromDataLocation = function (loc, offset) {
            var node;
            if (loc instanceof dloc_1.DLoc) {
                node = loc.node;
                offset = loc.offset;
            }
            else {
                node = loc;
                if (offset === undefined) {
                    throw new Error("must specify an offset");
                }
            }
            var guiNode = this.pathToNode(this.treeUpdater.nodeToPath(node));
            if (guiNode === null) {
                return null;
            }
            if (domtypeguards_1.isText(node)) {
                return dloc_1.DLoc.mustMakeDLoc(this.tree, guiNode, offset);
            }
            if (domutil_1.isAttr(node)) {
                // The check for the node type is to avoid getting a location inside a
                // placeholder.
                if (domtypeguards_1.isText(guiNode.firstChild)) {
                    guiNode = guiNode.firstChild;
                }
                return dloc_1.DLoc.mustMakeDLoc(this.tree, guiNode, offset);
            }
            if (offset === 0) {
                return dloc_1.DLoc.mustMakeDLoc(this.tree, guiNode, 0);
            }
            if (offset >= node.childNodes.length) {
                return dloc_1.DLoc.mustMakeDLoc(this.tree, guiNode, guiNode.childNodes.length);
            }
            var guiChild = this.pathToNode(this.treeUpdater.nodeToPath(node.childNodes[offset]));
            if (guiChild === null) {
                // This happens if for instance node has X children but the
                // corresponding node in tree has X-1 children.
                return dloc_1.DLoc.mustMakeDLoc(this.tree, guiNode, guiNode.childNodes.length);
            }
            return dloc_1.DLoc.mustMakeDLoc(this.tree, guiChild);
        };
        return GUIUpdater;
    }(tree_updater_1.TreeUpdater));
    exports.GUIUpdater = GUIUpdater;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  domutil jquery pathToNode nodeToPath jQuery deleteNode Dubeau
//  LocalWords:  insertNodeAt MPL Mangalam gui setTextNodeValue TreeUpdater ev
//  LocalWords:  BeforeDeleteNode SetAttributeNS
//# sourceMappingURL=gui-updater.js.map

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(249), __webpack_require__(7), __webpack_require__(115), __webpack_require__(116)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, bootbox, jquery_1, interactivity_1, search_replace_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bootbox = __importStar(bootbox);
    jquery_1 = __importDefault(jquery_1);
    exports.Direction = search_replace_1.Direction;
    var dialogTemplate = "\n<form>\n <div class='form-group'>\n  <label>Search for:</label>\n  <input type='text' name='search' class='form-control'>\n </div>\n <div class='form-group'>\n  <label>Replace with:</label>\n  <input type='text' name='replace' class='form-control'>\n </div>\n <div class='radio'>\n  <span>Direction:</span>\n  <div>\n   <label class='radio-inline'>\n    <input type='radio' name='direction' value='forward'> Forward\n   </label>\n  </div>\n  <div>\n   <label class='radio-inline'>\n    <input type='radio' name='direction' value='backwards'> Backwards\n   </label>\n  <div>\n </div>\n <div class='radio'>\n  <span>Context:</span>\n  <div>\n   <label class='radio-inline'>\n    <input type='radio' name='context' value='text' checked>\n    Only element text\n   </label>\n  </div>\n  <div>\n   <label class='radio-inline'>\n    <input type='radio' name='context' value='attributes'>\n    Only attributes values\n   </label>\n  </div>\n </div>\n</form>";
    /**
     * Brings up a search and replace dialog box to allow the user to search through
     * a document. See the section on "Dialog Search" in the editor's embedded help
     * for details of how it works for users.
     */
    var DialogSearchReplace = /** @class */ (function () {
        /**
         * @param editor The editor for which we are searching.
         *
         * @param scroller The scroller holding the document being searched.
         *
         * @param direction The direction of the search.
         */
        function DialogSearchReplace(editor, scroller, direction) {
            var _this = this;
            this.search = new search_replace_1.SearchReplace(editor, scroller);
            var body = jquery_1.default(dialogTemplate)[0];
            var dialog = this.dialog = bootbox.dialog({
                title: "Search/Replace",
                message: body,
                onEscape: true,
                backdrop: false,
                size: "small",
                buttons: {
                    find: {
                        label: "Find",
                        className: "btn-primary",
                        callback: this.onFind.bind(this),
                    },
                    replaceFind: {
                        label: "Replace and Find",
                        className: "btn-default replace-and-find",
                        callback: this.onReplaceAndFind.bind(this),
                    },
                    replaceAll: {
                        label: "Replace All",
                        className: "btn-default replace-all",
                        callback: this.onReplaceAll.bind(this),
                    },
                    close: {
                        label: "Close",
                    },
                },
            });
            interactivity_1.makeResizable(dialog);
            interactivity_1.makeDraggable(dialog);
            var directionItems = body.elements
                .namedItem("direction");
            this.forwardRadioButton = directionItems[0];
            this.backwardRadioButton = directionItems[1];
            var contextItems = body.elements
                .namedItem("context");
            this.textRadioButton = contextItems[0];
            this.attributeRadioButton = contextItems[1];
            var toCheck;
            switch (direction) {
                case search_replace_1.Direction.FORWARD:
                    toCheck = this.forwardRadioButton;
                    break;
                case search_replace_1.Direction.BACKWARDS:
                    toCheck = this.backwardRadioButton;
                    break;
                default:
                    var d = direction;
                    throw new Error("unknown direction: " + d);
            }
            toCheck.checked = true;
            dialog.on("hidden.bs.modal", function () {
                _this.search.clearHighlight();
                // Return the focus to the editor.
                editor.caretManager.focusInputField();
            });
            var searchField = this.searchField =
                body.elements.namedItem("search");
            var $searchField = jquery_1.default(searchField);
            $searchField.on("input", this.onSearchInput.bind(this));
            var replaceField = this.replaceField =
                body.elements.namedItem("replace");
            var $replaceField = jquery_1.default(replaceField);
            $replaceField.on("input", this.onReplaceInput.bind(this));
            this.replaceButton =
                dialog[0].querySelector(".replace-and-find");
            this.replaceAll =
                dialog[0].querySelector(".replace-all");
            this.updateButtons();
        }
        /**
         * @returns The search option to pass to the search engine, given the user
         * choices.
         */
        DialogSearchReplace.prototype.getSearchOptions = function () {
            var direction;
            if (this.forwardRadioButton.checked) {
                direction = search_replace_1.Direction.FORWARD;
            }
            else if (this.backwardRadioButton.checked) {
                direction = search_replace_1.Direction.BACKWARDS;
            }
            else {
                throw new Error("cannot determine direction");
            }
            var context;
            if (this.textRadioButton.checked) {
                context = search_replace_1.Context.TEXT;
            }
            else if (this.attributeRadioButton.checked) {
                context = search_replace_1.Context.ATTRIBUTE_VALUES;
            }
            else {
                throw new Error("cannot determine context");
            }
            return {
                direction: direction,
                context: context,
            };
        };
        /**
         * Processes clicks on the "Find" button: searches the document and updates
         * the buttons.
         */
        DialogSearchReplace.prototype.onFind = function () {
            this.next();
            this.updateButtons();
            return false;
        };
        /**
         * Updates the disabled status of the buttons depending on how the input
         * elements are set.
         */
        DialogSearchReplace.prototype.updateButtons = function () {
            var fieldFilled = this.replaceField.value !== "";
            this.replaceButton.disabled = !(fieldFilled && this.search.canReplace);
            this.replaceAll.disabled = !fieldFilled;
        };
        /**
         * Processes clicks on the "Replace and Find" button: replaces the current hit
         * and find the next one.
         */
        DialogSearchReplace.prototype.onReplaceAndFind = function () {
            this.replace();
            this.onFind();
            return false;
        };
        /**
         * Processes clicks on the "Replace All" button: replaces all replaceable
         * hits.
         */
        DialogSearchReplace.prototype.onReplaceAll = function () {
            if (this.search.current === undefined) {
                this.onFind();
            }
            while (this.search.current !== null) {
                if (this.search.canReplace) {
                    this.replace();
                }
                this.next();
            }
            this.updateButtons();
            return false;
        };
        /**
         * Replaces the current hit.
         */
        DialogSearchReplace.prototype.replace = function () {
            this.search.replace(this.replaceField.value);
        };
        /**
         * Moves to the next hit in the direction specified by the user.
         */
        DialogSearchReplace.prototype.next = function () {
            this.search.next(this.getSearchOptions());
        };
        /**
         * Processes an ``input`` event on the search field. May change the currently
         * highlighted hit.
         */
        DialogSearchReplace.prototype.onSearchInput = function () {
            var value = this.searchField.value;
            if (value !== this.previousSearchValue) {
                this.previousSearchValue = value;
                this.search.updatePattern(value, this.getSearchOptions());
                this.updateButtons();
            }
        };
        /**
         * Processes an ``input`` event on the replace field. Updates the buttons.
         */
        DialogSearchReplace.prototype.onReplaceInput = function () {
            this.updateButtons();
        };
        return DialogSearchReplace;
    }());
    exports.DialogSearchReplace = DialogSearchReplace;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//# sourceMappingURL=dialog-search-replace.js.map

/***/ }),
/* 249 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_249__;

/***/ }),
/* 250 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_250__;

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(252), __webpack_require__(13), __webpack_require__(6), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, rangy, dloc_1, domtypeguards_1, domutil_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    rangy = __importStar(rangy);
    /** The direction of searches. */
    var Direction;
    (function (Direction) {
        Direction[Direction["FORWARD"] = 0] = "FORWARD";
        Direction[Direction["BACKWARDS"] = 1] = "BACKWARDS";
    })(Direction = exports.Direction || (exports.Direction = {}));
    /** The context for searches. */
    var Context;
    (function (Context) {
        /** Everywhere in a document, including non-editable graphical elements. */
        Context[Context["EVERYWHERE"] = 0] = "EVERYWHERE";
        /** Only element text. */
        Context[Context["TEXT"] = 1] = "TEXT";
        /** Only attribute values. */
        Context[Context["ATTRIBUTE_VALUES"] = 2] = "ATTRIBUTE_VALUES";
    })(Context = exports.Context || (exports.Context = {}));
    function unknownDirection(d) {
        throw new Error("unknown direction: " + d);
    }
    function directionToRangyDirection(direction) {
        // There does not seem to be a way currently to declare this map in a way
        // that will enforce that all directions have a value. :-/
        // tslint:disable-next-line:no-object-literal-type-assertion
        var ret = (_a = {},
            _a[Direction.FORWARD] = "forward",
            _a[Direction.BACKWARDS] = "backward",
            _a)[direction];
        if (ret === undefined) {
            // We have to cast to never since we're not using the switch exhaustion.
            return unknownDirection(direction);
        }
        return ret;
        var _a;
    }
    function nodeInScope(doc, node, scope) {
        var vrange = doc.createRange();
        vrange.selectNode(node);
        // The range that encompasses the node, must be completely within scope.
        return (vrange.compareBoundaryPoints(Range.START_TO_START, scope) >= 0) &&
            (vrange.compareBoundaryPoints(Range.END_TO_END, scope) <= 0);
    }
    /**
     * This is a utility class that holds a position among a list of elements
     * (representing attributes, in our usage).
     */
    var AttributeValueCursor = /** @class */ (function () {
        /**
         * @param values The values to iterate over.
         *
         * @param direction The direction to iterate over.
         */
        function AttributeValueCursor(values, direction) {
            this.values = values;
            this.direction = direction;
            this.resetToStart();
        }
        /**
         * @param value The index to reset this iterator to.
         */
        AttributeValueCursor.prototype.reset = function (value) {
            this.current = value;
        };
        /**
         * @param value Reset to the start of [[values]]. This will be position 0 for
         * an iterator moving forward. Or the end of [[values]] for an iterator moving
         * backwards.
         */
        AttributeValueCursor.prototype.resetToStart = function () {
            switch (this.direction) {
                case Direction.FORWARD:
                    this.current = 0;
                    break;
                case Direction.BACKWARDS:
                    this.current = this.values.length - 1;
                    break;
                default:
                    return unknownDirection(this.direction);
            }
        };
        Object.defineProperty(AttributeValueCursor.prototype, "hasNext", {
            /**
             * @returns ``true`` if we have not reached the end of the array.
             */
            get: function () {
                switch (this.direction) {
                    case Direction.FORWARD:
                        return this.current < this.values.length;
                    case Direction.BACKWARDS:
                        return this.current >= 0;
                    default:
                        return unknownDirection(this.direction);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AttributeValueCursor.prototype, "next", {
            /**
             * This is the next element in iteration order. Moves the iterator in the
             * direction of travel.
             */
            get: function () {
                var ret = this.values[this.current];
                this.inc();
                return ret;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Moves the iterator in the direction of travel.
         */
        AttributeValueCursor.prototype.inc = function () {
            switch (this.direction) {
                case Direction.FORWARD:
                    this.current++;
                    break;
                case Direction.BACKWARDS:
                    this.current--;
                    break;
                default:
                    return unknownDirection(this.direction);
            }
        };
        return AttributeValueCursor;
    }());
    /**
     * This models a search on the GUI tree. Performing searches directly on the
     * data tree is theoretically possible but fraught with problems. For instance,
     * some data may not be visible to users and so the search in the data tree
     * would have to constantly refer to the GUI tree to determine whether a hit
     * should be shown. Additionally, the order of the data shown in the GUI tree
     * may differ from the order in the data tree.
     */
    var Search = /** @class */ (function () {
        function Search(caretManager, guiRoot, start, scope) {
            this.caretManager = caretManager;
            this.guiRoot = guiRoot;
            this.start = start;
            this._pattern = "";
            /** The direction in which the search moves. */
            this.direction = Direction.FORWARD;
            /** The context for the search. */
            this.context = Context.EVERYWHERE;
            this.root = dloc_1.getRoot(guiRoot);
            this.setScope(scope);
            var realScope = this.scope;
            if (realScope.start.compare(start) > 0 ||
                realScope.end.compare(start) < 0) {
                throw new Error("the scope does not contain the start position");
            }
            this.start = start;
        }
        Object.defineProperty(Search.prototype, "pattern", {
            get: function () {
                return this._pattern;
            },
            set: function (value) {
                this._pattern = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Set the search scope. No result will be returned outside the scope. Setting
         * the scope to ``undefined`` means "search the whole document".
         */
        Search.prototype.setScope = function (range) {
            if (range === undefined) {
                this._scope = undefined;
                return;
            }
            if (!range.isValid()) {
                throw new Error("passed an invalid range");
            }
            var start = range.start, end = range.end;
            if (start.root !== this.root.node) {
                throw new Error("the range does not use the search's root");
            }
            // Since the start and end of a range must share the same root, we don't
            // have to test the end of the range.
            this._scope = start.compare(end) > 0 ?
                // Start is after end, flip them.
                new dloc_1.DLocRange(end, start) :
                // Regular order
                new dloc_1.DLocRange(start, end);
        };
        Object.defineProperty(Search.prototype, "scope", {
            get: function () {
                if (this._scope === undefined) {
                    this._scope = new dloc_1.DLocRange(dloc_1.DLoc.mustMakeDLoc(this.root, this.guiRoot, 0), dloc_1.DLoc.mustMakeDLoc(this.root, this.guiRoot, this.guiRoot.childNodes.length));
                }
                return this._scope;
            },
            enumerable: true,
            configurable: true
        });
        Search.prototype.updateCurrent = function () {
            this._next(true);
        };
        Search.prototype.next = function () {
            this._next(false);
        };
        Search.prototype._next = function (includeCurrent) {
            var ret = null;
            if (this.pattern !== "") {
                var rollPosition = void 0;
                var start = void 0;
                switch (this.direction) {
                    case Direction.FORWARD: {
                        start = this.getForwardSearchStart(includeCurrent);
                        rollPosition = this.scope.start;
                        break;
                    }
                    case Direction.BACKWARDS: {
                        start = this.getBackwardSearchStart(includeCurrent);
                        rollPosition = this.scope.end;
                        break;
                    }
                    default:
                        return unknownDirection(this.direction);
                }
                var hit = this.find(start, this.direction);
                if (hit !== null) {
                    ret = new dloc_1.DLocRange(dloc_1.DLoc.mustMakeDLoc(this.root, hit.startContainer, hit.startOffset), dloc_1.DLoc.mustMakeDLoc(this.root, hit.endContainer, hit.endOffset));
                }
                else {
                    // If we did not get a hit, we roll over on the next search.
                    this.start = rollPosition;
                }
            }
            this.current = ret;
        };
        Search.prototype.find = function (start, direction) {
            if (this.context === Context.ATTRIBUTE_VALUES) {
                return this.findAttributeValue(start, direction);
            }
            return this.findText(start, directionToRangyDirection(direction));
        };
        Search.prototype.findText = function (start, direction) {
            // tslint:disable-next-line:no-any
            var config = rangy.config;
            var range = new rangy.WrappedRange(start.makeRange());
            if (this.context === Context.TEXT) {
                config.customIsCollapsedNode = function (node) {
                    return domtypeguards_1.isElement(node) && node.closest("._phantom") !== null;
                };
            }
            var found = range.findText(this.pattern, {
                withinRange: this.scope.mustMakeDOMRange(),
                direction: direction,
            });
            // There is a bug in Rangy that makes it so that it may sometimes return
            // hits outside the scope. Test for it.
            if (found) {
                var hitStart = dloc_1.DLoc.mustMakeDLoc(this.guiRoot, range.startContainer, range.startOffset);
                if (!this.scope.contains(hitStart)) {
                    found = false;
                }
            }
            config.customIsCollapsedNode = undefined;
            return found ? range.nativeRange : null;
        };
        Search.prototype.findAttributeValue = function (start, direction) {
            // Implement our own logic instead of relying on rangy. We can just move
            // from attribute value to attribute value and checks the values.
            var guiRoot = this.guiRoot;
            var allValues = Array.from(guiRoot.getElementsByClassName("_attribute_value"));
            var caretManager = this.caretManager;
            var valueCursor = new AttributeValueCursor(allValues, direction);
            var attrValue = domutil_1.closestByClass(start.node, "_attribute_value", guiRoot);
            var doc = guiRoot.ownerDocument;
            var scope = this.scope.mustMakeDOMRange();
            if (attrValue === null) {
                // We need to find the next attribute.
                var found = void 0;
                while (valueCursor.hasNext) {
                    var value = valueCursor.next;
                    if (nodeInScope(doc, value, scope) &&
                        // tslint:disable-next-line:no-bitwise
                        ((value.compareDocumentPosition(start.node) &
                            Node.DOCUMENT_POSITION_PRECEDING) !== 0)) {
                        found = value;
                        break;
                    }
                }
                if (found === undefined) {
                    return null;
                }
                start = start.make(found, 0);
            }
            else {
                var index = allValues.indexOf(attrValue);
                if (index === -1) {
                    throw new Error("internal error: cannot find value in array!");
                }
                valueCursor.reset(index);
                valueCursor.inc();
            }
            var dataLoc = caretManager.toDataLocation(start);
            // tslint:disable-next-line:no-constant-condition
            while (true) {
                // Going into the data tree simplifies some of the work here.
                var node = dataLoc.node;
                var index = void 0;
                switch (direction) {
                    case Direction.FORWARD:
                        index = node.value.indexOf(this.pattern, dataLoc.offset);
                        break;
                    case Direction.BACKWARDS:
                        // For a backward search, the hit is not allowed to cross the start
                        // position. (This, by the way, is the same way Emacs operates.)
                        var startOffset = dataLoc.offset - this.pattern.length;
                        index = (startOffset < 0) ?
                            -1 : node.value.lastIndexOf(this.pattern, startOffset);
                        break;
                    default:
                        return unknownDirection(direction);
                }
                if (index !== -1) {
                    var rangeStart = caretManager.mustFromDataLocation(dataLoc.makeWithOffset(index));
                    var rangeEnd = caretManager.mustFromDataLocation(dataLoc.makeWithOffset(index + this.pattern.length));
                    if (this.scope.contains(rangeStart) && this.scope.contains(rangeEnd)) {
                        return new dloc_1.DLocRange(rangeStart, rangeEnd).mustMakeDOMRange();
                    }
                }
                // We did not find a good hit, so continue searching other values.
                var next = null;
                while (next === null && valueCursor.hasNext) {
                    next = valueCursor.next;
                    if (!nodeInScope(doc, next, scope)) {
                        next = null;
                    }
                }
                if (next === null) {
                    return null;
                }
                var dataNext = caretManager.toDataLocation(next, 0);
                switch (direction) {
                    case Direction.FORWARD:
                        break;
                    case Direction.BACKWARDS:
                        dataNext =
                            dataNext.makeWithOffset(dataNext.node.value.length);
                        break;
                    default:
                        return unknownDirection(direction);
                }
                dataLoc = dataNext;
            }
        };
        Search.prototype.getForwardSearchStart = function (includeCurrent) {
            if (this.current != null) {
                return includeCurrent ? this.current.start : this.current.end;
            }
            return this.start;
        };
        Search.prototype.getBackwardSearchStart = function (includeCurrent) {
            var ret;
            if (this.current != null) {
                ret = includeCurrent ? this.prevEnd : this.current.start;
            }
            if (ret === undefined) {
                ret = this.start;
            }
            this.prevEnd = ret;
            return ret;
        };
        return Search;
    }());
    exports.Search = Search;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//# sourceMappingURL=search.js.map

/***/ }),
/* 252 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_252__;

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(13), __webpack_require__(6), __webpack_require__(5), __webpack_require__(39), __webpack_require__(117), __webpack_require__(256), __webpack_require__(38), __webpack_require__(257), __webpack_require__(119)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, dloc_1, domtypeguards_1, domutil_1, transformation_1, action_context_menu_1, completion_menu_1, icon_1, replacement_menu_1, typeahead_popup_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var atStartToTxt = {
        undefined: "",
        true: " before this element",
        false: " after this element",
    };
    /**
     * Manages the editing menus for a specific editing view. An "editing menu" is a
     * menu that appears in the editing pane. The context menu and completion menu
     * are editing menus.
     *
     * Only one editing menu may be shown at any given time.
     */
    var EditingMenuManager = /** @class */ (function () {
        /**
         * @param editor The editor for which the manager is created.
         */
        function EditingMenuManager(editor) {
            this.editor = editor;
            this.caretManager = editor.caretManager;
            this.modeTree = editor.modeTree;
            this.guiRoot = editor.guiRoot;
            this.dataRoot = editor.dataRoot;
            this.doc = this.guiRoot.ownerDocument;
        }
        /**
         * This is the default menu handler called when the user right-clicks in the
         * contents of a document or uses the keyboard shortcut.
         *
         * The menu handler which is invoked when a user right-clicks on an element
         * start or end label is defined by the decorator that the mode is using.
         */
        EditingMenuManager.prototype.contextMenuHandler = function (e) {
            var sel = this.caretManager.sel;
            if (sel === undefined || (!sel.collapsed && !sel.wellFormed)) {
                return false;
            }
            var node = sel.focus.node;
            var offset = sel.focus.offset;
            if (!domtypeguards_1.isElement(node)) {
                var parent_1 = node.parentNode;
                if (parent_1 === null) {
                    throw new Error("contextMenuHandler invoked on detached node");
                }
                offset = domutil_1.indexOf(parent_1.childNodes, node);
                node = parent_1;
            }
            // Move out of any placeholder
            var ph = domutil_1.closestByClass(node, "_placeholder", this.guiRoot);
            if (ph !== null) {
                var parent_2 = ph.parentNode;
                if (parent_2 === null) {
                    throw new Error("contextMenuHandler invoked on detached node");
                }
                offset = domutil_1.indexOf(parent_2.childNodes, ph);
                node = parent_2;
            }
            var real = domutil_1.closestByClass(node, "_real", this.guiRoot);
            var readonly = real !== null && real.classList.contains("_readonly");
            var method = domutil_1.closestByClass(node, "_attribute_value", this.guiRoot) !== null ?
                this.getMenuItemsForAttribute :
                this.getMenuItemsForElement;
            var menuItems = method.call(this, node, offset, !sel.collapsed);
            // There's no menu to display, so let the event bubble up.
            if (menuItems.length === 0) {
                return true;
            }
            this.setupContextMenu(action_context_menu_1.ActionContextMenu, menuItems, readonly, e);
            return false;
        };
        /**
         * Dismiss the menu currently shown. If there is no menu currently shown, does
         * nothing.
         */
        EditingMenuManager.prototype.dismiss = function () {
            // We may be called when there is no menu active.
            if (this.currentDropdown !== undefined) {
                this.currentDropdown.dismiss();
            }
            if (this.currentTypeahead !== undefined) {
                this.currentTypeahead.dismiss();
            }
        };
        /**
         * Compute an appropriate position for a context menu, and display it. This is
         * a convenience function that essentially combines [[computeMenuPosition]]
         * and [[displayContextMenu]].
         *
         * @param cmClass See [[displayContextMenu]].
         *
         * @param items See [[displayContextMenu]].
         *
         * @param readonly See [[displayContextMenu]].
         *
         * @param e See [[computeMenuPosition]].
         *
         * @param bottom See [[computeMenuPosition]].
         */
        // @ts-ignore
        EditingMenuManager.prototype.setupContextMenu = function (cmClass, items, readonly, e, bottom) {
            var pos = this.computeMenuPosition(e, bottom);
            this.displayContextMenu(action_context_menu_1.ActionContextMenu, pos.left, pos.top, items, readonly);
        };
        /**
         * Display a context menu.
         *
         * @param cmClass The class to use to create the menu.
         *
         * @param x The position of the menu.
         *
         * @param y The position of the menu.
         *
         * @param items The menu items to show.
         *
         * @param readonly If true, don't include in the menu any operation that
         *                 would trigger a ``Transformation``.
         */
        EditingMenuManager.prototype.displayContextMenu = function (cmClass, x, y, items, readonly) {
            var _this = this;
            // Eliminate duplicate items. We perform a check only in the description of
            // the action, and on ``data.name``.
            var seen = Object.create(null);
            items = items.filter(function (item) {
                // "\0" not a legitimate value in descriptions.
                var actionKey = (item.action !== null ?
                    item.action.getDescription() : "") + "\0";
                if (item.data !== null) {
                    actionKey += item.data.name;
                }
                var keep = !seen[actionKey];
                seen[actionKey] = true;
                if (!keep || !readonly) {
                    return keep;
                }
                // If we get here, then we need to filter out anything that transforms the
                // tree.
                return !(item.action instanceof transformation_1.Transformation);
            });
            this.dismiss();
            this.caretManager.pushSelection();
            this.currentDropdown = new cmClass(this.doc, x, y, items, function () {
                _this.currentDropdown = undefined;
                _this.caretManager.popSelection();
            });
        };
        EditingMenuManager.prototype.getMenuItemsForAttribute = function () {
            return [];
        };
        EditingMenuManager.prototype.getMenuItemsForElement = function (node, offset, wrap) {
            var _this = this;
            var actualNode = node;
            // If we are in a phantom, we want to get to the first parent which is not
            // phantom.
            var lastPhantomChild;
            while (actualNode !== null && actualNode.classList.contains("_phantom")) {
                lastPhantomChild = actualNode;
                actualNode = actualNode.parentNode;
            }
            if (actualNode === null || !this.guiRoot.contains(actualNode)) {
                return [];
            }
            if (lastPhantomChild !== undefined) {
                // The actualNode exists and is in our GUI tree. If the offset is outside
                // editable contents, move it into editable contents.
                (offset = this.caretManager
                    .normalizeToEditableRange(dloc_1.DLoc.mustMakeDLoc(this.guiRoot, lastPhantomChild)).offset);
            }
            var menuItems = [];
            var pushItem = function (data, tr) {
                var li = _this.makeMenuItemForAction(tr, data);
                menuItems.push({ action: tr, item: li, data: data });
            };
            if ( // Should not be part of a gui element.
            !actualNode.parentNode.classList.contains("_gui")) {
                // We want the data node, not the gui node.
                var treeCaret = this.caretManager.toDataLocation(actualNode, offset);
                if (treeCaret === undefined) {
                    throw new Error("cannot find tree caret");
                }
                // We are cheating a bit here. treeCaret.node cannot be a text node
                // because of the way this method is invoked. It cannot be an attribute
                // either. However, it could be a Document, which happens if the edited
                // document is empty.
                var dataNode = treeCaret.node;
                var tagName = dataNode.tagName;
                var mode = this.modeTree.getMode(dataNode);
                menuItems.push.apply(menuItems, this.makeCommonItems(dataNode));
                var trs = this.editor.getElementTransformationsAt(treeCaret, wrap ? "wrap" : "insert");
                for (var _i = 0, trs_1 = trs; _i < trs_1.length; _i++) {
                    var tr = trs_1[_i];
                    // If tr.name is not undefined we have a real transformation.
                    // Otherwise, it is an action.
                    pushItem((tr.name !== undefined) ? { name: tr.name } : null, tr.tr);
                }
                if (dataNode !== this.dataRoot.firstChild && dataNode !== this.dataRoot) {
                    var actions = mode.getContextualActions(["unwrap", "delete-parent", "split"], tagName, dataNode, 0);
                    for (var _a = 0, actions_1 = actions; _a < actions_1.length; _a++) {
                        var action = actions_1[_a];
                        pushItem({ node: dataNode, name: tagName }, action);
                    }
                }
            }
            var $sep = $(actualNode).parents().addBack()
                .siblings("[data-wed--separator-for]").first();
            var sepFor = $sep[0] !== undefined ?
                $sep[0].getAttribute("data-wed--separator-for") : null;
            if (sepFor !== null) {
                var transformationNode = $sep.siblings()
                    .filter(function filter() {
                    // Node.contains() will return true if this === node, whereas
                    // jQuery.has() only looks at descendants, so this can't be replaced
                    // with .has().
                    return this.contains(actualNode);
                })[0];
                var mode = this.modeTree.getMode(transformationNode);
                var actions = mode.getContextualActions(["merge-with-next", "merge-with-previous", "append", "prepend"], sepFor, $.data(transformationNode, "wed_mirror_node"), 0);
                for (var _b = 0, actions_2 = actions; _b < actions_2.length; _b++) {
                    var action = actions_2[_b];
                    pushItem({ node: transformationNode, name: sepFor }, action);
                }
            }
            return menuItems;
        };
        /**
         * Make the menu items that should appear in all contextual menus.
         *
         * @param dataNode The element for which we are creating the menu.
         *
         * @returns Menu items.
         */
        EditingMenuManager.prototype.makeCommonItems = function (dataNode) {
            var menuItems = [];
            if (domtypeguards_1.isElement(dataNode)) {
                var tagName = dataNode.tagName;
                var mode = this.modeTree.getMode(dataNode);
                var docURL = mode.documentationLinkFor(tagName);
                if (docURL != null) {
                    var li = this.makeDocumentationMenuItem(docURL);
                    menuItems.push({ action: null, item: li, data: null });
                }
            }
            return menuItems;
        };
        /**
         * Make a standardized menu item for a specific action. This method formats
         * the menu item and sets an even handler appropriate to invoke the action's
         * event handler.
         *
         * @param action The action for which we make a menu item.
         *
         * @param data The data that accompanies the action.
         *
         * @param start This parameter determines whether we are creating an item for
         *              a start label (``true``) an end label (``false``) or
         *              something which is neither a start or end label
         *              (``undefined``).
         *
         * @returns A HTML element which is fit to serve as a menu item.
         */
        EditingMenuManager.prototype.makeMenuItemForAction = function (action, data, start) {
            var icon = action.getIcon();
            var li = domutil_1.htmlToElements("<li><a tabindex='0' href='#'>" + (icon !== undefined ? icon + " " : "") + "</a></li>", this.doc)[0];
            if (action instanceof transformation_1.Transformation && action.kind !== undefined) {
                li.setAttribute("data-kind", action.kind);
            }
            var a = li.firstElementChild;
            // We do it this way so that to avoid an HTML interpretation of
            // action.getDescriptionFor()`s return value.
            var text = this.doc.createTextNode(action.getDescriptionFor(data) +
                atStartToTxt[String(start)]);
            a.appendChild(text);
            a.normalize();
            $(a).click(data, action.boundTerminalHandler);
            return li;
        };
        /**
         * Makes an HTML link to open the documentation of an element.
         *
         * @param docUrl The URL to the documentation to open.
         *
         * @returns A ``&lt;a>`` element that links to the documentation.
         */
        EditingMenuManager.prototype.makeDocumentationMenuItem = function (docURL) {
            var _this = this;
            var iconHtml = icon_1.makeHTML("documentation");
            var li = domutil_1.htmlToElements("<li><a tabindex='0' href='#'>" + iconHtml + " Element's documentation.</a></li>", this.doc)[0];
            var a = li.firstElementChild;
            $(a).click(function () {
                _this.editor.openDocumentationLink(docURL);
            });
            return li;
        };
        EditingMenuManager.prototype.getPossibleAttributeValues = function () {
            var sel = this.caretManager.sel;
            // We must not have an actual range in effect
            if (sel === undefined || !sel.collapsed) {
                return [];
            }
            // If we have a selection, we necessarily have a caret.
            var caret = this.caretManager.getNormalizedCaret();
            var node = caret.node;
            var attrVal = domutil_1.closestByClass(node, "_attribute_value", this.guiRoot);
            if (attrVal === null ||
                domutil_1.isNotDisplayed(attrVal, this.guiRoot)) {
                return [];
            }
            // If we have a selection, we necessarily have a caret.
            var dataCaret = this.caretManager.getDataCaret();
            // The node is necessarily an attribute.
            var dataNode = dataCaret.node;
            // First see if the mode has something to say.
            var mode = this.modeTree.getMode(dataNode);
            var possible = mode.getAttributeCompletions(dataNode);
            if (possible.length === 0) {
                // Nothing from the mode, use the validator.
                this.editor.validator.possibleAt(dataCaret.node, 0)
                    .forEach(function (ev) {
                    if (ev.params[0] !== "attributeValue") {
                        return;
                    }
                    var text = ev.params[1];
                    if (text instanceof RegExp) {
                        return;
                    }
                    possible.push(text);
                });
            }
            return possible;
        };
        EditingMenuManager.prototype.setupCompletionMenu = function () {
            var _this = this;
            this.dismiss();
            var possible = this.getPossibleAttributeValues();
            // Nothing to complete.
            if (possible.length === 0) {
                return;
            }
            var dataCaret = this.caretManager.getDataCaret();
            if (dataCaret === undefined) {
                return;
            }
            // The node is necessarily an attribute, otherwise possible would have a
            // length of 0.
            var dataNode = dataCaret.node;
            // We complete only at the end of an attribute value.
            if (dataCaret.offset !== dataNode.value.length) {
                return;
            }
            var narrowed = [];
            for (var _i = 0, possible_1 = possible; _i < possible_1.length; _i++) {
                var possibility = possible_1[_i];
                if (possibility.lastIndexOf(dataNode.value, 0) === 0) {
                    narrowed.push(possibility);
                }
            }
            // The current value in the attribute is not one that can be
            // completed.
            if (narrowed.length === 0 ||
                (narrowed.length === 1 && narrowed[0] === dataNode.value)) {
                return;
            }
            var pos = this.computeMenuPosition(undefined, true);
            this.caretManager.pushSelection();
            var menu = this.currentDropdown = new completion_menu_1.CompletionMenu(this.editor, this.guiRoot.ownerDocument, pos.left, pos.top, dataNode.value, possible, function () {
                _this.currentDropdown = undefined;
                // If the focus moved from the document to the completion menu, we
                // want to restore the caret. Otherwise, leave it as is.
                if (menu.focused) {
                    _this.caretManager.popSelection();
                }
                else {
                    _this.caretManager.popSelectionAndDiscard();
                }
            });
        };
        EditingMenuManager.prototype.setupReplacementMenu = function () {
            var _this = this;
            this.dismiss();
            var possible = this.getPossibleAttributeValues();
            // Nothing to complete.
            if (possible.length === 0) {
                return;
            }
            var dataCaret = this.caretManager.getDataCaret();
            if (dataCaret === undefined) {
                return;
            }
            var pos = this.computeMenuPosition(undefined, true);
            this.caretManager.pushSelection();
            this.currentDropdown = new replacement_menu_1.ReplacementMenu(this.editor, this.guiRoot.ownerDocument, pos.left, pos.top, possible, function (selected) {
                _this.currentDropdown = undefined;
                _this.caretManager.popSelection();
                if (selected === undefined) {
                    return;
                }
                // The node is necessarily an attribute, otherwise possible would have a
                // length of 0.
                var dataNode = dataCaret.node;
                var uri = dataNode.namespaceURI !== null ? dataNode.namespaceURI : "";
                _this.editor.dataUpdater.setAttributeNS(dataNode.ownerElement, uri, dataNode.name, selected);
            });
        };
        /**
         * Compute an appropriate position for a typeahead popup, and display it. This
         * is a convenience function that essentially combines [[computeMenuPosition]]
         * and [[displayTypeaheadPopup]].
         *
         * @param width See [[displayTypeaheadPopup]].
         *
         * @param placeholder See [[displayTypeaheadPopup]].
         *
         * @param options See [[displayTypeaheadPopup]].
         *
         * @param dismissCallback See [[displayTypeaheadPopup]].
         *
         * @param e See [[computeMenuPosition]].
         *
         * @param bottom See [[computeMenuPosition]].
         *
         * @returns The popup that was created.
         */
        EditingMenuManager.prototype.setupTypeaheadPopup = function (width, placeholder, 
        // tslint:disable-next-line:no-any
        options, 
        // tslint:disable-next-line:no-any
        dismissCallback, e, bottom) {
            var pos = this.computeMenuPosition(e, bottom);
            return this.displayTypeaheadPopup(pos.left, pos.top, width, placeholder, options, dismissCallback);
        };
        /**
         * Brings up a typeahead popup.
         *
         * @param x The position of the popup.
         *
         * @param y The position of the popup.
         *
         * @param width The width of the popup.
         *
         * @param placeholder Placeholder text to put in the input field.
         *
         * @param options Options for Twitter Typeahead.
         *
         * @param dismissCallback The callback to be called upon dismissal. It will be
         * called with the object that was selected, if any.
         *
         * @returns The popup that was created.
         */
        EditingMenuManager.prototype.displayTypeaheadPopup = function (x, y, width, placeholder, 
        // tslint:disable-next-line:no-any
        options, 
        // tslint:disable-next-line:no-any
        dismissCallback) {
            var _this = this;
            this.dismiss();
            this.caretManager.pushSelection();
            this.currentTypeahead = new typeahead_popup_1.TypeaheadPopup(this.doc, x, y, width, placeholder, options, function (obj) {
                _this.currentTypeahead = undefined;
                _this.caretManager.popSelection();
                if (dismissCallback !== undefined) {
                    dismissCallback(obj);
                }
            });
            return this.currentTypeahead;
        };
        /**
         * Computes where a menu should show up, depending on the event that triggered
         * it.
         *
         * @param e The event that triggered the menu. If no event is passed, it is
         * assumed that the menu was not triggered by a mouse event.
         *
         * @param bottom Only used when the event was not triggered by a mouse event
         * (``e === undefined``). If ``bottom`` is true, use the bottom of the DOM
         * entity used to compute the ``left`` coordinate. Otherwise, use its middle
         * to determine the ``left`` coordinate.
         *
         * @returns The top and left coordinates where the menu should appear.
         */
        EditingMenuManager.prototype.computeMenuPosition = function (e, bottom) {
            if (bottom === void 0) { bottom = false; }
            if (e === undefined) {
                // tslint:disable-next-line:no-object-literal-type-assertion
                e = {};
            }
            // Take care of cases where the user is using the mouse.
            if (e.type === "mousedown" || e.type === "mouseup" || e.type === "click" ||
                e.type === "contextmenu") {
                return { left: e.clientX, top: e.clientY };
            }
            // The next conditions happen only if the user is using the keyboard
            var mark = this.caretManager.mark;
            if (mark.inDOM) {
                mark.scrollIntoView();
                // We need to refresh immediately and acquire the client rectangle of the
                // caret.
                mark.refresh();
                var rect = mark.getBoundingClientRect();
                return {
                    top: bottom ? rect.bottom : (rect.top + (rect.height / 2)),
                    left: rect.left,
                };
            }
            var gui = domutil_1.closestByClass(this.caretManager.caret.node, "_gui", this.guiRoot);
            if (gui !== null) {
                var rect = gui.getBoundingClientRect();
                // Middle of the region.
                return {
                    top: bottom ? rect.bottom : (rect.top + (rect.height / 2)),
                    left: rect.left + (rect.width / 2),
                };
            }
            throw new Error("no position for displaying the menu");
        };
        return EditingMenuManager;
    }());
    exports.EditingMenuManager = EditingMenuManager;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL contextMenuHandler readonly actualNode treeCaret jQuery li
//  LocalWords:  prepend tabindex href getDescriptionFor iconHtml mousedown
//  LocalWords:  attributeValue mouseup contextmenu computeMenuPosition
//  LocalWords:  displayContextMenu
//# sourceMappingURL=editing-menu-manager.js.map

/***/ }),
/* 254 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 255 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(7), __webpack_require__(23), __webpack_require__(52)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, jquery_1, keyConstants, context_menu_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    jquery_1 = __importDefault(jquery_1);
    keyConstants = __importStar(keyConstants);
    /**
     * A menu for displaying completions.
     */
    var CompletionMenu = /** @class */ (function (_super) {
        __extends(CompletionMenu, _super);
        /**
         * @param editor The editor for which to create this menu.
         *
         * @param document The DOM document for which to make this context menu.
         *
         * @param x Position of the menu. The context menu may ignore this position if
         * the menu would appear off-screen.
         *
         * @param y Position of the menu.
         *
         * @param prefix The prefix. This is the data which is currently present in
         * the document and that has to be completed.
         *
         * @param items An array of possible completions.
         *
         * @param dismissCallback Function to call when the menu is dismissed.
         */
        function CompletionMenu(editor, document, x, y, prefix, items, dismissCallback) {
            var _this = _super.call(this, document, x, y, [], dismissCallback, false) || this;
            _this._focused = false;
            _this.completionPrefix = prefix;
            _this.completionItems = items;
            _this.editor = editor;
            _this.dropdown.classList.add("wed-completion-menu");
            // Remove the data toggle. This will prevent Bootstrap from closing this
            // menu when the body gets the click event.
            if (_this.dropdown.firstElementChild.getAttribute("data-toggle") !== null) {
                _this.dropdown.removeChild(_this.dropdown.firstChild);
            }
            // Remove the backdrop. We do not need a backdrop for this kind of GUI item
            // because completion menus are evanescent.
            _this.backdrop.parentNode.removeChild(_this.backdrop);
            // We need to install our own handler so that we can handle the few keys
            // that ought to be transferred to the menu itself. Remember that the focus
            // remains in the editing pane. So the editing pane, rather than the menu,
            // gets the key events.
            _this.boundCompletionKeydownHandler =
                _this.globalKeydownHandler.bind(_this);
            editor.pushGlobalKeydownHandler(_this.boundCompletionKeydownHandler);
            // We want the user to still be able to type into the document.
            editor.caretManager.focusInputField();
            _this.display([]);
            return _this;
        }
        Object.defineProperty(CompletionMenu.prototype, "focused", {
            /** Whether the completion menu has been focused. */
            get: function () {
                return this._focused;
            },
            enumerable: true,
            configurable: true
        });
        CompletionMenu.prototype.globalKeydownHandler = function (_wedEv, ev) {
            if (keyConstants.ENTER.matchesEvent(ev)) {
                this.$menu.find("li:not(.divider):visible a").first().click();
                return false;
            }
            else if (keyConstants.DOWN_ARROW.matchesEvent(ev)) {
                this._focused = true;
                this.$menu.find("li:not(.divider):visible a").first().focus();
                this.$menu.trigger(ev);
                return false;
            }
            else if (keyConstants.ESCAPE.matchesEvent(ev)) {
                this.dismiss();
                return false;
            }
            return true;
        };
        CompletionMenu.prototype.render = function () {
            var editor = this.editor;
            var items = [];
            var prefix = this.completionPrefix;
            var doc = editor.doc;
            function typeData(ev) {
                editor.type(ev.data);
            }
            for (var _i = 0, _a = this.completionItems; _i < _a.length; _i++) {
                var item = _a[_i];
                if (prefix === "") {
                    var li = doc.createElement("li");
                    // tslint:disable-next-line:no-inner-html
                    li.innerHTML = "<a href='#'></a>";
                    li.lastChild.textContent = item;
                    items.push(li);
                    jquery_1.default(li).click(item, typeData);
                }
                else if (item.lastIndexOf(prefix, 0) === 0) {
                    var li = doc.createElement("li");
                    // tslint:disable-next-line:no-inner-html
                    li.innerHTML = "<a href='#'><b></b></a>";
                    var a = li.lastChild;
                    a.firstChild.textContent = item.slice(0, prefix.length);
                    var tail = item.slice(prefix.length);
                    a.appendChild(doc.createTextNode(tail));
                    items.push(li);
                    jquery_1.default(li).click(tail, typeData);
                }
            }
            if (items.length === 0) {
                this.dismiss();
            }
            if (items.length === 1 && this.completionItems[0] === prefix) {
                this.dismiss();
            }
            _super.prototype.render.call(this, items);
        };
        CompletionMenu.prototype.dismiss = function () {
            if (this.dismissed) {
                return;
            }
            this.editor.popGlobalKeydownHandler(this.boundCompletionKeydownHandler);
            _super.prototype.dismiss.call(this);
        };
        return CompletionMenu;
    }(context_menu_1.ContextMenu));
    exports.CompletionMenu = CompletionMenu;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL li href
//# sourceMappingURL=completion-menu.js.map

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(7), __webpack_require__(52)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, jquery_1, context_menu_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    jquery_1 = __importDefault(jquery_1);
    /**
     * A menu for displaying replacement values.
     */
    var ReplacementMenu = /** @class */ (function (_super) {
        __extends(ReplacementMenu, _super);
        /**
         * @param editor The editor for which to create this menu.
         *
         * @param document The DOM document for which to make this context menu.
         *
         * @param x Position of the menu. The context menu may ignore this position if
         * the menu would appear off-screen.
         *
         * @param y Position of the menu.
         *
         * @param items An array of possible replacement values.
         *
         * @param dismissCallback Function to call when the menu is dismissed.
         */
        function ReplacementMenu(editor, document, x, y, items, dismissCallback) {
            var _this = _super.call(this, document, x, y, [], function () {
                dismissCallback(_this.selected);
            }, false) || this;
            _this.replacementItems = items;
            _this.editor = editor;
            _this.dropdown.classList.add("wed-replacement-menu");
            _this.display([]);
            return _this;
        }
        ReplacementMenu.prototype.render = function () {
            var _this = this;
            var items = [];
            var doc = this.editor.doc;
            var _loop_1 = function (item) {
                var li = doc.createElement("li");
                // tslint:disable-next-line:no-inner-html
                li.innerHTML = "<a href='#'></a>";
                li.lastChild.textContent = item;
                items.push(li);
                jquery_1.default(li).click(item, function () {
                    _this.selected = item;
                    _this.dismiss();
                });
            };
            for (var _i = 0, _a = this.replacementItems; _i < _a.length; _i++) {
                var item = _a[_i];
                _loop_1(item);
            }
            _super.prototype.render.call(this, items);
        };
        ReplacementMenu.prototype.dismiss = function () {
            if (this.dismissed) {
                return;
            }
            _super.prototype.dismiss.call(this);
        };
        return ReplacementMenu;
    }(context_menu_1.ContextMenu));
    exports.ReplacementMenu = ReplacementMenu;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL li href
//# sourceMappingURL=replacement-menu.js.map

/***/ }),
/* 258 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_258__;

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Specialized layer for error markers.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(120)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, layer_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Specialized layer for error markers.
     */
    var ErrorLayer = /** @class */ (function (_super) {
        __extends(ErrorLayer, _super);
        function ErrorLayer(el) {
            var _this = _super.call(this, el) || this;
            _this.el = el;
            return _this;
        }
        ErrorLayer.prototype.select = function (marker) {
            if (marker.parentNode !== this.el) {
                throw new Error("marker is not a child of the layer element");
            }
            this.unselectAll();
            marker.classList.add("selected");
        };
        ErrorLayer.prototype.unselectAll = function () {
            var child = this.el.firstElementChild;
            while (child !== null) {
                child.classList.remove("selected");
                child = child.nextElementSibling;
            }
        };
        return ErrorLayer;
    }(layer_1.Layer));
    exports.ErrorLayer = ErrorLayer;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL
//# sourceMappingURL=error-layer.js.map

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(7), __webpack_require__(19), __webpack_require__(23)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, jquery_1, rxjs_1, key_constants_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    jquery_1 = __importDefault(jquery_1);
    /**
     * A minibuffer is a kind of single line prompt that allows the user to enter
     * data. As the name suggests, this is inspired from Emacs.
     */
    var Minibuffer = /** @class */ (function () {
        function Minibuffer(top) {
            this._enabled = false;
            /**
             * The object on which this class and subclasses may push new events.
             */
            this._events = new rxjs_1.Subject();
            /**
             * The observable on which clients can listen for events.
             */
            this.events = this._events.asObservable();
            this.$top = jquery_1.default(top);
            this.$top.append("\
<label></label>&nbsp;<input type='text'>");
            this.promptEl = top.getElementsByTagName("label")[0];
            this.input = top.getElementsByTagName("input")[0];
            var $input = this.$input = jquery_1.default(this.input);
            $input.on("input", this.onInput.bind(this));
            $input.on("keypress", this.onKeypress.bind(this));
            $input.on("keydown", this.onKeydown.bind(this));
            this.disable();
        }
        Object.defineProperty(Minibuffer.prototype, "enabled", {
            get: function () {
                return this._enabled;
            },
            enumerable: true,
            configurable: true
        });
        Minibuffer.prototype.enable = function () {
            this._enabled = true;
            this.input.disabled = false;
            this.input.style.display = "";
            this.input.focus();
        };
        Minibuffer.prototype.disable = function () {
            this._enabled = false;
            this.input.disabled = true;
            this.input.value = "";
            this.input.style.display = "none";
        };
        Minibuffer.prototype.installClient = function (client) {
            this.client = client;
            this.keydownHandler = client.onMinibufferKeydown.bind(client);
            this.clientSubscription =
                this.events.subscribe(client.onMinibufferChange.bind(client));
            this.enable();
        };
        Minibuffer.prototype.uninstallClient = function () {
            var client = this.client;
            if (client === undefined) {
                return;
            }
            this.client = undefined;
            this.keydownHandler = undefined;
            this.clientSubscription.unsubscribe();
            this.disable();
            this.prompt = "";
            this.previous = undefined;
            client.onUninstall();
        };
        Object.defineProperty(Minibuffer.prototype, "prompt", {
            get: function () {
                return this.promptEl.textContent;
            },
            set: function (value) {
                this.promptEl.textContent = value;
            },
            enumerable: true,
            configurable: true
        });
        Minibuffer.prototype.forwardEvent = function (ev) {
            // For keypress events, we have to fill the input ourselves.
            if (ev.type === "keypress") {
                this.input.value += String.fromCharCode(ev.which);
            }
            this.$input.trigger(ev);
        };
        Minibuffer.prototype.onKeydown = function (ev) {
            if (key_constants_1.ESCAPE.matchesEvent(ev)) {
                this.uninstallClient();
                return false;
            }
            if (this.keydownHandler != null && this.keydownHandler(ev) === false) {
                return false;
            }
            return undefined;
        };
        Minibuffer.prototype.onKeypress = function (_ev) {
            var value = this.input.value;
            if (value !== this.previous) {
                this.previous = value;
                this._events.next({ name: "ChangeEvent", value: value });
            }
        };
        Minibuffer.prototype.onInput = function (_ev) {
            var value = this.input.value;
            if (value !== this.previous) {
                this.previous = value;
                this._events.next({ name: "ChangeEvent", value: value });
            }
        };
        return Minibuffer;
    }());
    exports.Minibuffer = Minibuffer;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//# sourceMappingURL=minibuffer.js.map

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(7), __webpack_require__(75), __webpack_require__(262)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, jquery_1, merge_options_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    jquery_1 = __importDefault(jquery_1);
    merge_options_1 = __importDefault(merge_options_1);
    var defaultSettings = {
        element: "body",
        type: "info",
        placement: {
            from: "top",
            align: "center",
        },
        delay: 1000,
    };
    function notify(message, settings) {
        var s = settings === undefined ? defaultSettings :
            merge_options_1.default(defaultSettings, settings);
        jquery_1.default.notify({ message: message }, s);
    }
    exports.notify = notify;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL
//# sourceMappingURL=notify.js.map

/***/ }),
/* 262 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_262__;

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(23), __webpack_require__(116)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, key_constants_1, search_replace_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Direction = search_replace_1.Direction;
    /**
     * A quick search interface. The quick search sets the minibuffer to prompt the
     * user for a term and searches through the document in the specified search
     * direction. See the section on "Quick Search" in the editor's embedded help
     * for details of how it works for the user.
     */
    var QuickSearch = /** @class */ (function () {
        /**
         * @param editor The editor for which we are searching.
         *
         * @param scroller The scroller that contains the document.
         *
         * @param direction The direction of the search.
         */
        function QuickSearch(editor, scroller, direction) {
            this.editor = editor;
            this.direction = direction;
            this.search = new search_replace_1.SearchReplace(editor, scroller);
            editor.minibuffer.installClient(this);
            this.updatePrompt();
        }
        /** Update the prompt shown to the user to indicate a new direction. */
        QuickSearch.prototype.updatePrompt = function () {
            this.editor.minibuffer.prompt = (_a = {},
                _a[search_replace_1.Direction.FORWARD] = "Search forward:",
                _a[search_replace_1.Direction.BACKWARDS] = "Search backwards:",
                _a)[this.direction];
            var _a;
        };
        /**
         * The minibuffer calls this function so that the quick search can handle
         * keydown events.
         *
         * @returns ``false`` if the key was handled, ``undefined`` otherwise.
         */
        QuickSearch.prototype.onMinibufferKeydown = function (ev) {
            if (key_constants_1.QUICKSEARCH_FORWARD.matchesEvent(ev)) {
                this.direction = search_replace_1.Direction.FORWARD;
                this.next();
                return false;
            }
            else if (key_constants_1.QUICKSEARCH_BACKWARDS.matchesEvent(ev)) {
                this.direction = search_replace_1.Direction.BACKWARDS;
                this.next();
                return false;
            }
            return undefined;
        };
        /**
         * Get the current search options to pass to the underlying search engine.
         */
        QuickSearch.prototype.getSearchOptions = function () {
            return {
                direction: this.direction,
                context: search_replace_1.Context.TEXT,
            };
        };
        /**
         * Move to the next hit in the direction specified by the user.
         */
        QuickSearch.prototype.next = function () {
            this.updatePrompt();
            this.search.next(this.getSearchOptions());
        };
        /**
         * Called by the minibuffer whenever the text in the minibuffer input changes.
         */
        QuickSearch.prototype.onMinibufferChange = function (ev) {
            this.search.updatePattern(ev.value, this.getSearchOptions());
        };
        /**
         * Called by the minibuffer when the user exits the minibuffer.
         */
        QuickSearch.prototype.onUninstall = function () {
            this.search.clearHighlight();
            this.search.setCaretToMatch();
        };
        return QuickSearch;
    }());
    exports.QuickSearch = QuickSearch;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//# sourceMappingURL=quick-search.js.map

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * A toolbar for editors.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(50)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, button_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * A toolbar is a horizontal element which contains a series of buttons from
     * which the user can initiate actions.
     *
     * The toolbar contains buttons for two types of buttons:
     *
     * - Buttons not associated with any specific mode. These are editor-wide
     *   actions that may be set by the application in which the editor instance is
     *   used.
     *
     * - Buttons specific to a mode.
     */
    var Toolbar = /** @class */ (function () {
        function Toolbar() {
            var top = this.top = document.createElement("div");
            this.top.className = "wed-toolbar";
            this.divider = document.createElement("span");
            this.divider.className = "wed-toolbar-divider";
            this.modeSpan = document.createElement("span");
            top.appendChild(this.divider);
            top.appendChild(this.modeSpan);
        }
        /**
         * Add one or more buttons to the toolbar.
         *
         * @param buttons A single button or an array of buttons to add.
         *
         * @param options Parameters affecting how the addition is made.
         */
        Toolbar.prototype.addButton = function (buttons, options) {
            if (options === void 0) { options = {}; }
            if ((buttons instanceof button_1.Button)) {
                buttons = [buttons];
            }
            var prepend = options.prepend === true;
            var right = options.right === true;
            if (prepend && right) {
                throw new Error("cannot use prepend and right at the same time.");
            }
            var top = this.top;
            var frag = top.ownerDocument.createDocumentFragment();
            for (var _i = 0, buttons_1 = buttons; _i < buttons_1.length; _i++) {
                var button = buttons_1[_i];
                if (right) {
                    var wrap = top.ownerDocument.createElement("span");
                    wrap.className = right ? "pull-right" : "";
                    button.render(wrap);
                    frag.appendChild(wrap);
                }
                else {
                    button.render(frag);
                }
            }
            if (right) {
                top.appendChild(frag);
            }
            else {
                top.insertBefore(frag, prepend ? top.firstChild : this.divider);
            }
        };
        /**
         * Set the mode related buttons. This replaces any buttons previously set by
         * this method.
         *
         * @param buttons The buttons to add to the toolbar.
         */
        Toolbar.prototype.setModeButtons = function (buttons) {
            // tslint:disable-next-line:no-inner-html
            this.modeSpan.innerHTML = "";
            for (var _i = 0, buttons_2 = buttons; _i < buttons_2.length; _i++) {
                var button = buttons_2[_i];
                button.render(this.modeSpan);
            }
        };
        return Toolbar;
    }());
    exports.Toolbar = Toolbar;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//# sourceMappingURL=toolbar.js.map

/***/ }),
/* 265 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_265__;

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(75), __webpack_require__(5), __webpack_require__(267), __webpack_require__(268)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, merge_options_1, domutil_1, mode_loader_1, wed_options_validation_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    merge_options_1 = __importDefault(merge_options_1);
    /**
     * A node for the mode tree.
     */
    var ModeNode = /** @class */ (function () {
        /**
         * @param mode The mode that this node holds.
         *
         * @param editor The editor for which we are holding a mode.
         *
         * @param selector The selector that determines to what this modes apply. This
         * selector must have been converted to operate in the GUI tree.
         *
         * @param submodes The submodes set for this mode.
         *
         * @param wedOptions The cleaned up wed options that pertain to the mode held
         * by this node.
         */
        function ModeNode(mode, editor, selector, submodes, wedOptions) {
            this.mode = mode;
            this.editor = editor;
            this.selector = selector;
            this.submodes = submodes;
            this.wedOptions = wedOptions;
        }
        /**
         * Determines whether an element matched by the selector of this ``ModeNode``
         * node in the GUI tree contains a node. If it does, this means that the mode
         * that this ``ModeNode`` holds, or one of the submode, governs the node.
         *
         * @param parentScope The element from which the selector in this ``ModeNode``
         * is interpreted.
         *
         * @param node A GUI node to test.
         *
         * @returns The element that represents the top of the mode's region of
         * activity and contains ``node``. Returns ``null`` if no element contains the
         * node.
         */
        ModeNode.prototype.containingElement = function (parentScope, node) {
            if (!parentScope.contains(node)) {
                return null;
            }
            if (this.selector === "") {
                return parentScope;
            }
            var regions = parentScope.querySelectorAll(this.selector);
            for (var _i = 0, _a = Array.from(regions); _i < _a.length; _i++) {
                var region = _a[_i];
                if (region.contains(node)) {
                    return region;
                }
            }
            return null;
        };
        ModeNode.prototype.reduceTopFirst = function (fn, initialValue) {
            var value = fn(initialValue, this);
            for (var _i = 0, _a = this.submodes; _i < _a.length; _i++) {
                var submode = _a[_i];
                value = submode.reduceTopFirst(fn, value);
            }
            return value;
        };
        ModeNode.prototype.eachTopFirst = function (fn) {
            fn(this);
            for (var _i = 0, _a = this.submodes; _i < _a.length; _i++) {
                var submode = _a[_i];
                submode.eachTopFirst(fn);
            }
        };
        Object.defineProperty(ModeNode.prototype, "attributeHidingSpecs", {
            get: function () {
                if (this._attributeHidingSpecs === undefined) {
                    var attributeHiding = this.wedOptions.attributes.autohide;
                    if (attributeHiding === undefined) {
                        // No attribute hiding...
                        this._attributeHidingSpecs = null;
                    }
                    else {
                        var method = attributeHiding.method;
                        if (method !== "selector") {
                            throw new Error("unknown attribute hiding method: " + method);
                        }
                        var specs = {
                            elements: [],
                        };
                        for (var _i = 0, _a = attributeHiding.elements; _i < _a.length; _i++) {
                            var element = _a[_i];
                            var copy = merge_options_1.default({}, element);
                            copy.selector =
                                domutil_1.toGUISelector(copy.selector, this.mode.getAbsoluteNamespaceMappings());
                            specs.elements.push(copy);
                        }
                        this._attributeHidingSpecs = specs;
                    }
                }
                return this._attributeHidingSpecs;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ModeNode.prototype, "decorator", {
            get: function () {
                if (this._decorator === undefined) {
                    this._decorator = this.mode.makeDecorator();
                }
                return this._decorator;
            },
            enumerable: true,
            configurable: true
        });
        return ModeNode;
    }());
    /**
     * A tree containing the modes configured for the current editing session.
     */
    var ModeTree = /** @class */ (function () {
        /**
         * @param editor The editor for which we are building this tree.
         *
         * @param option The ``mode`` option from the options passed to the wed
         * instance. This object will construct a tree from this option.
         */
        function ModeTree(editor, option) {
            this.editor = editor;
            this.option = option;
            this.loader = new mode_loader_1.ModeLoader(editor, editor.runtime);
        }
        /**
         * Load the modes, initialize them and build the tree.
         *
         * @returns A promise that resolves to ``this`` once all the modes are loaded
         * and initialized.
         */
        ModeTree.prototype.init = function () {
            return __awaiter(this, void 0, void 0, function () {
                var combinedErrors, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            combinedErrors = [];
                            _a = this;
                            return [4 /*yield*/, this.makeNodes("", this.option, function (path, errors) {
                                    for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
                                        var error = errors_1[_i];
                                        combinedErrors.push("mode at path " + path + " has an error in its wed options: " + error);
                                    }
                                })];
                        case 1:
                            _a.root = _b.sent();
                            if (combinedErrors.length > 0) {
                                throw new Error("wed options are incorrect: " + combinedErrors.join(""));
                            }
                            return [2 /*return*/, this];
                    }
                });
            });
        };
        /**
         * Make the nodes of the tree. This function operates recursively: it will
         * inspect ``option`` for a ``submode`` option and will call itself to create
         * the necessary child nodes.
         *
         * @param selector The selector associated with the options passed in the 2nd
         * argument.
         *
         * @param option The mode option being processed.
         *
         * @param errorHanler The handler to call on errors in processing the wed
         * options. If this handler is called at all, then the returned value should
         * not be used. We operate this way because we want to report all errors that
         * can be reported, rather than abort early.
         *
         * @returns A promise that resolves to the created node.
         */
        ModeTree.prototype.makeNodes = function (selector, option, errorHandler) {
            return __awaiter(this, void 0, void 0, function () {
                var submode, mode, submodes, _a, rawOptions, result, cleanedOptions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            submode = option.submode;
                            return [4 /*yield*/, this.loader.initMode(option.path, option.options)];
                        case 1:
                            mode = _b.sent();
                            if (!(submode !== undefined)) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.makeNodes(domutil_1.toGUISelector(submode.selector, mode.getAbsoluteNamespaceMappings()), submode.mode, errorHandler)];
                        case 2:
                            _a = [_b.sent()];
                            return [3 /*break*/, 4];
                        case 3:
                            _a = [];
                            _b.label = 4;
                        case 4:
                            submodes = _a;
                            rawOptions = mode.getWedOptions();
                            result = wed_options_validation_1.processWedOptions(rawOptions);
                            if (Array.isArray(result)) {
                                errorHandler(option.path, result);
                                // This is a lie.
                                cleanedOptions = rawOptions;
                            }
                            else {
                                cleanedOptions = result;
                            }
                            return [2 /*return*/, new ModeNode(mode, this.editor, selector, submodes, cleanedOptions)];
                    }
                });
            });
        };
        ModeTree.prototype.getMode = function (node) {
            return this.getModeNode(node).mode;
        };
        ModeTree.prototype.getDecorator = function (node) {
            return this.getModeNode(node).decorator;
        };
        ModeTree.prototype.getWedOptions = function (node) {
            var modeNode = this.getModeNode(node);
            return modeNode.wedOptions;
        };
        ModeTree.prototype.getAttributeHandling = function (node) {
            return this.getWedOptions(node).attributes.handling;
        };
        ModeTree.prototype.getAttributeHidingSpecs = function (node) {
            return this.getModeNode(node).attributeHidingSpecs;
        };
        /**
         * Get the mode node that governs a node.
         *
         * @param The node we want to check. This must be a done in the data tree or
         * the GUI tree.
         *
         * @returns The mode that governs the node.
         */
        ModeTree.prototype.getModeNode = function (node) {
            // Handle the trivial case where there is no submode first.
            if (this.root.submodes.length === 0) {
                return this.root;
            }
            if (domutil_1.contains(this.editor.dataRoot, node)) {
                var data = this.editor.fromDataNode(node);
                if (data !== null) {
                    node = data;
                }
            }
            if (!this.editor.guiRoot.contains(node)) {
                throw new Error("did not pass a node in the GUI or data tree");
            }
            var result = this._getModeNode(this.root, this.editor.guiRoot, node);
            if (result === undefined) {
                throw new Error("cannot find a mode for the node; something is wrong");
            }
            return result;
        };
        ModeTree.prototype._getModeNode = function (parent, parentScope, node) {
            var scope = parent.containingElement(parentScope, node);
            if (scope !== null) {
                var narrower = void 0;
                for (var _i = 0, _a = parent.submodes; _i < _a.length; _i++) {
                    var submode = _a[_i];
                    narrower = this._getModeNode(submode, scope, node);
                    if (narrower !== undefined) {
                        return narrower;
                    }
                }
                return parent;
            }
            return undefined;
        };
        ModeTree.prototype.getStylesheets = function () {
            return Object.keys(this.root.reduceTopFirst(function (accumulator, node) {
                for (var _i = 0, _a = node.mode.getStylesheets(); _i < _a.length; _i++) {
                    var sheet = _a[_i];
                    accumulator[sheet] = true;
                }
                return accumulator;
            }, Object.create(null)));
        };
        ModeTree.prototype.getMaxLabelLevel = function () {
            return this.maxLabelLevelNode.wedOptions.label_levels.max;
        };
        ModeTree.prototype.getInitialLabelLevel = function () {
            return this.maxLabelLevelNode.wedOptions.label_levels.initial;
        };
        Object.defineProperty(ModeTree.prototype, "maxLabelLevelNode", {
            /**
             * The node with the maximum label visibility level. If multiple nodes have
             * the same value, the earlier node "wins", and is the one provided by this
             * property. For instance, if the root node and its submode have the same
             * number, then this property has the root node for value.
             *
             * This is a cached value, computed on first access.
             */
            get: function () {
                if (this.cachedMaxLabelNode === undefined) {
                    this.cachedMaxLabelNode = this.root.reduceTopFirst(function (accumulator, node) {
                        var accMax = accumulator.wedOptions.label_levels.max;
                        var nodeMax = node.wedOptions.label_levels.max;
                        return (nodeMax > accMax) ? node : accumulator;
                    }, this.root);
                }
                return this.cachedMaxLabelNode;
            },
            enumerable: true,
            configurable: true
        });
        ModeTree.prototype.getValidators = function () {
            return this.root.reduceTopFirst(function (accumulator, node) {
                var validator = node.mode.getValidator();
                return validator !== undefined ?
                    accumulator.concat(validator) : accumulator;
            }, []);
        };
        /**
         * Call on each decorator to add its event handlers.
         */
        ModeTree.prototype.addDecoratorHandlers = function () {
            this.root.eachTopFirst(function (node) {
                node.decorator.addHandlers();
            });
        };
        /**
         * Call on each decorator to start listening.
         */
        ModeTree.prototype.startListening = function () {
            this.root.eachTopFirst(function (node) {
                node.decorator.startListening();
            });
        };
        return ModeTree;
    }());
    exports.ModeTree = ModeTree;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL submodes submode combinedErrors nd preprocessed
//  LocalWords:  stylesheets
//# sourceMappingURL=mode-tree.js.map

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Load and initialize modes.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * A class that can load modes.
     */
    var ModeLoader = /** @class */ (function () {
        /**
         * @param runtime The runtime to use to load the mode module.
         */
        function ModeLoader(editor, runtime) {
            this.editor = editor;
            this.runtime = runtime;
        }
        /**
         * Load and initialize a mode.
         *
         * @param path The path to the mode.
         *
         * @param options The mode's options.
         *
         * @returns A promise that resolves to the initialized [[Mode]] object.
         */
        ModeLoader.prototype.initMode = function (path, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var mmodule, mode;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.loadMode(path)];
                        case 1:
                            mmodule = _a.sent();
                            mode = new mmodule.Mode(this.editor, options);
                            return [4 /*yield*/, mode.init()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, mode];
                    }
                });
            });
        };
        /**
         * Loads a mode.
         *
         * @param path The path to the mode.
         *
         * @returns A promise that resolves to the module that holds the mode.
         */
        ModeLoader.prototype.loadMode = function (path) {
            return __awaiter(this, void 0, void 0, function () {
                var runtime, ex_1, ex_2, ex_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            runtime = this.runtime;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, runtime.resolveModules(path)];
                        case 2: return [2 /*return*/, (_a.sent())[0]];
                        case 3:
                            ex_1 = _a.sent();
                            return [3 /*break*/, 4];
                        case 4:
                            if (path.indexOf("/") !== -1) {
                                // It is an actual path so don't try any further loading.
                                throw new Error("can't load mode " + path);
                            }
                            path = "wed/modes/" + path + "/" + path;
                            _a.label = 5;
                        case 5:
                            _a.trys.push([5, 7, , 8]);
                            return [4 /*yield*/, runtime.resolveModules(path)];
                        case 6: return [2 /*return*/, (_a.sent())[0]];
                        case 7:
                            ex_2 = _a.sent();
                            return [3 /*break*/, 8];
                        case 8:
                            _a.trys.push([8, 10, , 11]);
                            return [4 /*yield*/, runtime.resolveModules(path + "-mode")];
                        case 9: return [2 /*return*/, (_a.sent())[0]];
                        case 10:
                            ex_3 = _a.sent();
                            return [3 /*break*/, 11];
                        case 11: return [4 /*yield*/, runtime.resolveModules(path + "_mode")];
                        case 12: return [2 /*return*/, (_a.sent())[0]];
                    }
                });
            });
        };
        return ModeLoader;
    }());
    exports.ModeLoader = ModeLoader;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL runtime
//# sourceMappingURL=mode-loader.js.map

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(103), __webpack_require__(269)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ajv_1, wedOptionsSchema) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ajv_1 = __importDefault(ajv_1);
    wedOptionsSchema = __importStar(wedOptionsSchema);
    var _wedOptionsValidator;
    function getValidator() {
        if (_wedOptionsValidator === undefined) {
            _wedOptionsValidator = new ajv_1.default().compile(wedOptionsSchema);
        }
        return _wedOptionsValidator;
    }
    /**
     * Validates and normalizes the options to a specific format.
     *
     * @param options The raw options obtained from the mode.
     *
     * @returns The cleaned options if successful. If there were error the return
     * value is an array of error messages.
     */
    function processWedOptions(options) {
        var errors = [];
        var ovalidator = getValidator();
        var valid = ovalidator(options);
        if (!valid) {
            if (ovalidator.errors != null) {
                for (var _i = 0, _a = ovalidator.errors; _i < _a.length; _i++) {
                    var error = _a[_i];
                    errors.push(error.dataPath + " " + error.message);
                }
            }
            return errors;
        }
        var max = options.label_levels.max;
        var initial = options.label_levels.initial;
        // We cannot validate this with a schema.
        if (initial > max) {
            errors.push("label_levels.initial must be <= label_levels.max");
        }
        if (options.attributes === undefined) {
            options.attributes = "hide";
        }
        // Normalize the format of options.attributes.
        if (typeof options.attributes === "string") {
            var tmp = options.attributes;
            // We need the type cast at the end because otherwise TS infers a type of
            // { handling: "hide" | "show" | "edit" }.
            // tslint:disable-next-line:no-object-literal-type-assertion
            options.attributes = {
                handling: tmp,
            };
        }
        if (errors.length !== 0) {
            return errors;
        }
        return options;
    }
    exports.processWedOptions = processWedOptions;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL
//# sourceMappingURL=wed-options-validation.js.map

/***/ }),
/* 269 */
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/schema#","$id":"http://btw.mangalam-research.org/schemas/wed/wed-options.json","title":"Wed Options","description":"A schema describing the wed options that modes may set.","definitions":{"simpleAttributesSpec":{"type":"object","properties":{"handling":{"description":"Determines how attributes are handled.","type":"string","enum":["hide"]}},"required":["handling"],"additionalProperties":false},"complexAttributesSpec":{"type":"object","properties":{"handling":{"description":"Determines how attributes are handled. The values are the same as described above with the exception that \"hide\" is not valid here.","type":"string","enum":["show","edit"]},"autohide":{"description":"Describes attributes that may be autohidden. If absent then no attributes are autohidden.","type":"object","properties":{"method":{"description":"The method by which attributes are described.","type":"string","enum":["selector"]},"elements":{"description":"Elements which have autohide enabled.","type":"array","items":{"type":"object","properties":{"selector":{"description":"CSS selector matching one or more elements. This selector must use the prefixes defined by the mode\\'s metadata. This selector is subject to limitations explained in ``domutil.toGUISelector``. The hiding algorithm ceases searching for matches as soon as one selector matches.","type":"string"},"attributes":{"description":"Specifies the attributes to hide. The array is executed in order when matching attributes. Later elements in the array override earlier elements.","type":"array","items":{"oneOf":[{"description":"Local name (optionally prefixed) of the attributes to hide. The specisl special name \"*\" means \"match all attributes\".","type":"string"},{"description":"An exclusion from the attributes to hide.","type":"object","properties":{"except":{"description":"The list of attributes to exclude.","type":"array","items":{"type":"string"}}},"additionalProperties":false,"required":["except"]}]}}},"additionalProperties":false,"required":["selector","attributes"]}}},"additionalProperties":false,"required":["method","elements"]}},"additionalProperties":false,"required":["handling"]}},"type":"object","properties":{"metadata":{"description":"Information describing the mode.","type":"object","properties":{"name":{"description":"The mode's name.","type":"string"},"authors":{"description":"The authors of the mode.","type":"array","items":{"type":"string"}},"description":{"description":"The description of the mode.","type":"string"},"license":{"description":"The licence under which the mode is distributed.","type":"string"},"copyright":{"description":"Copyright information (holders, dates, etc.)","type":"string"}},"additionalProperties":false,"required":["name","authors","description","license","copyright"]},"label_levels":{"description":"Options regarding the levels labels may take.","type":"object","properties":{"max":{"description":"The maximum label level that the mode uses.","type":"integer","minimum":1},"initial":{"description":"The initial label level to start. It must be less or equal to \"max\".","type":"integer","minimum":1}},"additionalProperties":false,"required":["max","initial"]},"attributes":{"description":"Options regarding how attributes are handled. If it is a string then it must be \"hide\", \"show\" or \"edit\".  The value \"hide\" means hide all attributes and do not allow direct editing. The value \"show\" means show the attributes but do not allow direct editing. The value \"edit\" means show attributes and allow direct editing of attributes. By \"direct editing\" we mean editing of attributes as attributes. Note that indirect editing of attributes is always allowed. A mode could bring up a modal didalog to perform an action that modifies attributes behind the scenes no matter what the option here says.\nAlso note that a mode may prevent editing of attributes on a case-by-case basis by not returning actions that edit attribute values. The setting here operates coarsely.\nThe value may be an object in order to use more features.","oneOf":[{"type":"string","enum":["hide","show","edit"]},{"$ref":"#/definitions/simpleAttributesSpec"},{"$ref":"#/definitions/complexAttributesSpec"}]}},"additionalProperties":false,"required":["metadata","label_levels"]}

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * The onbeforeunload handler for wed.
     * @author Louis-Dominique Dubeau
     * @license MPL 2.0
     * @copyright Mangalam Research Center for Buddhist Languages
     */
    function defaultCheck() {
        return true;
    }
    /**
     * Installs an ``onbeforeunload`` handler.
     *
     * @param win The window to install it on.
     *
     * @param A check to perform to verify whether prompting is necessary. If the
     * check returns ``false``, no prompting will occur. If unspecified, the prompt
     * will always be presented.
     *
     * @param Whether to force the installation even if a previous handler was
     * already installed. If ``force`` is ``false`` then if a handler was previously
     * installed **by this module** then an exception will be raised. If ``true``
     * then the old handler will be overwritten.
     */
    function install(win, check, force) {
        if (check === void 0) { check = defaultCheck; }
        if (force === void 0) { force = false; }
        if (win.onbeforeunload != null &&
            // tslint:disable-next-line:no-any
            win.onbeforeunload.installedByOnbeforeunload &&
            !force) {
            throw new Error("reregistering window with `force` false");
        }
        function newHandler() {
            var result = check();
            return result ? result : undefined;
        }
        // tslint:disable-next-line:no-any
        newHandler.installedByOnbeforeunload = true;
        win.onbeforeunload = newHandler;
    }
    exports.install = install;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  reregistering Mangalam MPL Dubeau onbeforeunload
//# sourceMappingURL=onbeforeunload.js.map

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @module onerror
 * @desc The error handler for wed.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
!(__WEBPACK_AMD_DEFINE_RESULT__ = (function f(require, exports) {
  "use strict";

  /* global Promise __WED_TESTING */
  var test = (typeof __WED_TESTING !== "undefined") && __WED_TESTING.testing;

  var log = __webpack_require__(123);
  var $ = __webpack_require__(7);

  var $modal = $(
    "\
<div class=\"modal wed-fatal-modal\" style=\"position: absolute\" tabindex=\"1\">\
  <div class=\"modal-dialog\">\
    <div class=\"modal-content\">\
      <div class=\"modal-header\">\
        <button type=\"button\" class=\"close\" data-dismiss=\"modal\"\
aria-hidden=\"true\">&times;</button>\
        <h3>Fatal Error</h3>\
      </div>\
      <div class=\"modal-body\">\
        <div class=\"save-messages\"></div>\
        <div class=\"error-message\"></div>\
      </div>\
      <div class=\"modal-footer\">\
        <a href=\"#\" class=\"btn btn-primary\" data-dismiss=\"modal\">Reload</a>\
      </div>\
    </div>\
  </div>\
</div>");

  var terminating = false;
  var termination_timeout;
  var termination_window;

  // Normally onerror will be reset by reloading but when testing with mocha we
  // don't want reloading, so we export this function.
  function _reset() {
    terminating = false;
    if (termination_timeout) {
      termination_window.clearTimeout(termination_timeout);
      termination_timeout = undefined;
    }
    $modal.off();
    $modal.modal("hide");
    $modal.remove();
  }

  function is_terminating() {
    return terminating;
  }

  exports.is_terminating = is_terminating;

  // For testing only
  if (test) {
    exports.__test = {
      $modal: $modal,
      reset: _reset,
    };
  }
  /**
   * An array into which wed editors register themselves at creation and
   * unregister themselves when destroyed.
   */
  var editors = [];


  var TERMINATION_TIMEOUT = 5000;
  // So that we can issue clearTimeout elsewhere.

  function showModal(saveMessages, errorMessage) {
    $(document.body).append($modal);
    $modal.find(".save-messages")[0].innerHTML = saveMessages;
    $modal.find(".error-message")[0].textContent = errorMessage;
    $modal.on("hide.bs.modal.modal", function hidden() {
      $modal.remove();
      window.location.reload();
    });
    $modal.modal();
  }

  function eventToMessage(ev) {
    var msg = "";
    if (ev.type === "error") {
      var message = ev.message;
      var filename = ev.filename;
      var lineno = ev.lineno;
      var colno = ev.colno;
      var err = ev.error;

      if (err) {
        msg = err.stack;
      }
      else {
        msg = filename + ":" + lineno;
        if (colno) {
          msg += "." + colno;
        }
        msg += ": " + message;
      }
    }
    else {
      msg += "Unhandled promise rejection!\n";
      var reason;
      var promise;
      var source = ev.promise ? ev : ev.detail;
      if (source) {
        reason = source.reason;
        promise = source.promise;
      }

      if (reason) {
        msg += "Reason: ";
        if (reason.stack) {
          msg += "\n" + reason.stack;
        }
        else {
          msg += reason;
        }
      }
      else if (promise) {
        msg += "Promise: " + promise;
      }
    }
    return msg;
  }

  /**
   *
   * Converts a save operation result to a message.
   *
   * @private
   * @param {string} name The name of the editor instance.
   * @param {boolean|undefined} result The result of the save operation.
   *
   * @returns {string} The message.
   */
  function to_msg(name, result) {
    var ret = ["<p>", name || "Your editor"];
    ret.push(" experienced a severe error.");
    switch (result) {
    case true:
      ret.push(" However, it successfully saved the latest state of " +
               "your data to the server. Please reload.");
      break;
    default:
      ret.push(" It was not able to save your data to the server " +
               "before terminating.");
      break;
    }
    ret.push("</p>");
    return ret.join("");
  }

  function _handler(ev) {
    ev.preventDefault();
    // This avoids an infinite loop.
    if (terminating) {
      return false;
    }
    terminating = true;

    var errorMessage = eventToMessage(ev);

    var total = editors.length;
    var results = [];
    var messages = [];
    var root = window;

    function terminate() {
      if (termination_timeout) {
        root.clearTimeout(termination_timeout);
      }

      if (total === 1) {
        messages.push(to_msg(undefined,
                             results[0] ? results[0][1] : undefined));
      }
      else {
        for (var r_ix = 0; r_ix < results.length; ++r_ix) {
          var result = results[r_ix];
          messages.push(to_msg(editors[result[0]].name, result[1]));
        }
      }
      showModal(messages.join(""), errorMessage);
    }

    termination_timeout = root.setTimeout(terminate, TERMINATION_TIMEOUT);
    termination_window = root;

    function done(success) {
      /* jshint validthis:true */
      results.push([this, success]);
    }

    var promises = [];
    // eslint-disable-next-line no-console
    console.error(errorMessage);
    log.error(errorMessage);
    for (var i = 0; i < editors.length; ++i) {
      var editor = editors[i];
      var saver = editor.saver;
      if (saver) {
        var handle = done.bind(editor);
        promises.push(saver.recover().then(handle, handle));
      }
    }

    Promise.all(promises).then(terminate);

    return false;
  }

  function handler(ev) {
    try {
      try {
        _handler(ev);
      }
      catch (ex) {
        showModal("", "Error while trying to handle fatal error: " +
                  ex.toString());
      }
    }
    catch (ex) {
      /* eslint-disable no-console */
      console.error("Error while trying to handle fatal error:");
      console.error(ex);
      /* eslint-enable */
    }
  }

  exports.handler = handler;
  exports.editors = editors;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

//  LocalWords:  clearTimeout unregister iframe RequireJS href MPL
//  LocalWords:  onerror Mangalam Dubeau validthis jshint btn jquery
//  LocalWords:  tabindex jQuery


/***/ }),
/* 272 */
/***/ (function(module, exports) {

module.exports = {"$schema":"http://json-schema.org/schema#","$id":"http://btw.mangalam-research.org/schemas/wed/options.json","title":"Options","description":"Options that may be passed to a new Wed instance.","definitions":{"mode":{"description":"Configures a mode.","type":"object","properties":{"path":{"description":"The path to the mode. Historically, wed has accepted the use of a shortened path here. So putting ``x`` would try to load the modules ``x``, ``wed/modes/x/x``, ``wed/modes/x/x-mode``, ``wed/modes/x/x_mode``. It is not recommended to do this anymore but to instead put a module name that the module loader can use immediately and irrespective of context.","type":"string"},"submode":{"description":"Configures a submode to use with the mode.","type":"object","properties":{"method":{"description":"The method by which we identify where the submode is operating.","type":"string","enum":["selector"]},"selector":{"description":"The CSS selector in the data tree that identifies regions where the submode is operating. This selector is subject to limitations explained in ``domutil.toGUISelector``. Note that the namespace prefixes in this selector are interpreted according to the mappings established by the parent mode.","type":"string"},"mode":{"$ref":"#/definitions/mode"}},"additionalProperties":false,"required":["method","selector","mode"]},"options":{"description":"The mode\\'s options. Which options are available is determined by the mode.","type":"object"}},"additionalProperties":false,"required":["path"]}},"type":"object","properties":{"name":{"description":"An optional name for distinguishing one wed instance from another. Wed makes use of it only when dealing with some types of crashes.","type":"string"},"demo":{"description":"A flag indicating that the editor instance is a demo. You probably won\\'t use this. It is meant to be used for wed\\'s own demos. A dialog is brought up on startup with the value of this option when it is a string. Otherwise a default message is shown.","oneOf":[{"type":"string"},{"type":"boolean"}]},"schema":{"description":"The schema to use for editing.","oneOf":[{"description":"A path to where the result of compiling the schema with Salve schema is located. Must be resolvable using the module system that is loading Wed.","type":"string"},{"description":"A schema pre-compiled with Salve.","type":"object"}]},"mode":{"$ref":"#/definitions/mode"},"docURL":{"description":"A URL pointing to the embedded documentation. This is the URL that wed shows in the dialog that is presented when the user presses F1. The default value is \"./doc/index.html\", which works if you copy wed\\'s distribution wholesale and use the ``kitchen-sink.html`` file to launch wed, or if you place the page that launches wed in the same location as ``kitchen-sink.html``. Otherwise, you need to provide a value here. It can be an absolute URL, or one that is relative to the path of the page that loads wed.","type":"string"},"ajaxlog":{"description":"Settings for remote logging.","type":"object","properties":{"url":{"description":"The URL where to send logs.","type":"string"},"headers":{"description":"Additional headers to use with logging requests.","type":"object","additionalProperties":{"type":"string"}}},"additionalProperties":false,"required":["url"]},"save":{"description":"Settings for saving files.","type":"object","properties":{"path":{"description":"Path to the module that implements saving.","type":"string"},"options":{"description":"Saver options. These are determined by the saver chosen.","type":"object"}},"additionalProperties":false,"required":["path"]},"bluejaxOptions":{"description":"Options for configuring bluejax globally. What this can contain is determined by Bluejax.","type":"object"}},"additionalProperties":false,"required":["schema","mode"]}

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(118), __webpack_require__(72)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, lodash_1, object_check_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    lodash_1 = __importDefault(lodash_1);
    var template = {
        tooltips: false,
    };
    /**
     * A model for preferences. The preferences stored in this object must be
     * serializable as JSON. The class itself does not enforce this, so callers must
     * be careful.
     */
    var Preferences = /** @class */ (function () {
        /**
         * @param initial initial preferences.
         * @throws {Error} If there is any error in the preferences.
         */
        function Preferences(initial) {
            if (initial === undefined) {
                // Custom code here to avoid a pointless call to ``._extend``.
                this.prefs = Object.create(null);
                this._validatePrefs(this.prefs);
                return;
            }
            this._validatePrefs(initial);
            this.prefs = lodash_1.default.extend(Object.create(null), initial);
        }
        /**
         * Validates a set of preferences.
         *
         * @param prefs The preferences to validate.
         * @throws {Error} If there is any error in the preferences.
         */
        Preferences.prototype._validatePrefs = function (prefs) {
            object_check_1.assertSummarily(template, prefs);
        };
        /**
         * Gets a preference value.
         *
         * @param name The preference to get. This name may be hierarchical:
         * ``"foo.bar"`` would get the value of ``"bar"`` in ``"foo"``.
         *
         * @returns The value of the preference. If the preference does not exist, the
         * value is ``undefined``.
         *
         * @throws {Error} If ``name`` is malformed.
         */
        // tslint:disable-next-line:no-reserved-keywords no-any
        Preferences.prototype.get = function (name) {
            var parts = name.split(".");
            var ix = 0;
            // tslint:disable-next-line:no-any
            var it = this.prefs;
            while (ix < parts.length) {
                var part = parts[ix];
                if (part === "") {
                    throw new Error("empty part in " + name);
                }
                it = it[part];
                if (it === undefined) {
                    return undefined;
                }
                ++ix;
            }
            return it;
        };
        /**
         * Sets a preference value. This method fails hard if the value added to the
         * preferences object is invalid somehow, but it fails *after* modifying the
         * preferences. This method is **not** meant to validate user input.
         *
         * @param name The preference to get. This name may be hierarchical:
         * ``"foo.bar"`` would get the value of ``"bar"`` in ``"foo"``.
         *
         * @param value The value to set the preference to.
         *
         * @throws {Error} If ``name`` is malformed, if any part of the name does not
         * exist, or if the resulting preference objects is invalid.
         */
        // tslint:disable-next-line:no-reserved-keywords no-any
        Preferences.prototype.set = function (name, value) {
            var parts = name.split(".");
            var ix = 0;
            // tslint:disable-next-line:no-any
            var it = this.prefs;
            while (ix < parts.length - 1) {
                var part = parts[ix];
                if (part === "") {
                    throw new Error("empty part in " + name);
                }
                it = it[part];
                if (it === undefined) {
                    it = it[part] = Object.create(null);
                }
                ++ix;
            }
            it[parts[ix]] = value;
            this._validatePrefs(this.prefs);
        };
        return Preferences;
    }());
    exports.Preferences = Preferences;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  wed's MPL
//# sourceMappingURL=preferences.js.map

/***/ }),
/* 274 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_274__;

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(276), __webpack_require__(7), __webpack_require__(17), __webpack_require__(27)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, bluejax, jquery_1, util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bluejax = __importStar(bluejax);
    jquery_1 = __importDefault(jquery_1);
    // tslint:disable-next-line:no-jquery-raw-elements
    var $modal = jquery_1.default("\
<div class='modal btw-fatal-modal' style='position: absolute' tabindex='1'>\
  <div class='modal-dialog'>\
    <div class='modal-content'>\
      <div class='modal-header'>\
        <button type='button' class='close' data-dismiss='modal'\
aria-hidden='true'>&times;</button>\
        <h3>Connectivity Problem</h3>\
      </div>\
      <div class='modal-body'>\
        <p>We have detected a connectivity problem: \
           <span class='reason'></span>.</p>\
        <p>When you click the Ok button, we will recheck the connectivity. \
           If there is still a problem, this dialog will remain. Otherwise, \
           the window will be reloaded. If you were modifying information \
           on the \
           site when the outage occurred, please verify that what you were \
           trying to do actually happened.</p>\
      </div>\
      <div class='modal-footer'>\
        <a href='#' class='btn btn-primary' data-dismiss='modal'>Ok</a>\
      </div>\
    </div>\
  </div>\
</div>");
    var modal = $modal[0];
    // tslint:disable:no-any
    function make(baseOpts) {
        var bajax = bluejax.make(baseOpts);
        var diagnose = bluejax.make({
            diagnose: {
                on: true,
                knownServers: baseOpts.diagnose.knownServers,
            },
        }, "promise");
        function ajax$(settings) {
            if (arguments.length > 1) {
                throw new Error("we do not support passing the URL as a separate argument; " +
                    "please use a single settings argument");
            }
            var ret = bajax.call(undefined, settings);
            ret.promise = ret.promise.catch(bluejax.ConnectivityError, function (err) {
                document.body.appendChild(modal);
                var reason = modal.querySelector("span.reason");
                reason.textContent = err.message;
                $modal.on("hide.bs.modal.modal", function (ev) {
                    ev.stopPropagation();
                    ev.preventDefault();
                    // tslint:disable-next-line:no-floating-promises
                    util_1.suppressUnhandledRejections(diagnose(baseOpts.diagnose.serverURL).then(function () {
                        window.location.reload();
                    }));
                });
                $modal.modal();
                // Canceling the promise is something that Bluebird provides. It allows
                // us to handle the exception here while at the same time declaring that
                // no future handlers should be run.
                ret.promise.cancel();
            });
            return ret;
        }
        function ajax(settings) {
            return ajax$(settings).promise;
        }
        return {
            ajax: ajax,
            ajax$: ajax$,
        };
    }
    exports.make = make;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  btw tabindex href btn MPL
//# sourceMappingURL=ajax.js.map

/***/ }),
/* 276 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_276__;

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * An XML serializer for platforms that produce erratic results.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Escape characters that cannot be represented literally in XML.
     *
     * @private
     *
     * @param text The text to escape.
     *
     * @param isAttr Whether the text is part of an attribute.
     *
     * @returns The escaped text.
     */
    function escape(text, isAttr) {
        // Even though the > escape is not *mandatory* in all cases, we still do it
        // everywhere.
        var ret = text.replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;");
        if (isAttr) {
            ret = ret.replace(/"/g, "&quot;");
        }
        return ret;
    }
    function serializeDocument(out, node) {
        if (node.childNodes.length > 1) {
            throw new Error("cannot serialize a document with more than " +
                "one child node");
        }
        if (node.firstChild === null) {
            throw new Error("cannot serialize an empty document");
        }
        _serialize(out, node.firstChild);
    }
    function serializeElement(out, node) {
        out.push("<", node.tagName);
        var attributes = node.attributes;
        for (var i = 0; i < attributes.length; ++i) {
            var attr = attributes[i];
            out.push(" ", attr.name, "=\"", escape(attr.value, true), "\"");
        }
        if (node.childNodes.length === 0) {
            out.push("/>");
        }
        else {
            out.push(">");
            var child = node.firstChild;
            while (child !== null) {
                _serialize(out, child);
                child = child.nextSibling;
            }
            out.push("</", node.tagName, ">");
        }
    }
    function serializeText(out, node) {
        out.push(escape(node.textContent, false));
    }
    var typeToHandler = Object.create(null);
    typeToHandler[Node.DOCUMENT_NODE] = serializeDocument;
    typeToHandler[Node.DOCUMENT_FRAGMENT_NODE] = serializeDocument;
    typeToHandler[Node.ELEMENT_NODE] = serializeElement;
    typeToHandler[Node.TEXT_NODE] = serializeText;
    function _serialize(out, node) {
        var handler = typeToHandler[node.nodeType];
        if (handler === undefined) {
            throw new Error("can't handle node of type: " + node.nodeType);
        }
        handler(out, node);
    }
    /**
     * Serialize an XML tree. This serializer implements only as much as wed
     * currently needs. Notably, this does not currently serialize comments, CDATA,
     * or processing instructions.
     *
     * @param root The root of the document.
     *
     * @returns The serialized document.
     */
    function serialize(root) {
        var out = [];
        _serialize(out, root);
        return out.join("");
    }
    exports.serialize = serialize;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL lt nodeType CDATA
//# sourceMappingURL=serializer.js.map

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * A collection of stock modals for an editor instance.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(22), __webpack_require__(279)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, browsers_1, buildInfo) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    buildInfo = __importStar(buildInfo);
    /**
     * A collection of stock modals.
     */
    var StockModals = /** @class */ (function () {
        function StockModals(maker) {
            this.maker = maker;
            this.modals = new Map();
        }
        StockModals.prototype.getModal = function (name) {
            var modal = this.modals.get(name);
            if (modal === undefined) {
                modal = this.make(name);
                this.modals.set(name, modal);
            }
            return modal;
        };
        StockModals.prototype.make = function (name) {
            var modal = this.maker.makeModal();
            switch (name) {
                case "limitation":
                    modal.setTitle("Cannot proceed");
                    break;
                case "paste":
                    modal.setTitle("Invalid structure");
                    modal.setBody("<p>The data you are trying to paste appears to be \
XML. However, pasting it here will result in a structurally invalid document. \
Do you want to paste it as text instead? (If you answer negatively, the data \
won't be pasted at all.)<p>");
                    modal.addYesNo();
                    break;
                case "straddling":
                    modal.setTitle("Invalid modification");
                    modal.setBody("<p>The text selected straddles disparate \
elements of the document. You may be able to achieve what you want to do by \
selecting smaller sections.<p>");
                    modal.addButton("Ok", true);
                    break;
                case "help":
                    var docURL = this.maker.docURL;
                    // These are different on browsers running in OSX. So we later edit the
                    // list as needed.
                    var otherKeys = "  <li>Ctrl-s: Save</li>\n  <li>Ctrl-x: Cut</li>\n  <li>Ctrl-v: Paste</li>\n  <li>Ctrl-c: Copy</li>\n  <li>Ctrl-z: Undo</li>\n  <li>Ctrl-y: Redo</li>\n  <li>Ctrl-/: Bring up a contextual menu.</li>\n  <li>Ctrl-?: Bring up a replacement menu.</li>\n  <li>Ctrl-f: Quick search forward.</li>\n  <li>Ctrl-b: Quick search backwards.</li>\n  <li>Ctrl-Shift-f: Search forward.</li>\n  <li>Ctrl-Shift-b: Search backwards.</li>\n";
                    // These combinations don't exist on OSX.
                    var visibility = "  <li>Ctrl-[: Decrease the label visibility level.</li>\n  <li>Ctrl-]: Increase the label visibility level.</li>\n";
                    modal.setTitle("Help");
                    modal.setBody("\n<p>Click <a href='" + docURL + "' target='_blank'>this link</a> to see\nwed's generic help. The link by default will open in a new tab.</p>\n<ul>\n  <li>Clicking the right mouse button on the document contents brings up a\ncontextual menu.</li>\n  <li>F1: help</li>\n  " + (browsers_1.OSX ? otherKeys.replace(/Ctrl-/g, "Cmd-") : visibility + otherKeys) + "\n</ul>\n<p class='wed-build-info'>Build descriptor: " + buildInfo.desc + "<br/>\nBuild date: " + buildInfo.date + "</p>");
                    modal.addButton("Close", true);
                    break;
                case "disconnect":
                    modal.setTitle("Disconnected from server!");
                    modal.setBody("It appears your browser is disconnected from the server. Editing is \
frozen until the connection is reestablished. Dismissing this dialog will \
retry saving. If the operation is successful, you'll be able to continue \
editing. If not, this message will reappear.");
                    modal.addButton("Retry", true);
                    break;
                case "editedByOther":
                    modal.setTitle("Edited by another!");
                    modal.setBody("Your document was edited by someone else since you last loaded or \
saved it. You must reload it before trying to edit further.");
                    modal.addButton("Reload", true);
                    break;
                case "tooOld":
                    modal.setTitle("Newer version!");
                    modal.setBody("There is a newer version of the editor. You must reload it before \
trying to edit further.");
                    modal.addButton("Reload", true);
                    break;
                default:
                    // This will err at compilation time if we forget a case above.
                    var badName = name;
                    // If we do get here by mistake, we get a runtime error.
                    throw new Error("cannot handle name " + badName);
            }
            return modal;
        };
        return StockModals;
    }());
    exports.StockModals = StockModals;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL editedByOther tooOld href docUrl wed's Ctrl ul li runtime
//  LocalWords:  badName Cmd OSX
//# sourceMappingURL=stock-modals.js.map

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  return {
    desc: 'v2.0.0-3-g031e9d63',
    date: 'Thu Jun 07 2018 11:01:25 GMT-0400 (EDT)'
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(5), __webpack_require__(53)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, domutil_1, undo) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    undo = __importStar(undo);
    function getOuterHTML(node) {
        return (node == null) ? "undefined" : node.outerHTML;
    }
    /**
     * Undo operation for [["wed/tree-updater".InsertNodeAtEvent]].
     *
     * The parameters after ``tree_updater`` are the same as the properties on the
     * event corresponding to this class.
     *
     * @private
     */
    var InsertNodeAtUndo = /** @class */ (function (_super) {
        __extends(InsertNodeAtUndo, _super);
        /**
         * @param treeUpdater The tree updater to use to perform undo or redo
         * operations.
         *
         * @param parent
         * @param index
         */
        function InsertNodeAtUndo(treeUpdater, parent, index) {
            var _this = _super.call(this, "InsertNodeAtUndo") || this;
            _this.treeUpdater = treeUpdater;
            _this.index = index;
            _this.parentPath = treeUpdater.nodeToPath(parent);
            return _this;
            // We do not take a node parameter and save it here because further
            // manipulations could take the node out of the tree. So we cannot rely in a
            // reference to a node. What we do instead is keep a path to the parent and
            // the index. The ``node`` property will be filled as needed when
            // undoing/redoing.
        }
        InsertNodeAtUndo.prototype.performUndo = function () {
            if (this.node !== undefined) {
                throw new Error("undo called twice in a row");
            }
            var parent = this.treeUpdater.pathToNode(this.parentPath);
            this.node = parent.childNodes[this.index].cloneNode(true);
            this.treeUpdater.deleteNode(parent.childNodes[this.index]);
        };
        InsertNodeAtUndo.prototype.performRedo = function () {
            if (this.node === undefined) {
                throw new Error("redo called twice in a row");
            }
            var parent = this.treeUpdater.pathToNode(this.parentPath);
            this.treeUpdater.insertNodeAt(parent, this.index, this.node);
            this.node = undefined;
        };
        InsertNodeAtUndo.prototype.toString = function () {
            return [this.desc, "\n",
                " Parent path: ", this.parentPath, "\n",
                " Index: ", this.index, "\n",
                " Node: ", getOuterHTML(this.node), "\n"].join("");
        };
        return InsertNodeAtUndo;
    }(undo.Undo));
    /**
     * Undo operation for [["wed/tree-updater".SetTextNodeValueEvent]].
     *
     * @private
     */
    var SetTextNodeValueUndo = /** @class */ (function (_super) {
        __extends(SetTextNodeValueUndo, _super);
        /**
         * @param treeUpdater The tree updater to use to perform undo or redo
         * operations.
         */
        function SetTextNodeValueUndo(treeUpdater, node, value, oldValue) {
            var _this = _super.call(this, "SetTextNodeValueUndo") || this;
            _this.treeUpdater = treeUpdater;
            _this.value = value;
            _this.oldValue = oldValue;
            _this.nodePath = treeUpdater.nodeToPath(node);
            return _this;
        }
        SetTextNodeValueUndo.prototype.performUndo = function () {
            // The node is necessarily a text node.
            var node = this.treeUpdater.pathToNode(this.nodePath);
            this.treeUpdater.setTextNodeValue(node, this.oldValue);
        };
        SetTextNodeValueUndo.prototype.performRedo = function () {
            // The node is necessarily a text node.
            var node = this.treeUpdater.pathToNode(this.nodePath);
            this.treeUpdater.setTextNodeValue(node, this.value);
        };
        SetTextNodeValueUndo.prototype.toString = function () {
            return [this.desc, "\n",
                " Node path: ", this.nodePath, "\n",
                " Value: ", this.value, "\n",
                " Old value: ", this.oldValue, "\n"].join("");
        };
        return SetTextNodeValueUndo;
    }(undo.Undo));
    /**
     * Undo operation for [["wed/tree-updater".BeforeDeleteNodeEvent]].
     *
     * @private
     */
    var DeleteNodeUndo = /** @class */ (function (_super) {
        __extends(DeleteNodeUndo, _super);
        /**
         * @param treeUpdater The tree updater to use to perform undo or redo
         * operations.
         */
        function DeleteNodeUndo(treeUpdater, node) {
            var _this = _super.call(this, "DeleteNodeUndo") || this;
            _this.treeUpdater = treeUpdater;
            var parent = node.parentNode;
            _this.parentPath = treeUpdater.nodeToPath(parent);
            _this.index = domutil_1.indexOf(parent.childNodes, node);
            _this.node = node.cloneNode(true);
            return _this;
        }
        DeleteNodeUndo.prototype.performUndo = function () {
            if (this.node === undefined) {
                throw new Error("undo called twice in a row");
            }
            var parent = this.treeUpdater.pathToNode(this.parentPath);
            this.treeUpdater.insertNodeAt(parent, this.index, this.node);
            this.node = undefined;
        };
        DeleteNodeUndo.prototype.performRedo = function () {
            if (this.node !== undefined) {
                throw new Error("redo called twice in a row");
            }
            var parent = this.treeUpdater.pathToNode(this.parentPath);
            this.node = parent.childNodes[this.index].cloneNode(true);
            this.treeUpdater.deleteNode(parent.childNodes[this.index]);
        };
        DeleteNodeUndo.prototype.toString = function () {
            return [this.desc, "\n",
                " Parent path: ", this.parentPath, "\n",
                " Index: ", this.index, "\n",
                " Node: ", getOuterHTML(this.node), "\n"].join("");
        };
        return DeleteNodeUndo;
    }(undo.Undo));
    /**
     * Undo operation for [["wed/tree-updater".SetAttributeNSEvent]].
     *
     * @private
     */
    var SetAttributeNSUndo = /** @class */ (function (_super) {
        __extends(SetAttributeNSUndo, _super);
        /**
         * @param treeUpdater The tree updater to use to perform undo or redo
         * operations.
         */
        function SetAttributeNSUndo(treeUpdater, node, ns, attribute, oldValue, newValue) {
            var _this = _super.call(this, "SetAttributeNSUndo") || this;
            _this.treeUpdater = treeUpdater;
            _this.ns = ns;
            _this.attribute = attribute;
            _this.oldValue = oldValue;
            _this.newValue = newValue;
            _this.nodePath = treeUpdater.nodeToPath(node);
            return _this;
        }
        SetAttributeNSUndo.prototype.performUndo = function () {
            var node = this.treeUpdater.pathToNode(this.nodePath);
            this.treeUpdater.setAttributeNS(node, this.ns, this.attribute, this.oldValue);
        };
        SetAttributeNSUndo.prototype.performRedo = function () {
            var node = this.treeUpdater.pathToNode(this.nodePath);
            this.treeUpdater.setAttributeNS(node, this.ns, this.attribute, this.newValue);
        };
        SetAttributeNSUndo.prototype.toString = function () {
            return [this.desc, "\n",
                " Node path: ", this.nodePath, "\n",
                " Namespace: ", this.ns, "\n",
                " Attribute Name: ", this.attribute, "\n",
                " New value: ", this.newValue, "\n",
                " Old value: ", this.oldValue, "\n"].join("");
        };
        return SetAttributeNSUndo;
    }(undo.Undo));
    /**
     * Records undo operations.
     */
    var UndoRecorder = /** @class */ (function () {
        /**
         * @param editor The editor for which this recorder is created.
         *
         * @param treeUpdater The tree updater on which to listen for modifications.
         */
        function UndoRecorder(editor, treeUpdater) {
            var _this = this;
            this.editor = editor;
            this.treeUpdater = treeUpdater;
            this.suppress = false;
            treeUpdater.events.subscribe(function (ev) {
                switch (ev.name) {
                    case "InsertNodeAt":
                        _this.insertNodeAtHandler(ev);
                        break;
                    case "SetTextNodeValue":
                        _this.setTextNodeValueHandler(ev);
                        break;
                    case "BeforeDeleteNode":
                        _this.beforeDeleteNodeHandler(ev);
                        break;
                    case "SetAttributeNS":
                        _this.setAttributeNSHandler(ev);
                        break;
                    default:
                    // Do nothing...
                }
            });
        }
        /**
         * Sets the suppression state. When suppression is on, the recorder does not
         * record anything. When off, the recorder records. The recorder's suppression
         * state is initially off.
         *
         * @param suppress Whether to suppress or not.
         *
         * @throws {Error} If the call does not change the suppression state.
         */
        UndoRecorder.prototype.suppressRecording = function (suppress) {
            if (suppress === this.suppress) {
                throw new Error("spurious call to suppressRecording");
            }
            this.suppress = suppress;
        };
        UndoRecorder.prototype.insertNodeAtHandler = function (ev) {
            if (this.suppress) {
                return;
            }
            this.editor.recordUndo(new InsertNodeAtUndo(this.treeUpdater, ev.parent, ev.index));
        };
        UndoRecorder.prototype.setTextNodeValueHandler = function (ev) {
            if (this.suppress) {
                return;
            }
            this.editor.recordUndo(new SetTextNodeValueUndo(this.treeUpdater, ev.node, ev.value, ev.oldValue));
        };
        UndoRecorder.prototype.beforeDeleteNodeHandler = function (ev) {
            if (this.suppress) {
                return;
            }
            this.editor.recordUndo(new DeleteNodeUndo(this.treeUpdater, ev.node));
        };
        UndoRecorder.prototype.setAttributeNSHandler = function (ev) {
            if (this.suppress) {
                return;
            }
            this.editor.recordUndo(new SetAttributeNSUndo(this.treeUpdater, ev.node, ev.ns, ev.attribute, ev.oldValue, ev.newValue));
        };
        return UndoRecorder;
    }());
    exports.UndoRecorder = UndoRecorder;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  domutil insertNodeAt setTextNodeValue deleteNode ev param MPL
//  LocalWords:  InsertNodeAtUndo SetTextNodeValueUndo DeleteNodeUndo Dubeau
//  LocalWords:  pathToNode nodeToPath Mangalam SetAttributeNSUndo
//  LocalWords:  BeforeDeleteNode SetAttributeNS suppressRecording
//# sourceMappingURL=undo-recorder.js.map

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Controller managing the validation logic of a wed editor.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(113), __webpack_require__(70), __webpack_require__(13), __webpack_require__(6), __webpack_require__(5), __webpack_require__(71), __webpack_require__(126), __webpack_require__(282), __webpack_require__(283), __webpack_require__(17), __webpack_require__(37)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, salve_1, salve_dom_1, dloc_1, domtypeguards_1, domutil_1, guiroot_1, task_runner_1, process_validation_errors_1, refresh_validation_errors_1, util_1, wed_util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var stateToStr = {};
    stateToStr[salve_dom_1.WorkingState.INCOMPLETE] = "stopped";
    stateToStr[salve_dom_1.WorkingState.WORKING] = "working";
    stateToStr[salve_dom_1.WorkingState.INVALID] = "invalid";
    stateToStr[salve_dom_1.WorkingState.VALID] = "valid";
    var stateToProgressType = {};
    stateToProgressType[salve_dom_1.WorkingState.INCOMPLETE] = "info";
    stateToProgressType[salve_dom_1.WorkingState.WORKING] = "info";
    stateToProgressType[salve_dom_1.WorkingState.INVALID] = "danger";
    stateToProgressType[salve_dom_1.WorkingState.VALID] = "success";
    // This is a utility function for the method of the same name. If the mode is
    // set to not display attributes or if a custom decorator is set to not display
    // a specific attribute, then finding the GUI location of the attribute won't be
    // possible. In such case, we want to fail nicely rather than crash to the
    // ground.
    //
    // (NOTE: What we're talking about is not the label visibility level being such
    // that attributes are not *seen* but have DOM elements for them in the GUI
    // tree. We're talking about a situation in which the mode's decorator does not
    // create DOM elements for the attributes.)
    //
    function findInsertionPoint(editor, node, index) {
        var caretManager = editor.caretManager;
        try {
            return caretManager.fromDataLocation(node, index);
        }
        catch (ex) {
            if (ex instanceof guiroot_1.AttributeNotFound) {
                // This happens only if node points to an attribute.
                return caretManager.fromDataLocation(node.ownerElement, 0);
            }
            throw ex;
        }
    }
    /**
     * Add a list of elements to a ``DocumentFragment``.
     *
     * @param doc The document from which to create the fragment.
     *
     * @param items The elements to add to the new fragment.
     *
     * @returns A new fragment that contains the elements passed.
     */
    function elementsToFrag(doc, items) {
        var frag = doc.createDocumentFragment();
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            frag.appendChild(item);
        }
        return frag;
    }
    /**
     * Convert the names in an error message from their expanded form to their
     * prefix, local name form.
     *
     * @param error The error.
     *
     * @param resolve The resolver to use to convert the names.
     *
     * @returns The converted names.
     */
    function convertNames(error, resolver) {
        // Turn the names into qualified names.
        var convertedNames = [];
        var patterns = error.getNames();
        for (var _i = 0, patterns_1 = patterns; _i < patterns_1.length; _i++) {
            var pattern = patterns_1[_i];
            var names = pattern.toArray();
            var convertedName = "";
            if (names !== null) {
                // Simple pattern, just translate all names one by one.
                var conv = [];
                for (var _a = 0, names_1 = names; _a < names_1.length; _a++) {
                    var name_1 = names_1[_a];
                    conv.push(resolver.unresolveName(name_1.ns, name_1.name));
                }
                convertedName = conv.join(" or ");
            }
            else {
                // We convert the complex pattern into something reasonable.
                convertedName = util_1.convertPatternObj(pattern.toObject(), resolver);
            }
            convertedNames.push(convertedName);
        }
        return convertedNames;
    }
    /**
     * Controls the validator and the tasks that pertain to error processing and
     * refreshing. Takes care of reporting errors to the user.
     */
    var ValidationController = /** @class */ (function () {
        /**
         * @param editor The editor for which this controller is created.
         *
         * @param validator The validator which is under control.
         *
         * @param resolver A name resolver to resolve names in errors.
         *
         * @param scroller The scroller for the edited contents.
         *
         * @param guiRoot The DOM element representing the root of the edited
         * document.
         *
         * @param progressBar: The DOM element which contains the validation progress
         * bar.
         *
         * @param validationMessage: The DOM element which serves to report the
         * validation status.
         *
         * @param errorLayer: The layer that holds error markers.
         *
         * @param errorList: The DOM element which serves to contain the error list.
         *
         * @param errorItemHandler: An event handler for the markers.
         */
        function ValidationController(editor, validator, resolver, scroller, guiRoot, progressBar, validationMessage, errorLayer, errorList, errorItemHandler) {
            this.editor = editor;
            this.validator = validator;
            this.resolver = resolver;
            this.scroller = scroller;
            this.guiRoot = guiRoot;
            this.progressBar = progressBar;
            this.validationMessage = validationMessage;
            this.errorLayer = errorLayer;
            this.errorList = errorList;
            this.errorItemHandler = errorItemHandler;
            this.lastDoneShown = 0;
            /**
             * This holds the timeout set to process validation errors in batch.  The
             * delay in ms before we consider a batch ready to process.
             */
            this.processErrorsDelay = 500;
            this._errors = [];
            this.document = guiRoot.ownerDocument;
            this.$errorList = $(errorList);
            this.refreshErrorsRunner =
                new task_runner_1.TaskRunner(new refresh_validation_errors_1.RefreshValidationErrors(this));
            this.processErrorsRunner =
                new task_runner_1.TaskRunner(new process_validation_errors_1.ProcessValidationErrors(this));
            this.validator.events.addEventListener("state-update", this.onValidatorStateChange.bind(this));
            this.validator.events.addEventListener("error", this.onValidatorError.bind(this));
            this.validator.events.addEventListener("reset-errors", this.onResetErrors.bind(this));
        }
        /**
         * @returns a shallow copy of the error list.
         */
        ValidationController.prototype.copyErrorList = function () {
            return this._errors.slice();
        };
        /**
         * Stops all tasks and the validator.
         */
        ValidationController.prototype.stop = function () {
            this.refreshErrorsRunner.stop();
            this.processErrorsRunner.stop();
            this.validator.stop();
        };
        /**
         * Resumes all tasks and the validator.
         */
        ValidationController.prototype.resume = function () {
            this.refreshErrorsRunner.resume();
            this.processErrorsRunner.resume();
            this.validator.start(); // Yes, start is the right method.
        };
        /**
         * Handles changes in the validator state. Updates the progress bar and the
         * validation status.
         */
        ValidationController.prototype.onValidatorStateChange = function (workingState) {
            var state = workingState.state, partDone = workingState.partDone;
            if (state === salve_dom_1.WorkingState.WORKING) {
                // Do not show changes less than 5%
                if (partDone - this.lastDoneShown < 0.05) {
                    return;
                }
            }
            else if (state === salve_dom_1.WorkingState.VALID || state === salve_dom_1.WorkingState.INVALID) {
                // We're done so we might as well process the errors right now.
                this.processErrors();
            }
            this.lastDoneShown = partDone;
            var percent = partDone * 100;
            var progress = this.progressBar;
            progress.style.width = percent + "%";
            progress.classList.remove("progress-bar-info", "progress-bar-success", "progress-bar-danger");
            progress.classList.add("progress-bar-" + stateToProgressType[state]);
            this.validationMessage.textContent = stateToStr[state];
        };
        /**
         * Handles a validation error reported by the validator. It records the error
         * and schedule future processing of the errors.
         */
        ValidationController.prototype.onValidatorError = function (ev) {
            this._errors.push({
                ev: ev,
                marker: undefined,
                item: undefined,
            });
            // We "batch" validation errors to process multiple of them in one shot
            // rather than call _processErrors each time.
            if (this.processErrorsTimeout === undefined) {
                this.processErrorsTimeout = setTimeout(this.processErrors.bind(this), this.processErrorsDelay);
            }
        };
        /**
         * Handles resets of the validation state.
         */
        ValidationController.prototype.onResetErrors = function (ev) {
            if (ev.at !== 0) {
                throw new Error("internal error: wed does not yet support " +
                    "resetting errors at an arbitrary location");
            }
            this.lastDoneShown = 0;
            this.clearErrors();
        };
        /**
         * Resets the state of the error processing task and resumes it
         * as soon as possible.
         */
        ValidationController.prototype.processErrors = function () {
            // Clear the timeout... because this function may be called from somewhere
            // else than the timeout.
            if (this.processErrorsTimeout !== undefined) {
                clearTimeout(this.processErrorsTimeout);
                this.processErrorsTimeout = undefined;
            }
            this.processErrorsRunner.reset();
            this.editor.resumeTaskWhenPossible(this.processErrorsRunner);
        };
        /**
         * Find where the error represented by the event passed should be marked.
         *
         * @param ev The error reported by the validator.
         *
         * @returns A location, if possible.
         */
        ValidationController.prototype.findInsertionPoint = function (ev) {
            var error = ev.error, dataNode = ev.node, index = ev.index;
            if (dataNode == null) {
                throw new Error("error without a node");
            }
            if (index === undefined) {
                throw new Error("error without an index");
            }
            var isAttributeNameError = error instanceof salve_1.AttributeNameError;
            var insertAt;
            if (isAttributeNameError) {
                var guiNode = wed_util_1.getGUINodeIfExists(this.editor, dataNode);
                if (guiNode === undefined) {
                    return undefined;
                }
                // Attribute name errors can have two causes: the attribute is not
                // allowed, or an attribute is missing. In the former case, the error
                // points to the attribute node. In the latter case, it points to the
                // element that's missing the attribute.
                var insertionNode = void 0;
                if (domtypeguards_1.isAttr(dataNode)) {
                    // Spurious attribute.
                    insertionNode = guiNode;
                }
                else {
                    // Missing attribute.
                    if (!domtypeguards_1.isElement(guiNode)) {
                        throw new Error("attribute name errors should be associated with " +
                            "elements");
                    }
                    insertionNode =
                        guiNode.querySelector("._gui.__start_label ._greater_than");
                }
                insertAt = dloc_1.DLoc.mustMakeDLoc(this.guiRoot, insertionNode, 0);
            }
            else {
                insertAt = findInsertionPoint(this.editor, dataNode, index);
                if (insertAt === undefined) {
                    return undefined;
                }
                insertAt = this.editor.caretManager.normalizeToEditableRange(insertAt);
            }
            return insertAt;
        };
        /**
         * Process a single error. This will compute the location of the error marker
         * and will create a marker to add to the error layer, and a list item to add
         * to the list of errors.
         *
         * @return ``false`` if there was no insertion point for the error, and thus
         * no marker or item were created. ``true`` otherwise.
         */
        // tslint:disable-next-line:max-func-body-length
        ValidationController.prototype.processError = function (err) {
            var _this = this;
            this.editor.expandErrorPanelWhenNoNavigation();
            var ev = err.ev;
            var error = ev.error, dataNode = ev.node;
            if (dataNode == null) {
                throw new Error("error without a node");
            }
            var insertAt = this.findInsertionPoint(ev);
            if (insertAt === undefined) {
                return false;
            }
            var closestElement = insertAt.node;
            if (closestElement.nodeType === Node.TEXT_NODE) {
                closestElement = closestElement.parentNode;
            }
            if (!domtypeguards_1.isElement(closestElement)) {
                throw new Error("we should be landing on an element");
            }
            var item;
            var marker = err.marker;
            // We may be getting here with an error that already has a marker. It has
            // already been "processed" and only needs its location updated. Otherwise,
            // this is a new error: create a list item and marker for it.
            if (marker === undefined) {
                // Turn the names into qualified names.
                var convertedNames = convertNames(error, this.resolver);
                var doc = insertAt.node.ownerDocument;
                item = doc.createElement("li");
                var linkId_1 = item.id = util_1.newGenericID();
                if (domtypeguards_1.isAttr(dataNode) &&
                    domutil_1.isNotDisplayed(closestElement, insertAt.root)) {
                    item.textContent = error.toStringWithNames(convertedNames);
                    item.title = "This error belongs to an attribute " +
                        "which is not currently displayed.";
                }
                else {
                    marker = doc.createElement("span");
                    marker.className = "_phantom wed-validation-error";
                    var $marker = $(marker);
                    $marker.mousedown(function () {
                        _this.$errorList.parents(".panel-collapse").collapse("show");
                        var $link = $(_this.errorList.querySelector("#" + linkId_1));
                        var $scrollable = _this.$errorList.parent(".panel-body");
                        $scrollable.animate({
                            scrollTop: $link.offset().top - $scrollable.offset().top +
                                $scrollable[0].scrollTop,
                        });
                        _this.errorLayer.select(marker);
                        $link.siblings().removeClass("selected");
                        $link.addClass("selected");
                        // We move the caret ourselves and prevent further processing of this
                        // event. Older versions of wed let the event trickle up and be
                        // handled by the general caret movement code but that would sometimes
                        // result in a caret being put in a bad position.
                        _this.editor.caretManager.setCaret(insertAt);
                        return false;
                    });
                    var markerId = marker.id = util_1.newGenericID();
                    var link = doc.createElement("a");
                    link.href = "#" + markerId;
                    link.textContent = error.toStringWithNames(convertedNames);
                    item.appendChild(link);
                    $(item.firstElementChild).click(err, this.errorItemHandler);
                }
            }
            // Update the marker's location.
            if (marker !== undefined) {
                var _a = wed_util_1.boundaryXY(insertAt), top_1 = _a.top, left = _a.left;
                var _b = this.scroller, scrollTop = _b.scrollTop, scrollLeft = _b.scrollLeft;
                var scrollerPos = this.scroller.getBoundingClientRect();
                var fontSize = parseFloat(this.editor.window.getComputedStyle(closestElement)
                    .fontSize);
                var height = fontSize * 0.2;
                marker.style.height = height + "px";
                // We move down from the top of the box produced by boundaryXY because
                // when targeting parent, it may return a box which is as high as the
                // parent's contents.
                marker.style.top =
                    top_1 + fontSize - height - scrollerPos.top + scrollTop + "px";
                marker.style.left = left - scrollerPos.left + scrollLeft + "px";
            }
            if (err.item === undefined) {
                err.item = item;
            }
            err.marker = marker;
            return true;
        };
        /**
         * Clear all validation errors. This makes the editor forget and updates the
         * GUI to remove all displayed errors.
         */
        ValidationController.prototype.clearErrors = function () {
            this._errors = [];
            this.refreshErrorsRunner.stop();
            this.processErrorsRunner.stop();
            this.errorLayer.clear();
            var list = this.errorList;
            while (list.lastChild != null) {
                list.removeChild(list.lastChild);
            }
            this.refreshErrorsRunner.reset();
            this.processErrorsRunner.reset();
        };
        /**
         * Terminate the controller. This stops all runners and clears any unexpired
         * timeout.
         */
        ValidationController.prototype.terminate = function () {
            if (this.processErrorsTimeout !== undefined) {
                clearTimeout(this.processErrorsTimeout);
            }
            this.stop();
        };
        /**
         * This method updates the location markers of the errors.
         */
        ValidationController.prototype.refreshErrors = function () {
            this.refreshErrorsRunner.reset();
            this.editor.resumeTaskWhenPossible(this.refreshErrorsRunner);
        };
        /**
         * This method recreates the error messages and the error markers associated
         * with the errors that the editor already knows.
         */
        ValidationController.prototype.recreateErrors = function () {
            this.errorLayer.clear();
            var list = this.errorList;
            while (list.lastChild !== null) {
                list.removeChild(list.lastChild);
            }
            for (var _i = 0, _a = this._errors; _i < _a.length; _i++) {
                var error = _a[_i];
                error.marker = undefined;
                error.item = undefined;
            }
            this.processErrors();
        };
        /**
         * Add items to the list of errors.
         *
         * @param items The items to add to the list of errors.
         */
        ValidationController.prototype.appendItems = function (items) {
            this.errorList.appendChild(elementsToFrag(this.document, items));
        };
        /**
         * Add markers to the layer that is used to contain error markers.
         *
         * @param markers The markers to add.
         */
        ValidationController.prototype.appendMarkers = function (markers) {
            this.errorLayer.append(elementsToFrag(this.document, markers));
        };
        return ValidationController;
    }());
    exports.ValidationController = ValidationController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL scroller processErrors li markerId loc scrollerPos px
//  LocalWords:  scrollTop scrollLeft
//# sourceMappingURL=validation-controller.js.map

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * This task processes the new validation errors that have not been processed
     * yet.
     */
    var ProcessValidationErrors = /** @class */ (function () {
        function ProcessValidationErrors(controller) {
            this.controller = controller;
            this.errors = [];
        }
        ProcessValidationErrors.prototype.reset = function () {
            this.errors = this.controller.copyErrorList();
        };
        ProcessValidationErrors.prototype.cycle = function () {
            var controller = this.controller;
            var errors = this.errors;
            if (errors.length === 0) {
                return false;
            }
            // The figure in the next line is arbitrary.
            var count = Math.min(errors.length, 30);
            var items = [];
            var markers = [];
            var ix = 0;
            while (count !== 0) {
                count--;
                var error = errors[ix];
                if (controller.processError(error)) {
                    errors.splice(ix, 1);
                    var item = error.item;
                    if (item === undefined) {
                        throw new Error("there should be an item");
                    }
                    items.push(item);
                    var marker = error.marker;
                    // There may be no marker set.
                    if (marker != null) {
                        markers.push(marker);
                    }
                }
                else {
                    ++ix;
                }
            }
            controller.appendItems(items);
            controller.appendMarkers(markers);
            return errors.length !== 0;
        };
        return ProcessValidationErrors;
    }());
    exports.ProcessValidationErrors = ProcessValidationErrors;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL
//# sourceMappingURL=process-validation-errors.js.map

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * This task refreshes the position of the validation error markers on the
     * screen.
     */
    var RefreshValidationErrors = /** @class */ (function () {
        function RefreshValidationErrors(controller) {
            this.controller = controller;
            this.errors = [];
            this.resumeAt = 0;
        }
        RefreshValidationErrors.prototype.reset = function () {
            this.errors = this.controller.copyErrorList();
            this.resumeAt = 0;
        };
        RefreshValidationErrors.prototype.cycle = function () {
            var ix = this.resumeAt;
            // The figure of 20 is arbitrary.
            var thisMax = Math.min(this.errors.length, this.resumeAt + 20);
            var errors = this.errors;
            while (ix < thisMax) {
                var error = errors[ix];
                // We work only on those that already have a marker.
                if (error.marker != null) {
                    this.controller.processError(error);
                }
                ix++;
            }
            this.resumeAt = ix;
            return ix < errors.length;
        };
        return RefreshValidationErrors;
    }());
    exports.RefreshValidationErrors = RefreshValidationErrors;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL
//# sourceMappingURL=refresh-validation-errors.js.map

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Wed-specific undo functionality.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(53)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, undo) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    undo = __importStar(undo);
    /**
     * This class extends the vanilla UndoGroup class by recording the
     * location of the caret when the group is created and when group
     * recording ends. This allows restoring the caret to sensible
     * positions before and after undoing or redoing.
     */
    var UndoGroup = /** @class */ (function (_super) {
        __extends(UndoGroup, _super);
        /**
         * @param desc The description of this group.
         *
         * @param editor The editor for which this undo group is created.
         */
        function UndoGroup(desc, editor) {
            var _this = _super.call(this, desc) || this;
            _this.editor = editor;
            _this.caretAsPathBefore = _this.getDataCaretAsPath();
            return _this;
        }
        UndoGroup.prototype.performUndo = function () {
            _super.prototype.performUndo.call(this);
            this.setDataCaretAsPath(this.caretAsPathBefore);
        };
        UndoGroup.prototype.performRedo = function () {
            _super.prototype.performRedo.call(this);
            if (this.caretAsPathAfter === undefined) {
                throw new Error("caretAsPathAfter is undefined, this indicates a corrupted state and thus an internal error");
            }
            this.setDataCaretAsPath(this.caretAsPathAfter);
        };
        /**
         * Get the current data caret position as a path.
         *
         * @returns A caret.
         */
        UndoGroup.prototype.getDataCaretAsPath = function () {
            var caret = this.editor.caretManager.getDataCaret(true);
            if (caret === undefined) {
                // Returning undefined for "the caret was undefined" would not
                // trap stupid mistakes in managing the data.
                return [undefined, undefined];
            }
            return [this.editor.dataUpdater.nodeToPath(caret.node), caret.offset];
        };
        /**
         * Set the data caret.
         *
         * @param caret A caret.
         */
        UndoGroup.prototype.setDataCaretAsPath = function (caret) {
            // [undefined, undefined] === the caret was undefined. We can't do anything.
            if (caret[0] === undefined && caret[1] === undefined) {
                return;
            }
            this.editor.caretManager.setCaret(this.editor.dataUpdater.pathToNode(caret[0]), caret[1]);
        };
        /**
         * This method can be used to record the caret position after the acts
         * recorded by this undo are performed. If the caret is recorded by means of
         * this method, then [[end]] will not record the caret position again. This
         * can be useful in cases for which it is not clear when an UndoGroup might
         * end. [[TextUndoGroup]] is a case in point. This method can be called any
         * number of times to update the caret position at the end of the group.
         */
        UndoGroup.prototype.recordCaretAfter = function () {
            this.caretAsPathAfter = this.getDataCaretAsPath();
        };
        UndoGroup.prototype.end = function () {
            if (this.caretAsPathAfter === undefined) {
                this.recordCaretAfter();
            }
        };
        return UndoGroup;
    }(undo.UndoGroup));
    exports.UndoGroup = UndoGroup;
    /**
     * Grouping of text operations should be limited in size. For instance, if the
     * user hits backspace to delete a whole sentence and then wants to undo this
     * operation. It is better to undo it in chunks instead of reinserting the whole
     * sentence. This class allows for limiting the length of such chunks.
     */
    var TextUndoGroup = /** @class */ (function (_super) {
        __extends(TextUndoGroup, _super);
        /**
         * @param desc The description of this group.
         *
         * @param editor The editor for which this undo group is created.
         *
         * @param undoList The list which will hold this group.
         *
         * @param limit The maximum number of undo operations that this group should
         * record.
         */
        function TextUndoGroup(desc, editor, undoList, limit) {
            var _this = _super.call(this, desc, editor) || this;
            _this.undoList = undoList;
            _this.limit = limit;
            return _this;
        }
        TextUndoGroup.prototype.record = function (undoToRecord) {
            if (this.list.length >= this.limit) {
                throw new Error("TextUndoGroup.record called beyond the limit");
            }
            _super.prototype.record.call(this, undoToRecord);
            if (this.list.length === this.limit) {
                this.undoList.endGroup();
            }
        };
        return TextUndoGroup;
    }(UndoGroup));
    exports.TextUndoGroup = TextUndoGroup;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  pathToNode nodeToPath Dubeau MPL Mangalam param UndoGroup
//  LocalWords:  TextUndoGroup caretAsPathAfter
//# sourceMappingURL=wundo.js.map

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Functions to create input triggers according to some common patterns.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(6), __webpack_require__(5), __webpack_require__(286), __webpack_require__(39)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, domtypeguards_1, domutil, input_trigger_1, transformation) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    domutil = __importStar(domutil);
    transformation = __importStar(transformation);
    /**
     * A transformation handler for a node splitting transformation.
     *
     * @param editor The editor which invoked the transformation.
     *
     * @param data The key that is splitting the element.
     *
     * @throws {Error} If the data passed is incorrect.
     */
    function splitNodeOn(editor, data) {
        var node = data.node;
        var sep = data.sep;
        if (typeof sep !== "string" || sep.length !== 1) {
            throw new Error("transformation invoked with incorrect data");
        }
        var modified = true;
        while (modified) {
            modified = false;
            var textNodes = [];
            var child = node.firstChild;
            while (child !== null) {
                if (domtypeguards_1.isText(child)) {
                    textNodes.push(child);
                }
                child = child.nextSibling;
            }
            for (var i = 0; !modified && i < textNodes.length; ++i) {
                var text = textNodes[i];
                var offset = text.data.indexOf(sep);
                if (node.firstChild === text && offset === 0) {
                    // We just drop the separator
                    editor.dataUpdater.deleteText(text, offset, 1);
                    modified = true;
                }
                else if (node.lastChild === text && offset !== -1 &&
                    offset === text.length - 1) {
                    // Just drop the separator
                    editor.dataUpdater.deleteText(text, text.length - 1, 1);
                    modified = true;
                }
                else if (offset !== -1) {
                    var _a = editor.dataUpdater.splitAt(node, text, offset), end = _a[1];
                    // Continue with the 2nd half of the split
                    if (end === null) {
                        throw new Error("null end; we should not be getting that");
                    }
                    node = end;
                    modified = true;
                }
            }
        }
        // Find the deepest location at the start of the last element.
        editor.caretManager.setCaret(domutil.firstDescendantOrSelf(node), 0);
    }
    /**
     * Makes an input trigger that splits and merges consecutive elements.
     *
     * @param editor The editor for which to create the input trigger.
     *
     * @param selector A CSS selector that determines which element we want to
     * split or merge. For instance, to operate on all paragraphs, this parameter
     * could be ``"p"``. This selector must be fit to be used in the GUI tree.
     *
     * @param splitKey The key which splits the element.
     *
     * @param mergeWithPreviousKey The key which merges the element with its
     * previous sibling.
     *
     * @param mergeWithNextKey The key which merges the element with its next
     * sibling.
     *
     * @returns The input trigger.
     */
    function makeSplitMergeInputTrigger(editor, mode, selector, splitKey, mergeWithPreviousKey, mergeWithNextKey) {
        var splitNodeOnTr = new transformation.Transformation(editor, "split", "Split node on character", splitNodeOn);
        var ret = new input_trigger_1.InputTrigger(editor, mode, selector);
        ret.addKeyHandler(splitKey, function (eventType, el, ev) {
            if (ev !== undefined) {
                ev.stopImmediatePropagation();
                ev.preventDefault();
            }
            if (eventType === "keypress" || eventType === "keydown") {
                editor.fireTransformation(editor.splitNodeTr, { node: el });
            }
            else {
                editor.fireTransformation(splitNodeOnTr, {
                    name: el.tagName,
                    node: el,
                    sep: String.fromCharCode(splitKey.which),
                });
            }
        });
        ret.addKeyHandler(mergeWithPreviousKey, function (_eventType, el, ev) {
            var caret = editor.caretManager.getDataCaret();
            if (caret == null) {
                return;
            }
            // Fire it only if it the caret is at the start of the element we are
            // listening on and can't go back.
            if ((caret.offset === 0) &&
                (caret.node === el ||
                    (domtypeguards_1.isText(caret.node) && caret.node === el.firstChild))) {
                if (ev !== undefined) {
                    ev.stopImmediatePropagation();
                    ev.preventDefault();
                }
                editor.fireTransformation(editor.mergeWithPreviousHomogeneousSiblingTr, { node: el, name: el.tagName });
            }
        });
        ret.addKeyHandler(mergeWithNextKey, function (_eventType, el, ev) {
            var caret = editor.caretManager.getDataCaret();
            if (caret == null) {
                return;
            }
            // Fire it only if it the caret is at the end of the element we are
            // listening on and can't actually delete text.
            if ((caret.node === el && caret.offset === el.childNodes.length) ||
                (domtypeguards_1.isText(caret.node) &&
                    caret.node === el.lastChild &&
                    caret.offset === el.lastChild.length)) {
                if (ev !== undefined) {
                    ev.stopImmediatePropagation();
                    ev.preventDefault();
                }
                editor.fireTransformation(editor.mergeWithNextHomogeneousSiblingTr, { node: el, name: el.tagName });
            }
        });
        return ret;
    }
    exports.makeSplitMergeInputTrigger = makeSplitMergeInputTrigger;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  InputTrigger keydown keypress domutil deleteText lastChild MPL
//  LocalWords:  Dubeau Mangalam
//# sourceMappingURL=input-trigger-factory.js.map

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(7), __webpack_require__(6), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, jquery_1, domtypeguards_1, domutil_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    jquery_1 = __importDefault(jquery_1);
    /**
     * An InputTrigger listens to keyboard events and to DOM changes that insert
     * text into an element. The object has to listen to both types of events
     * because:
     *
     * - Listening only to keyboard events would miss modifications to the DOM tree
     *   that happen programmatically.
     *
     * - Listening only to DOM changes would not trap keyboard events that do not
     *   **inherently** modify the DOM tree like a backspace key hit at the start of
     *   an element.
     *
     * The portion of InputTrigger objects that handle keyboard events attaches
     * itself to the editor to which the InputTrigger belongs in such a way that
     * allows for suppressing the generic handling of such events. See
     * [[addKeyHandler]] for more information.
     */
    var InputTrigger = /** @class */ (function () {
        /**
         * @param editor The editor to which this ``InputTrigger`` belongs.
         *
         * @param mode The mode for which this ``InputTrigger`` is being created.
         *
         * @param selector This is a CSS selector which must be fit to be used in the
         * GUI tree. (For instance by being the output of
         * [["wed/domutil".toGUISelector]].)
         */
        function InputTrigger(editor, mode, selector) {
            // This is a map of keys that are actually text keys to their handlers. This
            // map is in effect a submap of _key_to_handler. We want this for speed,
            // because otherwise each text change event would require that the
            // InputTrigger filter out all those keys that we don't care about. The keys
            // that are "text input" keys are those that actually modify DOM text. So
            // things like cursor movement keys or ENTER, BACKSPACE, or control keys do
            // not appear *in* text and so are excluded from this map.
            this.editor = editor;
            this.mode = mode;
            this.selector = selector;
            // This is a map of all keys to their handlers.
            this.keyToHandler = new Map();
            this.textInputKeyToHandler = new Map();
            editor.$guiRoot.on("wed-post-paste", this.pasteHandler.bind(this));
            // Implementation note: getting keydown events to get fired on random HTML
            // elements is finicky. For one thing, the element needs to be focusable,
            // which is false for most elements unless tabindex is set. Even with
            // tabindex set, browsers don't seem to consistently emit the events on the
            // elements we want. An initial implementation attempted to set the keydown
            // handler with $root.on("keydown", this._selector, ...) but this was not
            // reliable. So we listen to all keydown events on $root and in the handler
            // we filter out what we don't care about. More expensive but works
            // reliably.
            editor.$guiRoot.on("wed-input-trigger-keydown", this.keydownHandler.bind(this));
            editor.$guiRoot.on("wed-input-trigger-keypress", this.keypressHandler.bind(this));
        }
        /**
         * Adds a key handler to the object.
         *
         * The handler is called once per event. This means for instance that if a
         * paste event introduces the text "a;b;c" and we are listening for ";", the
         * handler will be called once, even though two ";" are added. It is up to the
         * handler to detect that ";" has been added more than once.
         *
         * Handlers that wish to stop further processing or prevent the browser's
         * default processing of an event must call the appropriate method on the
         * ``event`` object.
         *
         * Although it is possible to add multiple handlers for the same key to the
         * same ``InputTrigger`` object, the ``InputTrigger`` class does not define
         * how one handler could prevent another handler from executing. Calling the
         * methods on the ``event`` object does not in any way affect how an
         * ``InputTrigger`` calls its handlers. However, as stated above, these
         * methods can prevent further propagation of the JavaScript
         * event. Consequently, if more than one handler should handle the same key on
         * the same ``InputTrigger`` object, these handlers should either deal with
         * orthogonal concerns (e.g. one modifies the data DOM tree and the other does
         * logging), or provide their own mechanism to determine whether one can
         * prevent the other from executing.
         *
         * @param key The key we are interested in.
         *
         * @param handler The handler that will process events related to that key.
         */
        InputTrigger.prototype.addKeyHandler = function (key, handler) {
            var handlers = this.keyToHandler.get(key);
            if (handlers === undefined) {
                handlers = [];
                this.keyToHandler.set(key, handlers);
            }
            handlers.push(handler);
            // We could get here due to keys that are actually not text (e.g. ENTER,
            // BACKSPACE).
            if (key.anyModifier() || !key.keypress) {
                return;
            }
            // We share the handlers array between the two maps.
            if (!this.textInputKeyToHandler.has(key)) {
                this.textInputKeyToHandler.set(key, handlers);
            }
        };
        InputTrigger.prototype.getNodeOfInterest = function () {
            var caret = this.editor.caretManager.getDataCaret(true);
            if (caret == null) {
                return null;
            }
            if (this.editor.modeTree.getMode(caret.node) !== this.mode) {
                // Outside our jurisdiction.
                return null;
            }
            // We transit through the GUI tree to perform our match because CSS
            // selectors cannot operate on XML namespace prefixes (or, at the time of
            // writing, on XML namespaces, period).
            var dataNode = domtypeguards_1.isText(caret.node) ? caret.node.parentNode : caret.node;
            var guiNode = jquery_1.default.data(dataNode, "wed_mirror_node");
            return domutil_1.closest(guiNode, this.selector.value, this.editor.guiRoot);
        };
        /**
         * Handles ``keydown`` events.
         *
         * @param _wedEvent The DOM event wed generated to trigger this handler.
         *
         * @param e The original DOM event that wed received.
         */
        InputTrigger.prototype.keydownHandler = function (_wedEvent, e) {
            var nodeOfInterest = this.getNodeOfInterest();
            if (nodeOfInterest === null) {
                return;
            }
            var dataNode = jquery_1.default.data(nodeOfInterest, "wed_mirror_node");
            this.keyToHandler.forEach(function (handlers, key) {
                if (key.matchesEvent(e)) {
                    for (var _i = 0, handlers_1 = handlers; _i < handlers_1.length; _i++) {
                        var handler = handlers_1[_i];
                        handler("keydown", dataNode, e);
                    }
                }
            });
        };
        /**
         * Handles ``keypress`` events.
         *
         * @param _wedEvent The DOM event wed generated to trigger this handler.
         *
         * @param e The original DOM event that wed received.
         */
        InputTrigger.prototype.keypressHandler = function (_wedEvent, e) {
            var nodeOfInterest = this.getNodeOfInterest();
            if (nodeOfInterest === null) {
                return;
            }
            var dataNode = jquery_1.default.data(nodeOfInterest, "wed_mirror_node");
            this.keyToHandler.forEach(function (handlers, key) {
                if (key.matchesEvent(e)) {
                    for (var _i = 0, handlers_2 = handlers; _i < handlers_2.length; _i++) {
                        var handler = handlers_2[_i];
                        handler("keypress", dataNode, e);
                    }
                }
            });
        };
        /**
         * Handles ``paste`` events.
         *
         * @param _wedEvent The DOM event wed generated to trigger this handler.
         *
         * @param e The original DOM event that wed received.
         *
         * @param caret The data caret.
         *
         * @param data The data that the user wants to insert.
         */
        InputTrigger.prototype.pasteHandler = function (_wedEvent, e, caret, data) {
            if (this.editor.undoingOrRedoing()) {
                return;
            }
            var text = [];
            var child = data.firstChild;
            while (child !== null) {
                if (domtypeguards_1.isText(child)) {
                    text.push(child);
                }
                child = child.nextSibling;
            }
            if (text.length === 0) {
                return;
            }
            if (this.editor.modeTree.getMode(caret.node) !== this.mode) {
                // Outside our jurisdiction.
                return;
            }
            // We transit through the GUI tree to perform our match because CSS
            // selectors cannot operate on XML namespace prefixes (or, at the time of
            // writing, on XML namespaces, period).
            var nodeOfInterest = (domtypeguards_1.isText(caret.node) ?
                caret.node.parentNode : caret.node);
            var guiNode = jquery_1.default.data(nodeOfInterest, "wed_mirror_node");
            if (domutil_1.closest(guiNode, this.selector.value, this.editor.guiRoot) === null) {
                return;
            }
            this.textInputKeyToHandler.forEach(function (handlers, key) {
                // We care only about text input
                if (key.anyModifier()) {
                    return;
                }
                var ch = String.fromCharCode(key.which);
                for (var _i = 0, text_1 = text; _i < text_1.length; _i++) {
                    var node = text_1[_i];
                    // Skip those that are not in the tree anymore.
                    if (node.parentNode !== null && node.data.indexOf(ch) > -1) {
                        for (var _a = 0, handlers_3 = handlers; _a < handlers_3.length; _a++) {
                            var handler = handlers_3[_a];
                            handler("paste", nodeOfInterest, e);
                        }
                    }
                }
            });
        };
        return InputTrigger;
    }());
    exports.InputTrigger = InputTrigger;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  InputTrigger keydown tabindex keypress submap jQuery focusable
//  LocalWords:  Dubeau MPL Mangalam gui html DOM
//# sourceMappingURL=input-trigger.js.map

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Label manager.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Maintains a mapping from HTML element id to labels meaningful to humans. Also
     * keeps a counter that can be used for assigning new ids to elements that don't
     * already have one.
     *
     */
    var LabelManager = /** @class */ (function () {
        /**
         * @param name The name of this label manager. This is a convenience that can
         * be used to produce distinctive error messages, for instance.
         */
        function LabelManager(name) {
            this.name = name;
            /** A mapping of element id to allocated label. */
            this._idToLabel = Object.create(null);
            /**
             * A counter that must be incremented with each new label allocation. This
             * allows the allocation algorithm to know what the next label should be.
             */
            this.labelIndex = 0;
        }
        /**
         * Gets the label associated with an id.
         *
         * @param id The id.
         *
         * @returns The label. The value returned by this method obeys the same rules
         * as that of [[allocateLabel]] with the exception that if a call returned
         * ``undefined`` it may return another value on a subsequent call. (That is,
         * an ``id`` that did not have a label allocated to it may acquire such
         * label.)
         */
        LabelManager.prototype.idToLabel = function (id) {
            return this._idToLabel[id];
        };
        /**
         * Deallocate all mappings between ids and labels. This will reset
         * [[_idToLabel]] to an empty map and [[labelIndex]] to 0.
         */
        LabelManager.prototype.deallocateAll = function () {
            this._idToLabel = Object.create(null);
            this.labelIndex = 0;
            this._deallocateAllLabels();
        };
        /**
         * Gets the next number in the number sequence. This increments
         * [[labelIndex]].
         *
         * @returns The number.
         */
        LabelManager.prototype.nextNumber = function () {
            return ++this.labelIndex;
        };
        return LabelManager;
    }());
    exports.LabelManager = LabelManager;
    var alphabet = "abcdefghijklmnopqrstuvwxyz";
    /**
     * A label manager that associates alphabetical labels to each id given to
     * it. It will associate labels "a", "b", "c", ... up to "z" and then will
     * associate "aa", "bb", "cc", ... up to "zz", and continues repeating
     * characters each time it cycles over the alphabet.
     *
     * @param {string} name The name of this label manager.
     */
    var AlphabeticLabelManager = /** @class */ (function (_super) {
        __extends(AlphabeticLabelManager, _super);
        function AlphabeticLabelManager() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AlphabeticLabelManager.prototype.allocateLabel = function (id) {
            var label = this._idToLabel[id];
            if (label === undefined) {
                // nextNumber() will start with 1, so we have to subtract.
                var ix = this.nextNumber() - 1;
                var round = Math.floor(ix / 26) + 1;
                var charIx = ix % 26;
                label = alphabet[charIx].repeat(round);
                this._idToLabel[id] = label;
            }
            return label;
        };
        // tslint:disable-next-line:no-empty
        AlphabeticLabelManager.prototype._deallocateAllLabels = function () { };
        return AlphabeticLabelManager;
    }(LabelManager));
    exports.AlphabeticLabelManager = AlphabeticLabelManager;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  LabelManager MPL allocateLabel Mangalam Dubeau
//# sourceMappingURL=labelman.js.map

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Basic decoration facilities.
 * @author Louis-Dominique Dubeau
 * @license MPL 2.0
 * @copyright Mangalam Research Center for Buddhist Languages
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(7), __webpack_require__(13), __webpack_require__(6), __webpack_require__(5), __webpack_require__(117), __webpack_require__(17)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, jquery_1, dloc_1, domtypeguards_1, domutil, action_context_menu_1, util) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    jquery_1 = __importDefault(jquery_1);
    domutil = __importStar(domutil);
    util = __importStar(util);
    var indexOf = domutil.indexOf;
    var closestByClass = domutil.closestByClass;
    function tryToSetDataCaret(editor, dataCaret) {
        try {
            editor.caretManager.setCaret(dataCaret, { textEdit: true });
        }
        catch (e) {
            // Do nothing.
        }
    }
    function attributeSelectorMatch(selector, name) {
        return selector === "*" || selector === name;
    }
    /**
     * A decorator is responsible for adding decorations to a tree of DOM
     * elements. Decorations are GUI elements.
     */
    var Decorator = /** @class */ (function () {
        /**
         * @param domlistener The listener that the decorator must use to know when
         * the DOM tree has changed and must be redecorated.
         *
         * @param editor The editor instance for which this decorator was created.
         *
         * @param guiUpdater The updater to use to modify the GUI tree. All
         * modifications to the GUI must go through this updater.
         */
        function Decorator(mode, editor) {
            this.mode = mode;
            this.editor = editor;
            this.domlistener = editor.domlistener;
            this.guiUpdater = editor.guiUpdater;
            this.namespaces = mode.getAbsoluteNamespaceMappings();
        }
        /**
         * Start listening to changes to the DOM tree.
         */
        Decorator.prototype.startListening = function () {
            this.domlistener.startListening();
        };
        Decorator.prototype.listDecorator = function (el, sep) {
            if (this.editor.modeTree.getMode(el) !== this.mode) {
                // The element is not governed by this mode.
                return;
            }
            // We expect to work with a homogeneous list. That is, all children the same
            // element.
            var nameMap = Object.create(null);
            var child = el.firstElementChild;
            while (child !== null) {
                if (child.classList.contains("_real")) {
                    nameMap[util.getOriginalName(child)] = 1;
                }
                child = child.nextElementSibling;
            }
            var tags = Object.keys(nameMap);
            if (tags.length > 1) {
                throw new Error("calling listDecorator on a non-homogeneous list.");
            }
            if (tags.length === 0) {
                return;
            } // Nothing to work with
            // First drop all children that are separators
            child = el.firstElementChild;
            while (child !== null) {
                // Grab it before the node is removed.
                var next = child.nextElementSibling;
                if (child.hasAttribute("data-wed--separator-for")) {
                    this.guiUpdater.removeNode(child);
                }
                child = next;
            }
            var tagName = tags[0];
            // If sep is a string, create an appropriate div.
            var sepNode;
            if (typeof sep === "string") {
                sepNode = el.ownerDocument.createElement("div");
                sepNode.textContent = sep;
            }
            else {
                sepNode = sep;
            }
            sepNode.classList.add("_text");
            sepNode.classList.add("_phantom");
            sepNode.setAttribute("data-wed--separator-for", tagName);
            var first = true;
            child = el.firstElementChild;
            while (child !== null) {
                if (child.classList.contains("_real")) {
                    if (!first) {
                        this.guiUpdater.insertBefore(el, sepNode.cloneNode(true), child);
                    }
                    else {
                        first = false;
                    }
                }
                child = child.nextElementSibling;
            }
        };
        Decorator.prototype.elementDecorator = function (_root, el, level, preContextHandler, postContextHandler) {
            if (this.editor.modeTree.getMode(el) !== this.mode) {
                // The element is not governed by this mode.
                return;
            }
            if (level > this.editor.maxLabelLevel) {
                throw new Error("level higher than the maximum set by the mode: " + level);
            }
            // Save the caret because the decoration may mess up the GUI caret.
            var dataCaret = this.editor.caretManager.getDataCaret();
            if (dataCaret != null &&
                !(domtypeguards_1.isAttr(dataCaret.node) &&
                    dataCaret.node.ownerElement === jquery_1.default.data(el, "wed_mirror_node"))) {
                dataCaret = undefined;
            }
            var dataNode = jquery_1.default.data(el, "wed_mirror_node");
            this.setReadOnly(el, Boolean(this.editor.validator.getNodeProperty(dataNode, "PossibleDueToWildcard")));
            var origName = util.getOriginalName(el);
            // _[name]_label is used locally to make the function idempotent.
            var cls = "_" + origName + "_label";
            // We must grab a list of nodes to remove before we start removing them
            // because an element that has a placeholder in it is going to lose the
            // placeholder while we are modifying it. This could throw off the scan.
            var toRemove = domutil.childrenByClass(el, cls);
            for (var _i = 0, toRemove_1 = toRemove; _i < toRemove_1.length; _i++) {
                var remove = toRemove_1[_i];
                el.removeChild(remove);
            }
            var attributesHTML = "";
            var hiddenAttributes = false;
            var attributeHandling = this.editor.modeTree.getAttributeHandling(el);
            if (attributeHandling === "show" || attributeHandling === "edit") {
                // include the attributes
                var attributes = util.getOriginalAttributes(el);
                var names = Object.keys(attributes).sort();
                for (var _a = 0, names_1 = names; _a < names_1.length; _a++) {
                    var name_1 = names_1[_a];
                    var hideAttribute = this.mustHideAttribute(el, name_1);
                    if (hideAttribute) {
                        hiddenAttributes = true;
                    }
                    var extra = hideAttribute ? " _shown_when_caret_in_label" : "";
                    attributesHTML += " <span class=\"_phantom _attribute" + extra + "\"><span class=\"_phantom _attribute_name\">" + name_1 + "</span>=\"<span class=\"_phantom _attribute_value\">" + domutil.textToHTML(attributes[name_1]) + "</span>\"</span>";
                }
            }
            var doc = el.ownerDocument;
            cls += " _label_level_" + level;
            // Save the cls of the end label here so that we don't further modify it.
            var endCls = cls;
            if (hiddenAttributes) {
                cls += " _autohidden_attributes";
            }
            var pre = doc.createElement("span");
            pre.className = "_gui _phantom __start_label _start_wrapper " + cls + " _label";
            var prePh = doc.createElement("span");
            prePh.className = "_phantom";
            // tslint:disable-next-line:no-inner-html
            prePh.innerHTML = "&nbsp;<span class='_phantom _element_name'>" + origName + "</span>" + attributesHTML + "<span class='_phantom _greater_than'> >&nbsp;</span>";
            pre.appendChild(prePh);
            this.guiUpdater.insertNodeAt(el, 0, pre);
            var post = doc.createElement("span");
            post.className = "_gui _phantom __end_label _end_wrapper " + endCls + " _label";
            var postPh = doc.createElement("span");
            postPh.className = "_phantom";
            // tslint:disable-next-line:no-inner-html
            postPh.innerHTML = "<span class='_phantom _less_than'>&nbsp;&lt; </span><span class='_phantom _element_name'>" + origName + "</span>&nbsp;";
            post.appendChild(postPh);
            this.guiUpdater.insertBefore(el, post, null);
            // Setup a handler so that clicking one label highlights it and the other
            // label.
            jquery_1.default(pre).on("wed-context-menu", preContextHandler !== undefined ? preContextHandler : false);
            jquery_1.default(post).on("wed-context-menu", postContextHandler !== undefined ? postContextHandler : false);
            if (dataCaret != null) {
                tryToSetDataCaret(this.editor, dataCaret);
            }
        };
        /**
         * Determine whether an attribute must be hidden. The default implementation
         * calls upon the ``attributes.autohide`` section of the "wed options" that
         * were used by the mode in effect to determine whether an attribute should be
         * hidden or not.
         *
         * @param el The element in the GUI tree that we want to test.
         *
         * @param name The attribute name in "prefix:localName" format where "prefix"
         * is to be understood according to the absolute mapping defined by the mode.
         *
         * @returns ``true`` if the attribute must be hidden. ``false`` otherwise.
         */
        Decorator.prototype.mustHideAttribute = function (el, name) {
            var specs = this.editor.modeTree.getAttributeHidingSpecs(el);
            if (specs === null) {
                return false;
            }
            for (var _i = 0, _a = specs.elements; _i < _a.length; _i++) {
                var element = _a[_i];
                if (el.matches(element.selector)) {
                    var matches = false;
                    for (var _b = 0, _c = element.attributes; _b < _c.length; _b++) {
                        var attribute = _c[_b];
                        if (typeof attribute === "string") {
                            // If we already matched, there's no need to try to match with
                            // another selector.
                            if (!matches) {
                                matches = attributeSelectorMatch(attribute, name);
                            }
                        }
                        else {
                            // If we do not match yet, there's no need to try to exclude the
                            // attribute.
                            if (matches) {
                                for (var _d = 0, _e = attribute.except; _d < _e.length; _d++) {
                                    var exception = _e[_d];
                                    matches = !attributeSelectorMatch(exception, name);
                                    // As soon as we stop matching, there's no need to continue
                                    // checking other exceptions.
                                    if (!matches) {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    // An element selector that matches is terminal.
                    return matches;
                }
            }
            return false;
        };
        /**
         * Add or remove the CSS class ``_readonly`` on the basis of the 2nd argument.
         *
         * @param el The element to modify. Must be in the GUI tree.
         *
         * @param readonly Whether the element is readonly or not.
         */
        Decorator.prototype.setReadOnly = function (el, readonly) {
            var cl = el.classList;
            (readonly ? cl.add : cl.remove).call(cl, "_readonly");
        };
        /**
         * Context menu handler for the labels of elements decorated by
         * [[Decorator.elementDecorator]].
         *
         * @param atStart Whether or not this event is for the start label.
         *
         * @param wedEv The DOM event that wed generated to trigger this handler.
         *
         * @param ev The DOM event that wed received.
         *
         * @returns To be interpreted the same way as for all DOM event handlers.
         */
        // tslint:disable-next-line:max-func-body-length
        Decorator.prototype.contextMenuHandler = function (atStart, wedEv, ev) {
            var editor = this.editor;
            var editingMenuManager = editor.editingMenuManager;
            var node = wedEv.target;
            var menuItems = [];
            var mode = editor.modeTree.getMode(node);
            function pushItem(data, tr, start) {
                var li = editingMenuManager.makeMenuItemForAction(tr, data, start);
                menuItems.push({ action: tr, item: li, data: data });
            }
            function pushItems(data, trs, start) {
                if (trs === undefined) {
                    return;
                }
                for (var _i = 0, trs_1 = trs; _i < trs_1.length; _i++) {
                    var tr = trs_1[_i];
                    pushItem(data, tr, start);
                }
            }
            function processAttributeNameEvent(event, element) {
                var namePattern = event.params[1];
                // The next if line causes tslint to inexplicably raise a failure. I am
                // able to reproduce it with something as small as:
                //
                // import { Name } from "salve";
                //
                // export function func(p: Name): void {
                //   if (p.simple()) {
                //     document.body.textContent = "1";
                //   }
                // }
                //
                // tslint:disable-next-line:strict-boolean-expressions
                if (namePattern.simple()) {
                    for (var _i = 0, _a = namePattern.toArray(); _i < _a.length; _i++) {
                        var name_2 = _a[_i];
                        var unresolved = mode.getAbsoluteResolver().unresolveName(name_2.ns, name_2.name);
                        if (unresolved === undefined) {
                            throw new Error("cannot unresolve attribute");
                        }
                        if (editor.isAttrProtected(unresolved, element)) {
                            return;
                        }
                        pushItems({ name: unresolved, node: element }, mode.getContextualActions("add-attribute", unresolved, element));
                    }
                }
                else {
                    pushItem(null, editor.complexPatternAction);
                }
            }
            var real = closestByClass(node, "_real", editor.guiRoot);
            var readonly = real !== null && real.classList.contains("_readonly");
            var attrVal = closestByClass(node, "_attribute_value", editor.guiRoot);
            if (attrVal !== null) {
                var dataNode = editor.toDataNode(attrVal);
                var treeCaret = dloc_1.DLoc.mustMakeDLoc(editor.dataRoot, dataNode.ownerElement);
                var toAddTo_1 = treeCaret.node.childNodes[treeCaret.offset];
                editor.validator.possibleAt(treeCaret, true).forEach(function (event) {
                    if (event.params[0] !== "attributeName") {
                        return;
                    }
                    processAttributeNameEvent(event, toAddTo_1);
                });
                var name_3 = dataNode.name;
                if (!editor.isAttrProtected(dataNode)) {
                    pushItems({ name: name_3, node: dataNode }, mode.getContextualActions("delete-attribute", name_3, dataNode));
                }
            }
            else {
                // We want the first real parent.
                var candidate = closestByClass(node, "_real", editor.guiRoot);
                if (candidate === null) {
                    throw new Error("cannot find real parent");
                }
                node = candidate;
                var topNode = (node.parentNode === editor.guiRoot);
                menuItems.push.apply(menuItems, editingMenuManager.makeCommonItems(editor.toDataNode(node)));
                // We first gather the transformations that pertain to the node to which
                // the label belongs.
                var orig = util.getOriginalName(node);
                if (!topNode) {
                    pushItems({ node: node, name: orig }, mode.getContextualActions(["unwrap", "delete-element"], orig, jquery_1.default.data(node, "wed_mirror_node"), 0));
                }
                // Then we check what could be done before the node (if the
                // user clicked on an start element label) or after the node
                // (if the user clicked on an end element label).
                var parent_1 = node.parentNode;
                var index = indexOf(parent_1.childNodes, node);
                // If we're on the end label, we want the events *after* the node.
                if (!atStart) {
                    index++;
                }
                var treeCaret = editor.caretManager.toDataLocation(parent_1, index);
                if (treeCaret === undefined) {
                    throw new Error("cannot get caret");
                }
                if (atStart) {
                    var toAddTo_2 = treeCaret.node.childNodes[treeCaret.offset];
                    var attributeHandling = editor.modeTree.getAttributeHandling(toAddTo_2);
                    if (attributeHandling === "edit") {
                        editor.validator.possibleAt(treeCaret, true).forEach(function (event) {
                            if (event.params[0] !== "attributeName") {
                                return;
                            }
                            processAttributeNameEvent(event, toAddTo_2);
                        });
                    }
                }
                if (!topNode) {
                    for (var _i = 0, _a = editor.getElementTransformationsAt(treeCaret, "insert"); _i < _a.length; _i++) {
                        var tr = _a[_i];
                        if (tr.name !== undefined) {
                            // Regular case: we have a real transformation.
                            pushItem({ name: tr.name, moveCaretTo: treeCaret }, tr.tr, atStart);
                        }
                        else {
                            // It is an action rather than a transformation.
                            pushItem(null, tr.tr);
                        }
                    }
                    if (atStart) {
                        // Move to inside the element and get the get the wrap-content
                        // possibilities.
                        var caretInside = treeCaret.make(treeCaret.node.childNodes[treeCaret.offset], 0);
                        for (var _b = 0, _c = editor.getElementTransformationsAt(caretInside, "wrap-content"); _b < _c.length; _b++) {
                            var tr = _c[_b];
                            pushItem(tr.name !== undefined ? { name: tr.name, node: node }
                                : null, tr.tr);
                        }
                    }
                }
            }
            // There's no menu to display, so let the event bubble up.
            if (menuItems.length === 0) {
                return true;
            }
            editingMenuManager.setupContextMenu(action_context_menu_1.ActionContextMenu, menuItems, readonly, ev);
            return false;
        };
        return Decorator;
    }());
    exports.Decorator = Decorator;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  attributeName unresolve func tslint readonly localName endCls
//  LocalWords:  PossibleDueToWildcard Dubeau MPL Mangalam attributesHTML util
//  LocalWords:  jquery validator domutil domlistener gui autohidden jQuery cls
//  LocalWords:  listDecorator origName li nbsp lt el sep
//# sourceMappingURL=decorator.js.map

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, domutil_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * A "GUI selector" is a CSS selector apt to be used in the GUI tree.
     */
    var GUISelector = /** @class */ (function () {
        /**
         * @param value The value that the selector holds.
         */
        function GUISelector(value) {
            this.value = value;
            var existing = GUISelector.__cache[value];
            if (existing !== undefined) {
                return existing;
            }
            GUISelector.__cache[value] = this;
        }
        /**
         * Make a GUI selector from a CSS selector, as-is.
         *
         * @param selector The value that the selector will hold.
         */
        GUISelector.makeVerbatim = function (selector) {
            return new GUISelector(selector);
        };
        /**
         * Make a GUI selector from a data selector. The limitations on the selector
         * are the same as for [["wed/domutil".toGUISelector]].
         *
         * @param selector A selector fit for selecting in the data tree.
         *
         * @param namespaces The namespace mappings to use to convert prefixes in the
         * selector.
         *
         * @returns A [[GUISelector]] corresponding to the parameters used.
         */
        GUISelector.fromDataSelector = function (selector, namespaces) {
            return new GUISelector(domutil_1.toGUISelector(selector, namespaces));
        };
        // tslint:disable-next-line:variable-name
        GUISelector.__cache = Object.create(null);
        return GUISelector;
    }());
    exports.GUISelector = GUISelector;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  MPL
//# sourceMappingURL=gui-selector.js.map

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(76)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, wed_1) {
    /**
     * The base types for modes.
     *
     * @author Louis-Dominique Dubeau
     * @license MPL 2.0
     * @copyright Mangalam Research Center for Buddhist Languages
     */
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * A mode for wed should be implemented as a module which exports a
     * class derived from this class.
     */
    var BaseMode = /** @class */ (function () {
        /**
         * @param editor The editor for which this mode is created.
         *
         * @param options The options for the mode. Each mode defines
         * what fields this object contains.
         */
        function BaseMode(editor, options) {
            this.editor = editor;
            this.options = options;
            this.wedOptions = {
                metadata: {
                    name: "Base Mode (you should not be using this)",
                    description: "The base mode. You should not be using it directly.",
                    authors: ["Louis-Dominique Dubeau"],
                    license: "MPL 2.0",
                    copyright: "Mangalam Research Center for Buddhist Languages",
                },
                label_levels: {
                    max: 1,
                    initial: 1,
                },
            };
        }
        /**
         * Gets the mode options. The returned object should be considered frozen. You
         * may inspect it, not modify it.
         */
        BaseMode.prototype.getModeOptions = function () {
            return this.options;
        };
        /**
         * Gets the options that the mode wants wed to use with this mode.
         *
         * @returns The options. Callers are not allowed to modify the value returned.
         */
        BaseMode.prototype.getWedOptions = function () {
            return this.wedOptions;
        };
        /**
         * @returns The base implementation returns an empty array.
         */
        BaseMode.prototype.getStylesheets = function () {
            return [];
        };
        BaseMode.prototype.nodesAroundEditableContents = function (element) {
            var start = null;
            var startIx;
            var end = null;
            var endIx;
            var child = element.firstChild;
            var childIx = 0;
            while (child !== null) {
                if (wed_1.domtypeguards.isElement(child)) {
                    if (child.classList.contains("_start_wrapper")) {
                        startIx = childIx;
                        start = child;
                    }
                    if (child.classList.contains("_end_wrapper")) {
                        endIx = childIx;
                        end = child;
                        // We want the first end_wrapper we hit. There is no need to continue.
                        break;
                    }
                }
                child = child.nextSibling;
                childIx++;
            }
            if (startIx !== undefined && endIx !== undefined && endIx <= startIx) {
                throw new Error("end wrapper element unexpectedly appears before " +
                    "start wrapper element, or is also a start wrapper " +
                    "element");
            }
            return [start, end];
        };
        BaseMode.prototype.makePlaceholderFor = function (_element) {
            return wed_1.domutil.makePlaceholder();
        };
        /**
         * While this API provides for the case where descriptions have not been
         * loaded yet or cannot be loaded, this class does not allow such eventuality
         * to occur. Derived classes could allow it.
         *
         * @returns This default implementation always returns ``undefined``.
         */
        BaseMode.prototype.shortDescriptionFor = function (_name) {
            return undefined;
        };
        /**
         * While this API provides for the case such URL have not been loaded
         * yet or cannot be loaded, this class does not allow such eventuality
         * to occur. Derived classes could allow it.
         *
         * @returns The default implementation always returns ``undefined``.
         */
        BaseMode.prototype.documentationLinkFor = function (_name) {
            return undefined;
        };
        /**
         * @returns ``undefined``. The default implementation has no mode-specific
         * checks and thus not return a validator.
         */
        BaseMode.prototype.getValidator = function () {
            return undefined;
        };
        /**
         * The default implementation returns an empty array.
         */
        BaseMode.prototype.getAttributeCompletions = function (_attribute) {
            return [];
        };
        /**
         * The default implementaiton returns an empty array.
         */
        BaseMode.prototype.getToolbarButtons = function () {
            return [];
        };
        return BaseMode;
    }());
    exports.BaseMode = BaseMode;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//  LocalWords:  autoinsertion domutil Dubeau Mangalam MPL html overriden
//  LocalWords:  stylesheets
//# sourceMappingURL=mode.js.map

/***/ })
/******/ ])});;
//# sourceMappingURL=wed.map.js