{"version":3,"file":"metadata-reader-v2.js","sourceRoot":"","sources":["../../../../../../lib/wed/modes/generic/metadata-reader-v2.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Reading facilities for version 2 of the metadata format.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { EName } from \"salve\";\nimport { util } from \"wed\";\n\nimport { compile, Context, DocPattern } from \"./doc-pattern\";\nimport { Dochtml, Inline, Metadata } from \"./metadata-as-json\";\nimport { MetadataBase, MetadataReaderBase } from \"./metadata-versioned-reader\";\n\n/**\n * Execution context for the [[DocPattern]] objects we evaluate with\n * [[MetadataV2]].\n */\nclass MetadataContext implements Context {\n  /**\n   * @param name The value to return when we interpolate the symbol \"name\".\n   */\n  constructor(private readonly name: string) {}\n\n  resolveName(name: string): string {\n    if (name === \"name\") {\n      return this.name;\n    }\n\n    throw new Error(`cannot resolve: ${name}`);\n  }\n}\n\n// tslint:disable-next-line:completed-docs\nclass MetadataV2 extends MetadataBase {\n  private readonly inline: Inline | undefined;\n  private readonly dochtml: Dochtml | undefined;\n  private readonly docPattern: DocPattern | undefined;\n  constructor(metadata: Metadata) {\n    super(\"2\", metadata);\n\n    if (metadata.namespaces === undefined) {\n      throw new Error(\"namespaces are not optional in version 2\");\n    }\n\n    // The parent class already does this check but we need it to get TS to know\n    // what specific type metadata.inline is.\n    if (metadata.version !== \"2\") {\n      throw new Error(\"need version 2\");\n    }\n\n    this.inline = metadata.inline;\n    if (this.inline !== undefined && this.inline.method !== \"name\") {\n      throw new Error(\"only the 'name' method is supported for inlines\");\n    }\n\n    this.dochtml = metadata.dochtml;\n    if (this.dochtml !== undefined) {\n      if (this.dochtml.method !== \"simple-pattern\") {\n        throw new Error(\n          \"only the 'simple-pattern' method is supported for dochtml\");\n      }\n      this.docPattern = compile(this.dochtml.pattern);\n    }\n  }\n\n  isInline(node: Element): boolean {\n    if (this.inline === undefined) {\n      return false;\n    }\n\n    // We need to normalize the name to fit the names we have below.\n    const originalName = util.getOriginalName(node);\n    const parts = originalName.split(\":\");\n    if (parts.length === 1) {\n      parts[1] = parts[0];\n      parts[0] = \"tei\";\n    }\n\n    const name = parts.join(\":\");\n    const result = this.inline.rules[name];\n    if (result === undefined) {\n      return false;\n    }\n\n    return result;\n  }\n\n  documentationLinkFor(name: EName): string | undefined {\n    const docPattern = this.docPattern;\n    if (docPattern === undefined) {\n      return undefined;\n    }\n\n    const unresolved = this.unresolveName(name);\n    if (unresolved === undefined) {\n      return undefined;\n    }\n\n    return docPattern.execute(new MetadataContext(unresolved));\n  }\n}\n\n/**\n * A reader that reads version 2 of the metadata format.\n */\nexport class MetadataReaderV2 extends MetadataReaderBase {\n  public static readonly version: string = \"2\";\n\n  constructor() {\n    super(MetadataV2);\n  }\n}\n\n//  LocalWords:  MPL inlines tei\n"]}